
utsutsu_LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bbc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003d44  08003d44  00013d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003df0  08003df0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003df0  08003df0  00013df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003df8  08003df8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003df8  08003df8  00013df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dfc  08003dfc  00013dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000068  08003e68  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08003e68  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000016d7  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006c8  00000000  00000000  0002176f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  00021e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a0  00000000  00000000  00022800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00003707  00000000  00000000  000230a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000013d8  00000000  00000000  000267a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00027b7f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002dbc  00000000  00000000  00027bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d2c 	.word	0x08003d2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08003d2c 	.word	0x08003d2c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <setLED1State>:
 */

#include"Hardware/interface_LED.h"
#include"main.h"

void setLED1State(uint8_t state)	{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
	if (state == 0) LED1_GPIO_Port->BSRR = LED1_Pin;
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d104      	bne.n	80004da <setLED1State+0x1a>
 80004d0:	4b07      	ldr	r3, [pc, #28]	; (80004f0 <setLED1State+0x30>)
 80004d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004d6:	619a      	str	r2, [r3, #24]
	else			LED1_GPIO_Port->BSRR = (LED1_Pin << 16);
}
 80004d8:	e003      	b.n	80004e2 <setLED1State+0x22>
	else			LED1_GPIO_Port->BSRR = (LED1_Pin << 16);
 80004da:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <setLED1State+0x30>)
 80004dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004e0:	619a      	str	r2, [r3, #24]
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40020400 	.word	0x40020400

080004f4 <setLED2State>:
void setLED2State(uint8_t state)	{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
	if (state == 0) LED2_GPIO_Port->BSRR = LED2_Pin;
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d104      	bne.n	800050e <setLED2State+0x1a>
 8000504:	4b07      	ldr	r3, [pc, #28]	; (8000524 <setLED2State+0x30>)
 8000506:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800050a:	619a      	str	r2, [r3, #24]
	else			LED2_GPIO_Port->BSRR = (LED2_Pin << 16);
}
 800050c:	e003      	b.n	8000516 <setLED2State+0x22>
	else			LED2_GPIO_Port->BSRR = (LED2_Pin << 16);
 800050e:	4b05      	ldr	r3, [pc, #20]	; (8000524 <setLED2State+0x30>)
 8000510:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000514:	619a      	str	r2, [r3, #24]
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	40020400 	.word	0x40020400

08000528 <setLED3State>:
void setLED3State(uint8_t state)	{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
	if (state == 0) LED3_GPIO_Port->BSRR = LED3_Pin;
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d104      	bne.n	8000542 <setLED3State+0x1a>
 8000538:	4b07      	ldr	r3, [pc, #28]	; (8000558 <setLED3State+0x30>)
 800053a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800053e:	619a      	str	r2, [r3, #24]
	else			LED3_GPIO_Port->BSRR = (LED3_Pin << 16);
}
 8000540:	e003      	b.n	800054a <setLED3State+0x22>
	else			LED3_GPIO_Port->BSRR = (LED3_Pin << 16);
 8000542:	4b05      	ldr	r3, [pc, #20]	; (8000558 <setLED3State+0x30>)
 8000544:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000548:	619a      	str	r2, [r3, #24]
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40020800 	.word	0x40020800

0800055c <setLED4State>:
void setLED4State(uint8_t state)	{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]
	if (state == 0) LED4_GPIO_Port->BSRR = LED4_Pin;
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d103      	bne.n	8000574 <setLED4State+0x18>
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <setLED4State+0x2c>)
 800056e:	2210      	movs	r2, #16
 8000570:	619a      	str	r2, [r3, #24]
	else			LED4_GPIO_Port->BSRR = (LED4_Pin << 16);
}
 8000572:	e003      	b.n	800057c <setLED4State+0x20>
	else			LED4_GPIO_Port->BSRR = (LED4_Pin << 16);
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <setLED4State+0x2c>)
 8000576:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800057a:	619a      	str	r2, [r3, #24]
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	40020400 	.word	0x40020400

0800058c <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800058c:	b480      	push	{r7}
 800058e:	b089      	sub	sp, #36	; 0x24
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	332c      	adds	r3, #44	; 0x2c
 800059c:	4619      	mov	r1, r3
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80005a4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80005a8:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005aa:	69ba      	ldr	r2, [r7, #24]
 80005ac:	fa92 f2a2 	rbit	r2, r2
 80005b0:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80005b2:	697a      	ldr	r2, [r7, #20]
 80005b4:	fab2 f282 	clz	r2, r2
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	40d3      	lsrs	r3, r2
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	440b      	add	r3, r1
 80005c0:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 80005c2:	69fb      	ldr	r3, [r7, #28]
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	f003 031f 	and.w	r3, r3, #31
 80005cc:	211f      	movs	r1, #31
 80005ce:	fa01 f303 	lsl.w	r3, r1, r3
 80005d2:	43db      	mvns	r3, r3
 80005d4:	401a      	ands	r2, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f003 011f 	and.w	r1, r3, #31
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	f003 031f 	and.w	r3, r3, #31
 80005e2:	fa01 f303 	lsl.w	r3, r1, r3
 80005e6:	431a      	orrs	r2, r3
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80005ec:	bf00      	nop
 80005ee:	3724      	adds	r7, #36	; 0x24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	431a      	orrs	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	609a      	str	r2, [r3, #8]
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800061e:	b480      	push	{r7}
 8000620:	b08d      	sub	sp, #52	; 0x34
 8000622:	af00      	add	r7, sp, #0
 8000624:	60f8      	str	r0, [r7, #12]
 8000626:	60b9      	str	r1, [r7, #8]
 8000628:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	330c      	adds	r3, #12
 800062e:	4619      	mov	r1, r3
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000636:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800063a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800063c:	69ba      	ldr	r2, [r7, #24]
 800063e:	fa92 f2a2 	rbit	r2, r2
 8000642:	617a      	str	r2, [r7, #20]
  return result;
 8000644:	697a      	ldr	r2, [r7, #20]
 8000646:	fab2 f282 	clz	r2, r2
 800064a:	b2d2      	uxtb	r2, r2
 800064c:	40d3      	lsrs	r3, r2
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	440b      	add	r3, r1
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 8000654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800065e:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000662:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000664:	6a39      	ldr	r1, [r7, #32]
 8000666:	fa91 f1a1 	rbit	r1, r1
 800066a:	61f9      	str	r1, [r7, #28]
  return result;
 800066c:	69f9      	ldr	r1, [r7, #28]
 800066e:	fab1 f181 	clz	r1, r1
 8000672:	b2c9      	uxtb	r1, r1
 8000674:	40cb      	lsrs	r3, r1
 8000676:	2107      	movs	r1, #7
 8000678:	fa01 f303 	lsl.w	r3, r1, r3
 800067c:	43db      	mvns	r3, r3
 800067e:	401a      	ands	r2, r3
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000686:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800068a:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800068c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800068e:	fa91 f1a1 	rbit	r1, r1
 8000692:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8000694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000696:	fab1 f181 	clz	r1, r1
 800069a:	b2c9      	uxtb	r1, r1
 800069c:	40cb      	lsrs	r3, r1
 800069e:	6879      	ldr	r1, [r7, #4]
 80006a0:	fa01 f303 	lsl.w	r3, r1, r3
 80006a4:	431a      	orrs	r2, r3
 80006a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006a8:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80006aa:	bf00      	nop
 80006ac:	3734      	adds	r7, #52	; 0x34
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
	...

080006b8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006c4:	4907      	ldr	r1, [pc, #28]	; (80006e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4013      	ands	r3, r2
 80006d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006d6:	68fb      	ldr	r3, [r7, #12]
}
 80006d8:	bf00      	nop
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	40023800 	.word	0x40023800

080006e8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80006f4:	4907      	ldr	r1, [pc, #28]	; (8000714 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4013      	ands	r3, r2
 8000704:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000706:	68fb      	ldr	r3, [r7, #12]
}
 8000708:	bf00      	nop
 800070a:	3714      	adds	r7, #20
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	40023800 	.word	0x40023800

08000718 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b092      	sub	sp, #72	; 0x48
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800071e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800072a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800073a:	f107 0318 	add.w	r3, r7, #24
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	463b      	mov	r3, r7
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
 8000756:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000758:	f44f 7080 	mov.w	r0, #256	; 0x100
 800075c:	f7ff ffc4 	bl	80006e8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000760:	2001      	movs	r0, #1
 8000762:	f7ff ffa9 	bl	80006b8 <LL_AHB1_GRP1_EnableClock>
  PA1   ------> ADC1_IN1
  PA2   ------> ADC1_IN2
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  */
  GPIO_InitStruct.Pin = AD_FR_Pin|AD_R_Pin|AD_FF_Pin|AD_L_Pin
 8000766:	2337      	movs	r3, #55	; 0x37
 8000768:	603b      	str	r3, [r7, #0]
                          |AD_FL_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800076a:	2303      	movs	r3, #3
 800076c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	463b      	mov	r3, r7
 8000774:	4619      	mov	r1, r3
 8000776:	481f      	ldr	r0, [pc, #124]	; (80007f4 <MX_ADC1_Init+0xdc>)
 8000778:	f001 fd05 	bl	8002186 <LL_GPIO_Init>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800077c:	2300      	movs	r3, #0
 800077e:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000780:	2300      	movs	r3, #0
 8000782:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000788:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800078c:	4619      	mov	r1, r3
 800078e:	481a      	ldr	r0, [pc, #104]	; (80007f8 <MX_ADC1_Init+0xe0>)
 8000790:	f001 fb86 	bl	8001ea0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000794:	2300      	movs	r3, #0
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000798:	2300      	movs	r3, #0
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80007a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ac:	4619      	mov	r1, r3
 80007ae:	4812      	ldr	r0, [pc, #72]	; (80007f8 <MX_ADC1_Init+0xe0>)
 80007b0:	f001 fba2 	bl	8001ef8 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 80007b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b8:	480f      	ldr	r0, [pc, #60]	; (80007f8 <MX_ADC1_Init+0xe0>)
 80007ba:	f7ff ff1d 	bl	80005f8 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 80007be:	2300      	movs	r3, #0
 80007c0:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80007c6:	f107 0318 	add.w	r3, r7, #24
 80007ca:	4619      	mov	r1, r3
 80007cc:	480b      	ldr	r0, [pc, #44]	; (80007fc <MX_ADC1_Init+0xe4>)
 80007ce:	f001 fb1f 	bl	8001e10 <LL_ADC_CommonInit>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 80007d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80007d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007da:	4807      	ldr	r0, [pc, #28]	; (80007f8 <MX_ADC1_Init+0xe0>)
 80007dc:	f7ff fed6 	bl	800058c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 80007e0:	2200      	movs	r2, #0
 80007e2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80007e6:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_ADC1_Init+0xe0>)
 80007e8:	f7ff ff19 	bl	800061e <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	3748      	adds	r7, #72	; 0x48
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40020000 	.word	0x40020000
 80007f8:	40012000 	.word	0x40012000
 80007fc:	40012300 	.word	0x40012300

08000800 <LL_AHB1_GRP1_EnableClock>:
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800080a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800080c:	4907      	ldr	r1, [pc, #28]	; (800082c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4313      	orrs	r3, r2
 8000812:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4013      	ands	r3, r2
 800081c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800081e:	68fb      	ldr	r3, [r7, #12]
}
 8000820:	bf00      	nop
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	40023800 	.word	0x40023800

08000830 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	041a      	lsls	r2, r3, #16
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	619a      	str	r2, [r3, #24]
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
	...

08000850 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	463b      	mov	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
 8000864:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000866:	2004      	movs	r0, #4
 8000868:	f7ff ffca 	bl	8000800 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff ffc7 	bl	8000800 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000872:	2002      	movs	r0, #2
 8000874:	f7ff ffc4 	bl	8000800 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000878:	2008      	movs	r0, #8
 800087a:	f7ff ffc1 	bl	8000800 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, FrontRight_Pin|Right_Pin|STBY_Pin|LED3_Pin);
 800087e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000882:	4830      	ldr	r0, [pc, #192]	; (8000944 <MX_GPIO_Init+0xf4>)
 8000884:	f7ff ffd4 	bl	8000830 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, FrontCenter_Pin|Left_Pin|FrontLeft_Pin|RIGHT_DIR1_Pin
 8000888:	f24c 01c8 	movw	r1, #49352	; 0xc0c8
 800088c:	482e      	ldr	r0, [pc, #184]	; (8000948 <MX_GPIO_Init+0xf8>)
 800088e:	f7ff ffcf 	bl	8000830 <LL_GPIO_ResetOutputPin>
                          |RIGHT_DIR2_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LEFT_DIR1_Pin|LEFT_DIR2_Pin|LED1_Pin|LED2_Pin
 8000892:	f24c 0133 	movw	r1, #49203	; 0xc033
 8000896:	482d      	ldr	r0, [pc, #180]	; (800094c <MX_GPIO_Init+0xfc>)
 8000898:	f7ff ffca 	bl	8000830 <LL_GPIO_ResetOutputPin>
                          |LED4_Pin|LED5_Pin);

  /**/
  LL_GPIO_ResetOutputPin(SPI_CS_GPIO_Port, SPI_CS_Pin);
 800089c:	2104      	movs	r1, #4
 800089e:	482c      	ldr	r0, [pc, #176]	; (8000950 <MX_GPIO_Init+0x100>)
 80008a0:	f7ff ffc6 	bl	8000830 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = FrontRight_Pin|Right_Pin|STBY_Pin|LED3_Pin;
 80008a4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80008a8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008aa:	2301      	movs	r3, #1
 80008ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ba:	463b      	mov	r3, r7
 80008bc:	4619      	mov	r1, r3
 80008be:	4821      	ldr	r0, [pc, #132]	; (8000944 <MX_GPIO_Init+0xf4>)
 80008c0:	f001 fc61 	bl	8002186 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FrontCenter_Pin|Left_Pin|FrontLeft_Pin|RIGHT_DIR1_Pin
 80008c4:	f24c 03c8 	movw	r3, #49352	; 0xc0c8
 80008c8:	603b      	str	r3, [r7, #0]
                          |RIGHT_DIR2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008ca:	2301      	movs	r3, #1
 80008cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	463b      	mov	r3, r7
 80008dc:	4619      	mov	r1, r3
 80008de:	481a      	ldr	r0, [pc, #104]	; (8000948 <MX_GPIO_Init+0xf8>)
 80008e0:	f001 fc51 	bl	8002186 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LEFT_DIR1_Pin|LEFT_DIR2_Pin|LED1_Pin|LED2_Pin
 80008e4:	f24c 0333 	movw	r3, #49203	; 0xc033
 80008e8:	603b      	str	r3, [r7, #0]
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008ea:	2301      	movs	r3, #1
 80008ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fa:	463b      	mov	r3, r7
 80008fc:	4619      	mov	r1, r3
 80008fe:	4813      	ldr	r0, [pc, #76]	; (800094c <MX_GPIO_Init+0xfc>)
 8000900:	f001 fc41 	bl	8002186 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000904:	2304      	movs	r3, #4
 8000906:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000908:	2301      	movs	r3, #1
 800090a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000914:	2300      	movs	r3, #0
 8000916:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000918:	463b      	mov	r3, r7
 800091a:	4619      	mov	r1, r3
 800091c:	480c      	ldr	r0, [pc, #48]	; (8000950 <MX_GPIO_Init+0x100>)
 800091e:	f001 fc32 	bl	8002186 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000922:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000926:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000930:	463b      	mov	r3, r7
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_GPIO_Init+0xfc>)
 8000936:	f001 fc26 	bl	8002186 <LL_GPIO_Init>

}
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40020800 	.word	0x40020800
 8000948:	40020000 	.word	0x40020000
 800094c:	40020400 	.word	0x40020400
 8000950:	40020c00 	.word	0x40020c00

08000954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <__NVIC_SetPriorityGrouping+0x44>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000970:	4013      	ands	r3, r2
 8000972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800097c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000986:	4a04      	ldr	r2, [pc, #16]	; (8000998 <__NVIC_SetPriorityGrouping+0x44>)
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	60d3      	str	r3, [r2, #12]
}
 800098c:	bf00      	nop
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <LL_RCC_HSI_Enable+0x1c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <LL_RCC_HSI_Enable+0x1c>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6013      	str	r3, [r2, #0]
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <LL_RCC_HSI_IsReady+0x20>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f003 0302 	and.w	r3, r3, #2
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	bf0c      	ite	eq
 80009cc:	2301      	moveq	r3, #1
 80009ce:	2300      	movne	r3, #0
 80009d0:	b2db      	uxtb	r3, r3
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	40023800 	.word	0x40023800

080009e0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	00db      	lsls	r3, r3, #3
 80009f4:	4904      	ldr	r1, [pc, #16]	; (8000a08 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80009f6:	4313      	orrs	r3, r2
 80009f8:	600b      	str	r3, [r1, #0]
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800

08000a0c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <LL_RCC_SetSysClkSource+0x24>)
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	f023 0203 	bic.w	r2, r3, #3
 8000a1c:	4904      	ldr	r1, [pc, #16]	; (8000a30 <LL_RCC_SetSysClkSource+0x24>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	608b      	str	r3, [r1, #8]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	40023800 	.word	0x40023800

08000a34 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <LL_RCC_GetSysClkSource+0x18>)
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	f003 030c 	and.w	r3, r3, #12
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <LL_RCC_SetAHBPrescaler+0x24>)
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a60:	4904      	ldr	r1, [pc, #16]	; (8000a74 <LL_RCC_SetAHBPrescaler+0x24>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	608b      	str	r3, [r1, #8]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	40023800 	.word	0x40023800

08000a78 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000a88:	4904      	ldr	r1, [pc, #16]	; (8000a9c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	608b      	str	r3, [r1, #8]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000ab0:	4904      	ldr	r1, [pc, #16]	; (8000ac4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	608b      	str	r3, [r1, #8]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <LL_RCC_PLL_Enable+0x1c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <LL_RCC_PLL_Enable+0x1c>)
 8000ad2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <LL_RCC_PLL_IsReady+0x24>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000af4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000af8:	bf0c      	ite	eq
 8000afa:	2301      	moveq	r3, #1
 8000afc:	2300      	movne	r3, #0
 8000afe:	b2db      	uxtb	r3, r3
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800

08000b10 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
 8000b1c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b20:	685a      	ldr	r2, [r3, #4]
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000b24:	4013      	ands	r3, r2
 8000b26:	68f9      	ldr	r1, [r7, #12]
 8000b28:	68ba      	ldr	r2, [r7, #8]
 8000b2a:	4311      	orrs	r1, r2
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	0192      	lsls	r2, r2, #6
 8000b30:	430a      	orrs	r2, r1
 8000b32:	4908      	ldr	r1, [pc, #32]	; (8000b54 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b34:	4313      	orrs	r3, r2
 8000b36:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b40:	4904      	ldr	r1, [pc, #16]	; (8000b54 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000b48:	bf00      	nop
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	40023800 	.word	0x40023800
 8000b58:	ffbf8000 	.word	0xffbf8000

08000b5c <LL_APB1_GRP1_EnableClock>:
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b68:	4907      	ldr	r1, [pc, #28]	; (8000b88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4013      	ands	r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	40023800 	.word	0x40023800

08000b8c <LL_APB2_GRP1_EnableClock>:
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b98:	4907      	ldr	r1, [pc, #28]	; (8000bb8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ba2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000baa:	68fb      	ldr	r3, [r7, #12]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	40023800 	.word	0x40023800

08000bbc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <LL_FLASH_SetLatency+0x24>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f023 0207 	bic.w	r2, r3, #7
 8000bcc:	4904      	ldr	r1, [pc, #16]	; (8000be0 <LL_FLASH_SetLatency+0x24>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	600b      	str	r3, [r1, #0]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	40023c00 	.word	0x40023c00

08000be4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <LL_FLASH_GetLatency+0x18>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f003 0307 	and.w	r3, r3, #7
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40023c00 	.word	0x40023c00

08000c00 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000c10:	4904      	ldr	r1, [pc, #16]	; (8000c24 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	600b      	str	r3, [r1, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	40007000 	.word	0x40007000

08000c28 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f043 0201 	orr.w	r2, r3, #1
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	601a      	str	r2, [r3, #0]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	f043 0201 	orr.w	r2, r3, #1
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	60da      	str	r2, [r3, #12]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c78:	2b80      	cmp	r3, #128	; 0x80
 8000c7a:	bf0c      	ite	eq
 8000c7c:	2301      	moveq	r3, #1
 8000c7e:	2300      	movne	r3, #0
 8000c80:	b2db      	uxtb	r3, r3
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	460b      	mov	r3, r1
 8000c98:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000c9a:	78fa      	ldrb	r2, [r7, #3]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	605a      	str	r2, [r3, #4]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int c)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

int __io_putchar(int c) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
    uint8_t _c = '\r';
    LL_USART_TransmitData8(USART1, _c);
    while(LL_USART_IsActiveFlag_TXE(USART1) == 0);
  }
*/
  LL_USART_TransmitData8(USART1, (uint8_t)c);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4807      	ldr	r0, [pc, #28]	; (8000cd8 <__io_putchar+0x2c>)
 8000cbc:	f7ff ffe7 	bl	8000c8e <LL_USART_TransmitData8>
  while(LL_USART_IsActiveFlag_TXE(USART1) == 0);
 8000cc0:	bf00      	nop
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <__io_putchar+0x2c>)
 8000cc4:	f7ff ffd0 	bl	8000c68 <LL_USART_IsActiveFlag_TXE>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d0f9      	beq.n	8000cc2 <__io_putchar+0x16>
  return 0;
 8000cce:	2300      	movs	r3, #0
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40011000 	.word	0x40011000

08000cdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000ce0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ce4:	f7ff ff52 	bl	8000b8c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000ce8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000cec:	f7ff ff36 	bl	8000b5c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f7ff fe2f 	bl	8000954 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* USER CODE BEGIN Init */
  setbuf(stdout,NULL);
 8000cf6:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <main+0xac>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f002 faee 	bl	80032e0 <setbuf>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d04:	f000 f846 	bl	8000d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d08:	f7ff fda2 	bl	8000850 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d0c:	f7ff fd04 	bl	8000718 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d10:	f000 fc5e 	bl	80015d0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d14:	f000 fcf6 	bl	8001704 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d18:	f000 fd6a 	bl	80017f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d1c:	f000 fde2 	bl	80018e4 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000d20:	f000 fe84 	bl	8001a2c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000d24:	f000 ffd4 	bl	8001cd0 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8000d28:	f000 f8be 	bl	8000ea8 <MX_SPI3_Init>
  MX_TIM11_Init();
 8000d2c:	f000 ff14 	bl	8001b58 <MX_TIM11_Init>
  MX_TIM6_Init();
 8000d30:	f000 fe52 	bl	80019d8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  LL_TIM_EnableIT_UPDATE(TIM6);
 8000d34:	4815      	ldr	r0, [pc, #84]	; (8000d8c <main+0xb0>)
 8000d36:	f7ff ff87 	bl	8000c48 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM6);
 8000d3a:	4814      	ldr	r0, [pc, #80]	; (8000d8c <main+0xb0>)
 8000d3c:	f7ff ff74 	bl	8000c28 <LL_TIM_EnableCounter>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  setLED1State(ON);
 8000d40:	2001      	movs	r0, #1
 8000d42:	f7ff fbbd 	bl	80004c0 <setLED1State>
	  setLED2State(ON);
 8000d46:	2001      	movs	r0, #1
 8000d48:	f7ff fbd4 	bl	80004f4 <setLED2State>
	  setLED3State(ON);
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f7ff fbeb 	bl	8000528 <setLED3State>
	  setLED4State(ON);
 8000d52:	2001      	movs	r0, #1
 8000d54:	f7ff fc02 	bl	800055c <setLED4State>

	  printf("Hello,World \r\n");
 8000d58:	480d      	ldr	r0, [pc, #52]	; (8000d90 <main+0xb4>)
 8000d5a:	f002 fab9 	bl	80032d0 <puts>

	  LL_mDelay(500);
 8000d5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d62:	f002 f9df 	bl	8003124 <LL_mDelay>
	  setLED1State(OFF);
 8000d66:	2000      	movs	r0, #0
 8000d68:	f7ff fbaa 	bl	80004c0 <setLED1State>
	  setLED2State(OFF);
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f7ff fbc1 	bl	80004f4 <setLED2State>
	  setLED3State(OFF);
 8000d72:	2000      	movs	r0, #0
 8000d74:	f7ff fbd8 	bl	8000528 <setLED3State>
	  setLED4State(OFF);
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f7ff fbef 	bl	800055c <setLED4State>
	  LL_mDelay(500);
 8000d7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d82:	f002 f9cf 	bl	8003124 <LL_mDelay>
	  setLED1State(ON);
 8000d86:	e7db      	b.n	8000d40 <main+0x64>
 8000d88:	20000004 	.word	0x20000004
 8000d8c:	40001000 	.word	0x40001000
 8000d90:	08003d44 	.word	0x08003d44

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8000d98:	2005      	movs	r0, #5
 8000d9a:	f7ff ff0f 	bl	8000bbc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8000d9e:	bf00      	nop
 8000da0:	f7ff ff20 	bl	8000be4 <LL_FLASH_GetLatency>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b05      	cmp	r3, #5
 8000da8:	d1fa      	bne.n	8000da0 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000daa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000dae:	f7ff ff27 	bl	8000c00 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000db2:	2010      	movs	r0, #16
 8000db4:	f7ff fe14 	bl	80009e0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000db8:	f7ff fdf0 	bl	800099c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000dbc:	bf00      	nop
 8000dbe:	f7ff fdfd 	bl	80009bc <LL_RCC_HSI_IsReady>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d1fa      	bne.n	8000dbe <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 168, LL_RCC_PLLP_DIV_2);
 8000dc8:	2300      	movs	r3, #0
 8000dca:	22a8      	movs	r2, #168	; 0xa8
 8000dcc:	2108      	movs	r1, #8
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f7ff fe9e 	bl	8000b10 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000dd4:	f7ff fe78 	bl	8000ac8 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000dd8:	bf00      	nop
 8000dda:	f7ff fe85 	bl	8000ae8 <LL_RCC_PLL_IsReady>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d1fa      	bne.n	8000dda <SystemClock_Config+0x46>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000de4:	2000      	movs	r0, #0
 8000de6:	f7ff fe33 	bl	8000a50 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000dea:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000dee:	f7ff fe43 	bl	8000a78 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_4);
 8000df2:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 8000df6:	f7ff fe53 	bl	8000aa0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	f7ff fe06 	bl	8000a0c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000e00:	bf00      	nop
 8000e02:	f7ff fe17 	bl	8000a34 <LL_RCC_GetSysClkSource>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b08      	cmp	r3, #8
 8000e0a:	d1fa      	bne.n	8000e02 <SystemClock_Config+0x6e>
  {

  }
  LL_Init1msTick(168000000);
 8000e0c:	4803      	ldr	r0, [pc, #12]	; (8000e1c <SystemClock_Config+0x88>)
 8000e0e:	f002 f97b 	bl	8003108 <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 8000e12:	4802      	ldr	r0, [pc, #8]	; (8000e1c <SystemClock_Config+0x88>)
 8000e14:	f002 f9ac 	bl	8003170 <LL_SetSystemCoreClock>
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	0a037a00 	.word	0x0a037a00

08000e20 <LL_AHB1_GRP1_EnableClock>:
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e2c:	4907      	ldr	r1, [pc, #28]	; (8000e4c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	40023800 	.word	0x40023800

08000e50 <LL_APB1_GRP1_EnableClock>:
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e5c:	4907      	ldr	r1, [pc, #28]	; (8000e7c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	40023800 	.word	0x40023800

08000e80 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f023 0210 	bic.w	r2, r3, #16
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	431a      	orrs	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	605a      	str	r2, [r3, #4]
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <MX_SPI3_Init>:

/* USER CODE END 0 */

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b090      	sub	sp, #64	; 0x40
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000eae:	f107 0318 	add.w	r3, r7, #24
 8000eb2:	2228      	movs	r2, #40	; 0x28
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f002 f994 	bl	80031e4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]
 8000eca:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8000ecc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ed0:	f7ff ffbe 	bl	8000e50 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000ed4:	2004      	movs	r0, #4
 8000ed6:	f7ff ffa3 	bl	8000e20 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8000eda:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ede:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8000ef0:	2306      	movs	r3, #6
 8000ef2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4813      	ldr	r0, [pc, #76]	; (8000f48 <MX_SPI3_Init+0xa0>)
 8000efa:	f001 f944 	bl	8002186 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000f02:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000f06:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8000f10:	2301      	movs	r3, #1
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8000f26:	230a      	movs	r3, #10
 8000f28:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8000f2a:	f107 0318 	add.w	r3, r7, #24
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4806      	ldr	r0, [pc, #24]	; (8000f4c <MX_SPI3_Init+0xa4>)
 8000f32:	f001 faf8 	bl	8002526 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8000f36:	2100      	movs	r1, #0
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <MX_SPI3_Init+0xa4>)
 8000f3a:	f7ff ffa1 	bl	8000e80 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	3740      	adds	r7, #64	; 0x40
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40020800 	.word	0x40020800
 8000f4c:	40003c00 	.word	0x40003c00

08000f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <NMI_Handler+0x4>

08000f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <MemManage_Handler+0x4>

08000f62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <BusFault_Handler+0x4>

08000f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <UsageFault_Handler+0x4>

08000f6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60f8      	str	r0, [r7, #12]
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	e00a      	b.n	8000fce <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fb8:	f3af 8000 	nop.w
 8000fbc:	4601      	mov	r1, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1c5a      	adds	r2, r3, #1
 8000fc2:	60ba      	str	r2, [r7, #8]
 8000fc4:	b2ca      	uxtb	r2, r1
 8000fc6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	dbf0      	blt.n	8000fb8 <_read+0x12>
	}

return len;
 8000fd6:	687b      	ldr	r3, [r7, #4]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	e009      	b.n	8001006 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1c5a      	adds	r2, r3, #1
 8000ff6:	60ba      	str	r2, [r7, #8]
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fe56 	bl	8000cac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	3301      	adds	r3, #1
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	429a      	cmp	r2, r3
 800100c:	dbf1      	blt.n	8000ff2 <_write+0x12>
	}
	return len;
 800100e:	687b      	ldr	r3, [r7, #4]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <_close>:

int _close(int file)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	return -1;
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001040:	605a      	str	r2, [r3, #4]
	return 0;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <_isatty>:

int _isatty(int file)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	return 1;
 8001058:	2301      	movs	r3, #1
}
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001066:	b480      	push	{r7}
 8001068:	b085      	sub	sp, #20
 800106a:	af00      	add	r7, sp, #0
 800106c:	60f8      	str	r0, [r7, #12]
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
	return 0;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001088:	4a14      	ldr	r2, [pc, #80]	; (80010dc <_sbrk+0x5c>)
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <_sbrk+0x60>)
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d102      	bne.n	80010a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <_sbrk+0x64>)
 800109e:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <_sbrk+0x68>)
 80010a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d207      	bcs.n	80010c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b0:	f002 f86e 	bl	8003190 <__errno>
 80010b4:	4603      	mov	r3, r0
 80010b6:	220c      	movs	r2, #12
 80010b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	e009      	b.n	80010d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <_sbrk+0x64>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <_sbrk+0x64>)
 80010d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20020000 	.word	0x20020000
 80010e0:	00000400 	.word	0x00000400
 80010e4:	20000084 	.word	0x20000084
 80010e8:	200000a0 	.word	0x200000a0

080010ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <SystemInit+0x28>)
 80010f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f6:	4a07      	ldr	r2, [pc, #28]	; (8001114 <SystemInit+0x28>)
 80010f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <SystemInit+0x28>)
 8001102:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001106:	609a      	str	r2, [r3, #8]
#endif
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <LL_AHB1_GRP1_EnableClock>:
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001124:	4907      	ldr	r1, [pc, #28]	; (8001144 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4313      	orrs	r3, r2
 800112a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800112e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4013      	ands	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	40023800 	.word	0x40023800

08001148 <LL_APB1_GRP1_EnableClock>:
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001152:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001154:	4907      	ldr	r1, [pc, #28]	; (8001174 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4313      	orrs	r3, r2
 800115a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <LL_APB1_GRP1_EnableClock+0x2c>)
 800115e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4013      	ands	r3, r2
 8001164:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001166:	68fb      	ldr	r3, [r7, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	40023800 	.word	0x40023800

08001178 <LL_APB2_GRP1_EnableClock>:
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001182:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001184:	4907      	ldr	r1, [pc, #28]	; (80011a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4313      	orrs	r3, r2
 800118a:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 800118e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4013      	ands	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001196:	68fb      	ldr	r3, [r7, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	40023800 	.word	0x40023800

080011a8 <LL_TIM_DisableARRPreload>:
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	601a      	str	r2, [r3, #0]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <LL_TIM_OC_DisableFast>:
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d01c      	beq.n	8001212 <LL_TIM_OC_DisableFast+0x4a>
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	2b04      	cmp	r3, #4
 80011dc:	d017      	beq.n	800120e <LL_TIM_OC_DisableFast+0x46>
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	2b10      	cmp	r3, #16
 80011e2:	d012      	beq.n	800120a <LL_TIM_OC_DisableFast+0x42>
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	2b40      	cmp	r3, #64	; 0x40
 80011e8:	d00d      	beq.n	8001206 <LL_TIM_OC_DisableFast+0x3e>
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011f0:	d007      	beq.n	8001202 <LL_TIM_OC_DisableFast+0x3a>
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011f8:	d101      	bne.n	80011fe <LL_TIM_OC_DisableFast+0x36>
 80011fa:	2305      	movs	r3, #5
 80011fc:	e00a      	b.n	8001214 <LL_TIM_OC_DisableFast+0x4c>
 80011fe:	2306      	movs	r3, #6
 8001200:	e008      	b.n	8001214 <LL_TIM_OC_DisableFast+0x4c>
 8001202:	2304      	movs	r3, #4
 8001204:	e006      	b.n	8001214 <LL_TIM_OC_DisableFast+0x4c>
 8001206:	2303      	movs	r3, #3
 8001208:	e004      	b.n	8001214 <LL_TIM_OC_DisableFast+0x4c>
 800120a:	2302      	movs	r3, #2
 800120c:	e002      	b.n	8001214 <LL_TIM_OC_DisableFast+0x4c>
 800120e:	2301      	movs	r3, #1
 8001210:	e000      	b.n	8001214 <LL_TIM_OC_DisableFast+0x4c>
 8001212:	2300      	movs	r3, #0
 8001214:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3318      	adds	r3, #24
 800121a:	4619      	mov	r1, r3
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	4a0b      	ldr	r2, [pc, #44]	; (800124c <LL_TIM_OC_DisableFast+0x84>)
 8001220:	5cd3      	ldrb	r3, [r2, r3]
 8001222:	440b      	add	r3, r1
 8001224:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	4908      	ldr	r1, [pc, #32]	; (8001250 <LL_TIM_OC_DisableFast+0x88>)
 800122e:	5ccb      	ldrb	r3, [r1, r3]
 8001230:	4619      	mov	r1, r3
 8001232:	2304      	movs	r3, #4
 8001234:	408b      	lsls	r3, r1
 8001236:	43db      	mvns	r3, r3
 8001238:	401a      	ands	r2, r3
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	601a      	str	r2, [r3, #0]
}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	08003d6c 	.word	0x08003d6c
 8001250:	08003d74 	.word	0x08003d74

08001254 <LL_TIM_OC_EnablePreload>:
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d01c      	beq.n	800129e <LL_TIM_OC_EnablePreload+0x4a>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	2b04      	cmp	r3, #4
 8001268:	d017      	beq.n	800129a <LL_TIM_OC_EnablePreload+0x46>
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	2b10      	cmp	r3, #16
 800126e:	d012      	beq.n	8001296 <LL_TIM_OC_EnablePreload+0x42>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	2b40      	cmp	r3, #64	; 0x40
 8001274:	d00d      	beq.n	8001292 <LL_TIM_OC_EnablePreload+0x3e>
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800127c:	d007      	beq.n	800128e <LL_TIM_OC_EnablePreload+0x3a>
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001284:	d101      	bne.n	800128a <LL_TIM_OC_EnablePreload+0x36>
 8001286:	2305      	movs	r3, #5
 8001288:	e00a      	b.n	80012a0 <LL_TIM_OC_EnablePreload+0x4c>
 800128a:	2306      	movs	r3, #6
 800128c:	e008      	b.n	80012a0 <LL_TIM_OC_EnablePreload+0x4c>
 800128e:	2304      	movs	r3, #4
 8001290:	e006      	b.n	80012a0 <LL_TIM_OC_EnablePreload+0x4c>
 8001292:	2303      	movs	r3, #3
 8001294:	e004      	b.n	80012a0 <LL_TIM_OC_EnablePreload+0x4c>
 8001296:	2302      	movs	r3, #2
 8001298:	e002      	b.n	80012a0 <LL_TIM_OC_EnablePreload+0x4c>
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <LL_TIM_OC_EnablePreload+0x4c>
 800129e:	2300      	movs	r3, #0
 80012a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3318      	adds	r3, #24
 80012a6:	4619      	mov	r1, r3
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <LL_TIM_OC_EnablePreload+0x80>)
 80012ac:	5cd3      	ldrb	r3, [r2, r3]
 80012ae:	440b      	add	r3, r1
 80012b0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	4907      	ldr	r1, [pc, #28]	; (80012d8 <LL_TIM_OC_EnablePreload+0x84>)
 80012ba:	5ccb      	ldrb	r3, [r1, r3]
 80012bc:	4619      	mov	r1, r3
 80012be:	2308      	movs	r3, #8
 80012c0:	408b      	lsls	r3, r1
 80012c2:	431a      	orrs	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	601a      	str	r2, [r3, #0]
}
 80012c8:	bf00      	nop
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	08003d6c 	.word	0x08003d6c
 80012d8:	08003d74 	.word	0x08003d74

080012dc <LL_TIM_IC_SetActiveInput>:
{
 80012dc:	b480      	push	{r7}
 80012de:	b087      	sub	sp, #28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d01c      	beq.n	8001328 <LL_TIM_IC_SetActiveInput+0x4c>
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	d017      	beq.n	8001324 <LL_TIM_IC_SetActiveInput+0x48>
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	2b10      	cmp	r3, #16
 80012f8:	d012      	beq.n	8001320 <LL_TIM_IC_SetActiveInput+0x44>
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	2b40      	cmp	r3, #64	; 0x40
 80012fe:	d00d      	beq.n	800131c <LL_TIM_IC_SetActiveInput+0x40>
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001306:	d007      	beq.n	8001318 <LL_TIM_IC_SetActiveInput+0x3c>
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800130e:	d101      	bne.n	8001314 <LL_TIM_IC_SetActiveInput+0x38>
 8001310:	2305      	movs	r3, #5
 8001312:	e00a      	b.n	800132a <LL_TIM_IC_SetActiveInput+0x4e>
 8001314:	2306      	movs	r3, #6
 8001316:	e008      	b.n	800132a <LL_TIM_IC_SetActiveInput+0x4e>
 8001318:	2304      	movs	r3, #4
 800131a:	e006      	b.n	800132a <LL_TIM_IC_SetActiveInput+0x4e>
 800131c:	2303      	movs	r3, #3
 800131e:	e004      	b.n	800132a <LL_TIM_IC_SetActiveInput+0x4e>
 8001320:	2302      	movs	r3, #2
 8001322:	e002      	b.n	800132a <LL_TIM_IC_SetActiveInput+0x4e>
 8001324:	2301      	movs	r3, #1
 8001326:	e000      	b.n	800132a <LL_TIM_IC_SetActiveInput+0x4e>
 8001328:	2300      	movs	r3, #0
 800132a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3318      	adds	r3, #24
 8001330:	4619      	mov	r1, r3
 8001332:	7dfb      	ldrb	r3, [r7, #23]
 8001334:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <LL_TIM_IC_SetActiveInput+0x94>)
 8001336:	5cd3      	ldrb	r3, [r2, r3]
 8001338:	440b      	add	r3, r1
 800133a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	7dfb      	ldrb	r3, [r7, #23]
 8001342:	490c      	ldr	r1, [pc, #48]	; (8001374 <LL_TIM_IC_SetActiveInput+0x98>)
 8001344:	5ccb      	ldrb	r3, [r1, r3]
 8001346:	4619      	mov	r1, r3
 8001348:	2303      	movs	r3, #3
 800134a:	408b      	lsls	r3, r1
 800134c:	43db      	mvns	r3, r3
 800134e:	401a      	ands	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	0c1b      	lsrs	r3, r3, #16
 8001354:	7df9      	ldrb	r1, [r7, #23]
 8001356:	4807      	ldr	r0, [pc, #28]	; (8001374 <LL_TIM_IC_SetActiveInput+0x98>)
 8001358:	5c41      	ldrb	r1, [r0, r1]
 800135a:	408b      	lsls	r3, r1
 800135c:	431a      	orrs	r2, r3
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	601a      	str	r2, [r3, #0]
}
 8001362:	bf00      	nop
 8001364:	371c      	adds	r7, #28
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	08003d6c 	.word	0x08003d6c
 8001374:	08003d7c 	.word	0x08003d7c

08001378 <LL_TIM_IC_SetPrescaler>:
{
 8001378:	b480      	push	{r7}
 800137a:	b087      	sub	sp, #28
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d01c      	beq.n	80013c4 <LL_TIM_IC_SetPrescaler+0x4c>
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	2b04      	cmp	r3, #4
 800138e:	d017      	beq.n	80013c0 <LL_TIM_IC_SetPrescaler+0x48>
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	2b10      	cmp	r3, #16
 8001394:	d012      	beq.n	80013bc <LL_TIM_IC_SetPrescaler+0x44>
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	2b40      	cmp	r3, #64	; 0x40
 800139a:	d00d      	beq.n	80013b8 <LL_TIM_IC_SetPrescaler+0x40>
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013a2:	d007      	beq.n	80013b4 <LL_TIM_IC_SetPrescaler+0x3c>
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013aa:	d101      	bne.n	80013b0 <LL_TIM_IC_SetPrescaler+0x38>
 80013ac:	2305      	movs	r3, #5
 80013ae:	e00a      	b.n	80013c6 <LL_TIM_IC_SetPrescaler+0x4e>
 80013b0:	2306      	movs	r3, #6
 80013b2:	e008      	b.n	80013c6 <LL_TIM_IC_SetPrescaler+0x4e>
 80013b4:	2304      	movs	r3, #4
 80013b6:	e006      	b.n	80013c6 <LL_TIM_IC_SetPrescaler+0x4e>
 80013b8:	2303      	movs	r3, #3
 80013ba:	e004      	b.n	80013c6 <LL_TIM_IC_SetPrescaler+0x4e>
 80013bc:	2302      	movs	r3, #2
 80013be:	e002      	b.n	80013c6 <LL_TIM_IC_SetPrescaler+0x4e>
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <LL_TIM_IC_SetPrescaler+0x4e>
 80013c4:	2300      	movs	r3, #0
 80013c6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	3318      	adds	r3, #24
 80013cc:	4619      	mov	r1, r3
 80013ce:	7dfb      	ldrb	r3, [r7, #23]
 80013d0:	4a0e      	ldr	r2, [pc, #56]	; (800140c <LL_TIM_IC_SetPrescaler+0x94>)
 80013d2:	5cd3      	ldrb	r3, [r2, r3]
 80013d4:	440b      	add	r3, r1
 80013d6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
 80013de:	490c      	ldr	r1, [pc, #48]	; (8001410 <LL_TIM_IC_SetPrescaler+0x98>)
 80013e0:	5ccb      	ldrb	r3, [r1, r3]
 80013e2:	4619      	mov	r1, r3
 80013e4:	230c      	movs	r3, #12
 80013e6:	408b      	lsls	r3, r1
 80013e8:	43db      	mvns	r3, r3
 80013ea:	401a      	ands	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	0c1b      	lsrs	r3, r3, #16
 80013f0:	7df9      	ldrb	r1, [r7, #23]
 80013f2:	4807      	ldr	r0, [pc, #28]	; (8001410 <LL_TIM_IC_SetPrescaler+0x98>)
 80013f4:	5c41      	ldrb	r1, [r0, r1]
 80013f6:	408b      	lsls	r3, r1
 80013f8:	431a      	orrs	r2, r3
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	601a      	str	r2, [r3, #0]
}
 80013fe:	bf00      	nop
 8001400:	371c      	adds	r7, #28
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	08003d6c 	.word	0x08003d6c
 8001410:	08003d7c 	.word	0x08003d7c

08001414 <LL_TIM_IC_SetFilter>:
{
 8001414:	b480      	push	{r7}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d01c      	beq.n	8001460 <LL_TIM_IC_SetFilter+0x4c>
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	2b04      	cmp	r3, #4
 800142a:	d017      	beq.n	800145c <LL_TIM_IC_SetFilter+0x48>
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	2b10      	cmp	r3, #16
 8001430:	d012      	beq.n	8001458 <LL_TIM_IC_SetFilter+0x44>
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	2b40      	cmp	r3, #64	; 0x40
 8001436:	d00d      	beq.n	8001454 <LL_TIM_IC_SetFilter+0x40>
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800143e:	d007      	beq.n	8001450 <LL_TIM_IC_SetFilter+0x3c>
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001446:	d101      	bne.n	800144c <LL_TIM_IC_SetFilter+0x38>
 8001448:	2305      	movs	r3, #5
 800144a:	e00a      	b.n	8001462 <LL_TIM_IC_SetFilter+0x4e>
 800144c:	2306      	movs	r3, #6
 800144e:	e008      	b.n	8001462 <LL_TIM_IC_SetFilter+0x4e>
 8001450:	2304      	movs	r3, #4
 8001452:	e006      	b.n	8001462 <LL_TIM_IC_SetFilter+0x4e>
 8001454:	2303      	movs	r3, #3
 8001456:	e004      	b.n	8001462 <LL_TIM_IC_SetFilter+0x4e>
 8001458:	2302      	movs	r3, #2
 800145a:	e002      	b.n	8001462 <LL_TIM_IC_SetFilter+0x4e>
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <LL_TIM_IC_SetFilter+0x4e>
 8001460:	2300      	movs	r3, #0
 8001462:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	3318      	adds	r3, #24
 8001468:	4619      	mov	r1, r3
 800146a:	7dfb      	ldrb	r3, [r7, #23]
 800146c:	4a0e      	ldr	r2, [pc, #56]	; (80014a8 <LL_TIM_IC_SetFilter+0x94>)
 800146e:	5cd3      	ldrb	r3, [r2, r3]
 8001470:	440b      	add	r3, r1
 8001472:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	7dfb      	ldrb	r3, [r7, #23]
 800147a:	490c      	ldr	r1, [pc, #48]	; (80014ac <LL_TIM_IC_SetFilter+0x98>)
 800147c:	5ccb      	ldrb	r3, [r1, r3]
 800147e:	4619      	mov	r1, r3
 8001480:	23f0      	movs	r3, #240	; 0xf0
 8001482:	408b      	lsls	r3, r1
 8001484:	43db      	mvns	r3, r3
 8001486:	401a      	ands	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	0c1b      	lsrs	r3, r3, #16
 800148c:	7df9      	ldrb	r1, [r7, #23]
 800148e:	4807      	ldr	r0, [pc, #28]	; (80014ac <LL_TIM_IC_SetFilter+0x98>)
 8001490:	5c41      	ldrb	r1, [r0, r1]
 8001492:	408b      	lsls	r3, r1
 8001494:	431a      	orrs	r2, r3
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	601a      	str	r2, [r3, #0]
}
 800149a:	bf00      	nop
 800149c:	371c      	adds	r7, #28
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	08003d6c 	.word	0x08003d6c
 80014ac:	08003d7c 	.word	0x08003d7c

080014b0 <LL_TIM_IC_SetPolarity>:
{
 80014b0:	b480      	push	{r7}
 80014b2:	b087      	sub	sp, #28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d01c      	beq.n	80014fc <LL_TIM_IC_SetPolarity+0x4c>
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	d017      	beq.n	80014f8 <LL_TIM_IC_SetPolarity+0x48>
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	2b10      	cmp	r3, #16
 80014cc:	d012      	beq.n	80014f4 <LL_TIM_IC_SetPolarity+0x44>
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	2b40      	cmp	r3, #64	; 0x40
 80014d2:	d00d      	beq.n	80014f0 <LL_TIM_IC_SetPolarity+0x40>
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014da:	d007      	beq.n	80014ec <LL_TIM_IC_SetPolarity+0x3c>
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e2:	d101      	bne.n	80014e8 <LL_TIM_IC_SetPolarity+0x38>
 80014e4:	2305      	movs	r3, #5
 80014e6:	e00a      	b.n	80014fe <LL_TIM_IC_SetPolarity+0x4e>
 80014e8:	2306      	movs	r3, #6
 80014ea:	e008      	b.n	80014fe <LL_TIM_IC_SetPolarity+0x4e>
 80014ec:	2304      	movs	r3, #4
 80014ee:	e006      	b.n	80014fe <LL_TIM_IC_SetPolarity+0x4e>
 80014f0:	2303      	movs	r3, #3
 80014f2:	e004      	b.n	80014fe <LL_TIM_IC_SetPolarity+0x4e>
 80014f4:	2302      	movs	r3, #2
 80014f6:	e002      	b.n	80014fe <LL_TIM_IC_SetPolarity+0x4e>
 80014f8:	2301      	movs	r3, #1
 80014fa:	e000      	b.n	80014fe <LL_TIM_IC_SetPolarity+0x4e>
 80014fc:	2300      	movs	r3, #0
 80014fe:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6a1a      	ldr	r2, [r3, #32]
 8001504:	7dfb      	ldrb	r3, [r7, #23]
 8001506:	490b      	ldr	r1, [pc, #44]	; (8001534 <LL_TIM_IC_SetPolarity+0x84>)
 8001508:	5ccb      	ldrb	r3, [r1, r3]
 800150a:	4619      	mov	r1, r3
 800150c:	230a      	movs	r3, #10
 800150e:	408b      	lsls	r3, r1
 8001510:	43db      	mvns	r3, r3
 8001512:	401a      	ands	r2, r3
 8001514:	7dfb      	ldrb	r3, [r7, #23]
 8001516:	4907      	ldr	r1, [pc, #28]	; (8001534 <LL_TIM_IC_SetPolarity+0x84>)
 8001518:	5ccb      	ldrb	r3, [r1, r3]
 800151a:	4619      	mov	r1, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	408b      	lsls	r3, r1
 8001520:	431a      	orrs	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	621a      	str	r2, [r3, #32]
}
 8001526:	bf00      	nop
 8001528:	371c      	adds	r7, #28
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	08003d84 	.word	0x08003d84

08001538 <LL_TIM_SetClockSource>:
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800154a:	f023 0307 	bic.w	r3, r3, #7
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	431a      	orrs	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	609a      	str	r2, [r3, #8]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <LL_TIM_SetEncoderMode>:
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f023 0207 	bic.w	r2, r3, #7
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	609a      	str	r2, [r3, #8]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_TIM_SetTriggerOutput>:
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	431a      	orrs	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	605a      	str	r2, [r3, #4]
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <LL_TIM_DisableMasterSlaveMode>:
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	609a      	str	r2, [r3, #8]
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b09a      	sub	sp, #104	; 0x68
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80015d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80015e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015ea:	2220      	movs	r2, #32
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f001 fdf8 	bl	80031e4 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80015f4:	f107 031c 	add.w	r3, r7, #28
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
 8001604:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
 8001614:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001616:	2001      	movs	r0, #1
 8001618:	f7ff fdae 	bl	8001178 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001622:	2300      	movs	r3, #0
 8001624:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 8001626:	4b34      	ldr	r3, [pc, #208]	; (80016f8 <MX_TIM1_Init+0x128>)
 8001628:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	667b      	str	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001632:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001636:	4619      	mov	r1, r3
 8001638:	4830      	ldr	r0, [pc, #192]	; (80016fc <MX_TIM1_Init+0x12c>)
 800163a:	f001 f839 	bl	80026b0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 800163e:	482f      	ldr	r0, [pc, #188]	; (80016fc <MX_TIM1_Init+0x12c>)
 8001640:	f7ff fdb2 	bl	80011a8 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001644:	2100      	movs	r1, #0
 8001646:	482d      	ldr	r0, [pc, #180]	; (80016fc <MX_TIM1_Init+0x12c>)
 8001648:	f7ff ff76 	bl	8001538 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 800164c:	2101      	movs	r1, #1
 800164e:	482b      	ldr	r0, [pc, #172]	; (80016fc <MX_TIM1_Init+0x12c>)
 8001650:	f7ff fe00 	bl	8001254 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001654:	2360      	movs	r3, #96	; 0x60
 8001656:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001664:	2300      	movs	r3, #0
 8001666:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001668:	2300      	movs	r3, #0
 800166a:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 800166c:	2300      	movs	r3, #0
 800166e:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001674:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001678:	461a      	mov	r2, r3
 800167a:	2101      	movs	r1, #1
 800167c:	481f      	ldr	r0, [pc, #124]	; (80016fc <MX_TIM1_Init+0x12c>)
 800167e:	f001 f8b1 	bl	80027e4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8001682:	2101      	movs	r1, #1
 8001684:	481d      	ldr	r0, [pc, #116]	; (80016fc <MX_TIM1_Init+0x12c>)
 8001686:	f7ff fd9f 	bl	80011c8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800168a:	2100      	movs	r1, #0
 800168c:	481b      	ldr	r0, [pc, #108]	; (80016fc <MX_TIM1_Init+0x12c>)
 800168e:	f7ff ff7b 	bl	8001588 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8001692:	481a      	ldr	r0, [pc, #104]	; (80016fc <MX_TIM1_Init+0x12c>)
 8001694:	f7ff ff8b 	bl	80015ae <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 80016ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	4619      	mov	r1, r3
 80016be:	480f      	ldr	r0, [pc, #60]	; (80016fc <MX_TIM1_Init+0x12c>)
 80016c0:	f001 f8d1 	bl	8002866 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80016c4:	2001      	movs	r0, #1
 80016c6:	f7ff fd27 	bl	8001118 <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
  GPIO_InitStruct.Pin = LEFT_PWM_Pin;
 80016ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80016d0:	2302      	movs	r3, #2
 80016d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80016e0:	2301      	movs	r3, #1
 80016e2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(LEFT_PWM_GPIO_Port, &GPIO_InitStruct);
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	4619      	mov	r1, r3
 80016e8:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_TIM1_Init+0x130>)
 80016ea:	f000 fd4c 	bl	8002186 <LL_GPIO_Init>

}
 80016ee:	bf00      	nop
 80016f0:	3768      	adds	r7, #104	; 0x68
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	fff003e8 	.word	0xfff003e8
 80016fc:	40010000 	.word	0x40010000
 8001700:	40020000 	.word	0x40020000

08001704 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b094      	sub	sp, #80	; 0x50
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800170a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800171a:	f107 031c 	add.w	r3, r7, #28
 800171e:	2220      	movs	r2, #32
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f001 fd5e 	bl	80031e4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
 8001734:	611a      	str	r2, [r3, #16]
 8001736:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001738:	2001      	movs	r0, #1
 800173a:	f7ff fd05 	bl	8001148 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001742:	2300      	movs	r3, #0
 8001744:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 8001746:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <MX_TIM2_Init+0xe4>)
 8001748:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800174a:	2300      	movs	r3, #0
 800174c:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800174e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001752:	4619      	mov	r1, r3
 8001754:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001758:	f000 ffaa 	bl	80026b0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800175c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001760:	f7ff fd22 	bl	80011a8 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001764:	2100      	movs	r1, #0
 8001766:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800176a:	f7ff fee5 	bl	8001538 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 800176e:	2110      	movs	r1, #16
 8001770:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001774:	f7ff fd6e 	bl	8001254 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001778:	2360      	movs	r3, #96	; 0x60
 800177a:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001788:	2300      	movs	r3, #0
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	461a      	mov	r2, r3
 8001792:	2110      	movs	r1, #16
 8001794:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001798:	f001 f824 	bl	80027e4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 800179c:	2110      	movs	r1, #16
 800179e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80017a2:	f7ff fd11 	bl	80011c8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80017a6:	2100      	movs	r1, #0
 80017a8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80017ac:	f7ff feec 	bl	8001588 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80017b0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80017b4:	f7ff fefb 	bl	80015ae <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80017b8:	2002      	movs	r0, #2
 80017ba:	f7ff fcad 	bl	8001118 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
  GPIO_InitStruct.Pin = RIGHT_PWM_Pin;
 80017be:	2308      	movs	r3, #8
 80017c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017c2:	2302      	movs	r3, #2
 80017c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80017d2:	2301      	movs	r3, #1
 80017d4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(RIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	4619      	mov	r1, r3
 80017da:	4804      	ldr	r0, [pc, #16]	; (80017ec <MX_TIM2_Init+0xe8>)
 80017dc:	f000 fcd3 	bl	8002186 <LL_GPIO_Init>

}
 80017e0:	bf00      	nop
 80017e2:	3750      	adds	r7, #80	; 0x50
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	fff003e8 	.word	0xfff003e8
 80017ec:	40020400 	.word	0x40020400

080017f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08c      	sub	sp, #48	; 0x30
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80017f6:	f107 031c 	add.w	r3, r7, #28
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
 8001804:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
 8001814:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001816:	2002      	movs	r0, #2
 8001818:	f7ff fc96 	bl	8001148 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800181c:	2004      	movs	r0, #4
 800181e:	f7ff fc7b 	bl	8001118 <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PC6   ------> TIM3_CH1
  PC7   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = ENCODER_L_CH1_Pin|ENCODER_L_CH2_Pin;
 8001822:	23c0      	movs	r3, #192	; 0xc0
 8001824:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001826:	2302      	movs	r3, #2
 8001828:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001836:	2302      	movs	r3, #2
 8001838:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	4619      	mov	r1, r3
 800183e:	4827      	ldr	r0, [pc, #156]	; (80018dc <MX_TIM3_Init+0xec>)
 8001840:	f000 fca1 	bl	8002186 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X2_TI1);
 8001844:	2101      	movs	r1, #1
 8001846:	4826      	ldr	r0, [pc, #152]	; (80018e0 <MX_TIM3_Init+0xf0>)
 8001848:	f7ff fe8b 	bl	8001562 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 800184c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001850:	2101      	movs	r1, #1
 8001852:	4823      	ldr	r0, [pc, #140]	; (80018e0 <MX_TIM3_Init+0xf0>)
 8001854:	f7ff fd42 	bl	80012dc <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8001858:	2200      	movs	r2, #0
 800185a:	2101      	movs	r1, #1
 800185c:	4820      	ldr	r0, [pc, #128]	; (80018e0 <MX_TIM3_Init+0xf0>)
 800185e:	f7ff fd8b 	bl	8001378 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8001862:	2200      	movs	r2, #0
 8001864:	2101      	movs	r1, #1
 8001866:	481e      	ldr	r0, [pc, #120]	; (80018e0 <MX_TIM3_Init+0xf0>)
 8001868:	f7ff fdd4 	bl	8001414 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 800186c:	2200      	movs	r2, #0
 800186e:	2101      	movs	r1, #1
 8001870:	481b      	ldr	r0, [pc, #108]	; (80018e0 <MX_TIM3_Init+0xf0>)
 8001872:	f7ff fe1d 	bl	80014b0 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001876:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800187a:	2110      	movs	r1, #16
 800187c:	4818      	ldr	r0, [pc, #96]	; (80018e0 <MX_TIM3_Init+0xf0>)
 800187e:	f7ff fd2d 	bl	80012dc <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8001882:	2200      	movs	r2, #0
 8001884:	2110      	movs	r1, #16
 8001886:	4816      	ldr	r0, [pc, #88]	; (80018e0 <MX_TIM3_Init+0xf0>)
 8001888:	f7ff fd76 	bl	8001378 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 800188c:	2200      	movs	r2, #0
 800188e:	2110      	movs	r1, #16
 8001890:	4813      	ldr	r0, [pc, #76]	; (80018e0 <MX_TIM3_Init+0xf0>)
 8001892:	f7ff fdbf 	bl	8001414 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8001896:	2200      	movs	r2, #0
 8001898:	2110      	movs	r1, #16
 800189a:	4811      	ldr	r0, [pc, #68]	; (80018e0 <MX_TIM3_Init+0xf0>)
 800189c:	f7ff fe08 	bl	80014b0 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 80018a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80018ae:	2300      	movs	r3, #0
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80018b2:	f107 031c 	add.w	r3, r7, #28
 80018b6:	4619      	mov	r1, r3
 80018b8:	4809      	ldr	r0, [pc, #36]	; (80018e0 <MX_TIM3_Init+0xf0>)
 80018ba:	f000 fef9 	bl	80026b0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80018be:	4808      	ldr	r0, [pc, #32]	; (80018e0 <MX_TIM3_Init+0xf0>)
 80018c0:	f7ff fc72 	bl	80011a8 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80018c4:	2100      	movs	r1, #0
 80018c6:	4806      	ldr	r0, [pc, #24]	; (80018e0 <MX_TIM3_Init+0xf0>)
 80018c8:	f7ff fe5e 	bl	8001588 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80018cc:	4804      	ldr	r0, [pc, #16]	; (80018e0 <MX_TIM3_Init+0xf0>)
 80018ce:	f7ff fe6e 	bl	80015ae <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018d2:	bf00      	nop
 80018d4:	3730      	adds	r7, #48	; 0x30
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40020800 	.word	0x40020800
 80018e0:	40000400 	.word	0x40000400

080018e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08c      	sub	sp, #48	; 0x30
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
 8001908:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 800190a:	2004      	movs	r0, #4
 800190c:	f7ff fc1c 	bl	8001148 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001910:	2002      	movs	r0, #2
 8001912:	f7ff fc01 	bl	8001118 <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PB6   ------> TIM4_CH1
  PB7   ------> TIM4_CH2
  */
  GPIO_InitStruct.Pin = ENCODER_R_CH1_Pin|ENCODER_R_CH2_Pin;
 8001916:	23c0      	movs	r3, #192	; 0xc0
 8001918:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800191a:	2302      	movs	r3, #2
 800191c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800192a:	2302      	movs	r3, #2
 800192c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	4619      	mov	r1, r3
 8001932:	4827      	ldr	r0, [pc, #156]	; (80019d0 <MX_TIM4_Init+0xec>)
 8001934:	f000 fc27 	bl	8002186 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  LL_TIM_SetEncoderMode(TIM4, LL_TIM_ENCODERMODE_X2_TI1);
 8001938:	2101      	movs	r1, #1
 800193a:	4826      	ldr	r0, [pc, #152]	; (80019d4 <MX_TIM4_Init+0xf0>)
 800193c:	f7ff fe11 	bl	8001562 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001940:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001944:	2101      	movs	r1, #1
 8001946:	4823      	ldr	r0, [pc, #140]	; (80019d4 <MX_TIM4_Init+0xf0>)
 8001948:	f7ff fcc8 	bl	80012dc <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 800194c:	2200      	movs	r2, #0
 800194e:	2101      	movs	r1, #1
 8001950:	4820      	ldr	r0, [pc, #128]	; (80019d4 <MX_TIM4_Init+0xf0>)
 8001952:	f7ff fd11 	bl	8001378 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8001956:	2200      	movs	r2, #0
 8001958:	2101      	movs	r1, #1
 800195a:	481e      	ldr	r0, [pc, #120]	; (80019d4 <MX_TIM4_Init+0xf0>)
 800195c:	f7ff fd5a 	bl	8001414 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8001960:	2200      	movs	r2, #0
 8001962:	2101      	movs	r1, #1
 8001964:	481b      	ldr	r0, [pc, #108]	; (80019d4 <MX_TIM4_Init+0xf0>)
 8001966:	f7ff fda3 	bl	80014b0 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 800196a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800196e:	2110      	movs	r1, #16
 8001970:	4818      	ldr	r0, [pc, #96]	; (80019d4 <MX_TIM4_Init+0xf0>)
 8001972:	f7ff fcb3 	bl	80012dc <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8001976:	2200      	movs	r2, #0
 8001978:	2110      	movs	r1, #16
 800197a:	4816      	ldr	r0, [pc, #88]	; (80019d4 <MX_TIM4_Init+0xf0>)
 800197c:	f7ff fcfc 	bl	8001378 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8001980:	2200      	movs	r2, #0
 8001982:	2110      	movs	r1, #16
 8001984:	4813      	ldr	r0, [pc, #76]	; (80019d4 <MX_TIM4_Init+0xf0>)
 8001986:	f7ff fd45 	bl	8001414 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 800198a:	2200      	movs	r2, #0
 800198c:	2110      	movs	r1, #16
 800198e:	4811      	ldr	r0, [pc, #68]	; (80019d4 <MX_TIM4_Init+0xf0>)
 8001990:	f7ff fd8e 	bl	80014b0 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001998:	2300      	movs	r3, #0
 800199a:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 800199c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80019a6:	f107 031c 	add.w	r3, r7, #28
 80019aa:	4619      	mov	r1, r3
 80019ac:	4809      	ldr	r0, [pc, #36]	; (80019d4 <MX_TIM4_Init+0xf0>)
 80019ae:	f000 fe7f 	bl	80026b0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 80019b2:	4808      	ldr	r0, [pc, #32]	; (80019d4 <MX_TIM4_Init+0xf0>)
 80019b4:	f7ff fbf8 	bl	80011a8 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 80019b8:	2100      	movs	r1, #0
 80019ba:	4806      	ldr	r0, [pc, #24]	; (80019d4 <MX_TIM4_Init+0xf0>)
 80019bc:	f7ff fde4 	bl	8001588 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 80019c0:	4804      	ldr	r0, [pc, #16]	; (80019d4 <MX_TIM4_Init+0xf0>)
 80019c2:	f7ff fdf4 	bl	80015ae <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	3730      	adds	r7, #48	; 0x30
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40020400 	.word	0x40020400
 80019d4:	40000800 	.word	0x40000800

080019d8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 80019ec:	2010      	movs	r0, #16
 80019ee:	f7ff fbab 	bl	8001148 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 84-LL_TIM_IC_FILTER_FDIV1_N2;
 80019f2:	2354      	movs	r3, #84	; 0x54
 80019f4:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 80019fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019fe:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	4619      	mov	r1, r3
 8001a04:	4808      	ldr	r0, [pc, #32]	; (8001a28 <MX_TIM6_Init+0x50>)
 8001a06:	f000 fe53 	bl	80026b0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8001a0a:	4807      	ldr	r0, [pc, #28]	; (8001a28 <MX_TIM6_Init+0x50>)
 8001a0c:	f7ff fbcc 	bl	80011a8 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8001a10:	2100      	movs	r1, #0
 8001a12:	4805      	ldr	r0, [pc, #20]	; (8001a28 <MX_TIM6_Init+0x50>)
 8001a14:	f7ff fdb8 	bl	8001588 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8001a18:	4803      	ldr	r0, [pc, #12]	; (8001a28 <MX_TIM6_Init+0x50>)
 8001a1a:	f7ff fdc8 	bl	80015ae <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40001000 	.word	0x40001000

08001a2c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b09a      	sub	sp, #104	; 0x68
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001a32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
 8001a40:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001a42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a46:	2220      	movs	r2, #32
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f001 fbca 	bl	80031e4 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
 8001a60:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
 8001a70:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 8001a72:	2002      	movs	r0, #2
 8001a74:	f7ff fb80 	bl	8001178 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  TIM_InitStruct.Prescaler = 84-LL_TIM_IC_FILTER_FDIV1_N2;
 8001a78:	2354      	movs	r3, #84	; 0x54
 8001a7a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 8001a82:	4b32      	ldr	r3, [pc, #200]	; (8001b4c <MX_TIM8_Init+0x120>)
 8001a84:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	667b      	str	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 8001a8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a92:	4619      	mov	r1, r3
 8001a94:	482e      	ldr	r0, [pc, #184]	; (8001b50 <MX_TIM8_Init+0x124>)
 8001a96:	f000 fe0b 	bl	80026b0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM8);
 8001a9a:	482d      	ldr	r0, [pc, #180]	; (8001b50 <MX_TIM8_Init+0x124>)
 8001a9c:	f7ff fb84 	bl	80011a8 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM8, LL_TIM_CHANNEL_CH4);
 8001aa0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aa4:	482a      	ldr	r0, [pc, #168]	; (8001b50 <MX_TIM8_Init+0x124>)
 8001aa6:	f7ff fbd5 	bl	8001254 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001aaa:	2360      	movs	r3, #96	; 0x60
 8001aac:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 50;
 8001ab6:	2332      	movs	r3, #50	; 0x32
 8001ab8:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001aba:	2300      	movs	r3, #0
 8001abc:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001ac6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001aca:	461a      	mov	r2, r3
 8001acc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ad0:	481f      	ldr	r0, [pc, #124]	; (8001b50 <MX_TIM8_Init+0x124>)
 8001ad2:	f000 fe87 	bl	80027e4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM8, LL_TIM_CHANNEL_CH4);
 8001ad6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ada:	481d      	ldr	r0, [pc, #116]	; (8001b50 <MX_TIM8_Init+0x124>)
 8001adc:	f7ff fb74 	bl	80011c8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM8, LL_TIM_TRGO_RESET);
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	481b      	ldr	r0, [pc, #108]	; (8001b50 <MX_TIM8_Init+0x124>)
 8001ae4:	f7ff fd50 	bl	8001588 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM8);
 8001ae8:	4819      	ldr	r0, [pc, #100]	; (8001b50 <MX_TIM8_Init+0x124>)
 8001aea:	f7ff fd60 	bl	80015ae <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8001b04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM8, &TIM_BDTRInitStruct);
 8001b0e:	f107 031c 	add.w	r3, r7, #28
 8001b12:	4619      	mov	r1, r3
 8001b14:	480e      	ldr	r0, [pc, #56]	; (8001b50 <MX_TIM8_Init+0x124>)
 8001b16:	f000 fea6 	bl	8002866 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001b1a:	2004      	movs	r0, #4
 8001b1c:	f7ff fafc 	bl	8001118 <LL_AHB1_GRP1_EnableClock>
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8001b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b26:	2302      	movs	r3, #2
 8001b28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8001b36:	2303      	movs	r3, #3
 8001b38:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_TIM8_Init+0x128>)
 8001b40:	f000 fb21 	bl	8002186 <LL_GPIO_Init>

}
 8001b44:	bf00      	nop
 8001b46:	3768      	adds	r7, #104	; 0x68
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	fff003e8 	.word	0xfff003e8
 8001b50:	40010400 	.word	0x40010400
 8001b54:	40020800 	.word	0x40020800

08001b58 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b094      	sub	sp, #80	; 0x50
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001b5e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	60da      	str	r2, [r3, #12]
 8001b6c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001b6e:	f107 031c 	add.w	r3, r7, #28
 8001b72:	2220      	movs	r2, #32
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f001 fb34 	bl	80031e4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
 8001b88:	611a      	str	r2, [r3, #16]
 8001b8a:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM11);
 8001b8c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001b90:	f7ff faf2 	bl	8001178 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 65535;
 8001b9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ba0:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM11, &TIM_InitStruct);
 8001ba6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001baa:	4619      	mov	r1, r3
 8001bac:	481b      	ldr	r0, [pc, #108]	; (8001c1c <MX_TIM11_Init+0xc4>)
 8001bae:	f000 fd7f 	bl	80026b0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM11);
 8001bb2:	481a      	ldr	r0, [pc, #104]	; (8001c1c <MX_TIM11_Init+0xc4>)
 8001bb4:	f7ff faf8 	bl	80011a8 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM11, LL_TIM_CHANNEL_CH1);
 8001bb8:	2101      	movs	r1, #1
 8001bba:	4818      	ldr	r0, [pc, #96]	; (8001c1c <MX_TIM11_Init+0xc4>)
 8001bbc:	f7ff fb4a 	bl	8001254 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001bc0:	2360      	movs	r3, #96	; 0x60
 8001bc2:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM11, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001bd4:	f107 031c 	add.w	r3, r7, #28
 8001bd8:	461a      	mov	r2, r3
 8001bda:	2101      	movs	r1, #1
 8001bdc:	480f      	ldr	r0, [pc, #60]	; (8001c1c <MX_TIM11_Init+0xc4>)
 8001bde:	f000 fe01 	bl	80027e4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM11, LL_TIM_CHANNEL_CH1);
 8001be2:	2101      	movs	r1, #1
 8001be4:	480d      	ldr	r0, [pc, #52]	; (8001c1c <MX_TIM11_Init+0xc4>)
 8001be6:	f7ff faef 	bl	80011c8 <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001bea:	2002      	movs	r0, #2
 8001bec:	f7ff fa94 	bl	8001118 <LL_AHB1_GRP1_EnableClock>
    /**TIM11 GPIO Configuration
    PB9     ------> TIM11_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bf4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8001c06:	2303      	movs	r3, #3
 8001c08:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4804      	ldr	r0, [pc, #16]	; (8001c20 <MX_TIM11_Init+0xc8>)
 8001c10:	f000 fab9 	bl	8002186 <LL_GPIO_Init>

}
 8001c14:	bf00      	nop
 8001c16:	3750      	adds	r7, #80	; 0x50
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40014800 	.word	0x40014800
 8001c20:	40020400 	.word	0x40020400

08001c24 <LL_AHB1_GRP1_EnableClock>:
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c30:	4907      	ldr	r1, [pc, #28]	; (8001c50 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c42:	68fb      	ldr	r3, [r7, #12]
}
 8001c44:	bf00      	nop
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	40023800 	.word	0x40023800

08001c54 <LL_APB2_GRP1_EnableClock>:
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c60:	4907      	ldr	r1, [pc, #28]	; (8001c80 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c72:	68fb      	ldr	r3, [r7, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	40023800 	.word	0x40023800

08001c84 <LL_USART_Enable>:
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	60da      	str	r2, [r3, #12]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <LL_USART_ConfigAsyncMode>:
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	615a      	str	r2, [r3, #20]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08e      	sub	sp, #56	; 0x38
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001cd6:	f107 031c 	add.w	r3, r7, #28
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
 8001ce4:	611a      	str	r2, [r3, #16]
 8001ce6:	615a      	str	r2, [r3, #20]
 8001ce8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
 8001cf8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001cfa:	2010      	movs	r0, #16
 8001cfc:	f7ff ffaa 	bl	8001c54 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001d00:	2001      	movs	r0, #1
 8001d02:	f7ff ff8f 	bl	8001c24 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8001d06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d10:	2303      	movs	r3, #3
 8001d12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001d1c:	2307      	movs	r3, #7
 8001d1e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	4619      	mov	r1, r3
 8001d24:	4810      	ldr	r0, [pc, #64]	; (8001d68 <MX_USART1_UART_Init+0x98>)
 8001d26:	f000 fa2e 	bl	8002186 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8001d2a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001d2e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001d30:	2300      	movs	r3, #0
 8001d32:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001d34:	2300      	movs	r3, #0
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001d3c:	230c      	movs	r3, #12
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001d44:	2300      	movs	r3, #0
 8001d46:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8001d48:	f107 031c 	add.w	r3, r7, #28
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4807      	ldr	r0, [pc, #28]	; (8001d6c <MX_USART1_UART_Init+0x9c>)
 8001d50:	f001 f940 	bl	8002fd4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001d54:	4805      	ldr	r0, [pc, #20]	; (8001d6c <MX_USART1_UART_Init+0x9c>)
 8001d56:	f7ff ffa5 	bl	8001ca4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001d5a:	4804      	ldr	r0, [pc, #16]	; (8001d6c <MX_USART1_UART_Init+0x9c>)
 8001d5c:	f7ff ff92 	bl	8001c84 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d60:	bf00      	nop
 8001d62:	3738      	adds	r7, #56	; 0x38
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40020000 	.word	0x40020000
 8001d6c:	40011000 	.word	0x40011000

08001d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001da8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d76:	e003      	b.n	8001d80 <LoopCopyDataInit>

08001d78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d7e:	3104      	adds	r1, #4

08001d80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d80:	480b      	ldr	r0, [pc, #44]	; (8001db0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d88:	d3f6      	bcc.n	8001d78 <CopyDataInit>
  ldr  r2, =_sbss
 8001d8a:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d8c:	e002      	b.n	8001d94 <LoopFillZerobss>

08001d8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d90:	f842 3b04 	str.w	r3, [r2], #4

08001d94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d94:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d98:	d3f9      	bcc.n	8001d8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d9a:	f7ff f9a7 	bl	80010ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d9e:	f001 f9fd 	bl	800319c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001da2:	f7fe ff9b 	bl	8000cdc <main>
  bx  lr    
 8001da6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001da8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001dac:	08003e00 	.word	0x08003e00
  ldr  r0, =_sdata
 8001db0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001db4:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8001db8:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8001dbc:	200000a0 	.word	0x200000a0

08001dc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc0:	e7fe      	b.n	8001dc0 <ADC_IRQHandler>

08001dc2 <LL_ADC_REG_SetSequencerLength>:
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	bf0c      	ite	eq
 8001dfc:	2301      	moveq	r3, #1
 8001dfe:	2300      	movne	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8001e1e:	481c      	ldr	r0, [pc, #112]	; (8001e90 <LL_ADC_CommonInit+0x80>)
 8001e20:	f7ff ffe2 	bl	8001de8 <LL_ADC_IsEnabled>
 8001e24:	4604      	mov	r4, r0
 8001e26:	481b      	ldr	r0, [pc, #108]	; (8001e94 <LL_ADC_CommonInit+0x84>)
 8001e28:	f7ff ffde 	bl	8001de8 <LL_ADC_IsEnabled>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	431c      	orrs	r4, r3
 8001e30:	4819      	ldr	r0, [pc, #100]	; (8001e98 <LL_ADC_CommonInit+0x88>)
 8001e32:	f7ff ffd9 	bl	8001de8 <LL_ADC_IsEnabled>
 8001e36:	4603      	mov	r3, r0
 8001e38:	4323      	orrs	r3, r4
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d120      	bne.n	8001e80 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d012      	beq.n	8001e6c <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <LL_ADC_CommonInit+0x8c>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	6811      	ldr	r1, [r2, #0]
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	6852      	ldr	r2, [r2, #4]
 8001e56:	4311      	orrs	r1, r2
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	6892      	ldr	r2, [r2, #8]
 8001e5c:	4311      	orrs	r1, r2
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	68d2      	ldr	r2, [r2, #12]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	e00b      	b.n	8001e84 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <LL_ADC_CommonInit+0x8c>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	6812      	ldr	r2, [r2, #0]
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	e001      	b.n	8001e84 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd90      	pop	{r4, r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40012000 	.word	0x40012000
 8001e94:	40012100 	.word	0x40012100
 8001e98:	40012200 	.word	0x40012200
 8001e9c:	fffc10e0 	.word	0xfffc10e0

08001ea0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ff9a 	bl	8001de8 <LL_ADC_IsEnabled>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d117      	bne.n	8001eea <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001ec2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	6811      	ldr	r1, [r2, #0]
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	6892      	ldr	r2, [r2, #8]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	e001      	b.n	8001eee <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001f02:	2300      	movs	r3, #0
 8001f04:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ff6e 	bl	8001de8 <LL_ADC_IsEnabled>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d12b      	bne.n	8001f6a <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d009      	beq.n	8001f2e <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	e005      	b.n	8001f3a <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <LL_ADC_REG_Init+0x80>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	68d2      	ldr	r2, [r2, #12]
 8001f4e:	4311      	orrs	r1, r2
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	6912      	ldr	r2, [r2, #16]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4619      	mov	r1, r3
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ff2d 	bl	8001dc2 <LL_ADC_REG_SetSequencerLength>
 8001f68:	e001      	b.n	8001f6e <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	c0fffcfd 	.word	0xc0fffcfd

08001f7c <LL_GPIO_SetPinMode>:
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	; 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	613b      	str	r3, [r7, #16]
  return result;
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	2103      	movs	r1, #3
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	401a      	ands	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	fa93 f3a3 	rbit	r3, r3
 8001fb6:	61bb      	str	r3, [r7, #24]
  return result;
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	601a      	str	r2, [r3, #0]
}
 8001fce:	bf00      	nop
 8001fd0:	3724      	adds	r7, #36	; 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <LL_GPIO_SetPinOutputType>:
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b085      	sub	sp, #20
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	401a      	ands	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	fb01 f303 	mul.w	r3, r1, r3
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	605a      	str	r2, [r3, #4]
}
 8001ffe:	bf00      	nop
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <LL_GPIO_SetPinSpeed>:
{
 800200a:	b480      	push	{r7}
 800200c:	b089      	sub	sp, #36	; 0x24
 800200e:	af00      	add	r7, sp, #0
 8002010:	60f8      	str	r0, [r7, #12]
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	fa93 f3a3 	rbit	r3, r3
 8002024:	613b      	str	r3, [r7, #16]
  return result;
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	fab3 f383 	clz	r3, r3
 800202c:	b2db      	uxtb	r3, r3
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	2103      	movs	r1, #3
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	401a      	ands	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	61bb      	str	r3, [r7, #24]
  return result;
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	fab3 f383 	clz	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	431a      	orrs	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	609a      	str	r2, [r3, #8]
}
 800205c:	bf00      	nop
 800205e:	3724      	adds	r7, #36	; 0x24
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_GPIO_SetPinPull>:
{
 8002068:	b480      	push	{r7}
 800206a:	b089      	sub	sp, #36	; 0x24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa93 f3a3 	rbit	r3, r3
 8002082:	613b      	str	r3, [r7, #16]
  return result;
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	fab3 f383 	clz	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	2103      	movs	r1, #3
 8002090:	fa01 f303 	lsl.w	r3, r1, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	401a      	ands	r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	fa93 f3a3 	rbit	r3, r3
 80020a2:	61bb      	str	r3, [r7, #24]
  return result;
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	fab3 f383 	clz	r3, r3
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	fa01 f303 	lsl.w	r3, r1, r3
 80020b4:	431a      	orrs	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	60da      	str	r2, [r3, #12]
}
 80020ba:	bf00      	nop
 80020bc:	3724      	adds	r7, #36	; 0x24
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <LL_GPIO_SetAFPin_0_7>:
{
 80020c6:	b480      	push	{r7}
 80020c8:	b089      	sub	sp, #36	; 0x24
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a1a      	ldr	r2, [r3, #32]
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	fa93 f3a3 	rbit	r3, r3
 80020e0:	613b      	str	r3, [r7, #16]
  return result;
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	fab3 f383 	clz	r3, r3
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	210f      	movs	r1, #15
 80020ee:	fa01 f303 	lsl.w	r3, r1, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	401a      	ands	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	fa93 f3a3 	rbit	r3, r3
 8002100:	61bb      	str	r3, [r7, #24]
  return result;
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	fab3 f383 	clz	r3, r3
 8002108:	b2db      	uxtb	r3, r3
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	fa01 f303 	lsl.w	r3, r1, r3
 8002112:	431a      	orrs	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	621a      	str	r2, [r3, #32]
}
 8002118:	bf00      	nop
 800211a:	3724      	adds	r7, #36	; 0x24
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_GPIO_SetAFPin_8_15>:
{
 8002124:	b480      	push	{r7}
 8002126:	b089      	sub	sp, #36	; 0x24
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	0a1b      	lsrs	r3, r3, #8
 8002138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	fa93 f3a3 	rbit	r3, r3
 8002140:	613b      	str	r3, [r7, #16]
  return result;
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	fab3 f383 	clz	r3, r3
 8002148:	b2db      	uxtb	r3, r3
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	210f      	movs	r1, #15
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	401a      	ands	r2, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	0a1b      	lsrs	r3, r3, #8
 800215a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	61bb      	str	r3, [r7, #24]
  return result;
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	fa01 f303 	lsl.w	r3, r1, r3
 8002174:	431a      	orrs	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	625a      	str	r2, [r3, #36]	; 0x24
}
 800217a:	bf00      	nop
 800217c:	3724      	adds	r7, #36	; 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b088      	sub	sp, #32
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002194:	2300      	movs	r3, #0
 8002196:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	fa93 f3a3 	rbit	r3, r3
 80021a4:	613b      	str	r3, [r7, #16]
  return result;
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	fab3 f383 	clz	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80021b0:	e050      	b.n	8002254 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	2101      	movs	r1, #1
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	fa01 f303 	lsl.w	r3, r1, r3
 80021be:	4013      	ands	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d042      	beq.n	800224e <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d003      	beq.n	80021d8 <LL_GPIO_Init+0x52>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d10d      	bne.n	80021f4 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	461a      	mov	r2, r3
 80021de:	69b9      	ldr	r1, [r7, #24]
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff ff12 	bl	800200a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	461a      	mov	r2, r3
 80021ec:	69b9      	ldr	r1, [r7, #24]
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff fef3 	bl	8001fda <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	461a      	mov	r2, r3
 80021fa:	69b9      	ldr	r1, [r7, #24]
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff ff33 	bl	8002068 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d11a      	bne.n	8002240 <LL_GPIO_Init+0xba>
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	fa93 f3a3 	rbit	r3, r3
 8002214:	60bb      	str	r3, [r7, #8]
  return result;
 8002216:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002218:	fab3 f383 	clz	r3, r3
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b07      	cmp	r3, #7
 8002220:	d807      	bhi.n	8002232 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	461a      	mov	r2, r3
 8002228:	69b9      	ldr	r1, [r7, #24]
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff ff4b 	bl	80020c6 <LL_GPIO_SetAFPin_0_7>
 8002230:	e006      	b.n	8002240 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	461a      	mov	r2, r3
 8002238:	69b9      	ldr	r1, [r7, #24]
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff ff72 	bl	8002124 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	461a      	mov	r2, r3
 8002246:	69b9      	ldr	r1, [r7, #24]
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff fe97 	bl	8001f7c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	3301      	adds	r3, #1
 8002252:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	fa22 f303 	lsr.w	r3, r2, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1a7      	bne.n	80021b2 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3720      	adds	r7, #32
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <LL_RCC_GetSysClkSource>:
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002270:	4b04      	ldr	r3, [pc, #16]	; (8002284 <LL_RCC_GetSysClkSource+0x18>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 030c 	and.w	r3, r3, #12
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40023800 	.word	0x40023800

08002288 <LL_RCC_GetAHBPrescaler>:
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <LL_RCC_GetAHBPrescaler+0x18>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40023800 	.word	0x40023800

080022a4 <LL_RCC_GetAPB1Prescaler>:
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80022a8:	4b04      	ldr	r3, [pc, #16]	; (80022bc <LL_RCC_GetAPB1Prescaler+0x18>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800

080022c0 <LL_RCC_GetAPB2Prescaler>:
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <LL_RCC_GetAPB2Prescaler+0x18>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800

080022dc <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80022e0:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <LL_RCC_PLL_GetMainSource+0x18>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800

080022f8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <LL_RCC_PLL_GetN+0x18>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	099b      	lsrs	r3, r3, #6
 8002302:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	40023800 	.word	0x40023800

08002314 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002318:	4b04      	ldr	r3, [pc, #16]	; (800232c <LL_RCC_PLL_GetP+0x18>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002320:	4618      	mov	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800

08002330 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <LL_RCC_PLL_GetDivider+0x18>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800233c:	4618      	mov	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40023800 	.word	0x40023800

0800234c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002354:	f000 f820 	bl	8002398 <RCC_GetSystemClockFreq>
 8002358:	4602      	mov	r2, r0
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f000 f840 	bl	80023e8 <RCC_GetHCLKClockFreq>
 8002368:	4602      	mov	r2, r0
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	4618      	mov	r0, r3
 8002374:	f000 f84e 	bl	8002414 <RCC_GetPCLK1ClockFreq>
 8002378:	4602      	mov	r2, r0
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	4618      	mov	r0, r3
 8002384:	f000 f85a 	bl	800243c <RCC_GetPCLK2ClockFreq>
 8002388:	4602      	mov	r2, r0
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	60da      	str	r2, [r3, #12]
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80023a2:	f7ff ff63 	bl	800226c <LL_RCC_GetSysClkSource>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d00c      	beq.n	80023c6 <RCC_GetSystemClockFreq+0x2e>
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d80f      	bhi.n	80023d0 <RCC_GetSystemClockFreq+0x38>
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <RCC_GetSystemClockFreq+0x22>
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d003      	beq.n	80023c0 <RCC_GetSystemClockFreq+0x28>
 80023b8:	e00a      	b.n	80023d0 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <RCC_GetSystemClockFreq+0x48>)
 80023bc:	607b      	str	r3, [r7, #4]
      break;
 80023be:	e00a      	b.n	80023d6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <RCC_GetSystemClockFreq+0x4c>)
 80023c2:	607b      	str	r3, [r7, #4]
      break;
 80023c4:	e007      	b.n	80023d6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80023c6:	2008      	movs	r0, #8
 80023c8:	f000 f84c 	bl	8002464 <RCC_PLL_GetFreqDomain_SYS>
 80023cc:	6078      	str	r0, [r7, #4]
      break;
 80023ce:	e002      	b.n	80023d6 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80023d0:	4b03      	ldr	r3, [pc, #12]	; (80023e0 <RCC_GetSystemClockFreq+0x48>)
 80023d2:	607b      	str	r3, [r7, #4]
      break;
 80023d4:	bf00      	nop
  }

  return frequency;
 80023d6:	687b      	ldr	r3, [r7, #4]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	00f42400 	.word	0x00f42400
 80023e4:	017d7840 	.word	0x017d7840

080023e8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80023f0:	f7ff ff4a 	bl	8002288 <LL_RCC_GetAHBPrescaler>
 80023f4:	4603      	mov	r3, r0
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	4a04      	ldr	r2, [pc, #16]	; (8002410 <RCC_GetHCLKClockFreq+0x28>)
 80023fe:	5cd3      	ldrb	r3, [r2, r3]
 8002400:	461a      	mov	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	40d3      	lsrs	r3, r2
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	08003d54 	.word	0x08003d54

08002414 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800241c:	f7ff ff42 	bl	80022a4 <LL_RCC_GetAPB1Prescaler>
 8002420:	4603      	mov	r3, r0
 8002422:	0a9b      	lsrs	r3, r3, #10
 8002424:	4a04      	ldr	r2, [pc, #16]	; (8002438 <RCC_GetPCLK1ClockFreq+0x24>)
 8002426:	5cd3      	ldrb	r3, [r2, r3]
 8002428:	461a      	mov	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	40d3      	lsrs	r3, r2
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	08003d64 	.word	0x08003d64

0800243c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002444:	f7ff ff3c 	bl	80022c0 <LL_RCC_GetAPB2Prescaler>
 8002448:	4603      	mov	r3, r0
 800244a:	0b5b      	lsrs	r3, r3, #13
 800244c:	4a04      	ldr	r2, [pc, #16]	; (8002460 <RCC_GetPCLK2ClockFreq+0x24>)
 800244e:	5cd3      	ldrb	r3, [r2, r3]
 8002450:	461a      	mov	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	40d3      	lsrs	r3, r2
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	08003d64 	.word	0x08003d64

08002464 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	2300      	movs	r3, #0
 8002476:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002478:	f7ff ff30 	bl	80022dc <LL_RCC_PLL_GetMainSource>
 800247c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d004      	beq.n	800248e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800248a:	d003      	beq.n	8002494 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800248c:	e005      	b.n	800249a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800248e:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002490:	617b      	str	r3, [r7, #20]
      break;
 8002492:	e005      	b.n	80024a0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002494:	4b11      	ldr	r3, [pc, #68]	; (80024dc <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002496:	617b      	str	r3, [r7, #20]
      break;
 8002498:	e002      	b.n	80024a0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800249a:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800249c:	617b      	str	r3, [r7, #20]
      break;
 800249e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d113      	bne.n	80024ce <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80024a6:	f7ff ff43 	bl	8002330 <LL_RCC_PLL_GetDivider>
 80024aa:	4602      	mov	r2, r0
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fbb3 f4f2 	udiv	r4, r3, r2
 80024b2:	f7ff ff21 	bl	80022f8 <LL_RCC_PLL_GetN>
 80024b6:	4603      	mov	r3, r0
 80024b8:	fb03 f404 	mul.w	r4, r3, r4
 80024bc:	f7ff ff2a 	bl	8002314 <LL_RCC_PLL_GetP>
 80024c0:	4603      	mov	r3, r0
 80024c2:	0c1b      	lsrs	r3, r3, #16
 80024c4:	3301      	adds	r3, #1
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fbb4 f3f3 	udiv	r3, r4, r3
 80024cc:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80024ce:	693b      	ldr	r3, [r7, #16]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd90      	pop	{r4, r7, pc}
 80024d8:	00f42400 	.word	0x00f42400
 80024dc:	017d7840 	.word	0x017d7840

080024e0 <LL_SPI_IsEnabled>:
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f0:	2b40      	cmp	r3, #64	; 0x40
 80024f2:	d101      	bne.n	80024f8 <LL_SPI_IsEnabled+0x18>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <LL_SPI_IsEnabled+0x1a>
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	b29b      	uxth	r3, r3
 8002514:	461a      	mov	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	611a      	str	r2, [r3, #16]
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff ffd3 	bl	80024e0 <LL_SPI_IsEnabled>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d139      	bne.n	80025b4 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002548:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	6811      	ldr	r1, [r2, #0]
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	6852      	ldr	r2, [r2, #4]
 8002554:	4311      	orrs	r1, r2
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	6892      	ldr	r2, [r2, #8]
 800255a:	4311      	orrs	r1, r2
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	68d2      	ldr	r2, [r2, #12]
 8002560:	4311      	orrs	r1, r2
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	6912      	ldr	r2, [r2, #16]
 8002566:	4311      	orrs	r1, r2
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	6952      	ldr	r2, [r2, #20]
 800256c:	4311      	orrs	r1, r2
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	6992      	ldr	r2, [r2, #24]
 8002572:	4311      	orrs	r1, r2
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	69d2      	ldr	r2, [r2, #28]
 8002578:	4311      	orrs	r1, r2
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	6a12      	ldr	r2, [r2, #32]
 800257e:	430a      	orrs	r2, r1
 8002580:	431a      	orrs	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f023 0204 	bic.w	r2, r3, #4
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	0c1b      	lsrs	r3, r3, #16
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025a2:	d105      	bne.n	80025b0 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	4619      	mov	r1, r3
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ffab 	bl	8002506 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80025b0:	2300      	movs	r3, #0
 80025b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	61da      	str	r2, [r3, #28]
  return status;
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <LL_TIM_SetPrescaler>:
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <LL_TIM_SetAutoReload>:
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <LL_TIM_SetRepetitionCounter>:
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <LL_TIM_OC_SetCompareCH1>:
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <LL_TIM_OC_SetCompareCH2>:
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	639a      	str	r2, [r3, #56]	; 0x38
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <LL_TIM_OC_SetCompareCH3>:
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <LL_TIM_OC_SetCompareCH4>:
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	f043 0201 	orr.w	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	615a      	str	r2, [r3, #20]
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a3d      	ldr	r2, [pc, #244]	; (80027b8 <LL_TIM_Init+0x108>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d013      	beq.n	80026f0 <LL_TIM_Init+0x40>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ce:	d00f      	beq.n	80026f0 <LL_TIM_Init+0x40>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a3a      	ldr	r2, [pc, #232]	; (80027bc <LL_TIM_Init+0x10c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d00b      	beq.n	80026f0 <LL_TIM_Init+0x40>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a39      	ldr	r2, [pc, #228]	; (80027c0 <LL_TIM_Init+0x110>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d007      	beq.n	80026f0 <LL_TIM_Init+0x40>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a38      	ldr	r2, [pc, #224]	; (80027c4 <LL_TIM_Init+0x114>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d003      	beq.n	80026f0 <LL_TIM_Init+0x40>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a37      	ldr	r2, [pc, #220]	; (80027c8 <LL_TIM_Init+0x118>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d106      	bne.n	80026fe <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a2d      	ldr	r2, [pc, #180]	; (80027b8 <LL_TIM_Init+0x108>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d02b      	beq.n	800275e <LL_TIM_Init+0xae>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800270c:	d027      	beq.n	800275e <LL_TIM_Init+0xae>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a2a      	ldr	r2, [pc, #168]	; (80027bc <LL_TIM_Init+0x10c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d023      	beq.n	800275e <LL_TIM_Init+0xae>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a29      	ldr	r2, [pc, #164]	; (80027c0 <LL_TIM_Init+0x110>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d01f      	beq.n	800275e <LL_TIM_Init+0xae>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a28      	ldr	r2, [pc, #160]	; (80027c4 <LL_TIM_Init+0x114>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d01b      	beq.n	800275e <LL_TIM_Init+0xae>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a27      	ldr	r2, [pc, #156]	; (80027c8 <LL_TIM_Init+0x118>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d017      	beq.n	800275e <LL_TIM_Init+0xae>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a26      	ldr	r2, [pc, #152]	; (80027cc <LL_TIM_Init+0x11c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d013      	beq.n	800275e <LL_TIM_Init+0xae>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a25      	ldr	r2, [pc, #148]	; (80027d0 <LL_TIM_Init+0x120>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00f      	beq.n	800275e <LL_TIM_Init+0xae>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a24      	ldr	r2, [pc, #144]	; (80027d4 <LL_TIM_Init+0x124>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d00b      	beq.n	800275e <LL_TIM_Init+0xae>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a23      	ldr	r2, [pc, #140]	; (80027d8 <LL_TIM_Init+0x128>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d007      	beq.n	800275e <LL_TIM_Init+0xae>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a22      	ldr	r2, [pc, #136]	; (80027dc <LL_TIM_Init+0x12c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d003      	beq.n	800275e <LL_TIM_Init+0xae>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a21      	ldr	r2, [pc, #132]	; (80027e0 <LL_TIM_Init+0x130>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d106      	bne.n	800276c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4313      	orrs	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	4619      	mov	r1, r3
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff ff34 	bl	80025e6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	4619      	mov	r1, r3
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7ff ff20 	bl	80025ca <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <LL_TIM_Init+0x108>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d003      	beq.n	800279a <LL_TIM_Init+0xea>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a0c      	ldr	r2, [pc, #48]	; (80027c8 <LL_TIM_Init+0x118>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d105      	bne.n	80027a6 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	4619      	mov	r1, r3
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7ff ff2e 	bl	8002602 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff ff71 	bl	800268e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40010000 	.word	0x40010000
 80027bc:	40000400 	.word	0x40000400
 80027c0:	40000800 	.word	0x40000800
 80027c4:	40000c00 	.word	0x40000c00
 80027c8:	40010400 	.word	0x40010400
 80027cc:	40014000 	.word	0x40014000
 80027d0:	40014400 	.word	0x40014400
 80027d4:	40014800 	.word	0x40014800
 80027d8:	40001800 	.word	0x40001800
 80027dc:	40001c00 	.word	0x40001c00
 80027e0:	40002000 	.word	0x40002000

080027e4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027fa:	d027      	beq.n	800284c <LL_TIM_OC_Init+0x68>
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002802:	d82a      	bhi.n	800285a <LL_TIM_OC_Init+0x76>
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800280a:	d018      	beq.n	800283e <LL_TIM_OC_Init+0x5a>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002812:	d822      	bhi.n	800285a <LL_TIM_OC_Init+0x76>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d003      	beq.n	8002822 <LL_TIM_OC_Init+0x3e>
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b10      	cmp	r3, #16
 800281e:	d007      	beq.n	8002830 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002820:	e01b      	b.n	800285a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 f867 	bl	80028f8 <OC1Config>
 800282a:	4603      	mov	r3, r0
 800282c:	75fb      	strb	r3, [r7, #23]
      break;
 800282e:	e015      	b.n	800285c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 f8cc 	bl	80029d0 <OC2Config>
 8002838:	4603      	mov	r3, r0
 800283a:	75fb      	strb	r3, [r7, #23]
      break;
 800283c:	e00e      	b.n	800285c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 f935 	bl	8002ab0 <OC3Config>
 8002846:	4603      	mov	r3, r0
 8002848:	75fb      	strb	r3, [r7, #23]
      break;
 800284a:	e007      	b.n	800285c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f99e 	bl	8002b90 <OC4Config>
 8002854:	4603      	mov	r3, r0
 8002856:	75fb      	strb	r3, [r7, #23]
      break;
 8002858:	e000      	b.n	800285c <LL_TIM_OC_Init+0x78>
      break;
 800285a:	bf00      	nop
  }

  return result;
 800285c:	7dfb      	ldrb	r3, [r7, #23]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8002866:	b480      	push	{r7}
 8002868:	b085      	sub	sp, #20
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	7b12      	ldrb	r2, [r2, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	4313      	orrs	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4313      	orrs	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	89d2      	ldrh	r2, [r2, #14]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	f023 0201 	bic.w	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f023 0303 	bic.w	r3, r3, #3
 8002926:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4313      	orrs	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f023 0202 	bic.w	r2, r3, #2
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f023 0201 	bic.w	r2, r3, #1
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a1c      	ldr	r2, [pc, #112]	; (80029c8 <OC1Config+0xd0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d003      	beq.n	8002962 <OC1Config+0x6a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a1b      	ldr	r2, [pc, #108]	; (80029cc <OC1Config+0xd4>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d11e      	bne.n	80029a0 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f023 0208 	bic.w	r2, r3, #8
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4313      	orrs	r3, r2
 8002970:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f023 0204 	bic.w	r2, r3, #4
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4313      	orrs	r3, r2
 8002980:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	4313      	orrs	r3, r2
 800298e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4619      	mov	r1, r3
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff fe33 	bl	800261e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40010000 	.word	0x40010000
 80029cc:	40010400 	.word	0x40010400

080029d0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	f023 0210 	bic.w	r2, r3, #16
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	021b      	lsls	r3, r3, #8
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f023 0220 	bic.w	r2, r3, #32
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f023 0210 	bic.w	r2, r3, #16
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a1d      	ldr	r2, [pc, #116]	; (8002aa8 <OC2Config+0xd8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d003      	beq.n	8002a40 <OC2Config+0x70>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a1c      	ldr	r2, [pc, #112]	; (8002aac <OC2Config+0xdc>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d11f      	bne.n	8002a80 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	019b      	lsls	r3, r3, #6
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	019b      	lsls	r3, r3, #6
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4619      	mov	r1, r3
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff fdd1 	bl	800263a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40010000 	.word	0x40010000
 8002aac:	40010400 	.word	0x40010400

08002ab0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f023 0303 	bic.w	r3, r3, #3
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	021b      	lsls	r3, r3, #8
 8002afa:	4313      	orrs	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a1d      	ldr	r2, [pc, #116]	; (8002b88 <OC3Config+0xd8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d003      	beq.n	8002b1e <OC3Config+0x6e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a1c      	ldr	r2, [pc, #112]	; (8002b8c <OC3Config+0xdc>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d11f      	bne.n	8002b5e <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	029b      	lsls	r3, r3, #10
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	029b      	lsls	r3, r3, #10
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	015b      	lsls	r3, r3, #5
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	4619      	mov	r1, r3
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff fd70 	bl	8002656 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40010000 	.word	0x40010000
 8002b8c:	40010400 	.word	0x40010400

08002b90 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	031b      	lsls	r3, r3, #12
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	031b      	lsls	r3, r3, #12
 8002bec:	4313      	orrs	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a11      	ldr	r2, [pc, #68]	; (8002c38 <OC4Config+0xa8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d003      	beq.n	8002c00 <OC4Config+0x70>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a10      	ldr	r2, [pc, #64]	; (8002c3c <OC4Config+0xac>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d107      	bne.n	8002c10 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	019b      	lsls	r3, r3, #6
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	4619      	mov	r1, r3
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff fd25 	bl	8002672 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40010000 	.word	0x40010000
 8002c3c:	40010400 	.word	0x40010400

08002c40 <LL_USART_IsEnabled>:
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c54:	bf0c      	ite	eq
 8002c56:	2301      	moveq	r3, #1
 8002c58:	2300      	movne	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <LL_USART_SetStopBitsLength>:
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	611a      	str	r2, [r3, #16]
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <LL_USART_SetHWFlowCtrl>:
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	615a      	str	r2, [r3, #20]
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <LL_USART_SetBaudRate>:
{
 8002cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cb8:	b09f      	sub	sp, #124	; 0x7c
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6778      	str	r0, [r7, #116]	; 0x74
 8002cbe:	6739      	str	r1, [r7, #112]	; 0x70
 8002cc0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cc2:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cca:	f040 80bc 	bne.w	8002e46 <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002cce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cd0:	461c      	mov	r4, r3
 8002cd2:	f04f 0500 	mov.w	r5, #0
 8002cd6:	4622      	mov	r2, r4
 8002cd8:	462b      	mov	r3, r5
 8002cda:	eb12 0a02 	adds.w	sl, r2, r2
 8002cde:	eb43 0b03 	adc.w	fp, r3, r3
 8002ce2:	4652      	mov	r2, sl
 8002ce4:	465b      	mov	r3, fp
 8002ce6:	1912      	adds	r2, r2, r4
 8002ce8:	eb45 0303 	adc.w	r3, r5, r3
 8002cec:	f04f 0000 	mov.w	r0, #0
 8002cf0:	f04f 0100 	mov.w	r1, #0
 8002cf4:	00d9      	lsls	r1, r3, #3
 8002cf6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cfa:	00d0      	lsls	r0, r2, #3
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	1911      	adds	r1, r2, r4
 8002d02:	6639      	str	r1, [r7, #96]	; 0x60
 8002d04:	416b      	adcs	r3, r5
 8002d06:	667b      	str	r3, [r7, #100]	; 0x64
 8002d08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	1891      	adds	r1, r2, r2
 8002d12:	6339      	str	r1, [r7, #48]	; 0x30
 8002d14:	415b      	adcs	r3, r3
 8002d16:	637b      	str	r3, [r7, #52]	; 0x34
 8002d18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d1c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002d20:	f7fd fa52 	bl	80001c8 <__aeabi_uldivmod>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4ba9      	ldr	r3, [pc, #676]	; (8002fd0 <LL_USART_SetBaudRate+0x31c>)
 8002d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	b29e      	uxth	r6, r3
 8002d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d38:	461c      	mov	r4, r3
 8002d3a:	f04f 0500 	mov.w	r5, #0
 8002d3e:	4622      	mov	r2, r4
 8002d40:	462b      	mov	r3, r5
 8002d42:	1891      	adds	r1, r2, r2
 8002d44:	62b9      	str	r1, [r7, #40]	; 0x28
 8002d46:	415b      	adcs	r3, r3
 8002d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d4e:	1912      	adds	r2, r2, r4
 8002d50:	eb45 0303 	adc.w	r3, r5, r3
 8002d54:	f04f 0000 	mov.w	r0, #0
 8002d58:	f04f 0100 	mov.w	r1, #0
 8002d5c:	00d9      	lsls	r1, r3, #3
 8002d5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d62:	00d0      	lsls	r0, r2, #3
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	1911      	adds	r1, r2, r4
 8002d6a:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d6c:	416b      	adcs	r3, r5
 8002d6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d72:	461a      	mov	r2, r3
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	1891      	adds	r1, r2, r2
 8002d7a:	6239      	str	r1, [r7, #32]
 8002d7c:	415b      	adcs	r3, r3
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d80:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d84:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002d88:	f7fd fa1e 	bl	80001c8 <__aeabi_uldivmod>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4b8f      	ldr	r3, [pc, #572]	; (8002fd0 <LL_USART_SetBaudRate+0x31c>)
 8002d92:	fba3 1302 	umull	r1, r3, r3, r2
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	2164      	movs	r1, #100	; 0x64
 8002d9a:	fb01 f303 	mul.w	r3, r1, r3
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	3332      	adds	r3, #50	; 0x32
 8002da4:	4a8a      	ldr	r2, [pc, #552]	; (8002fd0 <LL_USART_SetBaudRate+0x31c>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	4433      	add	r3, r6
 8002dba:	b29e      	uxth	r6, r3
 8002dbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f04f 0100 	mov.w	r1, #0
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	1894      	adds	r4, r2, r2
 8002dca:	61bc      	str	r4, [r7, #24]
 8002dcc:	415b      	adcs	r3, r3
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dd4:	1812      	adds	r2, r2, r0
 8002dd6:	eb41 0303 	adc.w	r3, r1, r3
 8002dda:	f04f 0400 	mov.w	r4, #0
 8002dde:	f04f 0500 	mov.w	r5, #0
 8002de2:	00dd      	lsls	r5, r3, #3
 8002de4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002de8:	00d4      	lsls	r4, r2, #3
 8002dea:	4622      	mov	r2, r4
 8002dec:	462b      	mov	r3, r5
 8002dee:	1814      	adds	r4, r2, r0
 8002df0:	653c      	str	r4, [r7, #80]	; 0x50
 8002df2:	414b      	adcs	r3, r1
 8002df4:	657b      	str	r3, [r7, #84]	; 0x54
 8002df6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002df8:	461a      	mov	r2, r3
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	1891      	adds	r1, r2, r2
 8002e00:	6139      	str	r1, [r7, #16]
 8002e02:	415b      	adcs	r3, r3
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e0a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002e0e:	f7fd f9db 	bl	80001c8 <__aeabi_uldivmod>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4b6e      	ldr	r3, [pc, #440]	; (8002fd0 <LL_USART_SetBaudRate+0x31c>)
 8002e18:	fba3 1302 	umull	r1, r3, r3, r2
 8002e1c:	095b      	lsrs	r3, r3, #5
 8002e1e:	2164      	movs	r1, #100	; 0x64
 8002e20:	fb01 f303 	mul.w	r3, r1, r3
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	3332      	adds	r3, #50	; 0x32
 8002e2a:	4a69      	ldr	r2, [pc, #420]	; (8002fd0 <LL_USART_SetBaudRate+0x31c>)
 8002e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e30:	095b      	lsrs	r3, r3, #5
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	4433      	add	r3, r6
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	461a      	mov	r2, r3
 8002e40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e42:	609a      	str	r2, [r3, #8]
}
 8002e44:	e0be      	b.n	8002fc4 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002e46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e48:	461c      	mov	r4, r3
 8002e4a:	f04f 0500 	mov.w	r5, #0
 8002e4e:	4622      	mov	r2, r4
 8002e50:	462b      	mov	r3, r5
 8002e52:	eb12 0802 	adds.w	r8, r2, r2
 8002e56:	eb43 0903 	adc.w	r9, r3, r3
 8002e5a:	4642      	mov	r2, r8
 8002e5c:	464b      	mov	r3, r9
 8002e5e:	1912      	adds	r2, r2, r4
 8002e60:	eb45 0303 	adc.w	r3, r5, r3
 8002e64:	f04f 0000 	mov.w	r0, #0
 8002e68:	f04f 0100 	mov.w	r1, #0
 8002e6c:	00d9      	lsls	r1, r3, #3
 8002e6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e72:	00d0      	lsls	r0, r2, #3
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	1911      	adds	r1, r2, r4
 8002e7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e7c:	416b      	adcs	r3, r5
 8002e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e82:	4618      	mov	r0, r3
 8002e84:	f04f 0100 	mov.w	r1, #0
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	008b      	lsls	r3, r1, #2
 8002e92:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e96:	0082      	lsls	r2, r0, #2
 8002e98:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002e9c:	f7fd f994 	bl	80001c8 <__aeabi_uldivmod>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4b4a      	ldr	r3, [pc, #296]	; (8002fd0 <LL_USART_SetBaudRate+0x31c>)
 8002ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	b29e      	uxth	r6, r3
 8002eb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f04f 0100 	mov.w	r1, #0
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	1894      	adds	r4, r2, r2
 8002ec0:	60bc      	str	r4, [r7, #8]
 8002ec2:	415b      	adcs	r3, r3
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eca:	1812      	adds	r2, r2, r0
 8002ecc:	eb41 0303 	adc.w	r3, r1, r3
 8002ed0:	f04f 0400 	mov.w	r4, #0
 8002ed4:	f04f 0500 	mov.w	r5, #0
 8002ed8:	00dd      	lsls	r5, r3, #3
 8002eda:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ede:	00d4      	lsls	r4, r2, #3
 8002ee0:	4622      	mov	r2, r4
 8002ee2:	462b      	mov	r3, r5
 8002ee4:	1814      	adds	r4, r2, r0
 8002ee6:	643c      	str	r4, [r7, #64]	; 0x40
 8002ee8:	414b      	adcs	r3, r1
 8002eea:	647b      	str	r3, [r7, #68]	; 0x44
 8002eec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f04f 0100 	mov.w	r1, #0
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	008b      	lsls	r3, r1, #2
 8002efe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f02:	0082      	lsls	r2, r0, #2
 8002f04:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002f08:	f7fd f95e 	bl	80001c8 <__aeabi_uldivmod>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4b2f      	ldr	r3, [pc, #188]	; (8002fd0 <LL_USART_SetBaudRate+0x31c>)
 8002f12:	fba3 1302 	umull	r1, r3, r3, r2
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	2164      	movs	r1, #100	; 0x64
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	3332      	adds	r3, #50	; 0x32
 8002f24:	4a2a      	ldr	r2, [pc, #168]	; (8002fd0 <LL_USART_SetBaudRate+0x31c>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	4433      	add	r3, r6
 8002f36:	b29e      	uxth	r6, r3
 8002f38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f04f 0100 	mov.w	r1, #0
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	1894      	adds	r4, r2, r2
 8002f46:	603c      	str	r4, [r7, #0]
 8002f48:	415b      	adcs	r3, r3
 8002f4a:	607b      	str	r3, [r7, #4]
 8002f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f50:	1812      	adds	r2, r2, r0
 8002f52:	eb41 0303 	adc.w	r3, r1, r3
 8002f56:	f04f 0400 	mov.w	r4, #0
 8002f5a:	f04f 0500 	mov.w	r5, #0
 8002f5e:	00dd      	lsls	r5, r3, #3
 8002f60:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f64:	00d4      	lsls	r4, r2, #3
 8002f66:	4622      	mov	r2, r4
 8002f68:	462b      	mov	r3, r5
 8002f6a:	1814      	adds	r4, r2, r0
 8002f6c:	63bc      	str	r4, [r7, #56]	; 0x38
 8002f6e:	414b      	adcs	r3, r1
 8002f70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f74:	4618      	mov	r0, r3
 8002f76:	f04f 0100 	mov.w	r1, #0
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	008b      	lsls	r3, r1, #2
 8002f84:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f88:	0082      	lsls	r2, r0, #2
 8002f8a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002f8e:	f7fd f91b 	bl	80001c8 <__aeabi_uldivmod>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <LL_USART_SetBaudRate+0x31c>)
 8002f98:	fba3 1302 	umull	r1, r3, r3, r2
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	2164      	movs	r1, #100	; 0x64
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	3332      	adds	r3, #50	; 0x32
 8002faa:	4a09      	ldr	r2, [pc, #36]	; (8002fd0 <LL_USART_SetBaudRate+0x31c>)
 8002fac:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb0:	095b      	lsrs	r3, r3, #5
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	f003 030f 	and.w	r3, r3, #15
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	4433      	add	r3, r6
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fc2:	609a      	str	r2, [r3, #8]
}
 8002fc4:	bf00      	nop
 8002fc6:	377c      	adds	r7, #124	; 0x7c
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fce:	bf00      	nop
 8002fd0:	51eb851f 	.word	0x51eb851f

08002fd4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7ff fe2a 	bl	8002c40 <LL_USART_IsEnabled>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d15e      	bne.n	80030b0 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002ffa:	f023 030c 	bic.w	r3, r3, #12
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	6851      	ldr	r1, [r2, #4]
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	68d2      	ldr	r2, [r2, #12]
 8003006:	4311      	orrs	r1, r2
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	6912      	ldr	r2, [r2, #16]
 800300c:	4311      	orrs	r1, r2
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	6992      	ldr	r2, [r2, #24]
 8003012:	430a      	orrs	r2, r1
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	4619      	mov	r1, r3
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff fe21 	bl	8002c68 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	4619      	mov	r1, r3
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7ff fe2e 	bl	8002c8e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003032:	f107 0308 	add.w	r3, r7, #8
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff f988 	bl	800234c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a1f      	ldr	r2, [pc, #124]	; (80030bc <LL_USART_Init+0xe8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d102      	bne.n	800304a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	61bb      	str	r3, [r7, #24]
 8003048:	e021      	b.n	800308e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a1c      	ldr	r2, [pc, #112]	; (80030c0 <LL_USART_Init+0xec>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d102      	bne.n	8003058 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	61bb      	str	r3, [r7, #24]
 8003056:	e01a      	b.n	800308e <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a1a      	ldr	r2, [pc, #104]	; (80030c4 <LL_USART_Init+0xf0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d102      	bne.n	8003066 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	61bb      	str	r3, [r7, #24]
 8003064:	e013      	b.n	800308e <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a17      	ldr	r2, [pc, #92]	; (80030c8 <LL_USART_Init+0xf4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d102      	bne.n	8003074 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	61bb      	str	r3, [r7, #24]
 8003072:	e00c      	b.n	800308e <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a15      	ldr	r2, [pc, #84]	; (80030cc <LL_USART_Init+0xf8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d102      	bne.n	8003082 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	61bb      	str	r3, [r7, #24]
 8003080:	e005      	b.n	800308e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a12      	ldr	r2, [pc, #72]	; (80030d0 <LL_USART_Init+0xfc>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d101      	bne.n	800308e <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00d      	beq.n	80030b0 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d009      	beq.n	80030b0 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800309c:	2300      	movs	r3, #0
 800309e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	699a      	ldr	r2, [r3, #24]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	69b9      	ldr	r1, [r7, #24]
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff fe02 	bl	8002cb4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80030b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3720      	adds	r7, #32
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40011000 	.word	0x40011000
 80030c0:	40004400 	.word	0x40004400
 80030c4:	40004800 	.word	0x40004800
 80030c8:	40011400 	.word	0x40011400
 80030cc:	40004c00 	.word	0x40004c00
 80030d0:	40005000 	.word	0x40005000

080030d4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e6:	4a07      	ldr	r2, [pc, #28]	; (8003104 <LL_InitTick+0x30>)
 80030e8:	3b01      	subs	r3, #1
 80030ea:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80030ec:	4b05      	ldr	r3, [pc, #20]	; (8003104 <LL_InitTick+0x30>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030f2:	4b04      	ldr	r3, [pc, #16]	; (8003104 <LL_InitTick+0x30>)
 80030f4:	2205      	movs	r2, #5
 80030f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	e000e010 	.word	0xe000e010

08003108 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003110:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7ff ffdd 	bl	80030d4 <LL_InitTick>
}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800312c:	4b0f      	ldr	r3, [pc, #60]	; (800316c <LL_mDelay+0x48>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003132:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313a:	d00c      	beq.n	8003156 <LL_mDelay+0x32>
  {
    Delay++;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3301      	adds	r3, #1
 8003140:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003142:	e008      	b.n	8003156 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003144:	4b09      	ldr	r3, [pc, #36]	; (800316c <LL_mDelay+0x48>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d002      	beq.n	8003156 <LL_mDelay+0x32>
    {
      Delay--;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3b01      	subs	r3, #1
 8003154:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1f3      	bne.n	8003144 <LL_mDelay+0x20>
    }
  }
}
 800315c:	bf00      	nop
 800315e:	bf00      	nop
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	e000e010 	.word	0xe000e010

08003170 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003178:	4a04      	ldr	r2, [pc, #16]	; (800318c <LL_SetSystemCoreClock+0x1c>)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6013      	str	r3, [r2, #0]
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	20000000 	.word	0x20000000

08003190 <__errno>:
 8003190:	4b01      	ldr	r3, [pc, #4]	; (8003198 <__errno+0x8>)
 8003192:	6818      	ldr	r0, [r3, #0]
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	20000004 	.word	0x20000004

0800319c <__libc_init_array>:
 800319c:	b570      	push	{r4, r5, r6, lr}
 800319e:	4d0d      	ldr	r5, [pc, #52]	; (80031d4 <__libc_init_array+0x38>)
 80031a0:	4c0d      	ldr	r4, [pc, #52]	; (80031d8 <__libc_init_array+0x3c>)
 80031a2:	1b64      	subs	r4, r4, r5
 80031a4:	10a4      	asrs	r4, r4, #2
 80031a6:	2600      	movs	r6, #0
 80031a8:	42a6      	cmp	r6, r4
 80031aa:	d109      	bne.n	80031c0 <__libc_init_array+0x24>
 80031ac:	4d0b      	ldr	r5, [pc, #44]	; (80031dc <__libc_init_array+0x40>)
 80031ae:	4c0c      	ldr	r4, [pc, #48]	; (80031e0 <__libc_init_array+0x44>)
 80031b0:	f000 fdbc 	bl	8003d2c <_init>
 80031b4:	1b64      	subs	r4, r4, r5
 80031b6:	10a4      	asrs	r4, r4, #2
 80031b8:	2600      	movs	r6, #0
 80031ba:	42a6      	cmp	r6, r4
 80031bc:	d105      	bne.n	80031ca <__libc_init_array+0x2e>
 80031be:	bd70      	pop	{r4, r5, r6, pc}
 80031c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c4:	4798      	blx	r3
 80031c6:	3601      	adds	r6, #1
 80031c8:	e7ee      	b.n	80031a8 <__libc_init_array+0xc>
 80031ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ce:	4798      	blx	r3
 80031d0:	3601      	adds	r6, #1
 80031d2:	e7f2      	b.n	80031ba <__libc_init_array+0x1e>
 80031d4:	08003df8 	.word	0x08003df8
 80031d8:	08003df8 	.word	0x08003df8
 80031dc:	08003df8 	.word	0x08003df8
 80031e0:	08003dfc 	.word	0x08003dfc

080031e4 <memset>:
 80031e4:	4402      	add	r2, r0
 80031e6:	4603      	mov	r3, r0
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d100      	bne.n	80031ee <memset+0xa>
 80031ec:	4770      	bx	lr
 80031ee:	f803 1b01 	strb.w	r1, [r3], #1
 80031f2:	e7f9      	b.n	80031e8 <memset+0x4>

080031f4 <_puts_r>:
 80031f4:	b570      	push	{r4, r5, r6, lr}
 80031f6:	460e      	mov	r6, r1
 80031f8:	4605      	mov	r5, r0
 80031fa:	b118      	cbz	r0, 8003204 <_puts_r+0x10>
 80031fc:	6983      	ldr	r3, [r0, #24]
 80031fe:	b90b      	cbnz	r3, 8003204 <_puts_r+0x10>
 8003200:	f000 fb16 	bl	8003830 <__sinit>
 8003204:	69ab      	ldr	r3, [r5, #24]
 8003206:	68ac      	ldr	r4, [r5, #8]
 8003208:	b913      	cbnz	r3, 8003210 <_puts_r+0x1c>
 800320a:	4628      	mov	r0, r5
 800320c:	f000 fb10 	bl	8003830 <__sinit>
 8003210:	4b2c      	ldr	r3, [pc, #176]	; (80032c4 <_puts_r+0xd0>)
 8003212:	429c      	cmp	r4, r3
 8003214:	d120      	bne.n	8003258 <_puts_r+0x64>
 8003216:	686c      	ldr	r4, [r5, #4]
 8003218:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800321a:	07db      	lsls	r3, r3, #31
 800321c:	d405      	bmi.n	800322a <_puts_r+0x36>
 800321e:	89a3      	ldrh	r3, [r4, #12]
 8003220:	0598      	lsls	r0, r3, #22
 8003222:	d402      	bmi.n	800322a <_puts_r+0x36>
 8003224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003226:	f000 fba1 	bl	800396c <__retarget_lock_acquire_recursive>
 800322a:	89a3      	ldrh	r3, [r4, #12]
 800322c:	0719      	lsls	r1, r3, #28
 800322e:	d51d      	bpl.n	800326c <_puts_r+0x78>
 8003230:	6923      	ldr	r3, [r4, #16]
 8003232:	b1db      	cbz	r3, 800326c <_puts_r+0x78>
 8003234:	3e01      	subs	r6, #1
 8003236:	68a3      	ldr	r3, [r4, #8]
 8003238:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800323c:	3b01      	subs	r3, #1
 800323e:	60a3      	str	r3, [r4, #8]
 8003240:	bb39      	cbnz	r1, 8003292 <_puts_r+0x9e>
 8003242:	2b00      	cmp	r3, #0
 8003244:	da38      	bge.n	80032b8 <_puts_r+0xc4>
 8003246:	4622      	mov	r2, r4
 8003248:	210a      	movs	r1, #10
 800324a:	4628      	mov	r0, r5
 800324c:	f000 f916 	bl	800347c <__swbuf_r>
 8003250:	3001      	adds	r0, #1
 8003252:	d011      	beq.n	8003278 <_puts_r+0x84>
 8003254:	250a      	movs	r5, #10
 8003256:	e011      	b.n	800327c <_puts_r+0x88>
 8003258:	4b1b      	ldr	r3, [pc, #108]	; (80032c8 <_puts_r+0xd4>)
 800325a:	429c      	cmp	r4, r3
 800325c:	d101      	bne.n	8003262 <_puts_r+0x6e>
 800325e:	68ac      	ldr	r4, [r5, #8]
 8003260:	e7da      	b.n	8003218 <_puts_r+0x24>
 8003262:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <_puts_r+0xd8>)
 8003264:	429c      	cmp	r4, r3
 8003266:	bf08      	it	eq
 8003268:	68ec      	ldreq	r4, [r5, #12]
 800326a:	e7d5      	b.n	8003218 <_puts_r+0x24>
 800326c:	4621      	mov	r1, r4
 800326e:	4628      	mov	r0, r5
 8003270:	f000 f956 	bl	8003520 <__swsetup_r>
 8003274:	2800      	cmp	r0, #0
 8003276:	d0dd      	beq.n	8003234 <_puts_r+0x40>
 8003278:	f04f 35ff 	mov.w	r5, #4294967295
 800327c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800327e:	07da      	lsls	r2, r3, #31
 8003280:	d405      	bmi.n	800328e <_puts_r+0x9a>
 8003282:	89a3      	ldrh	r3, [r4, #12]
 8003284:	059b      	lsls	r3, r3, #22
 8003286:	d402      	bmi.n	800328e <_puts_r+0x9a>
 8003288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800328a:	f000 fb70 	bl	800396e <__retarget_lock_release_recursive>
 800328e:	4628      	mov	r0, r5
 8003290:	bd70      	pop	{r4, r5, r6, pc}
 8003292:	2b00      	cmp	r3, #0
 8003294:	da04      	bge.n	80032a0 <_puts_r+0xac>
 8003296:	69a2      	ldr	r2, [r4, #24]
 8003298:	429a      	cmp	r2, r3
 800329a:	dc06      	bgt.n	80032aa <_puts_r+0xb6>
 800329c:	290a      	cmp	r1, #10
 800329e:	d004      	beq.n	80032aa <_puts_r+0xb6>
 80032a0:	6823      	ldr	r3, [r4, #0]
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	6022      	str	r2, [r4, #0]
 80032a6:	7019      	strb	r1, [r3, #0]
 80032a8:	e7c5      	b.n	8003236 <_puts_r+0x42>
 80032aa:	4622      	mov	r2, r4
 80032ac:	4628      	mov	r0, r5
 80032ae:	f000 f8e5 	bl	800347c <__swbuf_r>
 80032b2:	3001      	adds	r0, #1
 80032b4:	d1bf      	bne.n	8003236 <_puts_r+0x42>
 80032b6:	e7df      	b.n	8003278 <_puts_r+0x84>
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	250a      	movs	r5, #10
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	6022      	str	r2, [r4, #0]
 80032c0:	701d      	strb	r5, [r3, #0]
 80032c2:	e7db      	b.n	800327c <_puts_r+0x88>
 80032c4:	08003db0 	.word	0x08003db0
 80032c8:	08003dd0 	.word	0x08003dd0
 80032cc:	08003d90 	.word	0x08003d90

080032d0 <puts>:
 80032d0:	4b02      	ldr	r3, [pc, #8]	; (80032dc <puts+0xc>)
 80032d2:	4601      	mov	r1, r0
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	f7ff bf8d 	b.w	80031f4 <_puts_r>
 80032da:	bf00      	nop
 80032dc:	20000004 	.word	0x20000004

080032e0 <setbuf>:
 80032e0:	2900      	cmp	r1, #0
 80032e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032e6:	bf0c      	ite	eq
 80032e8:	2202      	moveq	r2, #2
 80032ea:	2200      	movne	r2, #0
 80032ec:	f000 b800 	b.w	80032f0 <setvbuf>

080032f0 <setvbuf>:
 80032f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80032f4:	461d      	mov	r5, r3
 80032f6:	4b5d      	ldr	r3, [pc, #372]	; (800346c <setvbuf+0x17c>)
 80032f8:	681f      	ldr	r7, [r3, #0]
 80032fa:	4604      	mov	r4, r0
 80032fc:	460e      	mov	r6, r1
 80032fe:	4690      	mov	r8, r2
 8003300:	b127      	cbz	r7, 800330c <setvbuf+0x1c>
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	b913      	cbnz	r3, 800330c <setvbuf+0x1c>
 8003306:	4638      	mov	r0, r7
 8003308:	f000 fa92 	bl	8003830 <__sinit>
 800330c:	4b58      	ldr	r3, [pc, #352]	; (8003470 <setvbuf+0x180>)
 800330e:	429c      	cmp	r4, r3
 8003310:	d167      	bne.n	80033e2 <setvbuf+0xf2>
 8003312:	687c      	ldr	r4, [r7, #4]
 8003314:	f1b8 0f02 	cmp.w	r8, #2
 8003318:	d006      	beq.n	8003328 <setvbuf+0x38>
 800331a:	f1b8 0f01 	cmp.w	r8, #1
 800331e:	f200 809f 	bhi.w	8003460 <setvbuf+0x170>
 8003322:	2d00      	cmp	r5, #0
 8003324:	f2c0 809c 	blt.w	8003460 <setvbuf+0x170>
 8003328:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800332a:	07db      	lsls	r3, r3, #31
 800332c:	d405      	bmi.n	800333a <setvbuf+0x4a>
 800332e:	89a3      	ldrh	r3, [r4, #12]
 8003330:	0598      	lsls	r0, r3, #22
 8003332:	d402      	bmi.n	800333a <setvbuf+0x4a>
 8003334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003336:	f000 fb19 	bl	800396c <__retarget_lock_acquire_recursive>
 800333a:	4621      	mov	r1, r4
 800333c:	4638      	mov	r0, r7
 800333e:	f000 f9e3 	bl	8003708 <_fflush_r>
 8003342:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003344:	b141      	cbz	r1, 8003358 <setvbuf+0x68>
 8003346:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800334a:	4299      	cmp	r1, r3
 800334c:	d002      	beq.n	8003354 <setvbuf+0x64>
 800334e:	4638      	mov	r0, r7
 8003350:	f000 fb7a 	bl	8003a48 <_free_r>
 8003354:	2300      	movs	r3, #0
 8003356:	6363      	str	r3, [r4, #52]	; 0x34
 8003358:	2300      	movs	r3, #0
 800335a:	61a3      	str	r3, [r4, #24]
 800335c:	6063      	str	r3, [r4, #4]
 800335e:	89a3      	ldrh	r3, [r4, #12]
 8003360:	0619      	lsls	r1, r3, #24
 8003362:	d503      	bpl.n	800336c <setvbuf+0x7c>
 8003364:	6921      	ldr	r1, [r4, #16]
 8003366:	4638      	mov	r0, r7
 8003368:	f000 fb6e 	bl	8003a48 <_free_r>
 800336c:	89a3      	ldrh	r3, [r4, #12]
 800336e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003372:	f023 0303 	bic.w	r3, r3, #3
 8003376:	f1b8 0f02 	cmp.w	r8, #2
 800337a:	81a3      	strh	r3, [r4, #12]
 800337c:	d06c      	beq.n	8003458 <setvbuf+0x168>
 800337e:	ab01      	add	r3, sp, #4
 8003380:	466a      	mov	r2, sp
 8003382:	4621      	mov	r1, r4
 8003384:	4638      	mov	r0, r7
 8003386:	f000 faf3 	bl	8003970 <__swhatbuf_r>
 800338a:	89a3      	ldrh	r3, [r4, #12]
 800338c:	4318      	orrs	r0, r3
 800338e:	81a0      	strh	r0, [r4, #12]
 8003390:	2d00      	cmp	r5, #0
 8003392:	d130      	bne.n	80033f6 <setvbuf+0x106>
 8003394:	9d00      	ldr	r5, [sp, #0]
 8003396:	4628      	mov	r0, r5
 8003398:	f000 fb4e 	bl	8003a38 <malloc>
 800339c:	4606      	mov	r6, r0
 800339e:	2800      	cmp	r0, #0
 80033a0:	d155      	bne.n	800344e <setvbuf+0x15e>
 80033a2:	f8dd 9000 	ldr.w	r9, [sp]
 80033a6:	45a9      	cmp	r9, r5
 80033a8:	d14a      	bne.n	8003440 <setvbuf+0x150>
 80033aa:	f04f 35ff 	mov.w	r5, #4294967295
 80033ae:	2200      	movs	r2, #0
 80033b0:	60a2      	str	r2, [r4, #8]
 80033b2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80033b6:	6022      	str	r2, [r4, #0]
 80033b8:	6122      	str	r2, [r4, #16]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033c0:	6162      	str	r2, [r4, #20]
 80033c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80033c4:	f043 0302 	orr.w	r3, r3, #2
 80033c8:	07d2      	lsls	r2, r2, #31
 80033ca:	81a3      	strh	r3, [r4, #12]
 80033cc:	d405      	bmi.n	80033da <setvbuf+0xea>
 80033ce:	f413 7f00 	tst.w	r3, #512	; 0x200
 80033d2:	d102      	bne.n	80033da <setvbuf+0xea>
 80033d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033d6:	f000 faca 	bl	800396e <__retarget_lock_release_recursive>
 80033da:	4628      	mov	r0, r5
 80033dc:	b003      	add	sp, #12
 80033de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033e2:	4b24      	ldr	r3, [pc, #144]	; (8003474 <setvbuf+0x184>)
 80033e4:	429c      	cmp	r4, r3
 80033e6:	d101      	bne.n	80033ec <setvbuf+0xfc>
 80033e8:	68bc      	ldr	r4, [r7, #8]
 80033ea:	e793      	b.n	8003314 <setvbuf+0x24>
 80033ec:	4b22      	ldr	r3, [pc, #136]	; (8003478 <setvbuf+0x188>)
 80033ee:	429c      	cmp	r4, r3
 80033f0:	bf08      	it	eq
 80033f2:	68fc      	ldreq	r4, [r7, #12]
 80033f4:	e78e      	b.n	8003314 <setvbuf+0x24>
 80033f6:	2e00      	cmp	r6, #0
 80033f8:	d0cd      	beq.n	8003396 <setvbuf+0xa6>
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	b913      	cbnz	r3, 8003404 <setvbuf+0x114>
 80033fe:	4638      	mov	r0, r7
 8003400:	f000 fa16 	bl	8003830 <__sinit>
 8003404:	f1b8 0f01 	cmp.w	r8, #1
 8003408:	bf08      	it	eq
 800340a:	89a3      	ldrheq	r3, [r4, #12]
 800340c:	6026      	str	r6, [r4, #0]
 800340e:	bf04      	itt	eq
 8003410:	f043 0301 	orreq.w	r3, r3, #1
 8003414:	81a3      	strheq	r3, [r4, #12]
 8003416:	89a2      	ldrh	r2, [r4, #12]
 8003418:	f012 0308 	ands.w	r3, r2, #8
 800341c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003420:	d01c      	beq.n	800345c <setvbuf+0x16c>
 8003422:	07d3      	lsls	r3, r2, #31
 8003424:	bf41      	itttt	mi
 8003426:	2300      	movmi	r3, #0
 8003428:	426d      	negmi	r5, r5
 800342a:	60a3      	strmi	r3, [r4, #8]
 800342c:	61a5      	strmi	r5, [r4, #24]
 800342e:	bf58      	it	pl
 8003430:	60a5      	strpl	r5, [r4, #8]
 8003432:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003434:	f015 0501 	ands.w	r5, r5, #1
 8003438:	d115      	bne.n	8003466 <setvbuf+0x176>
 800343a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800343e:	e7c8      	b.n	80033d2 <setvbuf+0xe2>
 8003440:	4648      	mov	r0, r9
 8003442:	f000 faf9 	bl	8003a38 <malloc>
 8003446:	4606      	mov	r6, r0
 8003448:	2800      	cmp	r0, #0
 800344a:	d0ae      	beq.n	80033aa <setvbuf+0xba>
 800344c:	464d      	mov	r5, r9
 800344e:	89a3      	ldrh	r3, [r4, #12]
 8003450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003454:	81a3      	strh	r3, [r4, #12]
 8003456:	e7d0      	b.n	80033fa <setvbuf+0x10a>
 8003458:	2500      	movs	r5, #0
 800345a:	e7a8      	b.n	80033ae <setvbuf+0xbe>
 800345c:	60a3      	str	r3, [r4, #8]
 800345e:	e7e8      	b.n	8003432 <setvbuf+0x142>
 8003460:	f04f 35ff 	mov.w	r5, #4294967295
 8003464:	e7b9      	b.n	80033da <setvbuf+0xea>
 8003466:	2500      	movs	r5, #0
 8003468:	e7b7      	b.n	80033da <setvbuf+0xea>
 800346a:	bf00      	nop
 800346c:	20000004 	.word	0x20000004
 8003470:	08003db0 	.word	0x08003db0
 8003474:	08003dd0 	.word	0x08003dd0
 8003478:	08003d90 	.word	0x08003d90

0800347c <__swbuf_r>:
 800347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347e:	460e      	mov	r6, r1
 8003480:	4614      	mov	r4, r2
 8003482:	4605      	mov	r5, r0
 8003484:	b118      	cbz	r0, 800348e <__swbuf_r+0x12>
 8003486:	6983      	ldr	r3, [r0, #24]
 8003488:	b90b      	cbnz	r3, 800348e <__swbuf_r+0x12>
 800348a:	f000 f9d1 	bl	8003830 <__sinit>
 800348e:	4b21      	ldr	r3, [pc, #132]	; (8003514 <__swbuf_r+0x98>)
 8003490:	429c      	cmp	r4, r3
 8003492:	d12b      	bne.n	80034ec <__swbuf_r+0x70>
 8003494:	686c      	ldr	r4, [r5, #4]
 8003496:	69a3      	ldr	r3, [r4, #24]
 8003498:	60a3      	str	r3, [r4, #8]
 800349a:	89a3      	ldrh	r3, [r4, #12]
 800349c:	071a      	lsls	r2, r3, #28
 800349e:	d52f      	bpl.n	8003500 <__swbuf_r+0x84>
 80034a0:	6923      	ldr	r3, [r4, #16]
 80034a2:	b36b      	cbz	r3, 8003500 <__swbuf_r+0x84>
 80034a4:	6923      	ldr	r3, [r4, #16]
 80034a6:	6820      	ldr	r0, [r4, #0]
 80034a8:	1ac0      	subs	r0, r0, r3
 80034aa:	6963      	ldr	r3, [r4, #20]
 80034ac:	b2f6      	uxtb	r6, r6
 80034ae:	4283      	cmp	r3, r0
 80034b0:	4637      	mov	r7, r6
 80034b2:	dc04      	bgt.n	80034be <__swbuf_r+0x42>
 80034b4:	4621      	mov	r1, r4
 80034b6:	4628      	mov	r0, r5
 80034b8:	f000 f926 	bl	8003708 <_fflush_r>
 80034bc:	bb30      	cbnz	r0, 800350c <__swbuf_r+0x90>
 80034be:	68a3      	ldr	r3, [r4, #8]
 80034c0:	3b01      	subs	r3, #1
 80034c2:	60a3      	str	r3, [r4, #8]
 80034c4:	6823      	ldr	r3, [r4, #0]
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	6022      	str	r2, [r4, #0]
 80034ca:	701e      	strb	r6, [r3, #0]
 80034cc:	6963      	ldr	r3, [r4, #20]
 80034ce:	3001      	adds	r0, #1
 80034d0:	4283      	cmp	r3, r0
 80034d2:	d004      	beq.n	80034de <__swbuf_r+0x62>
 80034d4:	89a3      	ldrh	r3, [r4, #12]
 80034d6:	07db      	lsls	r3, r3, #31
 80034d8:	d506      	bpl.n	80034e8 <__swbuf_r+0x6c>
 80034da:	2e0a      	cmp	r6, #10
 80034dc:	d104      	bne.n	80034e8 <__swbuf_r+0x6c>
 80034de:	4621      	mov	r1, r4
 80034e0:	4628      	mov	r0, r5
 80034e2:	f000 f911 	bl	8003708 <_fflush_r>
 80034e6:	b988      	cbnz	r0, 800350c <__swbuf_r+0x90>
 80034e8:	4638      	mov	r0, r7
 80034ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034ec:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <__swbuf_r+0x9c>)
 80034ee:	429c      	cmp	r4, r3
 80034f0:	d101      	bne.n	80034f6 <__swbuf_r+0x7a>
 80034f2:	68ac      	ldr	r4, [r5, #8]
 80034f4:	e7cf      	b.n	8003496 <__swbuf_r+0x1a>
 80034f6:	4b09      	ldr	r3, [pc, #36]	; (800351c <__swbuf_r+0xa0>)
 80034f8:	429c      	cmp	r4, r3
 80034fa:	bf08      	it	eq
 80034fc:	68ec      	ldreq	r4, [r5, #12]
 80034fe:	e7ca      	b.n	8003496 <__swbuf_r+0x1a>
 8003500:	4621      	mov	r1, r4
 8003502:	4628      	mov	r0, r5
 8003504:	f000 f80c 	bl	8003520 <__swsetup_r>
 8003508:	2800      	cmp	r0, #0
 800350a:	d0cb      	beq.n	80034a4 <__swbuf_r+0x28>
 800350c:	f04f 37ff 	mov.w	r7, #4294967295
 8003510:	e7ea      	b.n	80034e8 <__swbuf_r+0x6c>
 8003512:	bf00      	nop
 8003514:	08003db0 	.word	0x08003db0
 8003518:	08003dd0 	.word	0x08003dd0
 800351c:	08003d90 	.word	0x08003d90

08003520 <__swsetup_r>:
 8003520:	4b32      	ldr	r3, [pc, #200]	; (80035ec <__swsetup_r+0xcc>)
 8003522:	b570      	push	{r4, r5, r6, lr}
 8003524:	681d      	ldr	r5, [r3, #0]
 8003526:	4606      	mov	r6, r0
 8003528:	460c      	mov	r4, r1
 800352a:	b125      	cbz	r5, 8003536 <__swsetup_r+0x16>
 800352c:	69ab      	ldr	r3, [r5, #24]
 800352e:	b913      	cbnz	r3, 8003536 <__swsetup_r+0x16>
 8003530:	4628      	mov	r0, r5
 8003532:	f000 f97d 	bl	8003830 <__sinit>
 8003536:	4b2e      	ldr	r3, [pc, #184]	; (80035f0 <__swsetup_r+0xd0>)
 8003538:	429c      	cmp	r4, r3
 800353a:	d10f      	bne.n	800355c <__swsetup_r+0x3c>
 800353c:	686c      	ldr	r4, [r5, #4]
 800353e:	89a3      	ldrh	r3, [r4, #12]
 8003540:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003544:	0719      	lsls	r1, r3, #28
 8003546:	d42c      	bmi.n	80035a2 <__swsetup_r+0x82>
 8003548:	06dd      	lsls	r5, r3, #27
 800354a:	d411      	bmi.n	8003570 <__swsetup_r+0x50>
 800354c:	2309      	movs	r3, #9
 800354e:	6033      	str	r3, [r6, #0]
 8003550:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003554:	81a3      	strh	r3, [r4, #12]
 8003556:	f04f 30ff 	mov.w	r0, #4294967295
 800355a:	e03e      	b.n	80035da <__swsetup_r+0xba>
 800355c:	4b25      	ldr	r3, [pc, #148]	; (80035f4 <__swsetup_r+0xd4>)
 800355e:	429c      	cmp	r4, r3
 8003560:	d101      	bne.n	8003566 <__swsetup_r+0x46>
 8003562:	68ac      	ldr	r4, [r5, #8]
 8003564:	e7eb      	b.n	800353e <__swsetup_r+0x1e>
 8003566:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <__swsetup_r+0xd8>)
 8003568:	429c      	cmp	r4, r3
 800356a:	bf08      	it	eq
 800356c:	68ec      	ldreq	r4, [r5, #12]
 800356e:	e7e6      	b.n	800353e <__swsetup_r+0x1e>
 8003570:	0758      	lsls	r0, r3, #29
 8003572:	d512      	bpl.n	800359a <__swsetup_r+0x7a>
 8003574:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003576:	b141      	cbz	r1, 800358a <__swsetup_r+0x6a>
 8003578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800357c:	4299      	cmp	r1, r3
 800357e:	d002      	beq.n	8003586 <__swsetup_r+0x66>
 8003580:	4630      	mov	r0, r6
 8003582:	f000 fa61 	bl	8003a48 <_free_r>
 8003586:	2300      	movs	r3, #0
 8003588:	6363      	str	r3, [r4, #52]	; 0x34
 800358a:	89a3      	ldrh	r3, [r4, #12]
 800358c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003590:	81a3      	strh	r3, [r4, #12]
 8003592:	2300      	movs	r3, #0
 8003594:	6063      	str	r3, [r4, #4]
 8003596:	6923      	ldr	r3, [r4, #16]
 8003598:	6023      	str	r3, [r4, #0]
 800359a:	89a3      	ldrh	r3, [r4, #12]
 800359c:	f043 0308 	orr.w	r3, r3, #8
 80035a0:	81a3      	strh	r3, [r4, #12]
 80035a2:	6923      	ldr	r3, [r4, #16]
 80035a4:	b94b      	cbnz	r3, 80035ba <__swsetup_r+0x9a>
 80035a6:	89a3      	ldrh	r3, [r4, #12]
 80035a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80035ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b0:	d003      	beq.n	80035ba <__swsetup_r+0x9a>
 80035b2:	4621      	mov	r1, r4
 80035b4:	4630      	mov	r0, r6
 80035b6:	f000 f9ff 	bl	80039b8 <__smakebuf_r>
 80035ba:	89a0      	ldrh	r0, [r4, #12]
 80035bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80035c0:	f010 0301 	ands.w	r3, r0, #1
 80035c4:	d00a      	beq.n	80035dc <__swsetup_r+0xbc>
 80035c6:	2300      	movs	r3, #0
 80035c8:	60a3      	str	r3, [r4, #8]
 80035ca:	6963      	ldr	r3, [r4, #20]
 80035cc:	425b      	negs	r3, r3
 80035ce:	61a3      	str	r3, [r4, #24]
 80035d0:	6923      	ldr	r3, [r4, #16]
 80035d2:	b943      	cbnz	r3, 80035e6 <__swsetup_r+0xc6>
 80035d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80035d8:	d1ba      	bne.n	8003550 <__swsetup_r+0x30>
 80035da:	bd70      	pop	{r4, r5, r6, pc}
 80035dc:	0781      	lsls	r1, r0, #30
 80035de:	bf58      	it	pl
 80035e0:	6963      	ldrpl	r3, [r4, #20]
 80035e2:	60a3      	str	r3, [r4, #8]
 80035e4:	e7f4      	b.n	80035d0 <__swsetup_r+0xb0>
 80035e6:	2000      	movs	r0, #0
 80035e8:	e7f7      	b.n	80035da <__swsetup_r+0xba>
 80035ea:	bf00      	nop
 80035ec:	20000004 	.word	0x20000004
 80035f0:	08003db0 	.word	0x08003db0
 80035f4:	08003dd0 	.word	0x08003dd0
 80035f8:	08003d90 	.word	0x08003d90

080035fc <__sflush_r>:
 80035fc:	898a      	ldrh	r2, [r1, #12]
 80035fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003602:	4605      	mov	r5, r0
 8003604:	0710      	lsls	r0, r2, #28
 8003606:	460c      	mov	r4, r1
 8003608:	d458      	bmi.n	80036bc <__sflush_r+0xc0>
 800360a:	684b      	ldr	r3, [r1, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	dc05      	bgt.n	800361c <__sflush_r+0x20>
 8003610:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003612:	2b00      	cmp	r3, #0
 8003614:	dc02      	bgt.n	800361c <__sflush_r+0x20>
 8003616:	2000      	movs	r0, #0
 8003618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800361c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800361e:	2e00      	cmp	r6, #0
 8003620:	d0f9      	beq.n	8003616 <__sflush_r+0x1a>
 8003622:	2300      	movs	r3, #0
 8003624:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003628:	682f      	ldr	r7, [r5, #0]
 800362a:	602b      	str	r3, [r5, #0]
 800362c:	d032      	beq.n	8003694 <__sflush_r+0x98>
 800362e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003630:	89a3      	ldrh	r3, [r4, #12]
 8003632:	075a      	lsls	r2, r3, #29
 8003634:	d505      	bpl.n	8003642 <__sflush_r+0x46>
 8003636:	6863      	ldr	r3, [r4, #4]
 8003638:	1ac0      	subs	r0, r0, r3
 800363a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800363c:	b10b      	cbz	r3, 8003642 <__sflush_r+0x46>
 800363e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003640:	1ac0      	subs	r0, r0, r3
 8003642:	2300      	movs	r3, #0
 8003644:	4602      	mov	r2, r0
 8003646:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003648:	6a21      	ldr	r1, [r4, #32]
 800364a:	4628      	mov	r0, r5
 800364c:	47b0      	blx	r6
 800364e:	1c43      	adds	r3, r0, #1
 8003650:	89a3      	ldrh	r3, [r4, #12]
 8003652:	d106      	bne.n	8003662 <__sflush_r+0x66>
 8003654:	6829      	ldr	r1, [r5, #0]
 8003656:	291d      	cmp	r1, #29
 8003658:	d82c      	bhi.n	80036b4 <__sflush_r+0xb8>
 800365a:	4a2a      	ldr	r2, [pc, #168]	; (8003704 <__sflush_r+0x108>)
 800365c:	40ca      	lsrs	r2, r1
 800365e:	07d6      	lsls	r6, r2, #31
 8003660:	d528      	bpl.n	80036b4 <__sflush_r+0xb8>
 8003662:	2200      	movs	r2, #0
 8003664:	6062      	str	r2, [r4, #4]
 8003666:	04d9      	lsls	r1, r3, #19
 8003668:	6922      	ldr	r2, [r4, #16]
 800366a:	6022      	str	r2, [r4, #0]
 800366c:	d504      	bpl.n	8003678 <__sflush_r+0x7c>
 800366e:	1c42      	adds	r2, r0, #1
 8003670:	d101      	bne.n	8003676 <__sflush_r+0x7a>
 8003672:	682b      	ldr	r3, [r5, #0]
 8003674:	b903      	cbnz	r3, 8003678 <__sflush_r+0x7c>
 8003676:	6560      	str	r0, [r4, #84]	; 0x54
 8003678:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800367a:	602f      	str	r7, [r5, #0]
 800367c:	2900      	cmp	r1, #0
 800367e:	d0ca      	beq.n	8003616 <__sflush_r+0x1a>
 8003680:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003684:	4299      	cmp	r1, r3
 8003686:	d002      	beq.n	800368e <__sflush_r+0x92>
 8003688:	4628      	mov	r0, r5
 800368a:	f000 f9dd 	bl	8003a48 <_free_r>
 800368e:	2000      	movs	r0, #0
 8003690:	6360      	str	r0, [r4, #52]	; 0x34
 8003692:	e7c1      	b.n	8003618 <__sflush_r+0x1c>
 8003694:	6a21      	ldr	r1, [r4, #32]
 8003696:	2301      	movs	r3, #1
 8003698:	4628      	mov	r0, r5
 800369a:	47b0      	blx	r6
 800369c:	1c41      	adds	r1, r0, #1
 800369e:	d1c7      	bne.n	8003630 <__sflush_r+0x34>
 80036a0:	682b      	ldr	r3, [r5, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0c4      	beq.n	8003630 <__sflush_r+0x34>
 80036a6:	2b1d      	cmp	r3, #29
 80036a8:	d001      	beq.n	80036ae <__sflush_r+0xb2>
 80036aa:	2b16      	cmp	r3, #22
 80036ac:	d101      	bne.n	80036b2 <__sflush_r+0xb6>
 80036ae:	602f      	str	r7, [r5, #0]
 80036b0:	e7b1      	b.n	8003616 <__sflush_r+0x1a>
 80036b2:	89a3      	ldrh	r3, [r4, #12]
 80036b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036b8:	81a3      	strh	r3, [r4, #12]
 80036ba:	e7ad      	b.n	8003618 <__sflush_r+0x1c>
 80036bc:	690f      	ldr	r7, [r1, #16]
 80036be:	2f00      	cmp	r7, #0
 80036c0:	d0a9      	beq.n	8003616 <__sflush_r+0x1a>
 80036c2:	0793      	lsls	r3, r2, #30
 80036c4:	680e      	ldr	r6, [r1, #0]
 80036c6:	bf08      	it	eq
 80036c8:	694b      	ldreq	r3, [r1, #20]
 80036ca:	600f      	str	r7, [r1, #0]
 80036cc:	bf18      	it	ne
 80036ce:	2300      	movne	r3, #0
 80036d0:	eba6 0807 	sub.w	r8, r6, r7
 80036d4:	608b      	str	r3, [r1, #8]
 80036d6:	f1b8 0f00 	cmp.w	r8, #0
 80036da:	dd9c      	ble.n	8003616 <__sflush_r+0x1a>
 80036dc:	6a21      	ldr	r1, [r4, #32]
 80036de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80036e0:	4643      	mov	r3, r8
 80036e2:	463a      	mov	r2, r7
 80036e4:	4628      	mov	r0, r5
 80036e6:	47b0      	blx	r6
 80036e8:	2800      	cmp	r0, #0
 80036ea:	dc06      	bgt.n	80036fa <__sflush_r+0xfe>
 80036ec:	89a3      	ldrh	r3, [r4, #12]
 80036ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036f2:	81a3      	strh	r3, [r4, #12]
 80036f4:	f04f 30ff 	mov.w	r0, #4294967295
 80036f8:	e78e      	b.n	8003618 <__sflush_r+0x1c>
 80036fa:	4407      	add	r7, r0
 80036fc:	eba8 0800 	sub.w	r8, r8, r0
 8003700:	e7e9      	b.n	80036d6 <__sflush_r+0xda>
 8003702:	bf00      	nop
 8003704:	20400001 	.word	0x20400001

08003708 <_fflush_r>:
 8003708:	b538      	push	{r3, r4, r5, lr}
 800370a:	690b      	ldr	r3, [r1, #16]
 800370c:	4605      	mov	r5, r0
 800370e:	460c      	mov	r4, r1
 8003710:	b913      	cbnz	r3, 8003718 <_fflush_r+0x10>
 8003712:	2500      	movs	r5, #0
 8003714:	4628      	mov	r0, r5
 8003716:	bd38      	pop	{r3, r4, r5, pc}
 8003718:	b118      	cbz	r0, 8003722 <_fflush_r+0x1a>
 800371a:	6983      	ldr	r3, [r0, #24]
 800371c:	b90b      	cbnz	r3, 8003722 <_fflush_r+0x1a>
 800371e:	f000 f887 	bl	8003830 <__sinit>
 8003722:	4b14      	ldr	r3, [pc, #80]	; (8003774 <_fflush_r+0x6c>)
 8003724:	429c      	cmp	r4, r3
 8003726:	d11b      	bne.n	8003760 <_fflush_r+0x58>
 8003728:	686c      	ldr	r4, [r5, #4]
 800372a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0ef      	beq.n	8003712 <_fflush_r+0xa>
 8003732:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003734:	07d0      	lsls	r0, r2, #31
 8003736:	d404      	bmi.n	8003742 <_fflush_r+0x3a>
 8003738:	0599      	lsls	r1, r3, #22
 800373a:	d402      	bmi.n	8003742 <_fflush_r+0x3a>
 800373c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800373e:	f000 f915 	bl	800396c <__retarget_lock_acquire_recursive>
 8003742:	4628      	mov	r0, r5
 8003744:	4621      	mov	r1, r4
 8003746:	f7ff ff59 	bl	80035fc <__sflush_r>
 800374a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800374c:	07da      	lsls	r2, r3, #31
 800374e:	4605      	mov	r5, r0
 8003750:	d4e0      	bmi.n	8003714 <_fflush_r+0xc>
 8003752:	89a3      	ldrh	r3, [r4, #12]
 8003754:	059b      	lsls	r3, r3, #22
 8003756:	d4dd      	bmi.n	8003714 <_fflush_r+0xc>
 8003758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800375a:	f000 f908 	bl	800396e <__retarget_lock_release_recursive>
 800375e:	e7d9      	b.n	8003714 <_fflush_r+0xc>
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <_fflush_r+0x70>)
 8003762:	429c      	cmp	r4, r3
 8003764:	d101      	bne.n	800376a <_fflush_r+0x62>
 8003766:	68ac      	ldr	r4, [r5, #8]
 8003768:	e7df      	b.n	800372a <_fflush_r+0x22>
 800376a:	4b04      	ldr	r3, [pc, #16]	; (800377c <_fflush_r+0x74>)
 800376c:	429c      	cmp	r4, r3
 800376e:	bf08      	it	eq
 8003770:	68ec      	ldreq	r4, [r5, #12]
 8003772:	e7da      	b.n	800372a <_fflush_r+0x22>
 8003774:	08003db0 	.word	0x08003db0
 8003778:	08003dd0 	.word	0x08003dd0
 800377c:	08003d90 	.word	0x08003d90

08003780 <std>:
 8003780:	2300      	movs	r3, #0
 8003782:	b510      	push	{r4, lr}
 8003784:	4604      	mov	r4, r0
 8003786:	e9c0 3300 	strd	r3, r3, [r0]
 800378a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800378e:	6083      	str	r3, [r0, #8]
 8003790:	8181      	strh	r1, [r0, #12]
 8003792:	6643      	str	r3, [r0, #100]	; 0x64
 8003794:	81c2      	strh	r2, [r0, #14]
 8003796:	6183      	str	r3, [r0, #24]
 8003798:	4619      	mov	r1, r3
 800379a:	2208      	movs	r2, #8
 800379c:	305c      	adds	r0, #92	; 0x5c
 800379e:	f7ff fd21 	bl	80031e4 <memset>
 80037a2:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <std+0x38>)
 80037a4:	6263      	str	r3, [r4, #36]	; 0x24
 80037a6:	4b05      	ldr	r3, [pc, #20]	; (80037bc <std+0x3c>)
 80037a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80037aa:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <std+0x40>)
 80037ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80037ae:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <std+0x44>)
 80037b0:	6224      	str	r4, [r4, #32]
 80037b2:	6323      	str	r3, [r4, #48]	; 0x30
 80037b4:	bd10      	pop	{r4, pc}
 80037b6:	bf00      	nop
 80037b8:	08003bbd 	.word	0x08003bbd
 80037bc:	08003bdf 	.word	0x08003bdf
 80037c0:	08003c17 	.word	0x08003c17
 80037c4:	08003c3b 	.word	0x08003c3b

080037c8 <_cleanup_r>:
 80037c8:	4901      	ldr	r1, [pc, #4]	; (80037d0 <_cleanup_r+0x8>)
 80037ca:	f000 b8af 	b.w	800392c <_fwalk_reent>
 80037ce:	bf00      	nop
 80037d0:	08003709 	.word	0x08003709

080037d4 <__sfmoreglue>:
 80037d4:	b570      	push	{r4, r5, r6, lr}
 80037d6:	1e4a      	subs	r2, r1, #1
 80037d8:	2568      	movs	r5, #104	; 0x68
 80037da:	4355      	muls	r5, r2
 80037dc:	460e      	mov	r6, r1
 80037de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80037e2:	f000 f981 	bl	8003ae8 <_malloc_r>
 80037e6:	4604      	mov	r4, r0
 80037e8:	b140      	cbz	r0, 80037fc <__sfmoreglue+0x28>
 80037ea:	2100      	movs	r1, #0
 80037ec:	e9c0 1600 	strd	r1, r6, [r0]
 80037f0:	300c      	adds	r0, #12
 80037f2:	60a0      	str	r0, [r4, #8]
 80037f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80037f8:	f7ff fcf4 	bl	80031e4 <memset>
 80037fc:	4620      	mov	r0, r4
 80037fe:	bd70      	pop	{r4, r5, r6, pc}

08003800 <__sfp_lock_acquire>:
 8003800:	4801      	ldr	r0, [pc, #4]	; (8003808 <__sfp_lock_acquire+0x8>)
 8003802:	f000 b8b3 	b.w	800396c <__retarget_lock_acquire_recursive>
 8003806:	bf00      	nop
 8003808:	20000098 	.word	0x20000098

0800380c <__sfp_lock_release>:
 800380c:	4801      	ldr	r0, [pc, #4]	; (8003814 <__sfp_lock_release+0x8>)
 800380e:	f000 b8ae 	b.w	800396e <__retarget_lock_release_recursive>
 8003812:	bf00      	nop
 8003814:	20000098 	.word	0x20000098

08003818 <__sinit_lock_acquire>:
 8003818:	4801      	ldr	r0, [pc, #4]	; (8003820 <__sinit_lock_acquire+0x8>)
 800381a:	f000 b8a7 	b.w	800396c <__retarget_lock_acquire_recursive>
 800381e:	bf00      	nop
 8003820:	20000093 	.word	0x20000093

08003824 <__sinit_lock_release>:
 8003824:	4801      	ldr	r0, [pc, #4]	; (800382c <__sinit_lock_release+0x8>)
 8003826:	f000 b8a2 	b.w	800396e <__retarget_lock_release_recursive>
 800382a:	bf00      	nop
 800382c:	20000093 	.word	0x20000093

08003830 <__sinit>:
 8003830:	b510      	push	{r4, lr}
 8003832:	4604      	mov	r4, r0
 8003834:	f7ff fff0 	bl	8003818 <__sinit_lock_acquire>
 8003838:	69a3      	ldr	r3, [r4, #24]
 800383a:	b11b      	cbz	r3, 8003844 <__sinit+0x14>
 800383c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003840:	f7ff bff0 	b.w	8003824 <__sinit_lock_release>
 8003844:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003848:	6523      	str	r3, [r4, #80]	; 0x50
 800384a:	4b13      	ldr	r3, [pc, #76]	; (8003898 <__sinit+0x68>)
 800384c:	4a13      	ldr	r2, [pc, #76]	; (800389c <__sinit+0x6c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	62a2      	str	r2, [r4, #40]	; 0x28
 8003852:	42a3      	cmp	r3, r4
 8003854:	bf04      	itt	eq
 8003856:	2301      	moveq	r3, #1
 8003858:	61a3      	streq	r3, [r4, #24]
 800385a:	4620      	mov	r0, r4
 800385c:	f000 f820 	bl	80038a0 <__sfp>
 8003860:	6060      	str	r0, [r4, #4]
 8003862:	4620      	mov	r0, r4
 8003864:	f000 f81c 	bl	80038a0 <__sfp>
 8003868:	60a0      	str	r0, [r4, #8]
 800386a:	4620      	mov	r0, r4
 800386c:	f000 f818 	bl	80038a0 <__sfp>
 8003870:	2200      	movs	r2, #0
 8003872:	60e0      	str	r0, [r4, #12]
 8003874:	2104      	movs	r1, #4
 8003876:	6860      	ldr	r0, [r4, #4]
 8003878:	f7ff ff82 	bl	8003780 <std>
 800387c:	68a0      	ldr	r0, [r4, #8]
 800387e:	2201      	movs	r2, #1
 8003880:	2109      	movs	r1, #9
 8003882:	f7ff ff7d 	bl	8003780 <std>
 8003886:	68e0      	ldr	r0, [r4, #12]
 8003888:	2202      	movs	r2, #2
 800388a:	2112      	movs	r1, #18
 800388c:	f7ff ff78 	bl	8003780 <std>
 8003890:	2301      	movs	r3, #1
 8003892:	61a3      	str	r3, [r4, #24]
 8003894:	e7d2      	b.n	800383c <__sinit+0xc>
 8003896:	bf00      	nop
 8003898:	08003d8c 	.word	0x08003d8c
 800389c:	080037c9 	.word	0x080037c9

080038a0 <__sfp>:
 80038a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a2:	4607      	mov	r7, r0
 80038a4:	f7ff ffac 	bl	8003800 <__sfp_lock_acquire>
 80038a8:	4b1e      	ldr	r3, [pc, #120]	; (8003924 <__sfp+0x84>)
 80038aa:	681e      	ldr	r6, [r3, #0]
 80038ac:	69b3      	ldr	r3, [r6, #24]
 80038ae:	b913      	cbnz	r3, 80038b6 <__sfp+0x16>
 80038b0:	4630      	mov	r0, r6
 80038b2:	f7ff ffbd 	bl	8003830 <__sinit>
 80038b6:	3648      	adds	r6, #72	; 0x48
 80038b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80038bc:	3b01      	subs	r3, #1
 80038be:	d503      	bpl.n	80038c8 <__sfp+0x28>
 80038c0:	6833      	ldr	r3, [r6, #0]
 80038c2:	b30b      	cbz	r3, 8003908 <__sfp+0x68>
 80038c4:	6836      	ldr	r6, [r6, #0]
 80038c6:	e7f7      	b.n	80038b8 <__sfp+0x18>
 80038c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80038cc:	b9d5      	cbnz	r5, 8003904 <__sfp+0x64>
 80038ce:	4b16      	ldr	r3, [pc, #88]	; (8003928 <__sfp+0x88>)
 80038d0:	60e3      	str	r3, [r4, #12]
 80038d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80038d6:	6665      	str	r5, [r4, #100]	; 0x64
 80038d8:	f000 f847 	bl	800396a <__retarget_lock_init_recursive>
 80038dc:	f7ff ff96 	bl	800380c <__sfp_lock_release>
 80038e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80038e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80038e8:	6025      	str	r5, [r4, #0]
 80038ea:	61a5      	str	r5, [r4, #24]
 80038ec:	2208      	movs	r2, #8
 80038ee:	4629      	mov	r1, r5
 80038f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80038f4:	f7ff fc76 	bl	80031e4 <memset>
 80038f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80038fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003900:	4620      	mov	r0, r4
 8003902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003904:	3468      	adds	r4, #104	; 0x68
 8003906:	e7d9      	b.n	80038bc <__sfp+0x1c>
 8003908:	2104      	movs	r1, #4
 800390a:	4638      	mov	r0, r7
 800390c:	f7ff ff62 	bl	80037d4 <__sfmoreglue>
 8003910:	4604      	mov	r4, r0
 8003912:	6030      	str	r0, [r6, #0]
 8003914:	2800      	cmp	r0, #0
 8003916:	d1d5      	bne.n	80038c4 <__sfp+0x24>
 8003918:	f7ff ff78 	bl	800380c <__sfp_lock_release>
 800391c:	230c      	movs	r3, #12
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	e7ee      	b.n	8003900 <__sfp+0x60>
 8003922:	bf00      	nop
 8003924:	08003d8c 	.word	0x08003d8c
 8003928:	ffff0001 	.word	0xffff0001

0800392c <_fwalk_reent>:
 800392c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003930:	4606      	mov	r6, r0
 8003932:	4688      	mov	r8, r1
 8003934:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003938:	2700      	movs	r7, #0
 800393a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800393e:	f1b9 0901 	subs.w	r9, r9, #1
 8003942:	d505      	bpl.n	8003950 <_fwalk_reent+0x24>
 8003944:	6824      	ldr	r4, [r4, #0]
 8003946:	2c00      	cmp	r4, #0
 8003948:	d1f7      	bne.n	800393a <_fwalk_reent+0xe>
 800394a:	4638      	mov	r0, r7
 800394c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003950:	89ab      	ldrh	r3, [r5, #12]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d907      	bls.n	8003966 <_fwalk_reent+0x3a>
 8003956:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800395a:	3301      	adds	r3, #1
 800395c:	d003      	beq.n	8003966 <_fwalk_reent+0x3a>
 800395e:	4629      	mov	r1, r5
 8003960:	4630      	mov	r0, r6
 8003962:	47c0      	blx	r8
 8003964:	4307      	orrs	r7, r0
 8003966:	3568      	adds	r5, #104	; 0x68
 8003968:	e7e9      	b.n	800393e <_fwalk_reent+0x12>

0800396a <__retarget_lock_init_recursive>:
 800396a:	4770      	bx	lr

0800396c <__retarget_lock_acquire_recursive>:
 800396c:	4770      	bx	lr

0800396e <__retarget_lock_release_recursive>:
 800396e:	4770      	bx	lr

08003970 <__swhatbuf_r>:
 8003970:	b570      	push	{r4, r5, r6, lr}
 8003972:	460e      	mov	r6, r1
 8003974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003978:	2900      	cmp	r1, #0
 800397a:	b096      	sub	sp, #88	; 0x58
 800397c:	4614      	mov	r4, r2
 800397e:	461d      	mov	r5, r3
 8003980:	da07      	bge.n	8003992 <__swhatbuf_r+0x22>
 8003982:	2300      	movs	r3, #0
 8003984:	602b      	str	r3, [r5, #0]
 8003986:	89b3      	ldrh	r3, [r6, #12]
 8003988:	061a      	lsls	r2, r3, #24
 800398a:	d410      	bmi.n	80039ae <__swhatbuf_r+0x3e>
 800398c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003990:	e00e      	b.n	80039b0 <__swhatbuf_r+0x40>
 8003992:	466a      	mov	r2, sp
 8003994:	f000 f978 	bl	8003c88 <_fstat_r>
 8003998:	2800      	cmp	r0, #0
 800399a:	dbf2      	blt.n	8003982 <__swhatbuf_r+0x12>
 800399c:	9a01      	ldr	r2, [sp, #4]
 800399e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80039a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80039a6:	425a      	negs	r2, r3
 80039a8:	415a      	adcs	r2, r3
 80039aa:	602a      	str	r2, [r5, #0]
 80039ac:	e7ee      	b.n	800398c <__swhatbuf_r+0x1c>
 80039ae:	2340      	movs	r3, #64	; 0x40
 80039b0:	2000      	movs	r0, #0
 80039b2:	6023      	str	r3, [r4, #0]
 80039b4:	b016      	add	sp, #88	; 0x58
 80039b6:	bd70      	pop	{r4, r5, r6, pc}

080039b8 <__smakebuf_r>:
 80039b8:	898b      	ldrh	r3, [r1, #12]
 80039ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039bc:	079d      	lsls	r5, r3, #30
 80039be:	4606      	mov	r6, r0
 80039c0:	460c      	mov	r4, r1
 80039c2:	d507      	bpl.n	80039d4 <__smakebuf_r+0x1c>
 80039c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80039c8:	6023      	str	r3, [r4, #0]
 80039ca:	6123      	str	r3, [r4, #16]
 80039cc:	2301      	movs	r3, #1
 80039ce:	6163      	str	r3, [r4, #20]
 80039d0:	b002      	add	sp, #8
 80039d2:	bd70      	pop	{r4, r5, r6, pc}
 80039d4:	ab01      	add	r3, sp, #4
 80039d6:	466a      	mov	r2, sp
 80039d8:	f7ff ffca 	bl	8003970 <__swhatbuf_r>
 80039dc:	9900      	ldr	r1, [sp, #0]
 80039de:	4605      	mov	r5, r0
 80039e0:	4630      	mov	r0, r6
 80039e2:	f000 f881 	bl	8003ae8 <_malloc_r>
 80039e6:	b948      	cbnz	r0, 80039fc <__smakebuf_r+0x44>
 80039e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039ec:	059a      	lsls	r2, r3, #22
 80039ee:	d4ef      	bmi.n	80039d0 <__smakebuf_r+0x18>
 80039f0:	f023 0303 	bic.w	r3, r3, #3
 80039f4:	f043 0302 	orr.w	r3, r3, #2
 80039f8:	81a3      	strh	r3, [r4, #12]
 80039fa:	e7e3      	b.n	80039c4 <__smakebuf_r+0xc>
 80039fc:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <__smakebuf_r+0x7c>)
 80039fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8003a00:	89a3      	ldrh	r3, [r4, #12]
 8003a02:	6020      	str	r0, [r4, #0]
 8003a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a08:	81a3      	strh	r3, [r4, #12]
 8003a0a:	9b00      	ldr	r3, [sp, #0]
 8003a0c:	6163      	str	r3, [r4, #20]
 8003a0e:	9b01      	ldr	r3, [sp, #4]
 8003a10:	6120      	str	r0, [r4, #16]
 8003a12:	b15b      	cbz	r3, 8003a2c <__smakebuf_r+0x74>
 8003a14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a18:	4630      	mov	r0, r6
 8003a1a:	f000 f947 	bl	8003cac <_isatty_r>
 8003a1e:	b128      	cbz	r0, 8003a2c <__smakebuf_r+0x74>
 8003a20:	89a3      	ldrh	r3, [r4, #12]
 8003a22:	f023 0303 	bic.w	r3, r3, #3
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	81a3      	strh	r3, [r4, #12]
 8003a2c:	89a0      	ldrh	r0, [r4, #12]
 8003a2e:	4305      	orrs	r5, r0
 8003a30:	81a5      	strh	r5, [r4, #12]
 8003a32:	e7cd      	b.n	80039d0 <__smakebuf_r+0x18>
 8003a34:	080037c9 	.word	0x080037c9

08003a38 <malloc>:
 8003a38:	4b02      	ldr	r3, [pc, #8]	; (8003a44 <malloc+0xc>)
 8003a3a:	4601      	mov	r1, r0
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	f000 b853 	b.w	8003ae8 <_malloc_r>
 8003a42:	bf00      	nop
 8003a44:	20000004 	.word	0x20000004

08003a48 <_free_r>:
 8003a48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a4a:	2900      	cmp	r1, #0
 8003a4c:	d048      	beq.n	8003ae0 <_free_r+0x98>
 8003a4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a52:	9001      	str	r0, [sp, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f1a1 0404 	sub.w	r4, r1, #4
 8003a5a:	bfb8      	it	lt
 8003a5c:	18e4      	addlt	r4, r4, r3
 8003a5e:	f000 f947 	bl	8003cf0 <__malloc_lock>
 8003a62:	4a20      	ldr	r2, [pc, #128]	; (8003ae4 <_free_r+0x9c>)
 8003a64:	9801      	ldr	r0, [sp, #4]
 8003a66:	6813      	ldr	r3, [r2, #0]
 8003a68:	4615      	mov	r5, r2
 8003a6a:	b933      	cbnz	r3, 8003a7a <_free_r+0x32>
 8003a6c:	6063      	str	r3, [r4, #4]
 8003a6e:	6014      	str	r4, [r2, #0]
 8003a70:	b003      	add	sp, #12
 8003a72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a76:	f000 b941 	b.w	8003cfc <__malloc_unlock>
 8003a7a:	42a3      	cmp	r3, r4
 8003a7c:	d90b      	bls.n	8003a96 <_free_r+0x4e>
 8003a7e:	6821      	ldr	r1, [r4, #0]
 8003a80:	1862      	adds	r2, r4, r1
 8003a82:	4293      	cmp	r3, r2
 8003a84:	bf04      	itt	eq
 8003a86:	681a      	ldreq	r2, [r3, #0]
 8003a88:	685b      	ldreq	r3, [r3, #4]
 8003a8a:	6063      	str	r3, [r4, #4]
 8003a8c:	bf04      	itt	eq
 8003a8e:	1852      	addeq	r2, r2, r1
 8003a90:	6022      	streq	r2, [r4, #0]
 8003a92:	602c      	str	r4, [r5, #0]
 8003a94:	e7ec      	b.n	8003a70 <_free_r+0x28>
 8003a96:	461a      	mov	r2, r3
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	b10b      	cbz	r3, 8003aa0 <_free_r+0x58>
 8003a9c:	42a3      	cmp	r3, r4
 8003a9e:	d9fa      	bls.n	8003a96 <_free_r+0x4e>
 8003aa0:	6811      	ldr	r1, [r2, #0]
 8003aa2:	1855      	adds	r5, r2, r1
 8003aa4:	42a5      	cmp	r5, r4
 8003aa6:	d10b      	bne.n	8003ac0 <_free_r+0x78>
 8003aa8:	6824      	ldr	r4, [r4, #0]
 8003aaa:	4421      	add	r1, r4
 8003aac:	1854      	adds	r4, r2, r1
 8003aae:	42a3      	cmp	r3, r4
 8003ab0:	6011      	str	r1, [r2, #0]
 8003ab2:	d1dd      	bne.n	8003a70 <_free_r+0x28>
 8003ab4:	681c      	ldr	r4, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	6053      	str	r3, [r2, #4]
 8003aba:	4421      	add	r1, r4
 8003abc:	6011      	str	r1, [r2, #0]
 8003abe:	e7d7      	b.n	8003a70 <_free_r+0x28>
 8003ac0:	d902      	bls.n	8003ac8 <_free_r+0x80>
 8003ac2:	230c      	movs	r3, #12
 8003ac4:	6003      	str	r3, [r0, #0]
 8003ac6:	e7d3      	b.n	8003a70 <_free_r+0x28>
 8003ac8:	6825      	ldr	r5, [r4, #0]
 8003aca:	1961      	adds	r1, r4, r5
 8003acc:	428b      	cmp	r3, r1
 8003ace:	bf04      	itt	eq
 8003ad0:	6819      	ldreq	r1, [r3, #0]
 8003ad2:	685b      	ldreq	r3, [r3, #4]
 8003ad4:	6063      	str	r3, [r4, #4]
 8003ad6:	bf04      	itt	eq
 8003ad8:	1949      	addeq	r1, r1, r5
 8003ada:	6021      	streq	r1, [r4, #0]
 8003adc:	6054      	str	r4, [r2, #4]
 8003ade:	e7c7      	b.n	8003a70 <_free_r+0x28>
 8003ae0:	b003      	add	sp, #12
 8003ae2:	bd30      	pop	{r4, r5, pc}
 8003ae4:	20000088 	.word	0x20000088

08003ae8 <_malloc_r>:
 8003ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aea:	1ccd      	adds	r5, r1, #3
 8003aec:	f025 0503 	bic.w	r5, r5, #3
 8003af0:	3508      	adds	r5, #8
 8003af2:	2d0c      	cmp	r5, #12
 8003af4:	bf38      	it	cc
 8003af6:	250c      	movcc	r5, #12
 8003af8:	2d00      	cmp	r5, #0
 8003afa:	4606      	mov	r6, r0
 8003afc:	db01      	blt.n	8003b02 <_malloc_r+0x1a>
 8003afe:	42a9      	cmp	r1, r5
 8003b00:	d903      	bls.n	8003b0a <_malloc_r+0x22>
 8003b02:	230c      	movs	r3, #12
 8003b04:	6033      	str	r3, [r6, #0]
 8003b06:	2000      	movs	r0, #0
 8003b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b0a:	f000 f8f1 	bl	8003cf0 <__malloc_lock>
 8003b0e:	4921      	ldr	r1, [pc, #132]	; (8003b94 <_malloc_r+0xac>)
 8003b10:	680a      	ldr	r2, [r1, #0]
 8003b12:	4614      	mov	r4, r2
 8003b14:	b99c      	cbnz	r4, 8003b3e <_malloc_r+0x56>
 8003b16:	4f20      	ldr	r7, [pc, #128]	; (8003b98 <_malloc_r+0xb0>)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	b923      	cbnz	r3, 8003b26 <_malloc_r+0x3e>
 8003b1c:	4621      	mov	r1, r4
 8003b1e:	4630      	mov	r0, r6
 8003b20:	f000 f83c 	bl	8003b9c <_sbrk_r>
 8003b24:	6038      	str	r0, [r7, #0]
 8003b26:	4629      	mov	r1, r5
 8003b28:	4630      	mov	r0, r6
 8003b2a:	f000 f837 	bl	8003b9c <_sbrk_r>
 8003b2e:	1c43      	adds	r3, r0, #1
 8003b30:	d123      	bne.n	8003b7a <_malloc_r+0x92>
 8003b32:	230c      	movs	r3, #12
 8003b34:	6033      	str	r3, [r6, #0]
 8003b36:	4630      	mov	r0, r6
 8003b38:	f000 f8e0 	bl	8003cfc <__malloc_unlock>
 8003b3c:	e7e3      	b.n	8003b06 <_malloc_r+0x1e>
 8003b3e:	6823      	ldr	r3, [r4, #0]
 8003b40:	1b5b      	subs	r3, r3, r5
 8003b42:	d417      	bmi.n	8003b74 <_malloc_r+0x8c>
 8003b44:	2b0b      	cmp	r3, #11
 8003b46:	d903      	bls.n	8003b50 <_malloc_r+0x68>
 8003b48:	6023      	str	r3, [r4, #0]
 8003b4a:	441c      	add	r4, r3
 8003b4c:	6025      	str	r5, [r4, #0]
 8003b4e:	e004      	b.n	8003b5a <_malloc_r+0x72>
 8003b50:	6863      	ldr	r3, [r4, #4]
 8003b52:	42a2      	cmp	r2, r4
 8003b54:	bf0c      	ite	eq
 8003b56:	600b      	streq	r3, [r1, #0]
 8003b58:	6053      	strne	r3, [r2, #4]
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	f000 f8ce 	bl	8003cfc <__malloc_unlock>
 8003b60:	f104 000b 	add.w	r0, r4, #11
 8003b64:	1d23      	adds	r3, r4, #4
 8003b66:	f020 0007 	bic.w	r0, r0, #7
 8003b6a:	1ac2      	subs	r2, r0, r3
 8003b6c:	d0cc      	beq.n	8003b08 <_malloc_r+0x20>
 8003b6e:	1a1b      	subs	r3, r3, r0
 8003b70:	50a3      	str	r3, [r4, r2]
 8003b72:	e7c9      	b.n	8003b08 <_malloc_r+0x20>
 8003b74:	4622      	mov	r2, r4
 8003b76:	6864      	ldr	r4, [r4, #4]
 8003b78:	e7cc      	b.n	8003b14 <_malloc_r+0x2c>
 8003b7a:	1cc4      	adds	r4, r0, #3
 8003b7c:	f024 0403 	bic.w	r4, r4, #3
 8003b80:	42a0      	cmp	r0, r4
 8003b82:	d0e3      	beq.n	8003b4c <_malloc_r+0x64>
 8003b84:	1a21      	subs	r1, r4, r0
 8003b86:	4630      	mov	r0, r6
 8003b88:	f000 f808 	bl	8003b9c <_sbrk_r>
 8003b8c:	3001      	adds	r0, #1
 8003b8e:	d1dd      	bne.n	8003b4c <_malloc_r+0x64>
 8003b90:	e7cf      	b.n	8003b32 <_malloc_r+0x4a>
 8003b92:	bf00      	nop
 8003b94:	20000088 	.word	0x20000088
 8003b98:	2000008c 	.word	0x2000008c

08003b9c <_sbrk_r>:
 8003b9c:	b538      	push	{r3, r4, r5, lr}
 8003b9e:	4d06      	ldr	r5, [pc, #24]	; (8003bb8 <_sbrk_r+0x1c>)
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	4608      	mov	r0, r1
 8003ba6:	602b      	str	r3, [r5, #0]
 8003ba8:	f7fd fa6a 	bl	8001080 <_sbrk>
 8003bac:	1c43      	adds	r3, r0, #1
 8003bae:	d102      	bne.n	8003bb6 <_sbrk_r+0x1a>
 8003bb0:	682b      	ldr	r3, [r5, #0]
 8003bb2:	b103      	cbz	r3, 8003bb6 <_sbrk_r+0x1a>
 8003bb4:	6023      	str	r3, [r4, #0]
 8003bb6:	bd38      	pop	{r3, r4, r5, pc}
 8003bb8:	2000009c 	.word	0x2000009c

08003bbc <__sread>:
 8003bbc:	b510      	push	{r4, lr}
 8003bbe:	460c      	mov	r4, r1
 8003bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bc4:	f000 f8a0 	bl	8003d08 <_read_r>
 8003bc8:	2800      	cmp	r0, #0
 8003bca:	bfab      	itete	ge
 8003bcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003bce:	89a3      	ldrhlt	r3, [r4, #12]
 8003bd0:	181b      	addge	r3, r3, r0
 8003bd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003bd6:	bfac      	ite	ge
 8003bd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003bda:	81a3      	strhlt	r3, [r4, #12]
 8003bdc:	bd10      	pop	{r4, pc}

08003bde <__swrite>:
 8003bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003be2:	461f      	mov	r7, r3
 8003be4:	898b      	ldrh	r3, [r1, #12]
 8003be6:	05db      	lsls	r3, r3, #23
 8003be8:	4605      	mov	r5, r0
 8003bea:	460c      	mov	r4, r1
 8003bec:	4616      	mov	r6, r2
 8003bee:	d505      	bpl.n	8003bfc <__swrite+0x1e>
 8003bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f000 f868 	bl	8003ccc <_lseek_r>
 8003bfc:	89a3      	ldrh	r3, [r4, #12]
 8003bfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c06:	81a3      	strh	r3, [r4, #12]
 8003c08:	4632      	mov	r2, r6
 8003c0a:	463b      	mov	r3, r7
 8003c0c:	4628      	mov	r0, r5
 8003c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c12:	f000 b817 	b.w	8003c44 <_write_r>

08003c16 <__sseek>:
 8003c16:	b510      	push	{r4, lr}
 8003c18:	460c      	mov	r4, r1
 8003c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c1e:	f000 f855 	bl	8003ccc <_lseek_r>
 8003c22:	1c43      	adds	r3, r0, #1
 8003c24:	89a3      	ldrh	r3, [r4, #12]
 8003c26:	bf15      	itete	ne
 8003c28:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c32:	81a3      	strheq	r3, [r4, #12]
 8003c34:	bf18      	it	ne
 8003c36:	81a3      	strhne	r3, [r4, #12]
 8003c38:	bd10      	pop	{r4, pc}

08003c3a <__sclose>:
 8003c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c3e:	f000 b813 	b.w	8003c68 <_close_r>
	...

08003c44 <_write_r>:
 8003c44:	b538      	push	{r3, r4, r5, lr}
 8003c46:	4d07      	ldr	r5, [pc, #28]	; (8003c64 <_write_r+0x20>)
 8003c48:	4604      	mov	r4, r0
 8003c4a:	4608      	mov	r0, r1
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	2200      	movs	r2, #0
 8003c50:	602a      	str	r2, [r5, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	f7fd f9c4 	bl	8000fe0 <_write>
 8003c58:	1c43      	adds	r3, r0, #1
 8003c5a:	d102      	bne.n	8003c62 <_write_r+0x1e>
 8003c5c:	682b      	ldr	r3, [r5, #0]
 8003c5e:	b103      	cbz	r3, 8003c62 <_write_r+0x1e>
 8003c60:	6023      	str	r3, [r4, #0]
 8003c62:	bd38      	pop	{r3, r4, r5, pc}
 8003c64:	2000009c 	.word	0x2000009c

08003c68 <_close_r>:
 8003c68:	b538      	push	{r3, r4, r5, lr}
 8003c6a:	4d06      	ldr	r5, [pc, #24]	; (8003c84 <_close_r+0x1c>)
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	4604      	mov	r4, r0
 8003c70:	4608      	mov	r0, r1
 8003c72:	602b      	str	r3, [r5, #0]
 8003c74:	f7fd f9d0 	bl	8001018 <_close>
 8003c78:	1c43      	adds	r3, r0, #1
 8003c7a:	d102      	bne.n	8003c82 <_close_r+0x1a>
 8003c7c:	682b      	ldr	r3, [r5, #0]
 8003c7e:	b103      	cbz	r3, 8003c82 <_close_r+0x1a>
 8003c80:	6023      	str	r3, [r4, #0]
 8003c82:	bd38      	pop	{r3, r4, r5, pc}
 8003c84:	2000009c 	.word	0x2000009c

08003c88 <_fstat_r>:
 8003c88:	b538      	push	{r3, r4, r5, lr}
 8003c8a:	4d07      	ldr	r5, [pc, #28]	; (8003ca8 <_fstat_r+0x20>)
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	4604      	mov	r4, r0
 8003c90:	4608      	mov	r0, r1
 8003c92:	4611      	mov	r1, r2
 8003c94:	602b      	str	r3, [r5, #0]
 8003c96:	f7fd f9cb 	bl	8001030 <_fstat>
 8003c9a:	1c43      	adds	r3, r0, #1
 8003c9c:	d102      	bne.n	8003ca4 <_fstat_r+0x1c>
 8003c9e:	682b      	ldr	r3, [r5, #0]
 8003ca0:	b103      	cbz	r3, 8003ca4 <_fstat_r+0x1c>
 8003ca2:	6023      	str	r3, [r4, #0]
 8003ca4:	bd38      	pop	{r3, r4, r5, pc}
 8003ca6:	bf00      	nop
 8003ca8:	2000009c 	.word	0x2000009c

08003cac <_isatty_r>:
 8003cac:	b538      	push	{r3, r4, r5, lr}
 8003cae:	4d06      	ldr	r5, [pc, #24]	; (8003cc8 <_isatty_r+0x1c>)
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	4604      	mov	r4, r0
 8003cb4:	4608      	mov	r0, r1
 8003cb6:	602b      	str	r3, [r5, #0]
 8003cb8:	f7fd f9ca 	bl	8001050 <_isatty>
 8003cbc:	1c43      	adds	r3, r0, #1
 8003cbe:	d102      	bne.n	8003cc6 <_isatty_r+0x1a>
 8003cc0:	682b      	ldr	r3, [r5, #0]
 8003cc2:	b103      	cbz	r3, 8003cc6 <_isatty_r+0x1a>
 8003cc4:	6023      	str	r3, [r4, #0]
 8003cc6:	bd38      	pop	{r3, r4, r5, pc}
 8003cc8:	2000009c 	.word	0x2000009c

08003ccc <_lseek_r>:
 8003ccc:	b538      	push	{r3, r4, r5, lr}
 8003cce:	4d07      	ldr	r5, [pc, #28]	; (8003cec <_lseek_r+0x20>)
 8003cd0:	4604      	mov	r4, r0
 8003cd2:	4608      	mov	r0, r1
 8003cd4:	4611      	mov	r1, r2
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	602a      	str	r2, [r5, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f7fd f9c3 	bl	8001066 <_lseek>
 8003ce0:	1c43      	adds	r3, r0, #1
 8003ce2:	d102      	bne.n	8003cea <_lseek_r+0x1e>
 8003ce4:	682b      	ldr	r3, [r5, #0]
 8003ce6:	b103      	cbz	r3, 8003cea <_lseek_r+0x1e>
 8003ce8:	6023      	str	r3, [r4, #0]
 8003cea:	bd38      	pop	{r3, r4, r5, pc}
 8003cec:	2000009c 	.word	0x2000009c

08003cf0 <__malloc_lock>:
 8003cf0:	4801      	ldr	r0, [pc, #4]	; (8003cf8 <__malloc_lock+0x8>)
 8003cf2:	f7ff be3b 	b.w	800396c <__retarget_lock_acquire_recursive>
 8003cf6:	bf00      	nop
 8003cf8:	20000094 	.word	0x20000094

08003cfc <__malloc_unlock>:
 8003cfc:	4801      	ldr	r0, [pc, #4]	; (8003d04 <__malloc_unlock+0x8>)
 8003cfe:	f7ff be36 	b.w	800396e <__retarget_lock_release_recursive>
 8003d02:	bf00      	nop
 8003d04:	20000094 	.word	0x20000094

08003d08 <_read_r>:
 8003d08:	b538      	push	{r3, r4, r5, lr}
 8003d0a:	4d07      	ldr	r5, [pc, #28]	; (8003d28 <_read_r+0x20>)
 8003d0c:	4604      	mov	r4, r0
 8003d0e:	4608      	mov	r0, r1
 8003d10:	4611      	mov	r1, r2
 8003d12:	2200      	movs	r2, #0
 8003d14:	602a      	str	r2, [r5, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	f7fd f945 	bl	8000fa6 <_read>
 8003d1c:	1c43      	adds	r3, r0, #1
 8003d1e:	d102      	bne.n	8003d26 <_read_r+0x1e>
 8003d20:	682b      	ldr	r3, [r5, #0]
 8003d22:	b103      	cbz	r3, 8003d26 <_read_r+0x1e>
 8003d24:	6023      	str	r3, [r4, #0]
 8003d26:	bd38      	pop	{r3, r4, r5, pc}
 8003d28:	2000009c 	.word	0x2000009c

08003d2c <_init>:
 8003d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2e:	bf00      	nop
 8003d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d32:	bc08      	pop	{r3}
 8003d34:	469e      	mov	lr, r3
 8003d36:	4770      	bx	lr

08003d38 <_fini>:
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3a:	bf00      	nop
 8003d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d3e:	bc08      	pop	{r3}
 8003d40:	469e      	mov	lr, r3
 8003d42:	4770      	bx	lr
