
utsutsu_LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004534  08004534  00014534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800461c  0800461c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800461c  0800461c  0001461c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004624  08004624  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004624  08004624  00014624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004628  08004628  00014628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800462c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000068  08004694  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08004694  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000175b  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006f4  00000000  00000000  000217f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  00021ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d0  00000000  00000000  000228f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000387a  00000000  00000000  000231c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00001455  00000000  00000000  00026a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00027e8f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002fc4  00000000  00000000  00027ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800451c 	.word	0x0800451c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800451c 	.word	0x0800451c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <setLED1State>:
 */

#include"Hardware/interface_LED.h"
#include"main.h"

void setLED1State(uint8_t state)	{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	if (state == 0) LED1_GPIO_Port->BSRR = LED1_Pin;
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d104      	bne.n	8000582 <setLED1State+0x1a>
 8000578:	4b07      	ldr	r3, [pc, #28]	; (8000598 <setLED1State+0x30>)
 800057a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800057e:	619a      	str	r2, [r3, #24]
	else			LED1_GPIO_Port->BSRR = (LED1_Pin << 16);
}
 8000580:	e003      	b.n	800058a <setLED1State+0x22>
	else			LED1_GPIO_Port->BSRR = (LED1_Pin << 16);
 8000582:	4b05      	ldr	r3, [pc, #20]	; (8000598 <setLED1State+0x30>)
 8000584:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000588:	619a      	str	r2, [r3, #24]
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40020400 	.word	0x40020400

0800059c <setLED2State>:
void setLED2State(uint8_t state)	{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
	if (state == 0) LED2_GPIO_Port->BSRR = LED2_Pin;
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d104      	bne.n	80005b6 <setLED2State+0x1a>
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <setLED2State+0x30>)
 80005ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005b2:	619a      	str	r2, [r3, #24]
	else			LED2_GPIO_Port->BSRR = (LED2_Pin << 16);
}
 80005b4:	e003      	b.n	80005be <setLED2State+0x22>
	else			LED2_GPIO_Port->BSRR = (LED2_Pin << 16);
 80005b6:	4b05      	ldr	r3, [pc, #20]	; (80005cc <setLED2State+0x30>)
 80005b8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80005bc:	619a      	str	r2, [r3, #24]
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	40020400 	.word	0x40020400

080005d0 <setLED3State>:
void setLED3State(uint8_t state)	{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	if (state == 0) LED3_GPIO_Port->BSRR = LED3_Pin;
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d104      	bne.n	80005ea <setLED3State+0x1a>
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <setLED3State+0x30>)
 80005e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005e6:	619a      	str	r2, [r3, #24]
	else			LED3_GPIO_Port->BSRR = (LED3_Pin << 16);
}
 80005e8:	e003      	b.n	80005f2 <setLED3State+0x22>
	else			LED3_GPIO_Port->BSRR = (LED3_Pin << 16);
 80005ea:	4b05      	ldr	r3, [pc, #20]	; (8000600 <setLED3State+0x30>)
 80005ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005f0:	619a      	str	r2, [r3, #24]
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	40020800 	.word	0x40020800

08000604 <setLED4State>:
void setLED4State(uint8_t state)	{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
	if (state == 0) LED4_GPIO_Port->BSRR = LED4_Pin;
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d103      	bne.n	800061c <setLED4State+0x18>
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <setLED4State+0x2c>)
 8000616:	2210      	movs	r2, #16
 8000618:	619a      	str	r2, [r3, #24]
	else			LED4_GPIO_Port->BSRR = (LED4_Pin << 16);
}
 800061a:	e003      	b.n	8000624 <setLED4State+0x20>
	else			LED4_GPIO_Port->BSRR = (LED4_Pin << 16);
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <setLED4State+0x2c>)
 800061e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000622:	619a      	str	r2, [r3, #24]
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	40020400 	.word	0x40020400

08000634 <setLED5State>:
void setLED5State(uint8_t state)	{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
	if (state == 0) LED5_GPIO_Port->BSRR = LED5_Pin;
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d103      	bne.n	800064c <setLED5State+0x18>
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <setLED5State+0x2c>)
 8000646:	2220      	movs	r2, #32
 8000648:	619a      	str	r2, [r3, #24]
	else			LED5_GPIO_Port->BSRR = (LED5_Pin << 16);
}
 800064a:	e003      	b.n	8000654 <setLED5State+0x20>
	else			LED5_GPIO_Port->BSRR = (LED5_Pin << 16);
 800064c:	4b04      	ldr	r3, [pc, #16]	; (8000660 <setLED5State+0x2c>)
 800064e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000652:	619a      	str	r2, [r3, #24]
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	40020400 	.word	0x40020400

08000664 <callbackTIM>:
#include "System/callback.h"
#include"Hardware/interface_LED.h"

extern uint16_t tim_counter;

void callbackTIM(void){
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	static uint16_t l_state;

	tim_counter++;
 8000668:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <callbackTIM+0x3c>)
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	3301      	adds	r3, #1
 800066e:	b29a      	uxth	r2, r3
 8000670:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <callbackTIM+0x3c>)
 8000672:	801a      	strh	r2, [r3, #0]

	if(tim_counter > 3000) 	l_state = 0;
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <callbackTIM+0x3c>)
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800067c:	4293      	cmp	r3, r2
 800067e:	d903      	bls.n	8000688 <callbackTIM+0x24>
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <callbackTIM+0x40>)
 8000682:	2200      	movs	r2, #0
 8000684:	801a      	strh	r2, [r3, #0]
 8000686:	e002      	b.n	800068e <callbackTIM+0x2a>
	else					l_state = 1;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <callbackTIM+0x40>)
 800068a:	2201      	movs	r2, #1
 800068c:	801a      	strh	r2, [r3, #0]

	setLED5State(l_state);
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <callbackTIM+0x40>)
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff ffcd 	bl	8000634 <setLED5State>

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000094 	.word	0x20000094
 80006a4:	20000084 	.word	0x20000084

080006a8 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b089      	sub	sp, #36	; 0x24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	332c      	adds	r3, #44	; 0x2c
 80006b8:	4619      	mov	r1, r3
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80006c0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80006c4:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006c6:	69ba      	ldr	r2, [r7, #24]
 80006c8:	fa92 f2a2 	rbit	r2, r2
 80006cc:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80006ce:	697a      	ldr	r2, [r7, #20]
 80006d0:	fab2 f282 	clz	r2, r2
 80006d4:	b2d2      	uxtb	r2, r2
 80006d6:	40d3      	lsrs	r3, r2
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	440b      	add	r3, r1
 80006dc:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	f003 031f 	and.w	r3, r3, #31
 80006e8:	211f      	movs	r1, #31
 80006ea:	fa01 f303 	lsl.w	r3, r1, r3
 80006ee:	43db      	mvns	r3, r3
 80006f0:	401a      	ands	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f003 011f 	and.w	r1, r3, #31
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	f003 031f 	and.w	r3, r3, #31
 80006fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000702:	431a      	orrs	r2, r3
 8000704:	69fb      	ldr	r3, [r7, #28]
 8000706:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000708:	bf00      	nop
 800070a:	3724      	adds	r7, #36	; 0x24
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	431a      	orrs	r2, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	609a      	str	r2, [r3, #8]
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800073a:	b480      	push	{r7}
 800073c:	b08d      	sub	sp, #52	; 0x34
 800073e:	af00      	add	r7, sp, #0
 8000740:	60f8      	str	r0, [r7, #12]
 8000742:	60b9      	str	r1, [r7, #8]
 8000744:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	330c      	adds	r3, #12
 800074a:	4619      	mov	r1, r3
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000752:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000756:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000758:	69ba      	ldr	r2, [r7, #24]
 800075a:	fa92 f2a2 	rbit	r2, r2
 800075e:	617a      	str	r2, [r7, #20]
  return result;
 8000760:	697a      	ldr	r2, [r7, #20]
 8000762:	fab2 f282 	clz	r2, r2
 8000766:	b2d2      	uxtb	r2, r2
 8000768:	40d3      	lsrs	r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	440b      	add	r3, r1
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 8000770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800077a:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800077e:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000780:	6a39      	ldr	r1, [r7, #32]
 8000782:	fa91 f1a1 	rbit	r1, r1
 8000786:	61f9      	str	r1, [r7, #28]
  return result;
 8000788:	69f9      	ldr	r1, [r7, #28]
 800078a:	fab1 f181 	clz	r1, r1
 800078e:	b2c9      	uxtb	r1, r1
 8000790:	40cb      	lsrs	r3, r1
 8000792:	2107      	movs	r1, #7
 8000794:	fa01 f303 	lsl.w	r3, r1, r3
 8000798:	43db      	mvns	r3, r3
 800079a:	401a      	ands	r2, r3
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80007a2:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80007a6:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80007aa:	fa91 f1a1 	rbit	r1, r1
 80007ae:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 80007b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80007b2:	fab1 f181 	clz	r1, r1
 80007b6:	b2c9      	uxtb	r1, r1
 80007b8:	40cb      	lsrs	r3, r1
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	fa01 f303 	lsl.w	r3, r1, r3
 80007c0:	431a      	orrs	r2, r3
 80007c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80007c6:	bf00      	nop
 80007c8:	3734      	adds	r7, #52	; 0x34
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
	...

080007d4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007e0:	4907      	ldr	r1, [pc, #28]	; (8000800 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4013      	ands	r3, r2
 80007f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007f2:	68fb      	ldr	r3, [r7, #12]
}
 80007f4:	bf00      	nop
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	40023800 	.word	0x40023800

08000804 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <LL_APB2_GRP1_EnableClock+0x2c>)
 800080e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000810:	4907      	ldr	r1, [pc, #28]	; (8000830 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4313      	orrs	r3, r2
 8000816:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <LL_APB2_GRP1_EnableClock+0x2c>)
 800081a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4013      	ands	r3, r2
 8000820:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000822:	68fb      	ldr	r3, [r7, #12]
}
 8000824:	bf00      	nop
 8000826:	3714      	adds	r7, #20
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	40023800 	.word	0x40023800

08000834 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b092      	sub	sp, #72	; 0x48
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800083a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000846:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000856:	f107 0318 	add.w	r3, r7, #24
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	463b      	mov	r3, r7
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
 8000872:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000874:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000878:	f7ff ffc4 	bl	8000804 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800087c:	2001      	movs	r0, #1
 800087e:	f7ff ffa9 	bl	80007d4 <LL_AHB1_GRP1_EnableClock>
  PA1   ------> ADC1_IN1
  PA2   ------> ADC1_IN2
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  */
  GPIO_InitStruct.Pin = AD_FR_Pin|AD_R_Pin|AD_FF_Pin|AD_L_Pin
 8000882:	2337      	movs	r3, #55	; 0x37
 8000884:	603b      	str	r3, [r7, #0]
                          |AD_FL_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000886:	2303      	movs	r3, #3
 8000888:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	463b      	mov	r3, r7
 8000890:	4619      	mov	r1, r3
 8000892:	481f      	ldr	r0, [pc, #124]	; (8000910 <MX_ADC1_Init+0xdc>)
 8000894:	f001 fddf 	bl	8002456 <LL_GPIO_Init>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000898:	2300      	movs	r3, #0
 800089a:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800089c:	2300      	movs	r3, #0
 800089e:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80008a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008a8:	4619      	mov	r1, r3
 80008aa:	481a      	ldr	r0, [pc, #104]	; (8000914 <MX_ADC1_Init+0xe0>)
 80008ac:	f001 fc60 	bl	8002170 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80008c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008c8:	4619      	mov	r1, r3
 80008ca:	4812      	ldr	r0, [pc, #72]	; (8000914 <MX_ADC1_Init+0xe0>)
 80008cc:	f001 fc7c 	bl	80021c8 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 80008d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d4:	480f      	ldr	r0, [pc, #60]	; (8000914 <MX_ADC1_Init+0xe0>)
 80008d6:	f7ff ff1d 	bl	8000714 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 80008da:	2300      	movs	r3, #0
 80008dc:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80008e2:	f107 0318 	add.w	r3, r7, #24
 80008e6:	4619      	mov	r1, r3
 80008e8:	480b      	ldr	r0, [pc, #44]	; (8000918 <MX_ADC1_Init+0xe4>)
 80008ea:	f001 fbf9 	bl	80020e0 <LL_ADC_CommonInit>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 80008ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80008f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008f6:	4807      	ldr	r0, [pc, #28]	; (8000914 <MX_ADC1_Init+0xe0>)
 80008f8:	f7ff fed6 	bl	80006a8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 80008fc:	2200      	movs	r2, #0
 80008fe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000902:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_ADC1_Init+0xe0>)
 8000904:	f7ff ff19 	bl	800073a <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	3748      	adds	r7, #72	; 0x48
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40020000 	.word	0x40020000
 8000914:	40012000 	.word	0x40012000
 8000918:	40012300 	.word	0x40012300

0800091c <LL_AHB1_GRP1_EnableClock>:
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000928:	4907      	ldr	r1, [pc, #28]	; (8000948 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4313      	orrs	r3, r2
 800092e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4013      	ands	r3, r2
 8000938:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800093a:	68fb      	ldr	r3, [r7, #12]
}
 800093c:	bf00      	nop
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	40023800 	.word	0x40023800

0800094c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	041a      	lsls	r2, r3, #16
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	619a      	str	r2, [r3, #24]
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
	...

0800096c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	463b      	mov	r3, r7
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
 8000980:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000982:	2004      	movs	r0, #4
 8000984:	f7ff ffca 	bl	800091c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000988:	2001      	movs	r0, #1
 800098a:	f7ff ffc7 	bl	800091c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800098e:	2002      	movs	r0, #2
 8000990:	f7ff ffc4 	bl	800091c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000994:	2008      	movs	r0, #8
 8000996:	f7ff ffc1 	bl	800091c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, FrontRight_Pin|Right_Pin|STBY_Pin|LED3_Pin);
 800099a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800099e:	4830      	ldr	r0, [pc, #192]	; (8000a60 <MX_GPIO_Init+0xf4>)
 80009a0:	f7ff ffd4 	bl	800094c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, FrontCenter_Pin|Left_Pin|FrontLeft_Pin|RIGHT_DIR1_Pin
 80009a4:	f24c 01c8 	movw	r1, #49352	; 0xc0c8
 80009a8:	482e      	ldr	r0, [pc, #184]	; (8000a64 <MX_GPIO_Init+0xf8>)
 80009aa:	f7ff ffcf 	bl	800094c <LL_GPIO_ResetOutputPin>
                          |RIGHT_DIR2_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LEFT_DIR1_Pin|LEFT_DIR2_Pin|LED1_Pin|LED2_Pin
 80009ae:	f24c 0133 	movw	r1, #49203	; 0xc033
 80009b2:	482d      	ldr	r0, [pc, #180]	; (8000a68 <MX_GPIO_Init+0xfc>)
 80009b4:	f7ff ffca 	bl	800094c <LL_GPIO_ResetOutputPin>
                          |LED4_Pin|LED5_Pin);

  /**/
  LL_GPIO_ResetOutputPin(SPI_CS_GPIO_Port, SPI_CS_Pin);
 80009b8:	2104      	movs	r1, #4
 80009ba:	482c      	ldr	r0, [pc, #176]	; (8000a6c <MX_GPIO_Init+0x100>)
 80009bc:	f7ff ffc6 	bl	800094c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = FrontRight_Pin|Right_Pin|STBY_Pin|LED3_Pin;
 80009c0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80009c4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009c6:	2301      	movs	r3, #1
 80009c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d6:	463b      	mov	r3, r7
 80009d8:	4619      	mov	r1, r3
 80009da:	4821      	ldr	r0, [pc, #132]	; (8000a60 <MX_GPIO_Init+0xf4>)
 80009dc:	f001 fd3b 	bl	8002456 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FrontCenter_Pin|Left_Pin|FrontLeft_Pin|RIGHT_DIR1_Pin
 80009e0:	f24c 03c8 	movw	r3, #49352	; 0xc0c8
 80009e4:	603b      	str	r3, [r7, #0]
                          |RIGHT_DIR2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009e6:	2301      	movs	r3, #1
 80009e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	463b      	mov	r3, r7
 80009f8:	4619      	mov	r1, r3
 80009fa:	481a      	ldr	r0, [pc, #104]	; (8000a64 <MX_GPIO_Init+0xf8>)
 80009fc:	f001 fd2b 	bl	8002456 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LEFT_DIR1_Pin|LEFT_DIR2_Pin|LED1_Pin|LED2_Pin
 8000a00:	f24c 0333 	movw	r3, #49203	; 0xc033
 8000a04:	603b      	str	r3, [r7, #0]
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a06:	2301      	movs	r3, #1
 8000a08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a16:	463b      	mov	r3, r7
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4813      	ldr	r0, [pc, #76]	; (8000a68 <MX_GPIO_Init+0xfc>)
 8000a1c:	f001 fd1b 	bl	8002456 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000a20:	2304      	movs	r3, #4
 8000a22:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a24:	2301      	movs	r3, #1
 8000a26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a30:	2300      	movs	r3, #0
 8000a32:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000a34:	463b      	mov	r3, r7
 8000a36:	4619      	mov	r1, r3
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <MX_GPIO_Init+0x100>)
 8000a3a:	f001 fd0c 	bl	8002456 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000a3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a42:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000a44:	2300      	movs	r3, #0
 8000a46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_GPIO_Init+0xfc>)
 8000a52:	f001 fd00 	bl	8002456 <LL_GPIO_Init>

}
 8000a56:	bf00      	nop
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40020800 	.word	0x40020800
 8000a64:	40020000 	.word	0x40020000
 8000a68:	40020400 	.word	0x40020400
 8000a6c:	40020c00 	.word	0x40020c00

08000a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa2:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	60d3      	str	r3, [r2, #12]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <LL_RCC_HSI_Enable+0x1c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <LL_RCC_HSI_Enable+0x1c>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <LL_RCC_HSI_IsReady+0x20>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f003 0302 	and.w	r3, r3, #2
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	bf0c      	ite	eq
 8000ae8:	2301      	moveq	r3, #1
 8000aea:	2300      	movne	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	40023800 	.word	0x40023800

08000afc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	4904      	ldr	r1, [pc, #16]	; (8000b24 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000b12:	4313      	orrs	r3, r2
 8000b14:	600b      	str	r3, [r1, #0]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800

08000b28 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <LL_RCC_SetSysClkSource+0x24>)
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	f023 0203 	bic.w	r2, r3, #3
 8000b38:	4904      	ldr	r1, [pc, #16]	; (8000b4c <LL_RCC_SetSysClkSource+0x24>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	608b      	str	r3, [r1, #8]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	40023800 	.word	0x40023800

08000b50 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <LL_RCC_GetSysClkSource+0x18>)
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	f003 030c 	and.w	r3, r3, #12
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800

08000b6c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <LL_RCC_SetAHBPrescaler+0x24>)
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b7c:	4904      	ldr	r1, [pc, #16]	; (8000b90 <LL_RCC_SetAHBPrescaler+0x24>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	608b      	str	r3, [r1, #8]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	40023800 	.word	0x40023800

08000b94 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000ba4:	4904      	ldr	r1, [pc, #16]	; (8000bb8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	608b      	str	r3, [r1, #8]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	40023800 	.word	0x40023800

08000bbc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000bcc:	4904      	ldr	r1, [pc, #16]	; (8000be0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	608b      	str	r3, [r1, #8]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	40023800 	.word	0x40023800

08000be4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <LL_RCC_PLL_Enable+0x1c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <LL_RCC_PLL_Enable+0x1c>)
 8000bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	40023800 	.word	0x40023800

08000c04 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <LL_RCC_PLL_IsReady+0x24>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000c14:	bf0c      	ite	eq
 8000c16:	2301      	moveq	r3, #1
 8000c18:	2300      	movne	r3, #0
 8000c1a:	b2db      	uxtb	r3, r3
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800

08000c2c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
 8000c38:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000c3c:	685a      	ldr	r2, [r3, #4]
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000c40:	4013      	ands	r3, r2
 8000c42:	68f9      	ldr	r1, [r7, #12]
 8000c44:	68ba      	ldr	r2, [r7, #8]
 8000c46:	4311      	orrs	r1, r2
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	0192      	lsls	r2, r2, #6
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	4908      	ldr	r1, [pc, #32]	; (8000c70 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000c50:	4313      	orrs	r3, r2
 8000c52:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000c5c:	4904      	ldr	r1, [pc, #16]	; (8000c70 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	40023800 	.word	0x40023800
 8000c74:	ffbf8000 	.word	0xffbf8000

08000c78 <LL_APB1_GRP1_EnableClock>:
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c84:	4907      	ldr	r1, [pc, #28]	; (8000ca4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4013      	ands	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c96:	68fb      	ldr	r3, [r7, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <LL_APB2_GRP1_EnableClock>:
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000cb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cb4:	4907      	ldr	r1, [pc, #28]	; (8000cd4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000cbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	40023800 	.word	0x40023800

08000cd8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <LL_FLASH_SetLatency+0x24>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f023 0207 	bic.w	r2, r3, #7
 8000ce8:	4904      	ldr	r1, [pc, #16]	; (8000cfc <LL_FLASH_SetLatency+0x24>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	600b      	str	r3, [r1, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	40023c00 	.word	0x40023c00

08000d00 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <LL_FLASH_GetLatency+0x18>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 0307 	and.w	r3, r3, #7
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40023c00 	.word	0x40023c00

08000d1c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000d2c:	4904      	ldr	r1, [pc, #16]	; (8000d40 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	600b      	str	r3, [r1, #0]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	40007000 	.word	0x40007000

08000d44 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f043 0201 	orr.w	r2, r3, #1
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	601a      	str	r2, [r3, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	f043 0201 	orr.w	r2, r3, #1
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	60da      	str	r2, [r3, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d94:	2b80      	cmp	r3, #128	; 0x80
 8000d96:	bf0c      	ite	eq
 8000d98:	2301      	moveq	r3, #1
 8000d9a:	2300      	movne	r3, #0
 8000d9c:	b2db      	uxtb	r3, r3
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	460b      	mov	r3, r1
 8000db4:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000db6:	78fa      	ldrb	r2, [r7, #3]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	605a      	str	r2, [r3, #4]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

void TIM5_IRQHandler(void);

int __io_putchar(int c) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  LL_USART_TransmitData8(USART1, (uint8_t)c);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4807      	ldr	r0, [pc, #28]	; (8000df4 <__io_putchar+0x2c>)
 8000dd8:	f7ff ffe7 	bl	8000daa <LL_USART_TransmitData8>
  while(LL_USART_IsActiveFlag_TXE(USART1) == 0);
 8000ddc:	bf00      	nop
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <__io_putchar+0x2c>)
 8000de0:	f7ff ffd0 	bl	8000d84 <LL_USART_IsActiveFlag_TXE>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0f9      	beq.n	8000dde <__io_putchar+0x16>
  return 0;
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40011000 	.word	0x40011000

08000df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000dfc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e00:	f7ff ff52 	bl	8000ca8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000e04:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000e08:	f7ff ff36 	bl	8000c78 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f7ff fe2f 	bl	8000a70 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* USER CODE BEGIN Init */
  setbuf(stdout,NULL);
 8000e12:	4b26      	ldr	r3, [pc, #152]	; (8000eac <main+0xb4>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f002 fb6a 	bl	80034f4 <setbuf>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e20:	f000 f84c 	bl	8000ebc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e24:	f7ff fda2 	bl	800096c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e28:	f7ff fd04 	bl	8000834 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000e2c:	f000 fd22 	bl	8001874 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e30:	f000 fdba 	bl	80019a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e34:	f000 fe2e 	bl	8001a94 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e38:	f000 fea6 	bl	8001b88 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000e3c:	f000 ff5e 	bl	8001cfc <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000e40:	f001 f8ae 	bl	8001fa0 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8000e44:	f000 f8c4 	bl	8000fd0 <MX_SPI3_Init>
  MX_TIM11_Init();
 8000e48:	f000 ffee 	bl	8001e28 <MX_TIM11_Init>
  MX_TIM5_Init();
 8000e4c:	f000 ff16 	bl	8001c7c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  LL_TIM_EnableIT_UPDATE(TIM5);
 8000e50:	4817      	ldr	r0, [pc, #92]	; (8000eb0 <main+0xb8>)
 8000e52:	f7ff ff87 	bl	8000d64 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM5);
 8000e56:	4816      	ldr	r0, [pc, #88]	; (8000eb0 <main+0xb8>)
 8000e58:	f7ff ff74 	bl	8000d44 <LL_TIM_EnableCounter>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  setLED1State(ON);
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f7ff fb83 	bl	8000568 <setLED1State>
	  setLED2State(ON);
 8000e62:	2001      	movs	r0, #1
 8000e64:	f7ff fb9a 	bl	800059c <setLED2State>
	  setLED3State(ON);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f7ff fbb1 	bl	80005d0 <setLED3State>
	  setLED4State(ON);
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f7ff fbc8 	bl	8000604 <setLED4State>

	  printf("Hello,World tim = %d\r\n", tim_counter);
 8000e74:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <main+0xbc>)
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	480f      	ldr	r0, [pc, #60]	; (8000eb8 <main+0xc0>)
 8000e7c:	f002 fb22 	bl	80034c4 <iprintf>

	  LL_mDelay(500);
 8000e80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e84:	f002 fab6 	bl	80033f4 <LL_mDelay>

	  setLED1State(OFF);
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f7ff fb6d 	bl	8000568 <setLED1State>
	  setLED2State(OFF);
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f7ff fb84 	bl	800059c <setLED2State>
	  setLED3State(OFF);
 8000e94:	2000      	movs	r0, #0
 8000e96:	f7ff fb9b 	bl	80005d0 <setLED3State>
	  setLED4State(OFF);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f7ff fbb2 	bl	8000604 <setLED4State>

	  LL_mDelay(500);
 8000ea0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ea4:	f002 faa6 	bl	80033f4 <LL_mDelay>
	  setLED1State(ON);
 8000ea8:	e7d8      	b.n	8000e5c <main+0x64>
 8000eaa:	bf00      	nop
 8000eac:	20000004 	.word	0x20000004
 8000eb0:	40000c00 	.word	0x40000c00
 8000eb4:	20000094 	.word	0x20000094
 8000eb8:	08004534 	.word	0x08004534

08000ebc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8000ec0:	2005      	movs	r0, #5
 8000ec2:	f7ff ff09 	bl	8000cd8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8000ec6:	bf00      	nop
 8000ec8:	f7ff ff1a 	bl	8000d00 <LL_FLASH_GetLatency>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b05      	cmp	r3, #5
 8000ed0:	d1fa      	bne.n	8000ec8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000ed2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ed6:	f7ff ff21 	bl	8000d1c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000eda:	2010      	movs	r0, #16
 8000edc:	f7ff fe0e 	bl	8000afc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000ee0:	f7ff fdea 	bl	8000ab8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000ee4:	bf00      	nop
 8000ee6:	f7ff fdf7 	bl	8000ad8 <LL_RCC_HSI_IsReady>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d1fa      	bne.n	8000ee6 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 168, LL_RCC_PLLP_DIV_2);
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	22a8      	movs	r2, #168	; 0xa8
 8000ef4:	2108      	movs	r1, #8
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f7ff fe98 	bl	8000c2c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000efc:	f7ff fe72 	bl	8000be4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000f00:	bf00      	nop
 8000f02:	f7ff fe7f 	bl	8000c04 <LL_RCC_PLL_IsReady>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d1fa      	bne.n	8000f02 <SystemClock_Config+0x46>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f7ff fe2d 	bl	8000b6c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000f12:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000f16:	f7ff fe3d 	bl	8000b94 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_4);
 8000f1a:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 8000f1e:	f7ff fe4d 	bl	8000bbc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000f22:	2002      	movs	r0, #2
 8000f24:	f7ff fe00 	bl	8000b28 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000f28:	bf00      	nop
 8000f2a:	f7ff fe11 	bl	8000b50 <LL_RCC_GetSysClkSource>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b08      	cmp	r3, #8
 8000f32:	d1fa      	bne.n	8000f2a <SystemClock_Config+0x6e>
  {

  }
  LL_Init1msTick(168000000);
 8000f34:	4803      	ldr	r0, [pc, #12]	; (8000f44 <SystemClock_Config+0x88>)
 8000f36:	f002 fa4f 	bl	80033d8 <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 8000f3a:	4802      	ldr	r0, [pc, #8]	; (8000f44 <SystemClock_Config+0x88>)
 8000f3c:	f002 fa80 	bl	8003440 <LL_SetSystemCoreClock>
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	0a037a00 	.word	0x0a037a00

08000f48 <LL_AHB1_GRP1_EnableClock>:
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f54:	4907      	ldr	r1, [pc, #28]	; (8000f74 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4013      	ands	r3, r2
 8000f64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f66:	68fb      	ldr	r3, [r7, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	40023800 	.word	0x40023800

08000f78 <LL_APB1_GRP1_EnableClock>:
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f84:	4907      	ldr	r1, [pc, #28]	; (8000fa4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4013      	ands	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f023 0210 	bic.w	r2, r3, #16
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	605a      	str	r2, [r3, #4]
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <MX_SPI3_Init>:

/* USER CODE END 0 */

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b090      	sub	sp, #64	; 0x40
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000fd6:	f107 0318 	add.w	r3, r7, #24
 8000fda:	2228      	movs	r2, #40	; 0x28
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f002 fa68 	bl	80034b4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]
 8000ff2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8000ff4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ff8:	f7ff ffbe 	bl	8000f78 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000ffc:	2004      	movs	r0, #4
 8000ffe:	f7ff ffa3 	bl	8000f48 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8001002:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001006:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001008:	2302      	movs	r3, #2
 800100a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001018:	2306      	movs	r3, #6
 800101a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101c:	463b      	mov	r3, r7
 800101e:	4619      	mov	r1, r3
 8001020:	4813      	ldr	r0, [pc, #76]	; (8001070 <MX_SPI3_Init+0xa0>)
 8001022:	f001 fa18 	bl	8002456 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800102a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800102e:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001034:	2302      	movs	r3, #2
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001038:	2301      	movs	r3, #1
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800103c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001042:	2300      	movs	r3, #0
 8001044:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001046:	2300      	movs	r3, #0
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800104a:	2300      	movs	r3, #0
 800104c:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800104e:	230a      	movs	r3, #10
 8001050:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8001052:	f107 0318 	add.w	r3, r7, #24
 8001056:	4619      	mov	r1, r3
 8001058:	4806      	ldr	r0, [pc, #24]	; (8001074 <MX_SPI3_Init+0xa4>)
 800105a:	f001 fbcc 	bl	80027f6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 800105e:	2100      	movs	r1, #0
 8001060:	4804      	ldr	r0, [pc, #16]	; (8001074 <MX_SPI3_Init+0xa4>)
 8001062:	f7ff ffa1 	bl	8000fa8 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	3740      	adds	r7, #64	; 0x40
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40020800 	.word	0x40020800
 8001074:	40003c00 	.word	0x40003c00

08001078 <LL_TIM_ClearFlag_UPDATE>:
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f06f 0201 	mvn.w	r2, #1
 8001086:	611a      	str	r2, [r3, #16]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d101      	bne.n	80010ac <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80010a8:	2301      	movs	r3, #1
 80010aa:	e000      	b.n	80010ae <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010be:	e7fe      	b.n	80010be <NMI_Handler+0x4>

080010c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <HardFault_Handler+0x4>

080010c6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <MemManage_Handler+0x4>

080010cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <BusFault_Handler+0x4>

080010d2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <UsageFault_Handler+0x4>

080010d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	callbackTIM();
 8001114:	f7ff faa6 	bl	8000664 <callbackTIM>

	if(LL_TIM_IsActiveFlag_UPDATE(TIM5) == 1) {
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <TIM5_IRQHandler+0x20>)
 800111a:	f7ff ffbb 	bl	8001094 <LL_TIM_IsActiveFlag_UPDATE>
 800111e:	4603      	mov	r3, r0
 8001120:	2b01      	cmp	r3, #1
 8001122:	d102      	bne.n	800112a <TIM5_IRQHandler+0x1a>
		LL_TIM_ClearFlag_UPDATE(TIM5);
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <TIM5_IRQHandler+0x20>)
 8001126:	f7ff ffa7 	bl	8001078 <LL_TIM_ClearFlag_UPDATE>

  /* USER CODE END TIM5_IRQn 0 */
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40000c00 	.word	0x40000c00

08001134 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	e00a      	b.n	800115c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001146:	f3af 8000 	nop.w
 800114a:	4601      	mov	r1, r0
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	60ba      	str	r2, [r7, #8]
 8001152:	b2ca      	uxtb	r2, r1
 8001154:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	3301      	adds	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	429a      	cmp	r2, r3
 8001162:	dbf0      	blt.n	8001146 <_read+0x12>
	}

return len;
 8001164:	687b      	ldr	r3, [r7, #4]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b086      	sub	sp, #24
 8001172:	af00      	add	r7, sp, #0
 8001174:	60f8      	str	r0, [r7, #12]
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	e009      	b.n	8001194 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	1c5a      	adds	r2, r3, #1
 8001184:	60ba      	str	r2, [r7, #8]
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fe1d 	bl	8000dc8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3301      	adds	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	429a      	cmp	r2, r3
 800119a:	dbf1      	blt.n	8001180 <_write+0x12>
	}
	return len;
 800119c:	687b      	ldr	r3, [r7, #4]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <_close>:

int _close(int file)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
	return -1;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ce:	605a      	str	r2, [r3, #4]
	return 0;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <_isatty>:

int _isatty(int file)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
	return 1;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001218:	4a14      	ldr	r2, [pc, #80]	; (800126c <_sbrk+0x5c>)
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <_sbrk+0x60>)
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <_sbrk+0x64>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d102      	bne.n	8001232 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <_sbrk+0x64>)
 800122e:	4a12      	ldr	r2, [pc, #72]	; (8001278 <_sbrk+0x68>)
 8001230:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <_sbrk+0x64>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	429a      	cmp	r2, r3
 800123e:	d207      	bcs.n	8001250 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001240:	f002 f90e 	bl	8003460 <__errno>
 8001244:	4603      	mov	r3, r0
 8001246:	220c      	movs	r2, #12
 8001248:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	e009      	b.n	8001264 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <_sbrk+0x64>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <_sbrk+0x64>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <_sbrk+0x64>)
 8001260:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001262:	68fb      	ldr	r3, [r7, #12]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20020000 	.word	0x20020000
 8001270:	00000400 	.word	0x00000400
 8001274:	20000088 	.word	0x20000088
 8001278:	200000a8 	.word	0x200000a8

0800127c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <SystemInit+0x28>)
 8001282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001286:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <SystemInit+0x28>)
 8001288:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800128c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <SystemInit+0x28>)
 8001292:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001296:	609a      	str	r2, [r3, #8]
#endif
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ac:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	f003 0307 	and.w	r3, r3, #7
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	db0b      	blt.n	80012ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	f003 021f 	and.w	r2, r3, #31
 80012dc:	4907      	ldr	r1, [pc, #28]	; (80012fc <__NVIC_EnableIRQ+0x38>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	095b      	lsrs	r3, r3, #5
 80012e4:	2001      	movs	r0, #1
 80012e6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000e100 	.word	0xe000e100

08001300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	db0a      	blt.n	800132a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	b2da      	uxtb	r2, r3
 8001318:	490c      	ldr	r1, [pc, #48]	; (800134c <__NVIC_SetPriority+0x4c>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	0112      	lsls	r2, r2, #4
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	440b      	add	r3, r1
 8001324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001328:	e00a      	b.n	8001340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4908      	ldr	r1, [pc, #32]	; (8001350 <__NVIC_SetPriority+0x50>)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	3b04      	subs	r3, #4
 8001338:	0112      	lsls	r2, r2, #4
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	440b      	add	r3, r1
 800133e:	761a      	strb	r2, [r3, #24]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000e100 	.word	0xe000e100
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	; 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f1c3 0307 	rsb	r3, r3, #7
 800136e:	2b04      	cmp	r3, #4
 8001370:	bf28      	it	cs
 8001372:	2304      	movcs	r3, #4
 8001374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3304      	adds	r3, #4
 800137a:	2b06      	cmp	r3, #6
 800137c:	d902      	bls.n	8001384 <NVIC_EncodePriority+0x30>
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3b03      	subs	r3, #3
 8001382:	e000      	b.n	8001386 <NVIC_EncodePriority+0x32>
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	f04f 32ff 	mov.w	r2, #4294967295
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43da      	mvns	r2, r3
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	401a      	ands	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800139c:	f04f 31ff 	mov.w	r1, #4294967295
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43d9      	mvns	r1, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	4313      	orrs	r3, r2
         );
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3724      	adds	r7, #36	; 0x24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
	...

080013bc <LL_AHB1_GRP1_EnableClock>:
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013c8:	4907      	ldr	r1, [pc, #28]	; (80013e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4013      	ands	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013da:	68fb      	ldr	r3, [r7, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	40023800 	.word	0x40023800

080013ec <LL_APB1_GRP1_EnableClock>:
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f8:	4907      	ldr	r1, [pc, #28]	; (8001418 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001402:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4013      	ands	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800140a:	68fb      	ldr	r3, [r7, #12]
}
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	40023800 	.word	0x40023800

0800141c <LL_APB2_GRP1_EnableClock>:
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001426:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001428:	4907      	ldr	r1, [pc, #28]	; (8001448 <LL_APB2_GRP1_EnableClock+0x2c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4313      	orrs	r3, r2
 800142e:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001432:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4013      	ands	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800143a:	68fb      	ldr	r3, [r7, #12]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	40023800 	.word	0x40023800

0800144c <LL_TIM_DisableARRPreload>:
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	601a      	str	r2, [r3, #0]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_TIM_OC_DisableFast>:
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d01c      	beq.n	80014b6 <LL_TIM_OC_DisableFast+0x4a>
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	2b04      	cmp	r3, #4
 8001480:	d017      	beq.n	80014b2 <LL_TIM_OC_DisableFast+0x46>
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	2b10      	cmp	r3, #16
 8001486:	d012      	beq.n	80014ae <LL_TIM_OC_DisableFast+0x42>
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	2b40      	cmp	r3, #64	; 0x40
 800148c:	d00d      	beq.n	80014aa <LL_TIM_OC_DisableFast+0x3e>
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001494:	d007      	beq.n	80014a6 <LL_TIM_OC_DisableFast+0x3a>
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800149c:	d101      	bne.n	80014a2 <LL_TIM_OC_DisableFast+0x36>
 800149e:	2305      	movs	r3, #5
 80014a0:	e00a      	b.n	80014b8 <LL_TIM_OC_DisableFast+0x4c>
 80014a2:	2306      	movs	r3, #6
 80014a4:	e008      	b.n	80014b8 <LL_TIM_OC_DisableFast+0x4c>
 80014a6:	2304      	movs	r3, #4
 80014a8:	e006      	b.n	80014b8 <LL_TIM_OC_DisableFast+0x4c>
 80014aa:	2303      	movs	r3, #3
 80014ac:	e004      	b.n	80014b8 <LL_TIM_OC_DisableFast+0x4c>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e002      	b.n	80014b8 <LL_TIM_OC_DisableFast+0x4c>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <LL_TIM_OC_DisableFast+0x4c>
 80014b6:	2300      	movs	r3, #0
 80014b8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3318      	adds	r3, #24
 80014be:	4619      	mov	r1, r3
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <LL_TIM_OC_DisableFast+0x84>)
 80014c4:	5cd3      	ldrb	r3, [r2, r3]
 80014c6:	440b      	add	r3, r1
 80014c8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	4908      	ldr	r1, [pc, #32]	; (80014f4 <LL_TIM_OC_DisableFast+0x88>)
 80014d2:	5ccb      	ldrb	r3, [r1, r3]
 80014d4:	4619      	mov	r1, r3
 80014d6:	2304      	movs	r3, #4
 80014d8:	408b      	lsls	r3, r1
 80014da:	43db      	mvns	r3, r3
 80014dc:	401a      	ands	r2, r3
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	601a      	str	r2, [r3, #0]
}
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	08004564 	.word	0x08004564
 80014f4:	0800456c 	.word	0x0800456c

080014f8 <LL_TIM_OC_EnablePreload>:
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d01c      	beq.n	8001542 <LL_TIM_OC_EnablePreload+0x4a>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	2b04      	cmp	r3, #4
 800150c:	d017      	beq.n	800153e <LL_TIM_OC_EnablePreload+0x46>
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	2b10      	cmp	r3, #16
 8001512:	d012      	beq.n	800153a <LL_TIM_OC_EnablePreload+0x42>
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	2b40      	cmp	r3, #64	; 0x40
 8001518:	d00d      	beq.n	8001536 <LL_TIM_OC_EnablePreload+0x3e>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001520:	d007      	beq.n	8001532 <LL_TIM_OC_EnablePreload+0x3a>
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001528:	d101      	bne.n	800152e <LL_TIM_OC_EnablePreload+0x36>
 800152a:	2305      	movs	r3, #5
 800152c:	e00a      	b.n	8001544 <LL_TIM_OC_EnablePreload+0x4c>
 800152e:	2306      	movs	r3, #6
 8001530:	e008      	b.n	8001544 <LL_TIM_OC_EnablePreload+0x4c>
 8001532:	2304      	movs	r3, #4
 8001534:	e006      	b.n	8001544 <LL_TIM_OC_EnablePreload+0x4c>
 8001536:	2303      	movs	r3, #3
 8001538:	e004      	b.n	8001544 <LL_TIM_OC_EnablePreload+0x4c>
 800153a:	2302      	movs	r3, #2
 800153c:	e002      	b.n	8001544 <LL_TIM_OC_EnablePreload+0x4c>
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <LL_TIM_OC_EnablePreload+0x4c>
 8001542:	2300      	movs	r3, #0
 8001544:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3318      	adds	r3, #24
 800154a:	4619      	mov	r1, r3
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <LL_TIM_OC_EnablePreload+0x80>)
 8001550:	5cd3      	ldrb	r3, [r2, r3]
 8001552:	440b      	add	r3, r1
 8001554:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	4907      	ldr	r1, [pc, #28]	; (800157c <LL_TIM_OC_EnablePreload+0x84>)
 800155e:	5ccb      	ldrb	r3, [r1, r3]
 8001560:	4619      	mov	r1, r3
 8001562:	2308      	movs	r3, #8
 8001564:	408b      	lsls	r3, r1
 8001566:	431a      	orrs	r2, r3
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	601a      	str	r2, [r3, #0]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	08004564 	.word	0x08004564
 800157c:	0800456c 	.word	0x0800456c

08001580 <LL_TIM_IC_SetActiveInput>:
{
 8001580:	b480      	push	{r7}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d01c      	beq.n	80015cc <LL_TIM_IC_SetActiveInput+0x4c>
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	2b04      	cmp	r3, #4
 8001596:	d017      	beq.n	80015c8 <LL_TIM_IC_SetActiveInput+0x48>
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	2b10      	cmp	r3, #16
 800159c:	d012      	beq.n	80015c4 <LL_TIM_IC_SetActiveInput+0x44>
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	2b40      	cmp	r3, #64	; 0x40
 80015a2:	d00d      	beq.n	80015c0 <LL_TIM_IC_SetActiveInput+0x40>
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015aa:	d007      	beq.n	80015bc <LL_TIM_IC_SetActiveInput+0x3c>
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b2:	d101      	bne.n	80015b8 <LL_TIM_IC_SetActiveInput+0x38>
 80015b4:	2305      	movs	r3, #5
 80015b6:	e00a      	b.n	80015ce <LL_TIM_IC_SetActiveInput+0x4e>
 80015b8:	2306      	movs	r3, #6
 80015ba:	e008      	b.n	80015ce <LL_TIM_IC_SetActiveInput+0x4e>
 80015bc:	2304      	movs	r3, #4
 80015be:	e006      	b.n	80015ce <LL_TIM_IC_SetActiveInput+0x4e>
 80015c0:	2303      	movs	r3, #3
 80015c2:	e004      	b.n	80015ce <LL_TIM_IC_SetActiveInput+0x4e>
 80015c4:	2302      	movs	r3, #2
 80015c6:	e002      	b.n	80015ce <LL_TIM_IC_SetActiveInput+0x4e>
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <LL_TIM_IC_SetActiveInput+0x4e>
 80015cc:	2300      	movs	r3, #0
 80015ce:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	3318      	adds	r3, #24
 80015d4:	4619      	mov	r1, r3
 80015d6:	7dfb      	ldrb	r3, [r7, #23]
 80015d8:	4a0e      	ldr	r2, [pc, #56]	; (8001614 <LL_TIM_IC_SetActiveInput+0x94>)
 80015da:	5cd3      	ldrb	r3, [r2, r3]
 80015dc:	440b      	add	r3, r1
 80015de:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	7dfb      	ldrb	r3, [r7, #23]
 80015e6:	490c      	ldr	r1, [pc, #48]	; (8001618 <LL_TIM_IC_SetActiveInput+0x98>)
 80015e8:	5ccb      	ldrb	r3, [r1, r3]
 80015ea:	4619      	mov	r1, r3
 80015ec:	2303      	movs	r3, #3
 80015ee:	408b      	lsls	r3, r1
 80015f0:	43db      	mvns	r3, r3
 80015f2:	401a      	ands	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	0c1b      	lsrs	r3, r3, #16
 80015f8:	7df9      	ldrb	r1, [r7, #23]
 80015fa:	4807      	ldr	r0, [pc, #28]	; (8001618 <LL_TIM_IC_SetActiveInput+0x98>)
 80015fc:	5c41      	ldrb	r1, [r0, r1]
 80015fe:	408b      	lsls	r3, r1
 8001600:	431a      	orrs	r2, r3
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	601a      	str	r2, [r3, #0]
}
 8001606:	bf00      	nop
 8001608:	371c      	adds	r7, #28
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	08004564 	.word	0x08004564
 8001618:	08004574 	.word	0x08004574

0800161c <LL_TIM_IC_SetPrescaler>:
{
 800161c:	b480      	push	{r7}
 800161e:	b087      	sub	sp, #28
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d01c      	beq.n	8001668 <LL_TIM_IC_SetPrescaler+0x4c>
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	2b04      	cmp	r3, #4
 8001632:	d017      	beq.n	8001664 <LL_TIM_IC_SetPrescaler+0x48>
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	2b10      	cmp	r3, #16
 8001638:	d012      	beq.n	8001660 <LL_TIM_IC_SetPrescaler+0x44>
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	2b40      	cmp	r3, #64	; 0x40
 800163e:	d00d      	beq.n	800165c <LL_TIM_IC_SetPrescaler+0x40>
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001646:	d007      	beq.n	8001658 <LL_TIM_IC_SetPrescaler+0x3c>
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800164e:	d101      	bne.n	8001654 <LL_TIM_IC_SetPrescaler+0x38>
 8001650:	2305      	movs	r3, #5
 8001652:	e00a      	b.n	800166a <LL_TIM_IC_SetPrescaler+0x4e>
 8001654:	2306      	movs	r3, #6
 8001656:	e008      	b.n	800166a <LL_TIM_IC_SetPrescaler+0x4e>
 8001658:	2304      	movs	r3, #4
 800165a:	e006      	b.n	800166a <LL_TIM_IC_SetPrescaler+0x4e>
 800165c:	2303      	movs	r3, #3
 800165e:	e004      	b.n	800166a <LL_TIM_IC_SetPrescaler+0x4e>
 8001660:	2302      	movs	r3, #2
 8001662:	e002      	b.n	800166a <LL_TIM_IC_SetPrescaler+0x4e>
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <LL_TIM_IC_SetPrescaler+0x4e>
 8001668:	2300      	movs	r3, #0
 800166a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3318      	adds	r3, #24
 8001670:	4619      	mov	r1, r3
 8001672:	7dfb      	ldrb	r3, [r7, #23]
 8001674:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <LL_TIM_IC_SetPrescaler+0x94>)
 8001676:	5cd3      	ldrb	r3, [r2, r3]
 8001678:	440b      	add	r3, r1
 800167a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	7dfb      	ldrb	r3, [r7, #23]
 8001682:	490c      	ldr	r1, [pc, #48]	; (80016b4 <LL_TIM_IC_SetPrescaler+0x98>)
 8001684:	5ccb      	ldrb	r3, [r1, r3]
 8001686:	4619      	mov	r1, r3
 8001688:	230c      	movs	r3, #12
 800168a:	408b      	lsls	r3, r1
 800168c:	43db      	mvns	r3, r3
 800168e:	401a      	ands	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	0c1b      	lsrs	r3, r3, #16
 8001694:	7df9      	ldrb	r1, [r7, #23]
 8001696:	4807      	ldr	r0, [pc, #28]	; (80016b4 <LL_TIM_IC_SetPrescaler+0x98>)
 8001698:	5c41      	ldrb	r1, [r0, r1]
 800169a:	408b      	lsls	r3, r1
 800169c:	431a      	orrs	r2, r3
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	601a      	str	r2, [r3, #0]
}
 80016a2:	bf00      	nop
 80016a4:	371c      	adds	r7, #28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	08004564 	.word	0x08004564
 80016b4:	08004574 	.word	0x08004574

080016b8 <LL_TIM_IC_SetFilter>:
{
 80016b8:	b480      	push	{r7}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d01c      	beq.n	8001704 <LL_TIM_IC_SetFilter+0x4c>
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	2b04      	cmp	r3, #4
 80016ce:	d017      	beq.n	8001700 <LL_TIM_IC_SetFilter+0x48>
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	2b10      	cmp	r3, #16
 80016d4:	d012      	beq.n	80016fc <LL_TIM_IC_SetFilter+0x44>
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	2b40      	cmp	r3, #64	; 0x40
 80016da:	d00d      	beq.n	80016f8 <LL_TIM_IC_SetFilter+0x40>
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016e2:	d007      	beq.n	80016f4 <LL_TIM_IC_SetFilter+0x3c>
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ea:	d101      	bne.n	80016f0 <LL_TIM_IC_SetFilter+0x38>
 80016ec:	2305      	movs	r3, #5
 80016ee:	e00a      	b.n	8001706 <LL_TIM_IC_SetFilter+0x4e>
 80016f0:	2306      	movs	r3, #6
 80016f2:	e008      	b.n	8001706 <LL_TIM_IC_SetFilter+0x4e>
 80016f4:	2304      	movs	r3, #4
 80016f6:	e006      	b.n	8001706 <LL_TIM_IC_SetFilter+0x4e>
 80016f8:	2303      	movs	r3, #3
 80016fa:	e004      	b.n	8001706 <LL_TIM_IC_SetFilter+0x4e>
 80016fc:	2302      	movs	r3, #2
 80016fe:	e002      	b.n	8001706 <LL_TIM_IC_SetFilter+0x4e>
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <LL_TIM_IC_SetFilter+0x4e>
 8001704:	2300      	movs	r3, #0
 8001706:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	3318      	adds	r3, #24
 800170c:	4619      	mov	r1, r3
 800170e:	7dfb      	ldrb	r3, [r7, #23]
 8001710:	4a0e      	ldr	r2, [pc, #56]	; (800174c <LL_TIM_IC_SetFilter+0x94>)
 8001712:	5cd3      	ldrb	r3, [r2, r3]
 8001714:	440b      	add	r3, r1
 8001716:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	7dfb      	ldrb	r3, [r7, #23]
 800171e:	490c      	ldr	r1, [pc, #48]	; (8001750 <LL_TIM_IC_SetFilter+0x98>)
 8001720:	5ccb      	ldrb	r3, [r1, r3]
 8001722:	4619      	mov	r1, r3
 8001724:	23f0      	movs	r3, #240	; 0xf0
 8001726:	408b      	lsls	r3, r1
 8001728:	43db      	mvns	r3, r3
 800172a:	401a      	ands	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	0c1b      	lsrs	r3, r3, #16
 8001730:	7df9      	ldrb	r1, [r7, #23]
 8001732:	4807      	ldr	r0, [pc, #28]	; (8001750 <LL_TIM_IC_SetFilter+0x98>)
 8001734:	5c41      	ldrb	r1, [r0, r1]
 8001736:	408b      	lsls	r3, r1
 8001738:	431a      	orrs	r2, r3
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	601a      	str	r2, [r3, #0]
}
 800173e:	bf00      	nop
 8001740:	371c      	adds	r7, #28
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	08004564 	.word	0x08004564
 8001750:	08004574 	.word	0x08004574

08001754 <LL_TIM_IC_SetPolarity>:
{
 8001754:	b480      	push	{r7}
 8001756:	b087      	sub	sp, #28
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d01c      	beq.n	80017a0 <LL_TIM_IC_SetPolarity+0x4c>
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b04      	cmp	r3, #4
 800176a:	d017      	beq.n	800179c <LL_TIM_IC_SetPolarity+0x48>
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	2b10      	cmp	r3, #16
 8001770:	d012      	beq.n	8001798 <LL_TIM_IC_SetPolarity+0x44>
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	2b40      	cmp	r3, #64	; 0x40
 8001776:	d00d      	beq.n	8001794 <LL_TIM_IC_SetPolarity+0x40>
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800177e:	d007      	beq.n	8001790 <LL_TIM_IC_SetPolarity+0x3c>
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001786:	d101      	bne.n	800178c <LL_TIM_IC_SetPolarity+0x38>
 8001788:	2305      	movs	r3, #5
 800178a:	e00a      	b.n	80017a2 <LL_TIM_IC_SetPolarity+0x4e>
 800178c:	2306      	movs	r3, #6
 800178e:	e008      	b.n	80017a2 <LL_TIM_IC_SetPolarity+0x4e>
 8001790:	2304      	movs	r3, #4
 8001792:	e006      	b.n	80017a2 <LL_TIM_IC_SetPolarity+0x4e>
 8001794:	2303      	movs	r3, #3
 8001796:	e004      	b.n	80017a2 <LL_TIM_IC_SetPolarity+0x4e>
 8001798:	2302      	movs	r3, #2
 800179a:	e002      	b.n	80017a2 <LL_TIM_IC_SetPolarity+0x4e>
 800179c:	2301      	movs	r3, #1
 800179e:	e000      	b.n	80017a2 <LL_TIM_IC_SetPolarity+0x4e>
 80017a0:	2300      	movs	r3, #0
 80017a2:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6a1a      	ldr	r2, [r3, #32]
 80017a8:	7dfb      	ldrb	r3, [r7, #23]
 80017aa:	490b      	ldr	r1, [pc, #44]	; (80017d8 <LL_TIM_IC_SetPolarity+0x84>)
 80017ac:	5ccb      	ldrb	r3, [r1, r3]
 80017ae:	4619      	mov	r1, r3
 80017b0:	230a      	movs	r3, #10
 80017b2:	408b      	lsls	r3, r1
 80017b4:	43db      	mvns	r3, r3
 80017b6:	401a      	ands	r2, r3
 80017b8:	7dfb      	ldrb	r3, [r7, #23]
 80017ba:	4907      	ldr	r1, [pc, #28]	; (80017d8 <LL_TIM_IC_SetPolarity+0x84>)
 80017bc:	5ccb      	ldrb	r3, [r1, r3]
 80017be:	4619      	mov	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	408b      	lsls	r3, r1
 80017c4:	431a      	orrs	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	621a      	str	r2, [r3, #32]
}
 80017ca:	bf00      	nop
 80017cc:	371c      	adds	r7, #28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	0800457c 	.word	0x0800457c

080017dc <LL_TIM_SetClockSource>:
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017ee:	f023 0307 	bic.w	r3, r3, #7
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	609a      	str	r2, [r3, #8]
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <LL_TIM_SetEncoderMode>:
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f023 0207 	bic.w	r2, r3, #7
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	609a      	str	r2, [r3, #8]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <LL_TIM_SetTriggerOutput>:
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	605a      	str	r2, [r3, #4]
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <LL_TIM_DisableMasterSlaveMode>:
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	609a      	str	r2, [r3, #8]
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b09a      	sub	sp, #104	; 0x68
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800187a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
 8001888:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800188a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800188e:	2220      	movs	r2, #32
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f001 fe0e 	bl	80034b4 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001898:	f107 031c 	add.w	r3, r7, #28
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
 80018a8:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
 80018b8:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80018ba:	2001      	movs	r0, #1
 80018bc:	f7ff fdae 	bl	800141c <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80018c6:	2300      	movs	r3, #0
 80018c8:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 80018ca:	4b34      	ldr	r3, [pc, #208]	; (800199c <MX_TIM1_Init+0x128>)
 80018cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80018ce:	2300      	movs	r3, #0
 80018d0:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	667b      	str	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80018d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018da:	4619      	mov	r1, r3
 80018dc:	4830      	ldr	r0, [pc, #192]	; (80019a0 <MX_TIM1_Init+0x12c>)
 80018de:	f001 f84f 	bl	8002980 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 80018e2:	482f      	ldr	r0, [pc, #188]	; (80019a0 <MX_TIM1_Init+0x12c>)
 80018e4:	f7ff fdb2 	bl	800144c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 80018e8:	2100      	movs	r1, #0
 80018ea:	482d      	ldr	r0, [pc, #180]	; (80019a0 <MX_TIM1_Init+0x12c>)
 80018ec:	f7ff ff76 	bl	80017dc <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 80018f0:	2101      	movs	r1, #1
 80018f2:	482b      	ldr	r0, [pc, #172]	; (80019a0 <MX_TIM1_Init+0x12c>)
 80018f4:	f7ff fe00 	bl	80014f8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80018f8:	2360      	movs	r3, #96	; 0x60
 80018fa:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001900:	2300      	movs	r3, #0
 8001902:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001908:	2300      	movs	r3, #0
 800190a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 800190c:	2300      	movs	r3, #0
 800190e:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001910:	2300      	movs	r3, #0
 8001912:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001918:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800191c:	461a      	mov	r2, r3
 800191e:	2101      	movs	r1, #1
 8001920:	481f      	ldr	r0, [pc, #124]	; (80019a0 <MX_TIM1_Init+0x12c>)
 8001922:	f001 f8c7 	bl	8002ab4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8001926:	2101      	movs	r1, #1
 8001928:	481d      	ldr	r0, [pc, #116]	; (80019a0 <MX_TIM1_Init+0x12c>)
 800192a:	f7ff fd9f 	bl	800146c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800192e:	2100      	movs	r1, #0
 8001930:	481b      	ldr	r0, [pc, #108]	; (80019a0 <MX_TIM1_Init+0x12c>)
 8001932:	f7ff ff7b 	bl	800182c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8001936:	481a      	ldr	r0, [pc, #104]	; (80019a0 <MX_TIM1_Init+0x12c>)
 8001938:	f7ff ff8b 	bl	8001852 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8001944:	2300      	movs	r3, #0
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8001952:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 800195c:	f107 031c 	add.w	r3, r7, #28
 8001960:	4619      	mov	r1, r3
 8001962:	480f      	ldr	r0, [pc, #60]	; (80019a0 <MX_TIM1_Init+0x12c>)
 8001964:	f001 f8e7 	bl	8002b36 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001968:	2001      	movs	r0, #1
 800196a:	f7ff fd27 	bl	80013bc <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
  GPIO_InitStruct.Pin = LEFT_PWM_Pin;
 800196e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001972:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001974:	2302      	movs	r3, #2
 8001976:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001984:	2301      	movs	r3, #1
 8001986:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(LEFT_PWM_GPIO_Port, &GPIO_InitStruct);
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	4619      	mov	r1, r3
 800198c:	4805      	ldr	r0, [pc, #20]	; (80019a4 <MX_TIM1_Init+0x130>)
 800198e:	f000 fd62 	bl	8002456 <LL_GPIO_Init>

}
 8001992:	bf00      	nop
 8001994:	3768      	adds	r7, #104	; 0x68
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	fff003e8 	.word	0xfff003e8
 80019a0:	40010000 	.word	0x40010000
 80019a4:	40020000 	.word	0x40020000

080019a8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b094      	sub	sp, #80	; 0x50
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80019ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
 80019bc:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	2220      	movs	r2, #32
 80019c4:	2100      	movs	r1, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f001 fd74 	bl	80034b4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	611a      	str	r2, [r3, #16]
 80019da:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80019dc:	2001      	movs	r0, #1
 80019de:	f7ff fd05 	bl	80013ec <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80019e6:	2300      	movs	r3, #0
 80019e8:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 80019ea:	4b28      	ldr	r3, [pc, #160]	; (8001a8c <MX_TIM2_Init+0xe4>)
 80019ec:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80019ee:	2300      	movs	r3, #0
 80019f0:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80019f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019f6:	4619      	mov	r1, r3
 80019f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80019fc:	f000 ffc0 	bl	8002980 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001a00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a04:	f7ff fd22 	bl	800144c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001a08:	2100      	movs	r1, #0
 8001a0a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a0e:	f7ff fee5 	bl	80017dc <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 8001a12:	2110      	movs	r1, #16
 8001a14:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a18:	f7ff fd6e 	bl	80014f8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001a1c:	2360      	movs	r3, #96	; 0x60
 8001a1e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001a30:	f107 031c 	add.w	r3, r7, #28
 8001a34:	461a      	mov	r2, r3
 8001a36:	2110      	movs	r1, #16
 8001a38:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a3c:	f001 f83a 	bl	8002ab4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8001a40:	2110      	movs	r1, #16
 8001a42:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a46:	f7ff fd11 	bl	800146c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a50:	f7ff feec 	bl	800182c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001a54:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a58:	f7ff fefb 	bl	8001852 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001a5c:	2002      	movs	r0, #2
 8001a5e:	f7ff fcad 	bl	80013bc <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
  GPIO_InitStruct.Pin = RIGHT_PWM_Pin;
 8001a62:	2308      	movs	r3, #8
 8001a64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a66:	2302      	movs	r3, #2
 8001a68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001a76:	2301      	movs	r3, #1
 8001a78:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(RIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4804      	ldr	r0, [pc, #16]	; (8001a90 <MX_TIM2_Init+0xe8>)
 8001a80:	f000 fce9 	bl	8002456 <LL_GPIO_Init>

}
 8001a84:	bf00      	nop
 8001a86:	3750      	adds	r7, #80	; 0x50
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	fff003e8 	.word	0xfff003e8
 8001a90:	40020400 	.word	0x40020400

08001a94 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08c      	sub	sp, #48	; 0x30
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001a9a:	f107 031c 	add.w	r3, r7, #28
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
 8001aa8:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
 8001ab8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001aba:	2002      	movs	r0, #2
 8001abc:	f7ff fc96 	bl	80013ec <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001ac0:	2004      	movs	r0, #4
 8001ac2:	f7ff fc7b 	bl	80013bc <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PC6   ------> TIM3_CH1
  PC7   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = ENCODER_L_CH1_Pin|ENCODER_L_CH2_Pin;
 8001ac6:	23c0      	movs	r3, #192	; 0xc0
 8001ac8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001aca:	2302      	movs	r3, #2
 8001acc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001ada:	2302      	movs	r3, #2
 8001adc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4827      	ldr	r0, [pc, #156]	; (8001b80 <MX_TIM3_Init+0xec>)
 8001ae4:	f000 fcb7 	bl	8002456 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X2_TI1);
 8001ae8:	2101      	movs	r1, #1
 8001aea:	4826      	ldr	r0, [pc, #152]	; (8001b84 <MX_TIM3_Init+0xf0>)
 8001aec:	f7ff fe8b 	bl	8001806 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001af0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001af4:	2101      	movs	r1, #1
 8001af6:	4823      	ldr	r0, [pc, #140]	; (8001b84 <MX_TIM3_Init+0xf0>)
 8001af8:	f7ff fd42 	bl	8001580 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8001afc:	2200      	movs	r2, #0
 8001afe:	2101      	movs	r1, #1
 8001b00:	4820      	ldr	r0, [pc, #128]	; (8001b84 <MX_TIM3_Init+0xf0>)
 8001b02:	f7ff fd8b 	bl	800161c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2101      	movs	r1, #1
 8001b0a:	481e      	ldr	r0, [pc, #120]	; (8001b84 <MX_TIM3_Init+0xf0>)
 8001b0c:	f7ff fdd4 	bl	80016b8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2101      	movs	r1, #1
 8001b14:	481b      	ldr	r0, [pc, #108]	; (8001b84 <MX_TIM3_Init+0xf0>)
 8001b16:	f7ff fe1d 	bl	8001754 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001b1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b1e:	2110      	movs	r1, #16
 8001b20:	4818      	ldr	r0, [pc, #96]	; (8001b84 <MX_TIM3_Init+0xf0>)
 8001b22:	f7ff fd2d 	bl	8001580 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2110      	movs	r1, #16
 8001b2a:	4816      	ldr	r0, [pc, #88]	; (8001b84 <MX_TIM3_Init+0xf0>)
 8001b2c:	f7ff fd76 	bl	800161c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8001b30:	2200      	movs	r2, #0
 8001b32:	2110      	movs	r1, #16
 8001b34:	4813      	ldr	r0, [pc, #76]	; (8001b84 <MX_TIM3_Init+0xf0>)
 8001b36:	f7ff fdbf 	bl	80016b8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2110      	movs	r1, #16
 8001b3e:	4811      	ldr	r0, [pc, #68]	; (8001b84 <MX_TIM3_Init+0xf0>)
 8001b40:	f7ff fe08 	bl	8001754 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8001b4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001b52:	2300      	movs	r3, #0
 8001b54:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001b56:	f107 031c 	add.w	r3, r7, #28
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4809      	ldr	r0, [pc, #36]	; (8001b84 <MX_TIM3_Init+0xf0>)
 8001b5e:	f000 ff0f 	bl	8002980 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8001b62:	4808      	ldr	r0, [pc, #32]	; (8001b84 <MX_TIM3_Init+0xf0>)
 8001b64:	f7ff fc72 	bl	800144c <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4806      	ldr	r0, [pc, #24]	; (8001b84 <MX_TIM3_Init+0xf0>)
 8001b6c:	f7ff fe5e 	bl	800182c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001b70:	4804      	ldr	r0, [pc, #16]	; (8001b84 <MX_TIM3_Init+0xf0>)
 8001b72:	f7ff fe6e 	bl	8001852 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b76:	bf00      	nop
 8001b78:	3730      	adds	r7, #48	; 0x30
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40020800 	.word	0x40020800
 8001b84:	40000400 	.word	0x40000400

08001b88 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08c      	sub	sp, #48	; 0x30
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001b8e:	f107 031c 	add.w	r3, r7, #28
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
 8001b9c:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
 8001bac:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8001bae:	2004      	movs	r0, #4
 8001bb0:	f7ff fc1c 	bl	80013ec <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001bb4:	2002      	movs	r0, #2
 8001bb6:	f7ff fc01 	bl	80013bc <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PB6   ------> TIM4_CH1
  PB7   ------> TIM4_CH2
  */
  GPIO_InitStruct.Pin = ENCODER_R_CH1_Pin|ENCODER_R_CH2_Pin;
 8001bba:	23c0      	movs	r3, #192	; 0xc0
 8001bbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4827      	ldr	r0, [pc, #156]	; (8001c74 <MX_TIM4_Init+0xec>)
 8001bd8:	f000 fc3d 	bl	8002456 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  LL_TIM_SetEncoderMode(TIM4, LL_TIM_ENCODERMODE_X2_TI1);
 8001bdc:	2101      	movs	r1, #1
 8001bde:	4826      	ldr	r0, [pc, #152]	; (8001c78 <MX_TIM4_Init+0xf0>)
 8001be0:	f7ff fe11 	bl	8001806 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001be4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001be8:	2101      	movs	r1, #1
 8001bea:	4823      	ldr	r0, [pc, #140]	; (8001c78 <MX_TIM4_Init+0xf0>)
 8001bec:	f7ff fcc8 	bl	8001580 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	4820      	ldr	r0, [pc, #128]	; (8001c78 <MX_TIM4_Init+0xf0>)
 8001bf6:	f7ff fd11 	bl	800161c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	481e      	ldr	r0, [pc, #120]	; (8001c78 <MX_TIM4_Init+0xf0>)
 8001c00:	f7ff fd5a 	bl	80016b8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2101      	movs	r1, #1
 8001c08:	481b      	ldr	r0, [pc, #108]	; (8001c78 <MX_TIM4_Init+0xf0>)
 8001c0a:	f7ff fda3 	bl	8001754 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001c0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c12:	2110      	movs	r1, #16
 8001c14:	4818      	ldr	r0, [pc, #96]	; (8001c78 <MX_TIM4_Init+0xf0>)
 8001c16:	f7ff fcb3 	bl	8001580 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2110      	movs	r1, #16
 8001c1e:	4816      	ldr	r0, [pc, #88]	; (8001c78 <MX_TIM4_Init+0xf0>)
 8001c20:	f7ff fcfc 	bl	800161c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8001c24:	2200      	movs	r2, #0
 8001c26:	2110      	movs	r1, #16
 8001c28:	4813      	ldr	r0, [pc, #76]	; (8001c78 <MX_TIM4_Init+0xf0>)
 8001c2a:	f7ff fd45 	bl	80016b8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2110      	movs	r1, #16
 8001c32:	4811      	ldr	r0, [pc, #68]	; (8001c78 <MX_TIM4_Init+0xf0>)
 8001c34:	f7ff fd8e 	bl	8001754 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8001c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8001c4a:	f107 031c 	add.w	r3, r7, #28
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4809      	ldr	r0, [pc, #36]	; (8001c78 <MX_TIM4_Init+0xf0>)
 8001c52:	f000 fe95 	bl	8002980 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8001c56:	4808      	ldr	r0, [pc, #32]	; (8001c78 <MX_TIM4_Init+0xf0>)
 8001c58:	f7ff fbf8 	bl	800144c <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4806      	ldr	r0, [pc, #24]	; (8001c78 <MX_TIM4_Init+0xf0>)
 8001c60:	f7ff fde4 	bl	800182c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8001c64:	4804      	ldr	r0, [pc, #16]	; (8001c78 <MX_TIM4_Init+0xf0>)
 8001c66:	f7ff fdf4 	bl	8001852 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	3730      	adds	r7, #48	; 0x30
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40020400 	.word	0x40020400
 8001c78:	40000800 	.word	0x40000800

08001c7c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8001c90:	2008      	movs	r0, #8
 8001c92:	f7ff fbab 	bl	80013ec <LL_APB1_GRP1_EnableClock>

  /* TIM5 interrupt Init */
  NVIC_SetPriority(TIM5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001c96:	f7ff fb07 	bl	80012a8 <__NVIC_GetPriorityGrouping>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fb57 	bl	8001354 <NVIC_EncodePriority>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4619      	mov	r1, r3
 8001caa:	2032      	movs	r0, #50	; 0x32
 8001cac:	f7ff fb28 	bl	8001300 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 8001cb0:	2032      	movs	r0, #50	; 0x32
 8001cb2:	f7ff fb07 	bl	80012c4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 8001cb6:	2353      	movs	r3, #83	; 0x53
 8001cb8:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 8001cbe:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001cc2:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	4619      	mov	r1, r3
 8001ccc:	480a      	ldr	r0, [pc, #40]	; (8001cf8 <MX_TIM5_Init+0x7c>)
 8001cce:	f000 fe57 	bl	8002980 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 8001cd2:	4809      	ldr	r0, [pc, #36]	; (8001cf8 <MX_TIM5_Init+0x7c>)
 8001cd4:	f7ff fbba 	bl	800144c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4807      	ldr	r0, [pc, #28]	; (8001cf8 <MX_TIM5_Init+0x7c>)
 8001cdc:	f7ff fd7e 	bl	80017dc <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_TIM5_Init+0x7c>)
 8001ce4:	f7ff fda2 	bl	800182c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8001ce8:	4803      	ldr	r0, [pc, #12]	; (8001cf8 <MX_TIM5_Init+0x7c>)
 8001cea:	f7ff fdb2 	bl	8001852 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001cee:	bf00      	nop
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40000c00 	.word	0x40000c00

08001cfc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b09a      	sub	sp, #104	; 0x68
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001d02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
 8001d10:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001d12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d16:	2220      	movs	r2, #32
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f001 fbca 	bl	80034b4 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001d20:	f107 031c 	add.w	r3, r7, #28
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
 8001d30:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
 8001d40:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 8001d42:	2002      	movs	r0, #2
 8001d44:	f7ff fb6a 	bl	800141c <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 8001d48:	2353      	movs	r3, #83	; 0x53
 8001d4a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 999;
 8001d52:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001d56:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	667b      	str	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 8001d60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d64:	4619      	mov	r1, r3
 8001d66:	482e      	ldr	r0, [pc, #184]	; (8001e20 <MX_TIM8_Init+0x124>)
 8001d68:	f000 fe0a 	bl	8002980 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM8);
 8001d6c:	482c      	ldr	r0, [pc, #176]	; (8001e20 <MX_TIM8_Init+0x124>)
 8001d6e:	f7ff fb6d 	bl	800144c <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM8, LL_TIM_CHANNEL_CH4);
 8001d72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d76:	482a      	ldr	r0, [pc, #168]	; (8001e20 <MX_TIM8_Init+0x124>)
 8001d78:	f7ff fbbe 	bl	80014f8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001d7c:	2360      	movs	r3, #96	; 0x60
 8001d7e:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 50;
 8001d88:	2332      	movs	r3, #50	; 0x32
 8001d8a:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001d94:	2300      	movs	r3, #0
 8001d96:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001d98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001da2:	481f      	ldr	r0, [pc, #124]	; (8001e20 <MX_TIM8_Init+0x124>)
 8001da4:	f000 fe86 	bl	8002ab4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM8, LL_TIM_CHANNEL_CH4);
 8001da8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dac:	481c      	ldr	r0, [pc, #112]	; (8001e20 <MX_TIM8_Init+0x124>)
 8001dae:	f7ff fb5d 	bl	800146c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM8, LL_TIM_TRGO_RESET);
 8001db2:	2100      	movs	r1, #0
 8001db4:	481a      	ldr	r0, [pc, #104]	; (8001e20 <MX_TIM8_Init+0x124>)
 8001db6:	f7ff fd39 	bl	800182c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM8);
 8001dba:	4819      	ldr	r0, [pc, #100]	; (8001e20 <MX_TIM8_Init+0x124>)
 8001dbc:	f7ff fd49 	bl	8001852 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8001dd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM8, &TIM_BDTRInitStruct);
 8001de0:	f107 031c 	add.w	r3, r7, #28
 8001de4:	4619      	mov	r1, r3
 8001de6:	480e      	ldr	r0, [pc, #56]	; (8001e20 <MX_TIM8_Init+0x124>)
 8001de8:	f000 fea5 	bl	8002b36 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001dec:	2004      	movs	r0, #4
 8001dee:	f7ff fae5 	bl	80013bc <LL_AHB1_GRP1_EnableClock>
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8001df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001df6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4804      	ldr	r0, [pc, #16]	; (8001e24 <MX_TIM8_Init+0x128>)
 8001e12:	f000 fb20 	bl	8002456 <LL_GPIO_Init>

}
 8001e16:	bf00      	nop
 8001e18:	3768      	adds	r7, #104	; 0x68
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40010400 	.word	0x40010400
 8001e24:	40020800 	.word	0x40020800

08001e28 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b094      	sub	sp, #80	; 0x50
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001e2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	609a      	str	r2, [r3, #8]
 8001e3a:	60da      	str	r2, [r3, #12]
 8001e3c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001e3e:	f107 031c 	add.w	r3, r7, #28
 8001e42:	2220      	movs	r2, #32
 8001e44:	2100      	movs	r1, #0
 8001e46:	4618      	mov	r0, r3
 8001e48:	f001 fb34 	bl	80034b4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]
 8001e54:	609a      	str	r2, [r3, #8]
 8001e56:	60da      	str	r2, [r3, #12]
 8001e58:	611a      	str	r2, [r3, #16]
 8001e5a:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM11);
 8001e5c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001e60:	f7ff fadc 	bl	800141c <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 65535;
 8001e6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e70:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001e72:	2300      	movs	r3, #0
 8001e74:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM11, &TIM_InitStruct);
 8001e76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	481b      	ldr	r0, [pc, #108]	; (8001eec <MX_TIM11_Init+0xc4>)
 8001e7e:	f000 fd7f 	bl	8002980 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM11);
 8001e82:	481a      	ldr	r0, [pc, #104]	; (8001eec <MX_TIM11_Init+0xc4>)
 8001e84:	f7ff fae2 	bl	800144c <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM11, LL_TIM_CHANNEL_CH1);
 8001e88:	2101      	movs	r1, #1
 8001e8a:	4818      	ldr	r0, [pc, #96]	; (8001eec <MX_TIM11_Init+0xc4>)
 8001e8c:	f7ff fb34 	bl	80014f8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001e90:	2360      	movs	r3, #96	; 0x60
 8001e92:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM11, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001ea4:	f107 031c 	add.w	r3, r7, #28
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2101      	movs	r1, #1
 8001eac:	480f      	ldr	r0, [pc, #60]	; (8001eec <MX_TIM11_Init+0xc4>)
 8001eae:	f000 fe01 	bl	8002ab4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM11, LL_TIM_CHANNEL_CH1);
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	480d      	ldr	r0, [pc, #52]	; (8001eec <MX_TIM11_Init+0xc4>)
 8001eb6:	f7ff fad9 	bl	800146c <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001eba:	2002      	movs	r0, #2
 8001ebc:	f7ff fa7e 	bl	80013bc <LL_AHB1_GRP1_EnableClock>
    /**TIM11 GPIO Configuration
    PB9     ------> TIM11_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	4619      	mov	r1, r3
 8001ede:	4804      	ldr	r0, [pc, #16]	; (8001ef0 <MX_TIM11_Init+0xc8>)
 8001ee0:	f000 fab9 	bl	8002456 <LL_GPIO_Init>

}
 8001ee4:	bf00      	nop
 8001ee6:	3750      	adds	r7, #80	; 0x50
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40014800 	.word	0x40014800
 8001ef0:	40020400 	.word	0x40020400

08001ef4 <LL_AHB1_GRP1_EnableClock>:
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001efc:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001efe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f00:	4907      	ldr	r1, [pc, #28]	; (8001f20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001f08:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f12:	68fb      	ldr	r3, [r7, #12]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	40023800 	.word	0x40023800

08001f24 <LL_APB2_GRP1_EnableClock>:
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f30:	4907      	ldr	r1, [pc, #28]	; (8001f50 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f38:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f42:	68fb      	ldr	r3, [r7, #12]
}
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	40023800 	.word	0x40023800

08001f54 <LL_USART_Enable>:
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	60da      	str	r2, [r3, #12]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_USART_ConfigAsyncMode>:
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	615a      	str	r2, [r3, #20]
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08e      	sub	sp, #56	; 0x38
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001fa6:	f107 031c 	add.w	r3, r7, #28
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	609a      	str	r2, [r3, #8]
 8001fb2:	60da      	str	r2, [r3, #12]
 8001fb4:	611a      	str	r2, [r3, #16]
 8001fb6:	615a      	str	r2, [r3, #20]
 8001fb8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fba:	1d3b      	adds	r3, r7, #4
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
 8001fc8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001fca:	2010      	movs	r0, #16
 8001fcc:	f7ff ffaa 	bl	8001f24 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	f7ff ff8f 	bl	8001ef4 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8001fd6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001fec:	2307      	movs	r3, #7
 8001fee:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4810      	ldr	r0, [pc, #64]	; (8002038 <MX_USART1_UART_Init+0x98>)
 8001ff6:	f000 fa2e 	bl	8002456 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8001ffa:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001ffe:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002000:	2300      	movs	r3, #0
 8002002:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002004:	2300      	movs	r3, #0
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002008:	2300      	movs	r3, #0
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800200c:	230c      	movs	r3, #12
 800200e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002010:	2300      	movs	r3, #0
 8002012:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002014:	2300      	movs	r3, #0
 8002016:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8002018:	f107 031c 	add.w	r3, r7, #28
 800201c:	4619      	mov	r1, r3
 800201e:	4807      	ldr	r0, [pc, #28]	; (800203c <MX_USART1_UART_Init+0x9c>)
 8002020:	f001 f940 	bl	80032a4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8002024:	4805      	ldr	r0, [pc, #20]	; (800203c <MX_USART1_UART_Init+0x9c>)
 8002026:	f7ff ffa5 	bl	8001f74 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800202a:	4804      	ldr	r0, [pc, #16]	; (800203c <MX_USART1_UART_Init+0x9c>)
 800202c:	f7ff ff92 	bl	8001f54 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002030:	bf00      	nop
 8002032:	3738      	adds	r7, #56	; 0x38
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40020000 	.word	0x40020000
 800203c:	40011000 	.word	0x40011000

08002040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002078 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002044:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002046:	e003      	b.n	8002050 <LoopCopyDataInit>

08002048 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800204a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800204c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800204e:	3104      	adds	r1, #4

08002050 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002050:	480b      	ldr	r0, [pc, #44]	; (8002080 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002054:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002056:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002058:	d3f6      	bcc.n	8002048 <CopyDataInit>
  ldr  r2, =_sbss
 800205a:	4a0b      	ldr	r2, [pc, #44]	; (8002088 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800205c:	e002      	b.n	8002064 <LoopFillZerobss>

0800205e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800205e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002060:	f842 3b04 	str.w	r3, [r2], #4

08002064 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002066:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002068:	d3f9      	bcc.n	800205e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800206a:	f7ff f907 	bl	800127c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800206e:	f001 f9fd 	bl	800346c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002072:	f7fe fec1 	bl	8000df8 <main>
  bx  lr    
 8002076:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002078:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800207c:	0800462c 	.word	0x0800462c
  ldr  r0, =_sdata
 8002080:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002084:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8002088:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 800208c:	200000a4 	.word	0x200000a4

08002090 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002090:	e7fe      	b.n	8002090 <ADC_IRQHandler>

08002092 <LL_ADC_REG_SetSequencerLength>:
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	bf0c      	ite	eq
 80020cc:	2301      	moveq	r3, #1
 80020ce:	2300      	movne	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80020ea:	2300      	movs	r3, #0
 80020ec:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 80020ee:	481c      	ldr	r0, [pc, #112]	; (8002160 <LL_ADC_CommonInit+0x80>)
 80020f0:	f7ff ffe2 	bl	80020b8 <LL_ADC_IsEnabled>
 80020f4:	4604      	mov	r4, r0
 80020f6:	481b      	ldr	r0, [pc, #108]	; (8002164 <LL_ADC_CommonInit+0x84>)
 80020f8:	f7ff ffde 	bl	80020b8 <LL_ADC_IsEnabled>
 80020fc:	4603      	mov	r3, r0
 80020fe:	431c      	orrs	r4, r3
 8002100:	4819      	ldr	r0, [pc, #100]	; (8002168 <LL_ADC_CommonInit+0x88>)
 8002102:	f7ff ffd9 	bl	80020b8 <LL_ADC_IsEnabled>
 8002106:	4603      	mov	r3, r0
 8002108:	4323      	orrs	r3, r4
 800210a:	2b00      	cmp	r3, #0
 800210c:	d120      	bne.n	8002150 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d012      	beq.n	800213c <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	4b14      	ldr	r3, [pc, #80]	; (800216c <LL_ADC_CommonInit+0x8c>)
 800211c:	4013      	ands	r3, r2
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	6811      	ldr	r1, [r2, #0]
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	6852      	ldr	r2, [r2, #4]
 8002126:	4311      	orrs	r1, r2
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	6892      	ldr	r2, [r2, #8]
 800212c:	4311      	orrs	r1, r2
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	68d2      	ldr	r2, [r2, #12]
 8002132:	430a      	orrs	r2, r1
 8002134:	431a      	orrs	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	e00b      	b.n	8002154 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	4b0a      	ldr	r3, [pc, #40]	; (800216c <LL_ADC_CommonInit+0x8c>)
 8002142:	4013      	ands	r3, r2
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	e001      	b.n	8002154 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002154:	7bfb      	ldrb	r3, [r7, #15]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	bd90      	pop	{r4, r7, pc}
 800215e:	bf00      	nop
 8002160:	40012000 	.word	0x40012000
 8002164:	40012100 	.word	0x40012100
 8002168:	40012200 	.word	0x40012200
 800216c:	fffc10e0 	.word	0xfffc10e0

08002170 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800217a:	2300      	movs	r3, #0
 800217c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ff9a 	bl	80020b8 <LL_ADC_IsEnabled>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d117      	bne.n	80021ba <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002192:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	6811      	ldr	r1, [r2, #0]
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	6892      	ldr	r2, [r2, #8]
 800219e:	430a      	orrs	r2, r1
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	e001      	b.n	80021be <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80021be:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80021d2:	2300      	movs	r3, #0
 80021d4:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff ff6e 	bl	80020b8 <LL_ADC_IsEnabled>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d12b      	bne.n	800223a <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d009      	beq.n	80021fe <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	e005      	b.n	800220a <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <LL_ADC_REG_Init+0x80>)
 8002210:	4013      	ands	r3, r2
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	6812      	ldr	r2, [r2, #0]
 8002216:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	68d2      	ldr	r2, [r2, #12]
 800221e:	4311      	orrs	r1, r2
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	6912      	ldr	r2, [r2, #16]
 8002224:	430a      	orrs	r2, r1
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	4619      	mov	r1, r3
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ff2d 	bl	8002092 <LL_ADC_REG_SetSequencerLength>
 8002238:	e001      	b.n	800223e <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800223e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	c0fffcfd 	.word	0xc0fffcfd

0800224c <LL_GPIO_SetPinMode>:
{
 800224c:	b480      	push	{r7}
 800224e:	b089      	sub	sp, #36	; 0x24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	fa93 f3a3 	rbit	r3, r3
 8002266:	613b      	str	r3, [r7, #16]
  return result;
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	2103      	movs	r1, #3
 8002274:	fa01 f303 	lsl.w	r3, r1, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	401a      	ands	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	fa93 f3a3 	rbit	r3, r3
 8002286:	61bb      	str	r3, [r7, #24]
  return result;
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	fab3 f383 	clz	r3, r3
 800228e:	b2db      	uxtb	r3, r3
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	fa01 f303 	lsl.w	r3, r1, r3
 8002298:	431a      	orrs	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	601a      	str	r2, [r3, #0]
}
 800229e:	bf00      	nop
 80022a0:	3724      	adds	r7, #36	; 0x24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <LL_GPIO_SetPinOutputType>:
{
 80022aa:	b480      	push	{r7}
 80022ac:	b085      	sub	sp, #20
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	43db      	mvns	r3, r3
 80022be:	401a      	ands	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	fb01 f303 	mul.w	r3, r1, r3
 80022c8:	431a      	orrs	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	605a      	str	r2, [r3, #4]
}
 80022ce:	bf00      	nop
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <LL_GPIO_SetPinSpeed>:
{
 80022da:	b480      	push	{r7}
 80022dc:	b089      	sub	sp, #36	; 0x24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	fa93 f3a3 	rbit	r3, r3
 80022f4:	613b      	str	r3, [r7, #16]
  return result;
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	fab3 f383 	clz	r3, r3
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	2103      	movs	r1, #3
 8002302:	fa01 f303 	lsl.w	r3, r1, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	401a      	ands	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	61bb      	str	r3, [r7, #24]
  return result;
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	fab3 f383 	clz	r3, r3
 800231c:	b2db      	uxtb	r3, r3
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	431a      	orrs	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	609a      	str	r2, [r3, #8]
}
 800232c:	bf00      	nop
 800232e:	3724      	adds	r7, #36	; 0x24
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_GPIO_SetPinPull>:
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	fa93 f3a3 	rbit	r3, r3
 8002352:	613b      	str	r3, [r7, #16]
  return result;
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	fab3 f383 	clz	r3, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	2103      	movs	r1, #3
 8002360:	fa01 f303 	lsl.w	r3, r1, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	401a      	ands	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	61bb      	str	r3, [r7, #24]
  return result;
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	fa01 f303 	lsl.w	r3, r1, r3
 8002384:	431a      	orrs	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	60da      	str	r2, [r3, #12]
}
 800238a:	bf00      	nop
 800238c:	3724      	adds	r7, #36	; 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <LL_GPIO_SetAFPin_0_7>:
{
 8002396:	b480      	push	{r7}
 8002398:	b089      	sub	sp, #36	; 0x24
 800239a:	af00      	add	r7, sp, #0
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a1a      	ldr	r2, [r3, #32]
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	fa93 f3a3 	rbit	r3, r3
 80023b0:	613b      	str	r3, [r7, #16]
  return result;
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	fab3 f383 	clz	r3, r3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	210f      	movs	r1, #15
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	401a      	ands	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	61bb      	str	r3, [r7, #24]
  return result;
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	fab3 f383 	clz	r3, r3
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	fa01 f303 	lsl.w	r3, r1, r3
 80023e2:	431a      	orrs	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	621a      	str	r2, [r3, #32]
}
 80023e8:	bf00      	nop
 80023ea:	3724      	adds	r7, #36	; 0x24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <LL_GPIO_SetAFPin_8_15>:
{
 80023f4:	b480      	push	{r7}
 80023f6:	b089      	sub	sp, #36	; 0x24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	0a1b      	lsrs	r3, r3, #8
 8002408:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	fa93 f3a3 	rbit	r3, r3
 8002410:	613b      	str	r3, [r7, #16]
  return result;
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	fab3 f383 	clz	r3, r3
 8002418:	b2db      	uxtb	r3, r3
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	210f      	movs	r1, #15
 800241e:	fa01 f303 	lsl.w	r3, r1, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	401a      	ands	r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	fa93 f3a3 	rbit	r3, r3
 8002432:	61bb      	str	r3, [r7, #24]
  return result;
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	431a      	orrs	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	625a      	str	r2, [r3, #36]	; 0x24
}
 800244a:	bf00      	nop
 800244c:	3724      	adds	r7, #36	; 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b088      	sub	sp, #32
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002460:	2300      	movs	r3, #0
 8002462:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002464:	2300      	movs	r3, #0
 8002466:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	fa93 f3a3 	rbit	r3, r3
 8002474:	613b      	str	r3, [r7, #16]
  return result;
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	fab3 f383 	clz	r3, r3
 800247c:	b2db      	uxtb	r3, r3
 800247e:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002480:	e050      	b.n	8002524 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	2101      	movs	r1, #1
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	fa01 f303 	lsl.w	r3, r1, r3
 800248e:	4013      	ands	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d042      	beq.n	800251e <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d003      	beq.n	80024a8 <LL_GPIO_Init+0x52>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d10d      	bne.n	80024c4 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	461a      	mov	r2, r3
 80024ae:	69b9      	ldr	r1, [r7, #24]
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ff12 	bl	80022da <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	461a      	mov	r2, r3
 80024bc:	69b9      	ldr	r1, [r7, #24]
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff fef3 	bl	80022aa <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	461a      	mov	r2, r3
 80024ca:	69b9      	ldr	r1, [r7, #24]
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff ff33 	bl	8002338 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d11a      	bne.n	8002510 <LL_GPIO_Init+0xba>
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	fa93 f3a3 	rbit	r3, r3
 80024e4:	60bb      	str	r3, [r7, #8]
  return result;
 80024e6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80024e8:	fab3 f383 	clz	r3, r3
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b07      	cmp	r3, #7
 80024f0:	d807      	bhi.n	8002502 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	461a      	mov	r2, r3
 80024f8:	69b9      	ldr	r1, [r7, #24]
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff ff4b 	bl	8002396 <LL_GPIO_SetAFPin_0_7>
 8002500:	e006      	b.n	8002510 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	461a      	mov	r2, r3
 8002508:	69b9      	ldr	r1, [r7, #24]
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff ff72 	bl	80023f4 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	461a      	mov	r2, r3
 8002516:	69b9      	ldr	r1, [r7, #24]
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff fe97 	bl	800224c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3301      	adds	r3, #1
 8002522:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1a7      	bne.n	8002482 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3720      	adds	r7, #32
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <LL_RCC_GetSysClkSource>:
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002540:	4b04      	ldr	r3, [pc, #16]	; (8002554 <LL_RCC_GetSysClkSource+0x18>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 030c 	and.w	r3, r3, #12
}
 8002548:	4618      	mov	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800

08002558 <LL_RCC_GetAHBPrescaler>:
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800255c:	4b04      	ldr	r3, [pc, #16]	; (8002570 <LL_RCC_GetAHBPrescaler+0x18>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800

08002574 <LL_RCC_GetAPB1Prescaler>:
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <LL_RCC_GetAPB1Prescaler+0x18>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8002580:	4618      	mov	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800

08002590 <LL_RCC_GetAPB2Prescaler>:
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002594:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800

080025ac <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80025b0:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <LL_RCC_PLL_GetMainSource+0x18>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800

080025c8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <LL_RCC_PLL_GetN+0x18>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	099b      	lsrs	r3, r3, #6
 80025d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	40023800 	.word	0x40023800

080025e4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <LL_RCC_PLL_GetP+0x18>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40023800 	.word	0x40023800

08002600 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002604:	4b04      	ldr	r3, [pc, #16]	; (8002618 <LL_RCC_PLL_GetDivider+0x18>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40023800 	.word	0x40023800

0800261c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002624:	f000 f820 	bl	8002668 <RCC_GetSystemClockFreq>
 8002628:	4602      	mov	r2, r0
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f000 f840 	bl	80026b8 <RCC_GetHCLKClockFreq>
 8002638:	4602      	mov	r2, r0
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f84e 	bl	80026e4 <RCC_GetPCLK1ClockFreq>
 8002648:	4602      	mov	r2, r0
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	4618      	mov	r0, r3
 8002654:	f000 f85a 	bl	800270c <RCC_GetPCLK2ClockFreq>
 8002658:	4602      	mov	r2, r0
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	60da      	str	r2, [r3, #12]
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800266e:	2300      	movs	r3, #0
 8002670:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002672:	f7ff ff63 	bl	800253c <LL_RCC_GetSysClkSource>
 8002676:	4603      	mov	r3, r0
 8002678:	2b08      	cmp	r3, #8
 800267a:	d00c      	beq.n	8002696 <RCC_GetSystemClockFreq+0x2e>
 800267c:	2b08      	cmp	r3, #8
 800267e:	d80f      	bhi.n	80026a0 <RCC_GetSystemClockFreq+0x38>
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <RCC_GetSystemClockFreq+0x22>
 8002684:	2b04      	cmp	r3, #4
 8002686:	d003      	beq.n	8002690 <RCC_GetSystemClockFreq+0x28>
 8002688:	e00a      	b.n	80026a0 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <RCC_GetSystemClockFreq+0x48>)
 800268c:	607b      	str	r3, [r7, #4]
      break;
 800268e:	e00a      	b.n	80026a6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <RCC_GetSystemClockFreq+0x4c>)
 8002692:	607b      	str	r3, [r7, #4]
      break;
 8002694:	e007      	b.n	80026a6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002696:	2008      	movs	r0, #8
 8002698:	f000 f84c 	bl	8002734 <RCC_PLL_GetFreqDomain_SYS>
 800269c:	6078      	str	r0, [r7, #4]
      break;
 800269e:	e002      	b.n	80026a6 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80026a0:	4b03      	ldr	r3, [pc, #12]	; (80026b0 <RCC_GetSystemClockFreq+0x48>)
 80026a2:	607b      	str	r3, [r7, #4]
      break;
 80026a4:	bf00      	nop
  }

  return frequency;
 80026a6:	687b      	ldr	r3, [r7, #4]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	00f42400 	.word	0x00f42400
 80026b4:	017d7840 	.word	0x017d7840

080026b8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80026c0:	f7ff ff4a 	bl	8002558 <LL_RCC_GetAHBPrescaler>
 80026c4:	4603      	mov	r3, r0
 80026c6:	091b      	lsrs	r3, r3, #4
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	4a04      	ldr	r2, [pc, #16]	; (80026e0 <RCC_GetHCLKClockFreq+0x28>)
 80026ce:	5cd3      	ldrb	r3, [r2, r3]
 80026d0:	461a      	mov	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	40d3      	lsrs	r3, r2
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	0800454c 	.word	0x0800454c

080026e4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80026ec:	f7ff ff42 	bl	8002574 <LL_RCC_GetAPB1Prescaler>
 80026f0:	4603      	mov	r3, r0
 80026f2:	0a9b      	lsrs	r3, r3, #10
 80026f4:	4a04      	ldr	r2, [pc, #16]	; (8002708 <RCC_GetPCLK1ClockFreq+0x24>)
 80026f6:	5cd3      	ldrb	r3, [r2, r3]
 80026f8:	461a      	mov	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	40d3      	lsrs	r3, r2
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	0800455c 	.word	0x0800455c

0800270c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002714:	f7ff ff3c 	bl	8002590 <LL_RCC_GetAPB2Prescaler>
 8002718:	4603      	mov	r3, r0
 800271a:	0b5b      	lsrs	r3, r3, #13
 800271c:	4a04      	ldr	r2, [pc, #16]	; (8002730 <RCC_GetPCLK2ClockFreq+0x24>)
 800271e:	5cd3      	ldrb	r3, [r2, r3]
 8002720:	461a      	mov	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	40d3      	lsrs	r3, r2
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	0800455c 	.word	0x0800455c

08002734 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b087      	sub	sp, #28
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	2300      	movs	r3, #0
 8002746:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002748:	f7ff ff30 	bl	80025ac <LL_RCC_PLL_GetMainSource>
 800274c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d004      	beq.n	800275e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800275a:	d003      	beq.n	8002764 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800275c:	e005      	b.n	800276a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800275e:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002760:	617b      	str	r3, [r7, #20]
      break;
 8002762:	e005      	b.n	8002770 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002764:	4b11      	ldr	r3, [pc, #68]	; (80027ac <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002766:	617b      	str	r3, [r7, #20]
      break;
 8002768:	e002      	b.n	8002770 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800276a:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800276c:	617b      	str	r3, [r7, #20]
      break;
 800276e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b08      	cmp	r3, #8
 8002774:	d113      	bne.n	800279e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002776:	f7ff ff43 	bl	8002600 <LL_RCC_PLL_GetDivider>
 800277a:	4602      	mov	r2, r0
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	fbb3 f4f2 	udiv	r4, r3, r2
 8002782:	f7ff ff21 	bl	80025c8 <LL_RCC_PLL_GetN>
 8002786:	4603      	mov	r3, r0
 8002788:	fb03 f404 	mul.w	r4, r3, r4
 800278c:	f7ff ff2a 	bl	80025e4 <LL_RCC_PLL_GetP>
 8002790:	4603      	mov	r3, r0
 8002792:	0c1b      	lsrs	r3, r3, #16
 8002794:	3301      	adds	r3, #1
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	fbb4 f3f3 	udiv	r3, r4, r3
 800279c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800279e:	693b      	ldr	r3, [r7, #16]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	371c      	adds	r7, #28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd90      	pop	{r4, r7, pc}
 80027a8:	00f42400 	.word	0x00f42400
 80027ac:	017d7840 	.word	0x017d7840

080027b0 <LL_SPI_IsEnabled>:
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c0:	2b40      	cmp	r3, #64	; 0x40
 80027c2:	d101      	bne.n	80027c8 <LL_SPI_IsEnabled+0x18>
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <LL_SPI_IsEnabled+0x1a>
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	461a      	mov	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	611a      	str	r2, [r3, #16]
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b084      	sub	sp, #16
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff ffd3 	bl	80027b0 <LL_SPI_IsEnabled>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d139      	bne.n	8002884 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002818:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	6811      	ldr	r1, [r2, #0]
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	6852      	ldr	r2, [r2, #4]
 8002824:	4311      	orrs	r1, r2
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	6892      	ldr	r2, [r2, #8]
 800282a:	4311      	orrs	r1, r2
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	68d2      	ldr	r2, [r2, #12]
 8002830:	4311      	orrs	r1, r2
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	6912      	ldr	r2, [r2, #16]
 8002836:	4311      	orrs	r1, r2
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	6952      	ldr	r2, [r2, #20]
 800283c:	4311      	orrs	r1, r2
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	6992      	ldr	r2, [r2, #24]
 8002842:	4311      	orrs	r1, r2
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	69d2      	ldr	r2, [r2, #28]
 8002848:	4311      	orrs	r1, r2
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	6a12      	ldr	r2, [r2, #32]
 800284e:	430a      	orrs	r2, r1
 8002850:	431a      	orrs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f023 0204 	bic.w	r2, r3, #4
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	0c1b      	lsrs	r3, r3, #16
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002872:	d105      	bne.n	8002880 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	4619      	mov	r1, r3
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff ffab 	bl	80027d6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002880:	2300      	movs	r3, #0
 8002882:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	61da      	str	r2, [r3, #28]
  return status;
 8002890:	7bfb      	ldrb	r3, [r7, #15]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <LL_TIM_SetPrescaler>:
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <LL_TIM_SetAutoReload>:
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <LL_TIM_SetRepetitionCounter>:
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <LL_TIM_OC_SetCompareCH1>:
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <LL_TIM_OC_SetCompareCH2>:
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	639a      	str	r2, [r3, #56]	; 0x38
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <LL_TIM_OC_SetCompareCH3>:
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <LL_TIM_OC_SetCompareCH4>:
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	f043 0201 	orr.w	r2, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	615a      	str	r2, [r3, #20]
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
	...

08002980 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a3d      	ldr	r2, [pc, #244]	; (8002a88 <LL_TIM_Init+0x108>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d013      	beq.n	80029c0 <LL_TIM_Init+0x40>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299e:	d00f      	beq.n	80029c0 <LL_TIM_Init+0x40>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a3a      	ldr	r2, [pc, #232]	; (8002a8c <LL_TIM_Init+0x10c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d00b      	beq.n	80029c0 <LL_TIM_Init+0x40>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a39      	ldr	r2, [pc, #228]	; (8002a90 <LL_TIM_Init+0x110>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d007      	beq.n	80029c0 <LL_TIM_Init+0x40>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a38      	ldr	r2, [pc, #224]	; (8002a94 <LL_TIM_Init+0x114>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d003      	beq.n	80029c0 <LL_TIM_Init+0x40>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a37      	ldr	r2, [pc, #220]	; (8002a98 <LL_TIM_Init+0x118>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d106      	bne.n	80029ce <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a2d      	ldr	r2, [pc, #180]	; (8002a88 <LL_TIM_Init+0x108>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d02b      	beq.n	8002a2e <LL_TIM_Init+0xae>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029dc:	d027      	beq.n	8002a2e <LL_TIM_Init+0xae>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a2a      	ldr	r2, [pc, #168]	; (8002a8c <LL_TIM_Init+0x10c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d023      	beq.n	8002a2e <LL_TIM_Init+0xae>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a29      	ldr	r2, [pc, #164]	; (8002a90 <LL_TIM_Init+0x110>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d01f      	beq.n	8002a2e <LL_TIM_Init+0xae>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a28      	ldr	r2, [pc, #160]	; (8002a94 <LL_TIM_Init+0x114>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d01b      	beq.n	8002a2e <LL_TIM_Init+0xae>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a27      	ldr	r2, [pc, #156]	; (8002a98 <LL_TIM_Init+0x118>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d017      	beq.n	8002a2e <LL_TIM_Init+0xae>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a26      	ldr	r2, [pc, #152]	; (8002a9c <LL_TIM_Init+0x11c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d013      	beq.n	8002a2e <LL_TIM_Init+0xae>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a25      	ldr	r2, [pc, #148]	; (8002aa0 <LL_TIM_Init+0x120>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00f      	beq.n	8002a2e <LL_TIM_Init+0xae>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a24      	ldr	r2, [pc, #144]	; (8002aa4 <LL_TIM_Init+0x124>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00b      	beq.n	8002a2e <LL_TIM_Init+0xae>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a23      	ldr	r2, [pc, #140]	; (8002aa8 <LL_TIM_Init+0x128>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d007      	beq.n	8002a2e <LL_TIM_Init+0xae>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a22      	ldr	r2, [pc, #136]	; (8002aac <LL_TIM_Init+0x12c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d003      	beq.n	8002a2e <LL_TIM_Init+0xae>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a21      	ldr	r2, [pc, #132]	; (8002ab0 <LL_TIM_Init+0x130>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d106      	bne.n	8002a3c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	4619      	mov	r1, r3
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff ff34 	bl	80028b6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	4619      	mov	r1, r3
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ff20 	bl	800289a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a0a      	ldr	r2, [pc, #40]	; (8002a88 <LL_TIM_Init+0x108>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d003      	beq.n	8002a6a <LL_TIM_Init+0xea>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a0c      	ldr	r2, [pc, #48]	; (8002a98 <LL_TIM_Init+0x118>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d105      	bne.n	8002a76 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff ff2e 	bl	80028d2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7ff ff71 	bl	800295e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40010000 	.word	0x40010000
 8002a8c:	40000400 	.word	0x40000400
 8002a90:	40000800 	.word	0x40000800
 8002a94:	40000c00 	.word	0x40000c00
 8002a98:	40010400 	.word	0x40010400
 8002a9c:	40014000 	.word	0x40014000
 8002aa0:	40014400 	.word	0x40014400
 8002aa4:	40014800 	.word	0x40014800
 8002aa8:	40001800 	.word	0x40001800
 8002aac:	40001c00 	.word	0x40001c00
 8002ab0:	40002000 	.word	0x40002000

08002ab4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aca:	d027      	beq.n	8002b1c <LL_TIM_OC_Init+0x68>
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad2:	d82a      	bhi.n	8002b2a <LL_TIM_OC_Init+0x76>
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ada:	d018      	beq.n	8002b0e <LL_TIM_OC_Init+0x5a>
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae2:	d822      	bhi.n	8002b2a <LL_TIM_OC_Init+0x76>
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d003      	beq.n	8002af2 <LL_TIM_OC_Init+0x3e>
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2b10      	cmp	r3, #16
 8002aee:	d007      	beq.n	8002b00 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002af0:	e01b      	b.n	8002b2a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 f867 	bl	8002bc8 <OC1Config>
 8002afa:	4603      	mov	r3, r0
 8002afc:	75fb      	strb	r3, [r7, #23]
      break;
 8002afe:	e015      	b.n	8002b2c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f8cc 	bl	8002ca0 <OC2Config>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b0c:	e00e      	b.n	8002b2c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 f935 	bl	8002d80 <OC3Config>
 8002b16:	4603      	mov	r3, r0
 8002b18:	75fb      	strb	r3, [r7, #23]
      break;
 8002b1a:	e007      	b.n	8002b2c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f99e 	bl	8002e60 <OC4Config>
 8002b24:	4603      	mov	r3, r0
 8002b26:	75fb      	strb	r3, [r7, #23]
      break;
 8002b28:	e000      	b.n	8002b2c <LL_TIM_OC_Init+0x78>
      break;
 8002b2a:	bf00      	nop
  }

  return result;
 8002b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b085      	sub	sp, #20
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	7b12      	ldrb	r2, [r2, #12]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	89d2      	ldrh	r2, [r2, #14]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	f023 0201 	bic.w	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f023 0303 	bic.w	r3, r3, #3
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f023 0202 	bic.w	r2, r3, #2
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f023 0201 	bic.w	r2, r3, #1
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a1c      	ldr	r2, [pc, #112]	; (8002c98 <OC1Config+0xd0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d003      	beq.n	8002c32 <OC1Config+0x6a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a1b      	ldr	r2, [pc, #108]	; (8002c9c <OC1Config+0xd4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d11e      	bne.n	8002c70 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f023 0208 	bic.w	r2, r3, #8
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f023 0204 	bic.w	r2, r3, #4
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	4619      	mov	r1, r3
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff fe33 	bl	80028ee <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40010000 	.word	0x40010000
 8002c9c:	40010400 	.word	0x40010400

08002ca0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	f023 0210 	bic.w	r2, r3, #16
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f023 0220 	bic.w	r2, r3, #32
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f023 0210 	bic.w	r2, r3, #16
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a1d      	ldr	r2, [pc, #116]	; (8002d78 <OC2Config+0xd8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d003      	beq.n	8002d10 <OC2Config+0x70>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a1c      	ldr	r2, [pc, #112]	; (8002d7c <OC2Config+0xdc>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d11f      	bne.n	8002d50 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	019b      	lsls	r3, r3, #6
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	019b      	lsls	r3, r3, #6
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4619      	mov	r1, r3
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff fdd1 	bl	800290a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40010000 	.word	0x40010000
 8002d7c:	40010400 	.word	0x40010400

08002d80 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0303 	bic.w	r3, r3, #3
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	021b      	lsls	r3, r3, #8
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	021b      	lsls	r3, r3, #8
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a1d      	ldr	r2, [pc, #116]	; (8002e58 <OC3Config+0xd8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d003      	beq.n	8002dee <OC3Config+0x6e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a1c      	ldr	r2, [pc, #112]	; (8002e5c <OC3Config+0xdc>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d11f      	bne.n	8002e2e <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	029b      	lsls	r3, r3, #10
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	029b      	lsls	r3, r3, #10
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	015b      	lsls	r3, r3, #5
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	4619      	mov	r1, r3
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7ff fd70 	bl	8002926 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40010000 	.word	0x40010000
 8002e5c:	40010400 	.word	0x40010400

08002e60 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	021b      	lsls	r3, r3, #8
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	031b      	lsls	r3, r3, #12
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	031b      	lsls	r3, r3, #12
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a11      	ldr	r2, [pc, #68]	; (8002f08 <OC4Config+0xa8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d003      	beq.n	8002ed0 <OC4Config+0x70>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a10      	ldr	r2, [pc, #64]	; (8002f0c <OC4Config+0xac>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d107      	bne.n	8002ee0 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	019b      	lsls	r3, r3, #6
 8002edc:	4313      	orrs	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff fd25 	bl	8002942 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40010000 	.word	0x40010000
 8002f0c:	40010400 	.word	0x40010400

08002f10 <LL_USART_IsEnabled>:
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f24:	bf0c      	ite	eq
 8002f26:	2301      	moveq	r3, #1
 8002f28:	2300      	movne	r3, #0
 8002f2a:	b2db      	uxtb	r3, r3
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <LL_USART_SetStopBitsLength>:
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	611a      	str	r2, [r3, #16]
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <LL_USART_SetHWFlowCtrl>:
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	615a      	str	r2, [r3, #20]
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <LL_USART_SetBaudRate>:
{
 8002f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f88:	b09f      	sub	sp, #124	; 0x7c
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6778      	str	r0, [r7, #116]	; 0x74
 8002f8e:	6739      	str	r1, [r7, #112]	; 0x70
 8002f90:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f92:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f9a:	f040 80bc 	bne.w	8003116 <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002f9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fa0:	461c      	mov	r4, r3
 8002fa2:	f04f 0500 	mov.w	r5, #0
 8002fa6:	4622      	mov	r2, r4
 8002fa8:	462b      	mov	r3, r5
 8002faa:	eb12 0a02 	adds.w	sl, r2, r2
 8002fae:	eb43 0b03 	adc.w	fp, r3, r3
 8002fb2:	4652      	mov	r2, sl
 8002fb4:	465b      	mov	r3, fp
 8002fb6:	1912      	adds	r2, r2, r4
 8002fb8:	eb45 0303 	adc.w	r3, r5, r3
 8002fbc:	f04f 0000 	mov.w	r0, #0
 8002fc0:	f04f 0100 	mov.w	r1, #0
 8002fc4:	00d9      	lsls	r1, r3, #3
 8002fc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fca:	00d0      	lsls	r0, r2, #3
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	1911      	adds	r1, r2, r4
 8002fd2:	6639      	str	r1, [r7, #96]	; 0x60
 8002fd4:	416b      	adcs	r3, r5
 8002fd6:	667b      	str	r3, [r7, #100]	; 0x64
 8002fd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	1891      	adds	r1, r2, r2
 8002fe2:	6339      	str	r1, [r7, #48]	; 0x30
 8002fe4:	415b      	adcs	r3, r3
 8002fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8002fe8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002fec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002ff0:	f7fd f93e 	bl	8000270 <__aeabi_uldivmod>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4ba9      	ldr	r3, [pc, #676]	; (80032a0 <LL_USART_SetBaudRate+0x31c>)
 8002ffa:	fba3 2302 	umull	r2, r3, r3, r2
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	b29b      	uxth	r3, r3
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	b29e      	uxth	r6, r3
 8003006:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003008:	461c      	mov	r4, r3
 800300a:	f04f 0500 	mov.w	r5, #0
 800300e:	4622      	mov	r2, r4
 8003010:	462b      	mov	r3, r5
 8003012:	1891      	adds	r1, r2, r2
 8003014:	62b9      	str	r1, [r7, #40]	; 0x28
 8003016:	415b      	adcs	r3, r3
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800301a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800301e:	1912      	adds	r2, r2, r4
 8003020:	eb45 0303 	adc.w	r3, r5, r3
 8003024:	f04f 0000 	mov.w	r0, #0
 8003028:	f04f 0100 	mov.w	r1, #0
 800302c:	00d9      	lsls	r1, r3, #3
 800302e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003032:	00d0      	lsls	r0, r2, #3
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	1911      	adds	r1, r2, r4
 800303a:	65b9      	str	r1, [r7, #88]	; 0x58
 800303c:	416b      	adcs	r3, r5
 800303e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003040:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003042:	461a      	mov	r2, r3
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	1891      	adds	r1, r2, r2
 800304a:	6239      	str	r1, [r7, #32]
 800304c:	415b      	adcs	r3, r3
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
 8003050:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003054:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003058:	f7fd f90a 	bl	8000270 <__aeabi_uldivmod>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4b8f      	ldr	r3, [pc, #572]	; (80032a0 <LL_USART_SetBaudRate+0x31c>)
 8003062:	fba3 1302 	umull	r1, r3, r3, r2
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	2164      	movs	r1, #100	; 0x64
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	3332      	adds	r3, #50	; 0x32
 8003074:	4a8a      	ldr	r2, [pc, #552]	; (80032a0 <LL_USART_SetBaudRate+0x31c>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	b29b      	uxth	r3, r3
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	b29b      	uxth	r3, r3
 8003082:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003086:	b29b      	uxth	r3, r3
 8003088:	4433      	add	r3, r6
 800308a:	b29e      	uxth	r6, r3
 800308c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800308e:	4618      	mov	r0, r3
 8003090:	f04f 0100 	mov.w	r1, #0
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	1894      	adds	r4, r2, r2
 800309a:	61bc      	str	r4, [r7, #24]
 800309c:	415b      	adcs	r3, r3
 800309e:	61fb      	str	r3, [r7, #28]
 80030a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030a4:	1812      	adds	r2, r2, r0
 80030a6:	eb41 0303 	adc.w	r3, r1, r3
 80030aa:	f04f 0400 	mov.w	r4, #0
 80030ae:	f04f 0500 	mov.w	r5, #0
 80030b2:	00dd      	lsls	r5, r3, #3
 80030b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030b8:	00d4      	lsls	r4, r2, #3
 80030ba:	4622      	mov	r2, r4
 80030bc:	462b      	mov	r3, r5
 80030be:	1814      	adds	r4, r2, r0
 80030c0:	653c      	str	r4, [r7, #80]	; 0x50
 80030c2:	414b      	adcs	r3, r1
 80030c4:	657b      	str	r3, [r7, #84]	; 0x54
 80030c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030c8:	461a      	mov	r2, r3
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	1891      	adds	r1, r2, r2
 80030d0:	6139      	str	r1, [r7, #16]
 80030d2:	415b      	adcs	r3, r3
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80030da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80030de:	f7fd f8c7 	bl	8000270 <__aeabi_uldivmod>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4b6e      	ldr	r3, [pc, #440]	; (80032a0 <LL_USART_SetBaudRate+0x31c>)
 80030e8:	fba3 1302 	umull	r1, r3, r3, r2
 80030ec:	095b      	lsrs	r3, r3, #5
 80030ee:	2164      	movs	r1, #100	; 0x64
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	3332      	adds	r3, #50	; 0x32
 80030fa:	4a69      	ldr	r2, [pc, #420]	; (80032a0 <LL_USART_SetBaudRate+0x31c>)
 80030fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	b29b      	uxth	r3, r3
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	b29b      	uxth	r3, r3
 800310a:	4433      	add	r3, r6
 800310c:	b29b      	uxth	r3, r3
 800310e:	461a      	mov	r2, r3
 8003110:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003112:	609a      	str	r2, [r3, #8]
}
 8003114:	e0be      	b.n	8003294 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003118:	461c      	mov	r4, r3
 800311a:	f04f 0500 	mov.w	r5, #0
 800311e:	4622      	mov	r2, r4
 8003120:	462b      	mov	r3, r5
 8003122:	eb12 0802 	adds.w	r8, r2, r2
 8003126:	eb43 0903 	adc.w	r9, r3, r3
 800312a:	4642      	mov	r2, r8
 800312c:	464b      	mov	r3, r9
 800312e:	1912      	adds	r2, r2, r4
 8003130:	eb45 0303 	adc.w	r3, r5, r3
 8003134:	f04f 0000 	mov.w	r0, #0
 8003138:	f04f 0100 	mov.w	r1, #0
 800313c:	00d9      	lsls	r1, r3, #3
 800313e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003142:	00d0      	lsls	r0, r2, #3
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	1911      	adds	r1, r2, r4
 800314a:	64b9      	str	r1, [r7, #72]	; 0x48
 800314c:	416b      	adcs	r3, r5
 800314e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003150:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003152:	4618      	mov	r0, r3
 8003154:	f04f 0100 	mov.w	r1, #0
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	008b      	lsls	r3, r1, #2
 8003162:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003166:	0082      	lsls	r2, r0, #2
 8003168:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800316c:	f7fd f880 	bl	8000270 <__aeabi_uldivmod>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4b4a      	ldr	r3, [pc, #296]	; (80032a0 <LL_USART_SetBaudRate+0x31c>)
 8003176:	fba3 2302 	umull	r2, r3, r3, r2
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	b29b      	uxth	r3, r3
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	b29e      	uxth	r6, r3
 8003182:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003184:	4618      	mov	r0, r3
 8003186:	f04f 0100 	mov.w	r1, #0
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	1894      	adds	r4, r2, r2
 8003190:	60bc      	str	r4, [r7, #8]
 8003192:	415b      	adcs	r3, r3
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800319a:	1812      	adds	r2, r2, r0
 800319c:	eb41 0303 	adc.w	r3, r1, r3
 80031a0:	f04f 0400 	mov.w	r4, #0
 80031a4:	f04f 0500 	mov.w	r5, #0
 80031a8:	00dd      	lsls	r5, r3, #3
 80031aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80031ae:	00d4      	lsls	r4, r2, #3
 80031b0:	4622      	mov	r2, r4
 80031b2:	462b      	mov	r3, r5
 80031b4:	1814      	adds	r4, r2, r0
 80031b6:	643c      	str	r4, [r7, #64]	; 0x40
 80031b8:	414b      	adcs	r3, r1
 80031ba:	647b      	str	r3, [r7, #68]	; 0x44
 80031bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031be:	4618      	mov	r0, r3
 80031c0:	f04f 0100 	mov.w	r1, #0
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	008b      	lsls	r3, r1, #2
 80031ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80031d2:	0082      	lsls	r2, r0, #2
 80031d4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80031d8:	f7fd f84a 	bl	8000270 <__aeabi_uldivmod>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4b2f      	ldr	r3, [pc, #188]	; (80032a0 <LL_USART_SetBaudRate+0x31c>)
 80031e2:	fba3 1302 	umull	r1, r3, r3, r2
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	2164      	movs	r1, #100	; 0x64
 80031ea:	fb01 f303 	mul.w	r3, r1, r3
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	3332      	adds	r3, #50	; 0x32
 80031f4:	4a2a      	ldr	r2, [pc, #168]	; (80032a0 <LL_USART_SetBaudRate+0x31c>)
 80031f6:	fba2 2303 	umull	r2, r3, r2, r3
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003202:	b29b      	uxth	r3, r3
 8003204:	4433      	add	r3, r6
 8003206:	b29e      	uxth	r6, r3
 8003208:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800320a:	4618      	mov	r0, r3
 800320c:	f04f 0100 	mov.w	r1, #0
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	1894      	adds	r4, r2, r2
 8003216:	603c      	str	r4, [r7, #0]
 8003218:	415b      	adcs	r3, r3
 800321a:	607b      	str	r3, [r7, #4]
 800321c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003220:	1812      	adds	r2, r2, r0
 8003222:	eb41 0303 	adc.w	r3, r1, r3
 8003226:	f04f 0400 	mov.w	r4, #0
 800322a:	f04f 0500 	mov.w	r5, #0
 800322e:	00dd      	lsls	r5, r3, #3
 8003230:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003234:	00d4      	lsls	r4, r2, #3
 8003236:	4622      	mov	r2, r4
 8003238:	462b      	mov	r3, r5
 800323a:	1814      	adds	r4, r2, r0
 800323c:	63bc      	str	r4, [r7, #56]	; 0x38
 800323e:	414b      	adcs	r3, r1
 8003240:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003242:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003244:	4618      	mov	r0, r3
 8003246:	f04f 0100 	mov.w	r1, #0
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	008b      	lsls	r3, r1, #2
 8003254:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003258:	0082      	lsls	r2, r0, #2
 800325a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800325e:	f7fd f807 	bl	8000270 <__aeabi_uldivmod>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <LL_USART_SetBaudRate+0x31c>)
 8003268:	fba3 1302 	umull	r1, r3, r3, r2
 800326c:	095b      	lsrs	r3, r3, #5
 800326e:	2164      	movs	r1, #100	; 0x64
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	3332      	adds	r3, #50	; 0x32
 800327a:	4a09      	ldr	r2, [pc, #36]	; (80032a0 <LL_USART_SetBaudRate+0x31c>)
 800327c:	fba2 2303 	umull	r2, r3, r2, r3
 8003280:	095b      	lsrs	r3, r3, #5
 8003282:	b29b      	uxth	r3, r3
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	b29b      	uxth	r3, r3
 800328a:	4433      	add	r3, r6
 800328c:	b29b      	uxth	r3, r3
 800328e:	461a      	mov	r2, r3
 8003290:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003292:	609a      	str	r2, [r3, #8]
}
 8003294:	bf00      	nop
 8003296:	377c      	adds	r7, #124	; 0x7c
 8003298:	46bd      	mov	sp, r7
 800329a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800329e:	bf00      	nop
 80032a0:	51eb851f 	.word	0x51eb851f

080032a4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff fe2a 	bl	8002f10 <LL_USART_IsEnabled>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d15e      	bne.n	8003380 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80032ca:	f023 030c 	bic.w	r3, r3, #12
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	6851      	ldr	r1, [r2, #4]
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	68d2      	ldr	r2, [r2, #12]
 80032d6:	4311      	orrs	r1, r2
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	6912      	ldr	r2, [r2, #16]
 80032dc:	4311      	orrs	r1, r2
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	6992      	ldr	r2, [r2, #24]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	4619      	mov	r1, r3
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff fe21 	bl	8002f38 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	4619      	mov	r1, r3
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff fe2e 	bl	8002f5e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003302:	f107 0308 	add.w	r3, r7, #8
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff f988 	bl	800261c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a1f      	ldr	r2, [pc, #124]	; (800338c <LL_USART_Init+0xe8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d102      	bne.n	800331a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	61bb      	str	r3, [r7, #24]
 8003318:	e021      	b.n	800335e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a1c      	ldr	r2, [pc, #112]	; (8003390 <LL_USART_Init+0xec>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d102      	bne.n	8003328 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	e01a      	b.n	800335e <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a1a      	ldr	r2, [pc, #104]	; (8003394 <LL_USART_Init+0xf0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d102      	bne.n	8003336 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	61bb      	str	r3, [r7, #24]
 8003334:	e013      	b.n	800335e <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a17      	ldr	r2, [pc, #92]	; (8003398 <LL_USART_Init+0xf4>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d102      	bne.n	8003344 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	61bb      	str	r3, [r7, #24]
 8003342:	e00c      	b.n	800335e <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a15      	ldr	r2, [pc, #84]	; (800339c <LL_USART_Init+0xf8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d102      	bne.n	8003352 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	61bb      	str	r3, [r7, #24]
 8003350:	e005      	b.n	800335e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a12      	ldr	r2, [pc, #72]	; (80033a0 <LL_USART_Init+0xfc>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d101      	bne.n	800335e <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00d      	beq.n	8003380 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d009      	beq.n	8003380 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800336c:	2300      	movs	r3, #0
 800336e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	699a      	ldr	r2, [r3, #24]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	69b9      	ldr	r1, [r7, #24]
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff fe02 	bl	8002f84 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003380:	7ffb      	ldrb	r3, [r7, #31]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3720      	adds	r7, #32
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40011000 	.word	0x40011000
 8003390:	40004400 	.word	0x40004400
 8003394:	40004800 	.word	0x40004800
 8003398:	40011400 	.word	0x40011400
 800339c:	40004c00 	.word	0x40004c00
 80033a0:	40005000 	.word	0x40005000

080033a4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b6:	4a07      	ldr	r2, [pc, #28]	; (80033d4 <LL_InitTick+0x30>)
 80033b8:	3b01      	subs	r3, #1
 80033ba:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80033bc:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <LL_InitTick+0x30>)
 80033be:	2200      	movs	r2, #0
 80033c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033c2:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <LL_InitTick+0x30>)
 80033c4:	2205      	movs	r2, #5
 80033c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000e010 	.word	0xe000e010

080033d8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80033e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff ffdd 	bl	80033a4 <LL_InitTick>
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80033fc:	4b0f      	ldr	r3, [pc, #60]	; (800343c <LL_mDelay+0x48>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003402:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340a:	d00c      	beq.n	8003426 <LL_mDelay+0x32>
  {
    Delay++;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3301      	adds	r3, #1
 8003410:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003412:	e008      	b.n	8003426 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003414:	4b09      	ldr	r3, [pc, #36]	; (800343c <LL_mDelay+0x48>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <LL_mDelay+0x32>
    {
      Delay--;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3b01      	subs	r3, #1
 8003424:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f3      	bne.n	8003414 <LL_mDelay+0x20>
    }
  }
}
 800342c:	bf00      	nop
 800342e:	bf00      	nop
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	e000e010 	.word	0xe000e010

08003440 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003448:	4a04      	ldr	r2, [pc, #16]	; (800345c <LL_SetSystemCoreClock+0x1c>)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6013      	str	r3, [r2, #0]
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	20000000 	.word	0x20000000

08003460 <__errno>:
 8003460:	4b01      	ldr	r3, [pc, #4]	; (8003468 <__errno+0x8>)
 8003462:	6818      	ldr	r0, [r3, #0]
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	20000004 	.word	0x20000004

0800346c <__libc_init_array>:
 800346c:	b570      	push	{r4, r5, r6, lr}
 800346e:	4d0d      	ldr	r5, [pc, #52]	; (80034a4 <__libc_init_array+0x38>)
 8003470:	4c0d      	ldr	r4, [pc, #52]	; (80034a8 <__libc_init_array+0x3c>)
 8003472:	1b64      	subs	r4, r4, r5
 8003474:	10a4      	asrs	r4, r4, #2
 8003476:	2600      	movs	r6, #0
 8003478:	42a6      	cmp	r6, r4
 800347a:	d109      	bne.n	8003490 <__libc_init_array+0x24>
 800347c:	4d0b      	ldr	r5, [pc, #44]	; (80034ac <__libc_init_array+0x40>)
 800347e:	4c0c      	ldr	r4, [pc, #48]	; (80034b0 <__libc_init_array+0x44>)
 8003480:	f001 f84c 	bl	800451c <_init>
 8003484:	1b64      	subs	r4, r4, r5
 8003486:	10a4      	asrs	r4, r4, #2
 8003488:	2600      	movs	r6, #0
 800348a:	42a6      	cmp	r6, r4
 800348c:	d105      	bne.n	800349a <__libc_init_array+0x2e>
 800348e:	bd70      	pop	{r4, r5, r6, pc}
 8003490:	f855 3b04 	ldr.w	r3, [r5], #4
 8003494:	4798      	blx	r3
 8003496:	3601      	adds	r6, #1
 8003498:	e7ee      	b.n	8003478 <__libc_init_array+0xc>
 800349a:	f855 3b04 	ldr.w	r3, [r5], #4
 800349e:	4798      	blx	r3
 80034a0:	3601      	adds	r6, #1
 80034a2:	e7f2      	b.n	800348a <__libc_init_array+0x1e>
 80034a4:	08004624 	.word	0x08004624
 80034a8:	08004624 	.word	0x08004624
 80034ac:	08004624 	.word	0x08004624
 80034b0:	08004628 	.word	0x08004628

080034b4 <memset>:
 80034b4:	4402      	add	r2, r0
 80034b6:	4603      	mov	r3, r0
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d100      	bne.n	80034be <memset+0xa>
 80034bc:	4770      	bx	lr
 80034be:	f803 1b01 	strb.w	r1, [r3], #1
 80034c2:	e7f9      	b.n	80034b8 <memset+0x4>

080034c4 <iprintf>:
 80034c4:	b40f      	push	{r0, r1, r2, r3}
 80034c6:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <iprintf+0x2c>)
 80034c8:	b513      	push	{r0, r1, r4, lr}
 80034ca:	681c      	ldr	r4, [r3, #0]
 80034cc:	b124      	cbz	r4, 80034d8 <iprintf+0x14>
 80034ce:	69a3      	ldr	r3, [r4, #24]
 80034d0:	b913      	cbnz	r3, 80034d8 <iprintf+0x14>
 80034d2:	4620      	mov	r0, r4
 80034d4:	f000 f9f6 	bl	80038c4 <__sinit>
 80034d8:	ab05      	add	r3, sp, #20
 80034da:	9a04      	ldr	r2, [sp, #16]
 80034dc:	68a1      	ldr	r1, [r4, #8]
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	4620      	mov	r0, r4
 80034e2:	f000 fbcf 	bl	8003c84 <_vfiprintf_r>
 80034e6:	b002      	add	sp, #8
 80034e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034ec:	b004      	add	sp, #16
 80034ee:	4770      	bx	lr
 80034f0:	20000004 	.word	0x20000004

080034f4 <setbuf>:
 80034f4:	2900      	cmp	r1, #0
 80034f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034fa:	bf0c      	ite	eq
 80034fc:	2202      	moveq	r2, #2
 80034fe:	2200      	movne	r2, #0
 8003500:	f000 b800 	b.w	8003504 <setvbuf>

08003504 <setvbuf>:
 8003504:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003508:	461d      	mov	r5, r3
 800350a:	4b5d      	ldr	r3, [pc, #372]	; (8003680 <setvbuf+0x17c>)
 800350c:	681f      	ldr	r7, [r3, #0]
 800350e:	4604      	mov	r4, r0
 8003510:	460e      	mov	r6, r1
 8003512:	4690      	mov	r8, r2
 8003514:	b127      	cbz	r7, 8003520 <setvbuf+0x1c>
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	b913      	cbnz	r3, 8003520 <setvbuf+0x1c>
 800351a:	4638      	mov	r0, r7
 800351c:	f000 f9d2 	bl	80038c4 <__sinit>
 8003520:	4b58      	ldr	r3, [pc, #352]	; (8003684 <setvbuf+0x180>)
 8003522:	429c      	cmp	r4, r3
 8003524:	d167      	bne.n	80035f6 <setvbuf+0xf2>
 8003526:	687c      	ldr	r4, [r7, #4]
 8003528:	f1b8 0f02 	cmp.w	r8, #2
 800352c:	d006      	beq.n	800353c <setvbuf+0x38>
 800352e:	f1b8 0f01 	cmp.w	r8, #1
 8003532:	f200 809f 	bhi.w	8003674 <setvbuf+0x170>
 8003536:	2d00      	cmp	r5, #0
 8003538:	f2c0 809c 	blt.w	8003674 <setvbuf+0x170>
 800353c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800353e:	07db      	lsls	r3, r3, #31
 8003540:	d405      	bmi.n	800354e <setvbuf+0x4a>
 8003542:	89a3      	ldrh	r3, [r4, #12]
 8003544:	0598      	lsls	r0, r3, #22
 8003546:	d402      	bmi.n	800354e <setvbuf+0x4a>
 8003548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800354a:	f000 fa59 	bl	8003a00 <__retarget_lock_acquire_recursive>
 800354e:	4621      	mov	r1, r4
 8003550:	4638      	mov	r0, r7
 8003552:	f000 f923 	bl	800379c <_fflush_r>
 8003556:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003558:	b141      	cbz	r1, 800356c <setvbuf+0x68>
 800355a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800355e:	4299      	cmp	r1, r3
 8003560:	d002      	beq.n	8003568 <setvbuf+0x64>
 8003562:	4638      	mov	r0, r7
 8003564:	f000 faba 	bl	8003adc <_free_r>
 8003568:	2300      	movs	r3, #0
 800356a:	6363      	str	r3, [r4, #52]	; 0x34
 800356c:	2300      	movs	r3, #0
 800356e:	61a3      	str	r3, [r4, #24]
 8003570:	6063      	str	r3, [r4, #4]
 8003572:	89a3      	ldrh	r3, [r4, #12]
 8003574:	0619      	lsls	r1, r3, #24
 8003576:	d503      	bpl.n	8003580 <setvbuf+0x7c>
 8003578:	6921      	ldr	r1, [r4, #16]
 800357a:	4638      	mov	r0, r7
 800357c:	f000 faae 	bl	8003adc <_free_r>
 8003580:	89a3      	ldrh	r3, [r4, #12]
 8003582:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003586:	f023 0303 	bic.w	r3, r3, #3
 800358a:	f1b8 0f02 	cmp.w	r8, #2
 800358e:	81a3      	strh	r3, [r4, #12]
 8003590:	d06c      	beq.n	800366c <setvbuf+0x168>
 8003592:	ab01      	add	r3, sp, #4
 8003594:	466a      	mov	r2, sp
 8003596:	4621      	mov	r1, r4
 8003598:	4638      	mov	r0, r7
 800359a:	f000 fa33 	bl	8003a04 <__swhatbuf_r>
 800359e:	89a3      	ldrh	r3, [r4, #12]
 80035a0:	4318      	orrs	r0, r3
 80035a2:	81a0      	strh	r0, [r4, #12]
 80035a4:	2d00      	cmp	r5, #0
 80035a6:	d130      	bne.n	800360a <setvbuf+0x106>
 80035a8:	9d00      	ldr	r5, [sp, #0]
 80035aa:	4628      	mov	r0, r5
 80035ac:	f000 fa8e 	bl	8003acc <malloc>
 80035b0:	4606      	mov	r6, r0
 80035b2:	2800      	cmp	r0, #0
 80035b4:	d155      	bne.n	8003662 <setvbuf+0x15e>
 80035b6:	f8dd 9000 	ldr.w	r9, [sp]
 80035ba:	45a9      	cmp	r9, r5
 80035bc:	d14a      	bne.n	8003654 <setvbuf+0x150>
 80035be:	f04f 35ff 	mov.w	r5, #4294967295
 80035c2:	2200      	movs	r2, #0
 80035c4:	60a2      	str	r2, [r4, #8]
 80035c6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80035ca:	6022      	str	r2, [r4, #0]
 80035cc:	6122      	str	r2, [r4, #16]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035d4:	6162      	str	r2, [r4, #20]
 80035d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035d8:	f043 0302 	orr.w	r3, r3, #2
 80035dc:	07d2      	lsls	r2, r2, #31
 80035de:	81a3      	strh	r3, [r4, #12]
 80035e0:	d405      	bmi.n	80035ee <setvbuf+0xea>
 80035e2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80035e6:	d102      	bne.n	80035ee <setvbuf+0xea>
 80035e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035ea:	f000 fa0a 	bl	8003a02 <__retarget_lock_release_recursive>
 80035ee:	4628      	mov	r0, r5
 80035f0:	b003      	add	sp, #12
 80035f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035f6:	4b24      	ldr	r3, [pc, #144]	; (8003688 <setvbuf+0x184>)
 80035f8:	429c      	cmp	r4, r3
 80035fa:	d101      	bne.n	8003600 <setvbuf+0xfc>
 80035fc:	68bc      	ldr	r4, [r7, #8]
 80035fe:	e793      	b.n	8003528 <setvbuf+0x24>
 8003600:	4b22      	ldr	r3, [pc, #136]	; (800368c <setvbuf+0x188>)
 8003602:	429c      	cmp	r4, r3
 8003604:	bf08      	it	eq
 8003606:	68fc      	ldreq	r4, [r7, #12]
 8003608:	e78e      	b.n	8003528 <setvbuf+0x24>
 800360a:	2e00      	cmp	r6, #0
 800360c:	d0cd      	beq.n	80035aa <setvbuf+0xa6>
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	b913      	cbnz	r3, 8003618 <setvbuf+0x114>
 8003612:	4638      	mov	r0, r7
 8003614:	f000 f956 	bl	80038c4 <__sinit>
 8003618:	f1b8 0f01 	cmp.w	r8, #1
 800361c:	bf08      	it	eq
 800361e:	89a3      	ldrheq	r3, [r4, #12]
 8003620:	6026      	str	r6, [r4, #0]
 8003622:	bf04      	itt	eq
 8003624:	f043 0301 	orreq.w	r3, r3, #1
 8003628:	81a3      	strheq	r3, [r4, #12]
 800362a:	89a2      	ldrh	r2, [r4, #12]
 800362c:	f012 0308 	ands.w	r3, r2, #8
 8003630:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003634:	d01c      	beq.n	8003670 <setvbuf+0x16c>
 8003636:	07d3      	lsls	r3, r2, #31
 8003638:	bf41      	itttt	mi
 800363a:	2300      	movmi	r3, #0
 800363c:	426d      	negmi	r5, r5
 800363e:	60a3      	strmi	r3, [r4, #8]
 8003640:	61a5      	strmi	r5, [r4, #24]
 8003642:	bf58      	it	pl
 8003644:	60a5      	strpl	r5, [r4, #8]
 8003646:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003648:	f015 0501 	ands.w	r5, r5, #1
 800364c:	d115      	bne.n	800367a <setvbuf+0x176>
 800364e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003652:	e7c8      	b.n	80035e6 <setvbuf+0xe2>
 8003654:	4648      	mov	r0, r9
 8003656:	f000 fa39 	bl	8003acc <malloc>
 800365a:	4606      	mov	r6, r0
 800365c:	2800      	cmp	r0, #0
 800365e:	d0ae      	beq.n	80035be <setvbuf+0xba>
 8003660:	464d      	mov	r5, r9
 8003662:	89a3      	ldrh	r3, [r4, #12]
 8003664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003668:	81a3      	strh	r3, [r4, #12]
 800366a:	e7d0      	b.n	800360e <setvbuf+0x10a>
 800366c:	2500      	movs	r5, #0
 800366e:	e7a8      	b.n	80035c2 <setvbuf+0xbe>
 8003670:	60a3      	str	r3, [r4, #8]
 8003672:	e7e8      	b.n	8003646 <setvbuf+0x142>
 8003674:	f04f 35ff 	mov.w	r5, #4294967295
 8003678:	e7b9      	b.n	80035ee <setvbuf+0xea>
 800367a:	2500      	movs	r5, #0
 800367c:	e7b7      	b.n	80035ee <setvbuf+0xea>
 800367e:	bf00      	nop
 8003680:	20000004 	.word	0x20000004
 8003684:	080045a8 	.word	0x080045a8
 8003688:	080045c8 	.word	0x080045c8
 800368c:	08004588 	.word	0x08004588

08003690 <__sflush_r>:
 8003690:	898a      	ldrh	r2, [r1, #12]
 8003692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003696:	4605      	mov	r5, r0
 8003698:	0710      	lsls	r0, r2, #28
 800369a:	460c      	mov	r4, r1
 800369c:	d458      	bmi.n	8003750 <__sflush_r+0xc0>
 800369e:	684b      	ldr	r3, [r1, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	dc05      	bgt.n	80036b0 <__sflush_r+0x20>
 80036a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	dc02      	bgt.n	80036b0 <__sflush_r+0x20>
 80036aa:	2000      	movs	r0, #0
 80036ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036b2:	2e00      	cmp	r6, #0
 80036b4:	d0f9      	beq.n	80036aa <__sflush_r+0x1a>
 80036b6:	2300      	movs	r3, #0
 80036b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80036bc:	682f      	ldr	r7, [r5, #0]
 80036be:	602b      	str	r3, [r5, #0]
 80036c0:	d032      	beq.n	8003728 <__sflush_r+0x98>
 80036c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036c4:	89a3      	ldrh	r3, [r4, #12]
 80036c6:	075a      	lsls	r2, r3, #29
 80036c8:	d505      	bpl.n	80036d6 <__sflush_r+0x46>
 80036ca:	6863      	ldr	r3, [r4, #4]
 80036cc:	1ac0      	subs	r0, r0, r3
 80036ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036d0:	b10b      	cbz	r3, 80036d6 <__sflush_r+0x46>
 80036d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036d4:	1ac0      	subs	r0, r0, r3
 80036d6:	2300      	movs	r3, #0
 80036d8:	4602      	mov	r2, r0
 80036da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036dc:	6a21      	ldr	r1, [r4, #32]
 80036de:	4628      	mov	r0, r5
 80036e0:	47b0      	blx	r6
 80036e2:	1c43      	adds	r3, r0, #1
 80036e4:	89a3      	ldrh	r3, [r4, #12]
 80036e6:	d106      	bne.n	80036f6 <__sflush_r+0x66>
 80036e8:	6829      	ldr	r1, [r5, #0]
 80036ea:	291d      	cmp	r1, #29
 80036ec:	d82c      	bhi.n	8003748 <__sflush_r+0xb8>
 80036ee:	4a2a      	ldr	r2, [pc, #168]	; (8003798 <__sflush_r+0x108>)
 80036f0:	40ca      	lsrs	r2, r1
 80036f2:	07d6      	lsls	r6, r2, #31
 80036f4:	d528      	bpl.n	8003748 <__sflush_r+0xb8>
 80036f6:	2200      	movs	r2, #0
 80036f8:	6062      	str	r2, [r4, #4]
 80036fa:	04d9      	lsls	r1, r3, #19
 80036fc:	6922      	ldr	r2, [r4, #16]
 80036fe:	6022      	str	r2, [r4, #0]
 8003700:	d504      	bpl.n	800370c <__sflush_r+0x7c>
 8003702:	1c42      	adds	r2, r0, #1
 8003704:	d101      	bne.n	800370a <__sflush_r+0x7a>
 8003706:	682b      	ldr	r3, [r5, #0]
 8003708:	b903      	cbnz	r3, 800370c <__sflush_r+0x7c>
 800370a:	6560      	str	r0, [r4, #84]	; 0x54
 800370c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800370e:	602f      	str	r7, [r5, #0]
 8003710:	2900      	cmp	r1, #0
 8003712:	d0ca      	beq.n	80036aa <__sflush_r+0x1a>
 8003714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003718:	4299      	cmp	r1, r3
 800371a:	d002      	beq.n	8003722 <__sflush_r+0x92>
 800371c:	4628      	mov	r0, r5
 800371e:	f000 f9dd 	bl	8003adc <_free_r>
 8003722:	2000      	movs	r0, #0
 8003724:	6360      	str	r0, [r4, #52]	; 0x34
 8003726:	e7c1      	b.n	80036ac <__sflush_r+0x1c>
 8003728:	6a21      	ldr	r1, [r4, #32]
 800372a:	2301      	movs	r3, #1
 800372c:	4628      	mov	r0, r5
 800372e:	47b0      	blx	r6
 8003730:	1c41      	adds	r1, r0, #1
 8003732:	d1c7      	bne.n	80036c4 <__sflush_r+0x34>
 8003734:	682b      	ldr	r3, [r5, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0c4      	beq.n	80036c4 <__sflush_r+0x34>
 800373a:	2b1d      	cmp	r3, #29
 800373c:	d001      	beq.n	8003742 <__sflush_r+0xb2>
 800373e:	2b16      	cmp	r3, #22
 8003740:	d101      	bne.n	8003746 <__sflush_r+0xb6>
 8003742:	602f      	str	r7, [r5, #0]
 8003744:	e7b1      	b.n	80036aa <__sflush_r+0x1a>
 8003746:	89a3      	ldrh	r3, [r4, #12]
 8003748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800374c:	81a3      	strh	r3, [r4, #12]
 800374e:	e7ad      	b.n	80036ac <__sflush_r+0x1c>
 8003750:	690f      	ldr	r7, [r1, #16]
 8003752:	2f00      	cmp	r7, #0
 8003754:	d0a9      	beq.n	80036aa <__sflush_r+0x1a>
 8003756:	0793      	lsls	r3, r2, #30
 8003758:	680e      	ldr	r6, [r1, #0]
 800375a:	bf08      	it	eq
 800375c:	694b      	ldreq	r3, [r1, #20]
 800375e:	600f      	str	r7, [r1, #0]
 8003760:	bf18      	it	ne
 8003762:	2300      	movne	r3, #0
 8003764:	eba6 0807 	sub.w	r8, r6, r7
 8003768:	608b      	str	r3, [r1, #8]
 800376a:	f1b8 0f00 	cmp.w	r8, #0
 800376e:	dd9c      	ble.n	80036aa <__sflush_r+0x1a>
 8003770:	6a21      	ldr	r1, [r4, #32]
 8003772:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003774:	4643      	mov	r3, r8
 8003776:	463a      	mov	r2, r7
 8003778:	4628      	mov	r0, r5
 800377a:	47b0      	blx	r6
 800377c:	2800      	cmp	r0, #0
 800377e:	dc06      	bgt.n	800378e <__sflush_r+0xfe>
 8003780:	89a3      	ldrh	r3, [r4, #12]
 8003782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003786:	81a3      	strh	r3, [r4, #12]
 8003788:	f04f 30ff 	mov.w	r0, #4294967295
 800378c:	e78e      	b.n	80036ac <__sflush_r+0x1c>
 800378e:	4407      	add	r7, r0
 8003790:	eba8 0800 	sub.w	r8, r8, r0
 8003794:	e7e9      	b.n	800376a <__sflush_r+0xda>
 8003796:	bf00      	nop
 8003798:	20400001 	.word	0x20400001

0800379c <_fflush_r>:
 800379c:	b538      	push	{r3, r4, r5, lr}
 800379e:	690b      	ldr	r3, [r1, #16]
 80037a0:	4605      	mov	r5, r0
 80037a2:	460c      	mov	r4, r1
 80037a4:	b913      	cbnz	r3, 80037ac <_fflush_r+0x10>
 80037a6:	2500      	movs	r5, #0
 80037a8:	4628      	mov	r0, r5
 80037aa:	bd38      	pop	{r3, r4, r5, pc}
 80037ac:	b118      	cbz	r0, 80037b6 <_fflush_r+0x1a>
 80037ae:	6983      	ldr	r3, [r0, #24]
 80037b0:	b90b      	cbnz	r3, 80037b6 <_fflush_r+0x1a>
 80037b2:	f000 f887 	bl	80038c4 <__sinit>
 80037b6:	4b14      	ldr	r3, [pc, #80]	; (8003808 <_fflush_r+0x6c>)
 80037b8:	429c      	cmp	r4, r3
 80037ba:	d11b      	bne.n	80037f4 <_fflush_r+0x58>
 80037bc:	686c      	ldr	r4, [r5, #4]
 80037be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0ef      	beq.n	80037a6 <_fflush_r+0xa>
 80037c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80037c8:	07d0      	lsls	r0, r2, #31
 80037ca:	d404      	bmi.n	80037d6 <_fflush_r+0x3a>
 80037cc:	0599      	lsls	r1, r3, #22
 80037ce:	d402      	bmi.n	80037d6 <_fflush_r+0x3a>
 80037d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037d2:	f000 f915 	bl	8003a00 <__retarget_lock_acquire_recursive>
 80037d6:	4628      	mov	r0, r5
 80037d8:	4621      	mov	r1, r4
 80037da:	f7ff ff59 	bl	8003690 <__sflush_r>
 80037de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037e0:	07da      	lsls	r2, r3, #31
 80037e2:	4605      	mov	r5, r0
 80037e4:	d4e0      	bmi.n	80037a8 <_fflush_r+0xc>
 80037e6:	89a3      	ldrh	r3, [r4, #12]
 80037e8:	059b      	lsls	r3, r3, #22
 80037ea:	d4dd      	bmi.n	80037a8 <_fflush_r+0xc>
 80037ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037ee:	f000 f908 	bl	8003a02 <__retarget_lock_release_recursive>
 80037f2:	e7d9      	b.n	80037a8 <_fflush_r+0xc>
 80037f4:	4b05      	ldr	r3, [pc, #20]	; (800380c <_fflush_r+0x70>)
 80037f6:	429c      	cmp	r4, r3
 80037f8:	d101      	bne.n	80037fe <_fflush_r+0x62>
 80037fa:	68ac      	ldr	r4, [r5, #8]
 80037fc:	e7df      	b.n	80037be <_fflush_r+0x22>
 80037fe:	4b04      	ldr	r3, [pc, #16]	; (8003810 <_fflush_r+0x74>)
 8003800:	429c      	cmp	r4, r3
 8003802:	bf08      	it	eq
 8003804:	68ec      	ldreq	r4, [r5, #12]
 8003806:	e7da      	b.n	80037be <_fflush_r+0x22>
 8003808:	080045a8 	.word	0x080045a8
 800380c:	080045c8 	.word	0x080045c8
 8003810:	08004588 	.word	0x08004588

08003814 <std>:
 8003814:	2300      	movs	r3, #0
 8003816:	b510      	push	{r4, lr}
 8003818:	4604      	mov	r4, r0
 800381a:	e9c0 3300 	strd	r3, r3, [r0]
 800381e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003822:	6083      	str	r3, [r0, #8]
 8003824:	8181      	strh	r1, [r0, #12]
 8003826:	6643      	str	r3, [r0, #100]	; 0x64
 8003828:	81c2      	strh	r2, [r0, #14]
 800382a:	6183      	str	r3, [r0, #24]
 800382c:	4619      	mov	r1, r3
 800382e:	2208      	movs	r2, #8
 8003830:	305c      	adds	r0, #92	; 0x5c
 8003832:	f7ff fe3f 	bl	80034b4 <memset>
 8003836:	4b05      	ldr	r3, [pc, #20]	; (800384c <std+0x38>)
 8003838:	6263      	str	r3, [r4, #36]	; 0x24
 800383a:	4b05      	ldr	r3, [pc, #20]	; (8003850 <std+0x3c>)
 800383c:	62a3      	str	r3, [r4, #40]	; 0x28
 800383e:	4b05      	ldr	r3, [pc, #20]	; (8003854 <std+0x40>)
 8003840:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <std+0x44>)
 8003844:	6224      	str	r4, [r4, #32]
 8003846:	6323      	str	r3, [r4, #48]	; 0x30
 8003848:	bd10      	pop	{r4, pc}
 800384a:	bf00      	nop
 800384c:	0800422d 	.word	0x0800422d
 8003850:	0800424f 	.word	0x0800424f
 8003854:	08004287 	.word	0x08004287
 8003858:	080042ab 	.word	0x080042ab

0800385c <_cleanup_r>:
 800385c:	4901      	ldr	r1, [pc, #4]	; (8003864 <_cleanup_r+0x8>)
 800385e:	f000 b8af 	b.w	80039c0 <_fwalk_reent>
 8003862:	bf00      	nop
 8003864:	0800379d 	.word	0x0800379d

08003868 <__sfmoreglue>:
 8003868:	b570      	push	{r4, r5, r6, lr}
 800386a:	1e4a      	subs	r2, r1, #1
 800386c:	2568      	movs	r5, #104	; 0x68
 800386e:	4355      	muls	r5, r2
 8003870:	460e      	mov	r6, r1
 8003872:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003876:	f000 f981 	bl	8003b7c <_malloc_r>
 800387a:	4604      	mov	r4, r0
 800387c:	b140      	cbz	r0, 8003890 <__sfmoreglue+0x28>
 800387e:	2100      	movs	r1, #0
 8003880:	e9c0 1600 	strd	r1, r6, [r0]
 8003884:	300c      	adds	r0, #12
 8003886:	60a0      	str	r0, [r4, #8]
 8003888:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800388c:	f7ff fe12 	bl	80034b4 <memset>
 8003890:	4620      	mov	r0, r4
 8003892:	bd70      	pop	{r4, r5, r6, pc}

08003894 <__sfp_lock_acquire>:
 8003894:	4801      	ldr	r0, [pc, #4]	; (800389c <__sfp_lock_acquire+0x8>)
 8003896:	f000 b8b3 	b.w	8003a00 <__retarget_lock_acquire_recursive>
 800389a:	bf00      	nop
 800389c:	2000009e 	.word	0x2000009e

080038a0 <__sfp_lock_release>:
 80038a0:	4801      	ldr	r0, [pc, #4]	; (80038a8 <__sfp_lock_release+0x8>)
 80038a2:	f000 b8ae 	b.w	8003a02 <__retarget_lock_release_recursive>
 80038a6:	bf00      	nop
 80038a8:	2000009e 	.word	0x2000009e

080038ac <__sinit_lock_acquire>:
 80038ac:	4801      	ldr	r0, [pc, #4]	; (80038b4 <__sinit_lock_acquire+0x8>)
 80038ae:	f000 b8a7 	b.w	8003a00 <__retarget_lock_acquire_recursive>
 80038b2:	bf00      	nop
 80038b4:	20000099 	.word	0x20000099

080038b8 <__sinit_lock_release>:
 80038b8:	4801      	ldr	r0, [pc, #4]	; (80038c0 <__sinit_lock_release+0x8>)
 80038ba:	f000 b8a2 	b.w	8003a02 <__retarget_lock_release_recursive>
 80038be:	bf00      	nop
 80038c0:	20000099 	.word	0x20000099

080038c4 <__sinit>:
 80038c4:	b510      	push	{r4, lr}
 80038c6:	4604      	mov	r4, r0
 80038c8:	f7ff fff0 	bl	80038ac <__sinit_lock_acquire>
 80038cc:	69a3      	ldr	r3, [r4, #24]
 80038ce:	b11b      	cbz	r3, 80038d8 <__sinit+0x14>
 80038d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038d4:	f7ff bff0 	b.w	80038b8 <__sinit_lock_release>
 80038d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80038dc:	6523      	str	r3, [r4, #80]	; 0x50
 80038de:	4b13      	ldr	r3, [pc, #76]	; (800392c <__sinit+0x68>)
 80038e0:	4a13      	ldr	r2, [pc, #76]	; (8003930 <__sinit+0x6c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80038e6:	42a3      	cmp	r3, r4
 80038e8:	bf04      	itt	eq
 80038ea:	2301      	moveq	r3, #1
 80038ec:	61a3      	streq	r3, [r4, #24]
 80038ee:	4620      	mov	r0, r4
 80038f0:	f000 f820 	bl	8003934 <__sfp>
 80038f4:	6060      	str	r0, [r4, #4]
 80038f6:	4620      	mov	r0, r4
 80038f8:	f000 f81c 	bl	8003934 <__sfp>
 80038fc:	60a0      	str	r0, [r4, #8]
 80038fe:	4620      	mov	r0, r4
 8003900:	f000 f818 	bl	8003934 <__sfp>
 8003904:	2200      	movs	r2, #0
 8003906:	60e0      	str	r0, [r4, #12]
 8003908:	2104      	movs	r1, #4
 800390a:	6860      	ldr	r0, [r4, #4]
 800390c:	f7ff ff82 	bl	8003814 <std>
 8003910:	68a0      	ldr	r0, [r4, #8]
 8003912:	2201      	movs	r2, #1
 8003914:	2109      	movs	r1, #9
 8003916:	f7ff ff7d 	bl	8003814 <std>
 800391a:	68e0      	ldr	r0, [r4, #12]
 800391c:	2202      	movs	r2, #2
 800391e:	2112      	movs	r1, #18
 8003920:	f7ff ff78 	bl	8003814 <std>
 8003924:	2301      	movs	r3, #1
 8003926:	61a3      	str	r3, [r4, #24]
 8003928:	e7d2      	b.n	80038d0 <__sinit+0xc>
 800392a:	bf00      	nop
 800392c:	08004584 	.word	0x08004584
 8003930:	0800385d 	.word	0x0800385d

08003934 <__sfp>:
 8003934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003936:	4607      	mov	r7, r0
 8003938:	f7ff ffac 	bl	8003894 <__sfp_lock_acquire>
 800393c:	4b1e      	ldr	r3, [pc, #120]	; (80039b8 <__sfp+0x84>)
 800393e:	681e      	ldr	r6, [r3, #0]
 8003940:	69b3      	ldr	r3, [r6, #24]
 8003942:	b913      	cbnz	r3, 800394a <__sfp+0x16>
 8003944:	4630      	mov	r0, r6
 8003946:	f7ff ffbd 	bl	80038c4 <__sinit>
 800394a:	3648      	adds	r6, #72	; 0x48
 800394c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003950:	3b01      	subs	r3, #1
 8003952:	d503      	bpl.n	800395c <__sfp+0x28>
 8003954:	6833      	ldr	r3, [r6, #0]
 8003956:	b30b      	cbz	r3, 800399c <__sfp+0x68>
 8003958:	6836      	ldr	r6, [r6, #0]
 800395a:	e7f7      	b.n	800394c <__sfp+0x18>
 800395c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003960:	b9d5      	cbnz	r5, 8003998 <__sfp+0x64>
 8003962:	4b16      	ldr	r3, [pc, #88]	; (80039bc <__sfp+0x88>)
 8003964:	60e3      	str	r3, [r4, #12]
 8003966:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800396a:	6665      	str	r5, [r4, #100]	; 0x64
 800396c:	f000 f847 	bl	80039fe <__retarget_lock_init_recursive>
 8003970:	f7ff ff96 	bl	80038a0 <__sfp_lock_release>
 8003974:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003978:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800397c:	6025      	str	r5, [r4, #0]
 800397e:	61a5      	str	r5, [r4, #24]
 8003980:	2208      	movs	r2, #8
 8003982:	4629      	mov	r1, r5
 8003984:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003988:	f7ff fd94 	bl	80034b4 <memset>
 800398c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003990:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003994:	4620      	mov	r0, r4
 8003996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003998:	3468      	adds	r4, #104	; 0x68
 800399a:	e7d9      	b.n	8003950 <__sfp+0x1c>
 800399c:	2104      	movs	r1, #4
 800399e:	4638      	mov	r0, r7
 80039a0:	f7ff ff62 	bl	8003868 <__sfmoreglue>
 80039a4:	4604      	mov	r4, r0
 80039a6:	6030      	str	r0, [r6, #0]
 80039a8:	2800      	cmp	r0, #0
 80039aa:	d1d5      	bne.n	8003958 <__sfp+0x24>
 80039ac:	f7ff ff78 	bl	80038a0 <__sfp_lock_release>
 80039b0:	230c      	movs	r3, #12
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	e7ee      	b.n	8003994 <__sfp+0x60>
 80039b6:	bf00      	nop
 80039b8:	08004584 	.word	0x08004584
 80039bc:	ffff0001 	.word	0xffff0001

080039c0 <_fwalk_reent>:
 80039c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039c4:	4606      	mov	r6, r0
 80039c6:	4688      	mov	r8, r1
 80039c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80039cc:	2700      	movs	r7, #0
 80039ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039d2:	f1b9 0901 	subs.w	r9, r9, #1
 80039d6:	d505      	bpl.n	80039e4 <_fwalk_reent+0x24>
 80039d8:	6824      	ldr	r4, [r4, #0]
 80039da:	2c00      	cmp	r4, #0
 80039dc:	d1f7      	bne.n	80039ce <_fwalk_reent+0xe>
 80039de:	4638      	mov	r0, r7
 80039e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039e4:	89ab      	ldrh	r3, [r5, #12]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d907      	bls.n	80039fa <_fwalk_reent+0x3a>
 80039ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039ee:	3301      	adds	r3, #1
 80039f0:	d003      	beq.n	80039fa <_fwalk_reent+0x3a>
 80039f2:	4629      	mov	r1, r5
 80039f4:	4630      	mov	r0, r6
 80039f6:	47c0      	blx	r8
 80039f8:	4307      	orrs	r7, r0
 80039fa:	3568      	adds	r5, #104	; 0x68
 80039fc:	e7e9      	b.n	80039d2 <_fwalk_reent+0x12>

080039fe <__retarget_lock_init_recursive>:
 80039fe:	4770      	bx	lr

08003a00 <__retarget_lock_acquire_recursive>:
 8003a00:	4770      	bx	lr

08003a02 <__retarget_lock_release_recursive>:
 8003a02:	4770      	bx	lr

08003a04 <__swhatbuf_r>:
 8003a04:	b570      	push	{r4, r5, r6, lr}
 8003a06:	460e      	mov	r6, r1
 8003a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a0c:	2900      	cmp	r1, #0
 8003a0e:	b096      	sub	sp, #88	; 0x58
 8003a10:	4614      	mov	r4, r2
 8003a12:	461d      	mov	r5, r3
 8003a14:	da07      	bge.n	8003a26 <__swhatbuf_r+0x22>
 8003a16:	2300      	movs	r3, #0
 8003a18:	602b      	str	r3, [r5, #0]
 8003a1a:	89b3      	ldrh	r3, [r6, #12]
 8003a1c:	061a      	lsls	r2, r3, #24
 8003a1e:	d410      	bmi.n	8003a42 <__swhatbuf_r+0x3e>
 8003a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a24:	e00e      	b.n	8003a44 <__swhatbuf_r+0x40>
 8003a26:	466a      	mov	r2, sp
 8003a28:	f000 fd26 	bl	8004478 <_fstat_r>
 8003a2c:	2800      	cmp	r0, #0
 8003a2e:	dbf2      	blt.n	8003a16 <__swhatbuf_r+0x12>
 8003a30:	9a01      	ldr	r2, [sp, #4]
 8003a32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003a36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003a3a:	425a      	negs	r2, r3
 8003a3c:	415a      	adcs	r2, r3
 8003a3e:	602a      	str	r2, [r5, #0]
 8003a40:	e7ee      	b.n	8003a20 <__swhatbuf_r+0x1c>
 8003a42:	2340      	movs	r3, #64	; 0x40
 8003a44:	2000      	movs	r0, #0
 8003a46:	6023      	str	r3, [r4, #0]
 8003a48:	b016      	add	sp, #88	; 0x58
 8003a4a:	bd70      	pop	{r4, r5, r6, pc}

08003a4c <__smakebuf_r>:
 8003a4c:	898b      	ldrh	r3, [r1, #12]
 8003a4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a50:	079d      	lsls	r5, r3, #30
 8003a52:	4606      	mov	r6, r0
 8003a54:	460c      	mov	r4, r1
 8003a56:	d507      	bpl.n	8003a68 <__smakebuf_r+0x1c>
 8003a58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003a5c:	6023      	str	r3, [r4, #0]
 8003a5e:	6123      	str	r3, [r4, #16]
 8003a60:	2301      	movs	r3, #1
 8003a62:	6163      	str	r3, [r4, #20]
 8003a64:	b002      	add	sp, #8
 8003a66:	bd70      	pop	{r4, r5, r6, pc}
 8003a68:	ab01      	add	r3, sp, #4
 8003a6a:	466a      	mov	r2, sp
 8003a6c:	f7ff ffca 	bl	8003a04 <__swhatbuf_r>
 8003a70:	9900      	ldr	r1, [sp, #0]
 8003a72:	4605      	mov	r5, r0
 8003a74:	4630      	mov	r0, r6
 8003a76:	f000 f881 	bl	8003b7c <_malloc_r>
 8003a7a:	b948      	cbnz	r0, 8003a90 <__smakebuf_r+0x44>
 8003a7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a80:	059a      	lsls	r2, r3, #22
 8003a82:	d4ef      	bmi.n	8003a64 <__smakebuf_r+0x18>
 8003a84:	f023 0303 	bic.w	r3, r3, #3
 8003a88:	f043 0302 	orr.w	r3, r3, #2
 8003a8c:	81a3      	strh	r3, [r4, #12]
 8003a8e:	e7e3      	b.n	8003a58 <__smakebuf_r+0xc>
 8003a90:	4b0d      	ldr	r3, [pc, #52]	; (8003ac8 <__smakebuf_r+0x7c>)
 8003a92:	62b3      	str	r3, [r6, #40]	; 0x28
 8003a94:	89a3      	ldrh	r3, [r4, #12]
 8003a96:	6020      	str	r0, [r4, #0]
 8003a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a9c:	81a3      	strh	r3, [r4, #12]
 8003a9e:	9b00      	ldr	r3, [sp, #0]
 8003aa0:	6163      	str	r3, [r4, #20]
 8003aa2:	9b01      	ldr	r3, [sp, #4]
 8003aa4:	6120      	str	r0, [r4, #16]
 8003aa6:	b15b      	cbz	r3, 8003ac0 <__smakebuf_r+0x74>
 8003aa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003aac:	4630      	mov	r0, r6
 8003aae:	f000 fcf5 	bl	800449c <_isatty_r>
 8003ab2:	b128      	cbz	r0, 8003ac0 <__smakebuf_r+0x74>
 8003ab4:	89a3      	ldrh	r3, [r4, #12]
 8003ab6:	f023 0303 	bic.w	r3, r3, #3
 8003aba:	f043 0301 	orr.w	r3, r3, #1
 8003abe:	81a3      	strh	r3, [r4, #12]
 8003ac0:	89a0      	ldrh	r0, [r4, #12]
 8003ac2:	4305      	orrs	r5, r0
 8003ac4:	81a5      	strh	r5, [r4, #12]
 8003ac6:	e7cd      	b.n	8003a64 <__smakebuf_r+0x18>
 8003ac8:	0800385d 	.word	0x0800385d

08003acc <malloc>:
 8003acc:	4b02      	ldr	r3, [pc, #8]	; (8003ad8 <malloc+0xc>)
 8003ace:	4601      	mov	r1, r0
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	f000 b853 	b.w	8003b7c <_malloc_r>
 8003ad6:	bf00      	nop
 8003ad8:	20000004 	.word	0x20000004

08003adc <_free_r>:
 8003adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ade:	2900      	cmp	r1, #0
 8003ae0:	d048      	beq.n	8003b74 <_free_r+0x98>
 8003ae2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ae6:	9001      	str	r0, [sp, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f1a1 0404 	sub.w	r4, r1, #4
 8003aee:	bfb8      	it	lt
 8003af0:	18e4      	addlt	r4, r4, r3
 8003af2:	f000 fcf5 	bl	80044e0 <__malloc_lock>
 8003af6:	4a20      	ldr	r2, [pc, #128]	; (8003b78 <_free_r+0x9c>)
 8003af8:	9801      	ldr	r0, [sp, #4]
 8003afa:	6813      	ldr	r3, [r2, #0]
 8003afc:	4615      	mov	r5, r2
 8003afe:	b933      	cbnz	r3, 8003b0e <_free_r+0x32>
 8003b00:	6063      	str	r3, [r4, #4]
 8003b02:	6014      	str	r4, [r2, #0]
 8003b04:	b003      	add	sp, #12
 8003b06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b0a:	f000 bcef 	b.w	80044ec <__malloc_unlock>
 8003b0e:	42a3      	cmp	r3, r4
 8003b10:	d90b      	bls.n	8003b2a <_free_r+0x4e>
 8003b12:	6821      	ldr	r1, [r4, #0]
 8003b14:	1862      	adds	r2, r4, r1
 8003b16:	4293      	cmp	r3, r2
 8003b18:	bf04      	itt	eq
 8003b1a:	681a      	ldreq	r2, [r3, #0]
 8003b1c:	685b      	ldreq	r3, [r3, #4]
 8003b1e:	6063      	str	r3, [r4, #4]
 8003b20:	bf04      	itt	eq
 8003b22:	1852      	addeq	r2, r2, r1
 8003b24:	6022      	streq	r2, [r4, #0]
 8003b26:	602c      	str	r4, [r5, #0]
 8003b28:	e7ec      	b.n	8003b04 <_free_r+0x28>
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	b10b      	cbz	r3, 8003b34 <_free_r+0x58>
 8003b30:	42a3      	cmp	r3, r4
 8003b32:	d9fa      	bls.n	8003b2a <_free_r+0x4e>
 8003b34:	6811      	ldr	r1, [r2, #0]
 8003b36:	1855      	adds	r5, r2, r1
 8003b38:	42a5      	cmp	r5, r4
 8003b3a:	d10b      	bne.n	8003b54 <_free_r+0x78>
 8003b3c:	6824      	ldr	r4, [r4, #0]
 8003b3e:	4421      	add	r1, r4
 8003b40:	1854      	adds	r4, r2, r1
 8003b42:	42a3      	cmp	r3, r4
 8003b44:	6011      	str	r1, [r2, #0]
 8003b46:	d1dd      	bne.n	8003b04 <_free_r+0x28>
 8003b48:	681c      	ldr	r4, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	6053      	str	r3, [r2, #4]
 8003b4e:	4421      	add	r1, r4
 8003b50:	6011      	str	r1, [r2, #0]
 8003b52:	e7d7      	b.n	8003b04 <_free_r+0x28>
 8003b54:	d902      	bls.n	8003b5c <_free_r+0x80>
 8003b56:	230c      	movs	r3, #12
 8003b58:	6003      	str	r3, [r0, #0]
 8003b5a:	e7d3      	b.n	8003b04 <_free_r+0x28>
 8003b5c:	6825      	ldr	r5, [r4, #0]
 8003b5e:	1961      	adds	r1, r4, r5
 8003b60:	428b      	cmp	r3, r1
 8003b62:	bf04      	itt	eq
 8003b64:	6819      	ldreq	r1, [r3, #0]
 8003b66:	685b      	ldreq	r3, [r3, #4]
 8003b68:	6063      	str	r3, [r4, #4]
 8003b6a:	bf04      	itt	eq
 8003b6c:	1949      	addeq	r1, r1, r5
 8003b6e:	6021      	streq	r1, [r4, #0]
 8003b70:	6054      	str	r4, [r2, #4]
 8003b72:	e7c7      	b.n	8003b04 <_free_r+0x28>
 8003b74:	b003      	add	sp, #12
 8003b76:	bd30      	pop	{r4, r5, pc}
 8003b78:	2000008c 	.word	0x2000008c

08003b7c <_malloc_r>:
 8003b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7e:	1ccd      	adds	r5, r1, #3
 8003b80:	f025 0503 	bic.w	r5, r5, #3
 8003b84:	3508      	adds	r5, #8
 8003b86:	2d0c      	cmp	r5, #12
 8003b88:	bf38      	it	cc
 8003b8a:	250c      	movcc	r5, #12
 8003b8c:	2d00      	cmp	r5, #0
 8003b8e:	4606      	mov	r6, r0
 8003b90:	db01      	blt.n	8003b96 <_malloc_r+0x1a>
 8003b92:	42a9      	cmp	r1, r5
 8003b94:	d903      	bls.n	8003b9e <_malloc_r+0x22>
 8003b96:	230c      	movs	r3, #12
 8003b98:	6033      	str	r3, [r6, #0]
 8003b9a:	2000      	movs	r0, #0
 8003b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b9e:	f000 fc9f 	bl	80044e0 <__malloc_lock>
 8003ba2:	4921      	ldr	r1, [pc, #132]	; (8003c28 <_malloc_r+0xac>)
 8003ba4:	680a      	ldr	r2, [r1, #0]
 8003ba6:	4614      	mov	r4, r2
 8003ba8:	b99c      	cbnz	r4, 8003bd2 <_malloc_r+0x56>
 8003baa:	4f20      	ldr	r7, [pc, #128]	; (8003c2c <_malloc_r+0xb0>)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	b923      	cbnz	r3, 8003bba <_malloc_r+0x3e>
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	4630      	mov	r0, r6
 8003bb4:	f000 fb2a 	bl	800420c <_sbrk_r>
 8003bb8:	6038      	str	r0, [r7, #0]
 8003bba:	4629      	mov	r1, r5
 8003bbc:	4630      	mov	r0, r6
 8003bbe:	f000 fb25 	bl	800420c <_sbrk_r>
 8003bc2:	1c43      	adds	r3, r0, #1
 8003bc4:	d123      	bne.n	8003c0e <_malloc_r+0x92>
 8003bc6:	230c      	movs	r3, #12
 8003bc8:	6033      	str	r3, [r6, #0]
 8003bca:	4630      	mov	r0, r6
 8003bcc:	f000 fc8e 	bl	80044ec <__malloc_unlock>
 8003bd0:	e7e3      	b.n	8003b9a <_malloc_r+0x1e>
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	1b5b      	subs	r3, r3, r5
 8003bd6:	d417      	bmi.n	8003c08 <_malloc_r+0x8c>
 8003bd8:	2b0b      	cmp	r3, #11
 8003bda:	d903      	bls.n	8003be4 <_malloc_r+0x68>
 8003bdc:	6023      	str	r3, [r4, #0]
 8003bde:	441c      	add	r4, r3
 8003be0:	6025      	str	r5, [r4, #0]
 8003be2:	e004      	b.n	8003bee <_malloc_r+0x72>
 8003be4:	6863      	ldr	r3, [r4, #4]
 8003be6:	42a2      	cmp	r2, r4
 8003be8:	bf0c      	ite	eq
 8003bea:	600b      	streq	r3, [r1, #0]
 8003bec:	6053      	strne	r3, [r2, #4]
 8003bee:	4630      	mov	r0, r6
 8003bf0:	f000 fc7c 	bl	80044ec <__malloc_unlock>
 8003bf4:	f104 000b 	add.w	r0, r4, #11
 8003bf8:	1d23      	adds	r3, r4, #4
 8003bfa:	f020 0007 	bic.w	r0, r0, #7
 8003bfe:	1ac2      	subs	r2, r0, r3
 8003c00:	d0cc      	beq.n	8003b9c <_malloc_r+0x20>
 8003c02:	1a1b      	subs	r3, r3, r0
 8003c04:	50a3      	str	r3, [r4, r2]
 8003c06:	e7c9      	b.n	8003b9c <_malloc_r+0x20>
 8003c08:	4622      	mov	r2, r4
 8003c0a:	6864      	ldr	r4, [r4, #4]
 8003c0c:	e7cc      	b.n	8003ba8 <_malloc_r+0x2c>
 8003c0e:	1cc4      	adds	r4, r0, #3
 8003c10:	f024 0403 	bic.w	r4, r4, #3
 8003c14:	42a0      	cmp	r0, r4
 8003c16:	d0e3      	beq.n	8003be0 <_malloc_r+0x64>
 8003c18:	1a21      	subs	r1, r4, r0
 8003c1a:	4630      	mov	r0, r6
 8003c1c:	f000 faf6 	bl	800420c <_sbrk_r>
 8003c20:	3001      	adds	r0, #1
 8003c22:	d1dd      	bne.n	8003be0 <_malloc_r+0x64>
 8003c24:	e7cf      	b.n	8003bc6 <_malloc_r+0x4a>
 8003c26:	bf00      	nop
 8003c28:	2000008c 	.word	0x2000008c
 8003c2c:	20000090 	.word	0x20000090

08003c30 <__sfputc_r>:
 8003c30:	6893      	ldr	r3, [r2, #8]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	b410      	push	{r4}
 8003c38:	6093      	str	r3, [r2, #8]
 8003c3a:	da08      	bge.n	8003c4e <__sfputc_r+0x1e>
 8003c3c:	6994      	ldr	r4, [r2, #24]
 8003c3e:	42a3      	cmp	r3, r4
 8003c40:	db01      	blt.n	8003c46 <__sfputc_r+0x16>
 8003c42:	290a      	cmp	r1, #10
 8003c44:	d103      	bne.n	8003c4e <__sfputc_r+0x1e>
 8003c46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c4a:	f000 bb33 	b.w	80042b4 <__swbuf_r>
 8003c4e:	6813      	ldr	r3, [r2, #0]
 8003c50:	1c58      	adds	r0, r3, #1
 8003c52:	6010      	str	r0, [r2, #0]
 8003c54:	7019      	strb	r1, [r3, #0]
 8003c56:	4608      	mov	r0, r1
 8003c58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <__sfputs_r>:
 8003c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c60:	4606      	mov	r6, r0
 8003c62:	460f      	mov	r7, r1
 8003c64:	4614      	mov	r4, r2
 8003c66:	18d5      	adds	r5, r2, r3
 8003c68:	42ac      	cmp	r4, r5
 8003c6a:	d101      	bne.n	8003c70 <__sfputs_r+0x12>
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	e007      	b.n	8003c80 <__sfputs_r+0x22>
 8003c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c74:	463a      	mov	r2, r7
 8003c76:	4630      	mov	r0, r6
 8003c78:	f7ff ffda 	bl	8003c30 <__sfputc_r>
 8003c7c:	1c43      	adds	r3, r0, #1
 8003c7e:	d1f3      	bne.n	8003c68 <__sfputs_r+0xa>
 8003c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c84 <_vfiprintf_r>:
 8003c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c88:	460d      	mov	r5, r1
 8003c8a:	b09d      	sub	sp, #116	; 0x74
 8003c8c:	4614      	mov	r4, r2
 8003c8e:	4698      	mov	r8, r3
 8003c90:	4606      	mov	r6, r0
 8003c92:	b118      	cbz	r0, 8003c9c <_vfiprintf_r+0x18>
 8003c94:	6983      	ldr	r3, [r0, #24]
 8003c96:	b90b      	cbnz	r3, 8003c9c <_vfiprintf_r+0x18>
 8003c98:	f7ff fe14 	bl	80038c4 <__sinit>
 8003c9c:	4b89      	ldr	r3, [pc, #548]	; (8003ec4 <_vfiprintf_r+0x240>)
 8003c9e:	429d      	cmp	r5, r3
 8003ca0:	d11b      	bne.n	8003cda <_vfiprintf_r+0x56>
 8003ca2:	6875      	ldr	r5, [r6, #4]
 8003ca4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ca6:	07d9      	lsls	r1, r3, #31
 8003ca8:	d405      	bmi.n	8003cb6 <_vfiprintf_r+0x32>
 8003caa:	89ab      	ldrh	r3, [r5, #12]
 8003cac:	059a      	lsls	r2, r3, #22
 8003cae:	d402      	bmi.n	8003cb6 <_vfiprintf_r+0x32>
 8003cb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cb2:	f7ff fea5 	bl	8003a00 <__retarget_lock_acquire_recursive>
 8003cb6:	89ab      	ldrh	r3, [r5, #12]
 8003cb8:	071b      	lsls	r3, r3, #28
 8003cba:	d501      	bpl.n	8003cc0 <_vfiprintf_r+0x3c>
 8003cbc:	692b      	ldr	r3, [r5, #16]
 8003cbe:	b9eb      	cbnz	r3, 8003cfc <_vfiprintf_r+0x78>
 8003cc0:	4629      	mov	r1, r5
 8003cc2:	4630      	mov	r0, r6
 8003cc4:	f000 fb5a 	bl	800437c <__swsetup_r>
 8003cc8:	b1c0      	cbz	r0, 8003cfc <_vfiprintf_r+0x78>
 8003cca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ccc:	07dc      	lsls	r4, r3, #31
 8003cce:	d50e      	bpl.n	8003cee <_vfiprintf_r+0x6a>
 8003cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd4:	b01d      	add	sp, #116	; 0x74
 8003cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cda:	4b7b      	ldr	r3, [pc, #492]	; (8003ec8 <_vfiprintf_r+0x244>)
 8003cdc:	429d      	cmp	r5, r3
 8003cde:	d101      	bne.n	8003ce4 <_vfiprintf_r+0x60>
 8003ce0:	68b5      	ldr	r5, [r6, #8]
 8003ce2:	e7df      	b.n	8003ca4 <_vfiprintf_r+0x20>
 8003ce4:	4b79      	ldr	r3, [pc, #484]	; (8003ecc <_vfiprintf_r+0x248>)
 8003ce6:	429d      	cmp	r5, r3
 8003ce8:	bf08      	it	eq
 8003cea:	68f5      	ldreq	r5, [r6, #12]
 8003cec:	e7da      	b.n	8003ca4 <_vfiprintf_r+0x20>
 8003cee:	89ab      	ldrh	r3, [r5, #12]
 8003cf0:	0598      	lsls	r0, r3, #22
 8003cf2:	d4ed      	bmi.n	8003cd0 <_vfiprintf_r+0x4c>
 8003cf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cf6:	f7ff fe84 	bl	8003a02 <__retarget_lock_release_recursive>
 8003cfa:	e7e9      	b.n	8003cd0 <_vfiprintf_r+0x4c>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8003d00:	2320      	movs	r3, #32
 8003d02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d06:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d0a:	2330      	movs	r3, #48	; 0x30
 8003d0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003ed0 <_vfiprintf_r+0x24c>
 8003d10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d14:	f04f 0901 	mov.w	r9, #1
 8003d18:	4623      	mov	r3, r4
 8003d1a:	469a      	mov	sl, r3
 8003d1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d20:	b10a      	cbz	r2, 8003d26 <_vfiprintf_r+0xa2>
 8003d22:	2a25      	cmp	r2, #37	; 0x25
 8003d24:	d1f9      	bne.n	8003d1a <_vfiprintf_r+0x96>
 8003d26:	ebba 0b04 	subs.w	fp, sl, r4
 8003d2a:	d00b      	beq.n	8003d44 <_vfiprintf_r+0xc0>
 8003d2c:	465b      	mov	r3, fp
 8003d2e:	4622      	mov	r2, r4
 8003d30:	4629      	mov	r1, r5
 8003d32:	4630      	mov	r0, r6
 8003d34:	f7ff ff93 	bl	8003c5e <__sfputs_r>
 8003d38:	3001      	adds	r0, #1
 8003d3a:	f000 80aa 	beq.w	8003e92 <_vfiprintf_r+0x20e>
 8003d3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d40:	445a      	add	r2, fp
 8003d42:	9209      	str	r2, [sp, #36]	; 0x24
 8003d44:	f89a 3000 	ldrb.w	r3, [sl]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80a2 	beq.w	8003e92 <_vfiprintf_r+0x20e>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	f04f 32ff 	mov.w	r2, #4294967295
 8003d54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d58:	f10a 0a01 	add.w	sl, sl, #1
 8003d5c:	9304      	str	r3, [sp, #16]
 8003d5e:	9307      	str	r3, [sp, #28]
 8003d60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d64:	931a      	str	r3, [sp, #104]	; 0x68
 8003d66:	4654      	mov	r4, sl
 8003d68:	2205      	movs	r2, #5
 8003d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d6e:	4858      	ldr	r0, [pc, #352]	; (8003ed0 <_vfiprintf_r+0x24c>)
 8003d70:	f7fc fa2e 	bl	80001d0 <memchr>
 8003d74:	9a04      	ldr	r2, [sp, #16]
 8003d76:	b9d8      	cbnz	r0, 8003db0 <_vfiprintf_r+0x12c>
 8003d78:	06d1      	lsls	r1, r2, #27
 8003d7a:	bf44      	itt	mi
 8003d7c:	2320      	movmi	r3, #32
 8003d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d82:	0713      	lsls	r3, r2, #28
 8003d84:	bf44      	itt	mi
 8003d86:	232b      	movmi	r3, #43	; 0x2b
 8003d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8003d90:	2b2a      	cmp	r3, #42	; 0x2a
 8003d92:	d015      	beq.n	8003dc0 <_vfiprintf_r+0x13c>
 8003d94:	9a07      	ldr	r2, [sp, #28]
 8003d96:	4654      	mov	r4, sl
 8003d98:	2000      	movs	r0, #0
 8003d9a:	f04f 0c0a 	mov.w	ip, #10
 8003d9e:	4621      	mov	r1, r4
 8003da0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003da4:	3b30      	subs	r3, #48	; 0x30
 8003da6:	2b09      	cmp	r3, #9
 8003da8:	d94e      	bls.n	8003e48 <_vfiprintf_r+0x1c4>
 8003daa:	b1b0      	cbz	r0, 8003dda <_vfiprintf_r+0x156>
 8003dac:	9207      	str	r2, [sp, #28]
 8003dae:	e014      	b.n	8003dda <_vfiprintf_r+0x156>
 8003db0:	eba0 0308 	sub.w	r3, r0, r8
 8003db4:	fa09 f303 	lsl.w	r3, r9, r3
 8003db8:	4313      	orrs	r3, r2
 8003dba:	9304      	str	r3, [sp, #16]
 8003dbc:	46a2      	mov	sl, r4
 8003dbe:	e7d2      	b.n	8003d66 <_vfiprintf_r+0xe2>
 8003dc0:	9b03      	ldr	r3, [sp, #12]
 8003dc2:	1d19      	adds	r1, r3, #4
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	9103      	str	r1, [sp, #12]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	bfbb      	ittet	lt
 8003dcc:	425b      	neglt	r3, r3
 8003dce:	f042 0202 	orrlt.w	r2, r2, #2
 8003dd2:	9307      	strge	r3, [sp, #28]
 8003dd4:	9307      	strlt	r3, [sp, #28]
 8003dd6:	bfb8      	it	lt
 8003dd8:	9204      	strlt	r2, [sp, #16]
 8003dda:	7823      	ldrb	r3, [r4, #0]
 8003ddc:	2b2e      	cmp	r3, #46	; 0x2e
 8003dde:	d10c      	bne.n	8003dfa <_vfiprintf_r+0x176>
 8003de0:	7863      	ldrb	r3, [r4, #1]
 8003de2:	2b2a      	cmp	r3, #42	; 0x2a
 8003de4:	d135      	bne.n	8003e52 <_vfiprintf_r+0x1ce>
 8003de6:	9b03      	ldr	r3, [sp, #12]
 8003de8:	1d1a      	adds	r2, r3, #4
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	9203      	str	r2, [sp, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	bfb8      	it	lt
 8003df2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003df6:	3402      	adds	r4, #2
 8003df8:	9305      	str	r3, [sp, #20]
 8003dfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003ee0 <_vfiprintf_r+0x25c>
 8003dfe:	7821      	ldrb	r1, [r4, #0]
 8003e00:	2203      	movs	r2, #3
 8003e02:	4650      	mov	r0, sl
 8003e04:	f7fc f9e4 	bl	80001d0 <memchr>
 8003e08:	b140      	cbz	r0, 8003e1c <_vfiprintf_r+0x198>
 8003e0a:	2340      	movs	r3, #64	; 0x40
 8003e0c:	eba0 000a 	sub.w	r0, r0, sl
 8003e10:	fa03 f000 	lsl.w	r0, r3, r0
 8003e14:	9b04      	ldr	r3, [sp, #16]
 8003e16:	4303      	orrs	r3, r0
 8003e18:	3401      	adds	r4, #1
 8003e1a:	9304      	str	r3, [sp, #16]
 8003e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e20:	482c      	ldr	r0, [pc, #176]	; (8003ed4 <_vfiprintf_r+0x250>)
 8003e22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e26:	2206      	movs	r2, #6
 8003e28:	f7fc f9d2 	bl	80001d0 <memchr>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	d03f      	beq.n	8003eb0 <_vfiprintf_r+0x22c>
 8003e30:	4b29      	ldr	r3, [pc, #164]	; (8003ed8 <_vfiprintf_r+0x254>)
 8003e32:	bb1b      	cbnz	r3, 8003e7c <_vfiprintf_r+0x1f8>
 8003e34:	9b03      	ldr	r3, [sp, #12]
 8003e36:	3307      	adds	r3, #7
 8003e38:	f023 0307 	bic.w	r3, r3, #7
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	9303      	str	r3, [sp, #12]
 8003e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e42:	443b      	add	r3, r7
 8003e44:	9309      	str	r3, [sp, #36]	; 0x24
 8003e46:	e767      	b.n	8003d18 <_vfiprintf_r+0x94>
 8003e48:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e4c:	460c      	mov	r4, r1
 8003e4e:	2001      	movs	r0, #1
 8003e50:	e7a5      	b.n	8003d9e <_vfiprintf_r+0x11a>
 8003e52:	2300      	movs	r3, #0
 8003e54:	3401      	adds	r4, #1
 8003e56:	9305      	str	r3, [sp, #20]
 8003e58:	4619      	mov	r1, r3
 8003e5a:	f04f 0c0a 	mov.w	ip, #10
 8003e5e:	4620      	mov	r0, r4
 8003e60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e64:	3a30      	subs	r2, #48	; 0x30
 8003e66:	2a09      	cmp	r2, #9
 8003e68:	d903      	bls.n	8003e72 <_vfiprintf_r+0x1ee>
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0c5      	beq.n	8003dfa <_vfiprintf_r+0x176>
 8003e6e:	9105      	str	r1, [sp, #20]
 8003e70:	e7c3      	b.n	8003dfa <_vfiprintf_r+0x176>
 8003e72:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e76:	4604      	mov	r4, r0
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e7f0      	b.n	8003e5e <_vfiprintf_r+0x1da>
 8003e7c:	ab03      	add	r3, sp, #12
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	462a      	mov	r2, r5
 8003e82:	4b16      	ldr	r3, [pc, #88]	; (8003edc <_vfiprintf_r+0x258>)
 8003e84:	a904      	add	r1, sp, #16
 8003e86:	4630      	mov	r0, r6
 8003e88:	f3af 8000 	nop.w
 8003e8c:	4607      	mov	r7, r0
 8003e8e:	1c78      	adds	r0, r7, #1
 8003e90:	d1d6      	bne.n	8003e40 <_vfiprintf_r+0x1bc>
 8003e92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e94:	07d9      	lsls	r1, r3, #31
 8003e96:	d405      	bmi.n	8003ea4 <_vfiprintf_r+0x220>
 8003e98:	89ab      	ldrh	r3, [r5, #12]
 8003e9a:	059a      	lsls	r2, r3, #22
 8003e9c:	d402      	bmi.n	8003ea4 <_vfiprintf_r+0x220>
 8003e9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ea0:	f7ff fdaf 	bl	8003a02 <__retarget_lock_release_recursive>
 8003ea4:	89ab      	ldrh	r3, [r5, #12]
 8003ea6:	065b      	lsls	r3, r3, #25
 8003ea8:	f53f af12 	bmi.w	8003cd0 <_vfiprintf_r+0x4c>
 8003eac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003eae:	e711      	b.n	8003cd4 <_vfiprintf_r+0x50>
 8003eb0:	ab03      	add	r3, sp, #12
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	462a      	mov	r2, r5
 8003eb6:	4b09      	ldr	r3, [pc, #36]	; (8003edc <_vfiprintf_r+0x258>)
 8003eb8:	a904      	add	r1, sp, #16
 8003eba:	4630      	mov	r0, r6
 8003ebc:	f000 f880 	bl	8003fc0 <_printf_i>
 8003ec0:	e7e4      	b.n	8003e8c <_vfiprintf_r+0x208>
 8003ec2:	bf00      	nop
 8003ec4:	080045a8 	.word	0x080045a8
 8003ec8:	080045c8 	.word	0x080045c8
 8003ecc:	08004588 	.word	0x08004588
 8003ed0:	080045e8 	.word	0x080045e8
 8003ed4:	080045f2 	.word	0x080045f2
 8003ed8:	00000000 	.word	0x00000000
 8003edc:	08003c5f 	.word	0x08003c5f
 8003ee0:	080045ee 	.word	0x080045ee

08003ee4 <_printf_common>:
 8003ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee8:	4616      	mov	r6, r2
 8003eea:	4699      	mov	r9, r3
 8003eec:	688a      	ldr	r2, [r1, #8]
 8003eee:	690b      	ldr	r3, [r1, #16]
 8003ef0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	bfb8      	it	lt
 8003ef8:	4613      	movlt	r3, r2
 8003efa:	6033      	str	r3, [r6, #0]
 8003efc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f00:	4607      	mov	r7, r0
 8003f02:	460c      	mov	r4, r1
 8003f04:	b10a      	cbz	r2, 8003f0a <_printf_common+0x26>
 8003f06:	3301      	adds	r3, #1
 8003f08:	6033      	str	r3, [r6, #0]
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	0699      	lsls	r1, r3, #26
 8003f0e:	bf42      	ittt	mi
 8003f10:	6833      	ldrmi	r3, [r6, #0]
 8003f12:	3302      	addmi	r3, #2
 8003f14:	6033      	strmi	r3, [r6, #0]
 8003f16:	6825      	ldr	r5, [r4, #0]
 8003f18:	f015 0506 	ands.w	r5, r5, #6
 8003f1c:	d106      	bne.n	8003f2c <_printf_common+0x48>
 8003f1e:	f104 0a19 	add.w	sl, r4, #25
 8003f22:	68e3      	ldr	r3, [r4, #12]
 8003f24:	6832      	ldr	r2, [r6, #0]
 8003f26:	1a9b      	subs	r3, r3, r2
 8003f28:	42ab      	cmp	r3, r5
 8003f2a:	dc26      	bgt.n	8003f7a <_printf_common+0x96>
 8003f2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f30:	1e13      	subs	r3, r2, #0
 8003f32:	6822      	ldr	r2, [r4, #0]
 8003f34:	bf18      	it	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	0692      	lsls	r2, r2, #26
 8003f3a:	d42b      	bmi.n	8003f94 <_printf_common+0xb0>
 8003f3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f40:	4649      	mov	r1, r9
 8003f42:	4638      	mov	r0, r7
 8003f44:	47c0      	blx	r8
 8003f46:	3001      	adds	r0, #1
 8003f48:	d01e      	beq.n	8003f88 <_printf_common+0xa4>
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	68e5      	ldr	r5, [r4, #12]
 8003f4e:	6832      	ldr	r2, [r6, #0]
 8003f50:	f003 0306 	and.w	r3, r3, #6
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	bf08      	it	eq
 8003f58:	1aad      	subeq	r5, r5, r2
 8003f5a:	68a3      	ldr	r3, [r4, #8]
 8003f5c:	6922      	ldr	r2, [r4, #16]
 8003f5e:	bf0c      	ite	eq
 8003f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f64:	2500      	movne	r5, #0
 8003f66:	4293      	cmp	r3, r2
 8003f68:	bfc4      	itt	gt
 8003f6a:	1a9b      	subgt	r3, r3, r2
 8003f6c:	18ed      	addgt	r5, r5, r3
 8003f6e:	2600      	movs	r6, #0
 8003f70:	341a      	adds	r4, #26
 8003f72:	42b5      	cmp	r5, r6
 8003f74:	d11a      	bne.n	8003fac <_printf_common+0xc8>
 8003f76:	2000      	movs	r0, #0
 8003f78:	e008      	b.n	8003f8c <_printf_common+0xa8>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	4652      	mov	r2, sl
 8003f7e:	4649      	mov	r1, r9
 8003f80:	4638      	mov	r0, r7
 8003f82:	47c0      	blx	r8
 8003f84:	3001      	adds	r0, #1
 8003f86:	d103      	bne.n	8003f90 <_printf_common+0xac>
 8003f88:	f04f 30ff 	mov.w	r0, #4294967295
 8003f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f90:	3501      	adds	r5, #1
 8003f92:	e7c6      	b.n	8003f22 <_printf_common+0x3e>
 8003f94:	18e1      	adds	r1, r4, r3
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	2030      	movs	r0, #48	; 0x30
 8003f9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f9e:	4422      	add	r2, r4
 8003fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fa8:	3302      	adds	r3, #2
 8003faa:	e7c7      	b.n	8003f3c <_printf_common+0x58>
 8003fac:	2301      	movs	r3, #1
 8003fae:	4622      	mov	r2, r4
 8003fb0:	4649      	mov	r1, r9
 8003fb2:	4638      	mov	r0, r7
 8003fb4:	47c0      	blx	r8
 8003fb6:	3001      	adds	r0, #1
 8003fb8:	d0e6      	beq.n	8003f88 <_printf_common+0xa4>
 8003fba:	3601      	adds	r6, #1
 8003fbc:	e7d9      	b.n	8003f72 <_printf_common+0x8e>
	...

08003fc0 <_printf_i>:
 8003fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc4:	460c      	mov	r4, r1
 8003fc6:	4691      	mov	r9, r2
 8003fc8:	7e27      	ldrb	r7, [r4, #24]
 8003fca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003fcc:	2f78      	cmp	r7, #120	; 0x78
 8003fce:	4680      	mov	r8, r0
 8003fd0:	469a      	mov	sl, r3
 8003fd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fd6:	d807      	bhi.n	8003fe8 <_printf_i+0x28>
 8003fd8:	2f62      	cmp	r7, #98	; 0x62
 8003fda:	d80a      	bhi.n	8003ff2 <_printf_i+0x32>
 8003fdc:	2f00      	cmp	r7, #0
 8003fde:	f000 80d8 	beq.w	8004192 <_printf_i+0x1d2>
 8003fe2:	2f58      	cmp	r7, #88	; 0x58
 8003fe4:	f000 80a3 	beq.w	800412e <_printf_i+0x16e>
 8003fe8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003fec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ff0:	e03a      	b.n	8004068 <_printf_i+0xa8>
 8003ff2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ff6:	2b15      	cmp	r3, #21
 8003ff8:	d8f6      	bhi.n	8003fe8 <_printf_i+0x28>
 8003ffa:	a001      	add	r0, pc, #4	; (adr r0, 8004000 <_printf_i+0x40>)
 8003ffc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004000:	08004059 	.word	0x08004059
 8004004:	0800406d 	.word	0x0800406d
 8004008:	08003fe9 	.word	0x08003fe9
 800400c:	08003fe9 	.word	0x08003fe9
 8004010:	08003fe9 	.word	0x08003fe9
 8004014:	08003fe9 	.word	0x08003fe9
 8004018:	0800406d 	.word	0x0800406d
 800401c:	08003fe9 	.word	0x08003fe9
 8004020:	08003fe9 	.word	0x08003fe9
 8004024:	08003fe9 	.word	0x08003fe9
 8004028:	08003fe9 	.word	0x08003fe9
 800402c:	08004179 	.word	0x08004179
 8004030:	0800409d 	.word	0x0800409d
 8004034:	0800415b 	.word	0x0800415b
 8004038:	08003fe9 	.word	0x08003fe9
 800403c:	08003fe9 	.word	0x08003fe9
 8004040:	0800419b 	.word	0x0800419b
 8004044:	08003fe9 	.word	0x08003fe9
 8004048:	0800409d 	.word	0x0800409d
 800404c:	08003fe9 	.word	0x08003fe9
 8004050:	08003fe9 	.word	0x08003fe9
 8004054:	08004163 	.word	0x08004163
 8004058:	680b      	ldr	r3, [r1, #0]
 800405a:	1d1a      	adds	r2, r3, #4
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	600a      	str	r2, [r1, #0]
 8004060:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004064:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004068:	2301      	movs	r3, #1
 800406a:	e0a3      	b.n	80041b4 <_printf_i+0x1f4>
 800406c:	6825      	ldr	r5, [r4, #0]
 800406e:	6808      	ldr	r0, [r1, #0]
 8004070:	062e      	lsls	r6, r5, #24
 8004072:	f100 0304 	add.w	r3, r0, #4
 8004076:	d50a      	bpl.n	800408e <_printf_i+0xce>
 8004078:	6805      	ldr	r5, [r0, #0]
 800407a:	600b      	str	r3, [r1, #0]
 800407c:	2d00      	cmp	r5, #0
 800407e:	da03      	bge.n	8004088 <_printf_i+0xc8>
 8004080:	232d      	movs	r3, #45	; 0x2d
 8004082:	426d      	negs	r5, r5
 8004084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004088:	485e      	ldr	r0, [pc, #376]	; (8004204 <_printf_i+0x244>)
 800408a:	230a      	movs	r3, #10
 800408c:	e019      	b.n	80040c2 <_printf_i+0x102>
 800408e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004092:	6805      	ldr	r5, [r0, #0]
 8004094:	600b      	str	r3, [r1, #0]
 8004096:	bf18      	it	ne
 8004098:	b22d      	sxthne	r5, r5
 800409a:	e7ef      	b.n	800407c <_printf_i+0xbc>
 800409c:	680b      	ldr	r3, [r1, #0]
 800409e:	6825      	ldr	r5, [r4, #0]
 80040a0:	1d18      	adds	r0, r3, #4
 80040a2:	6008      	str	r0, [r1, #0]
 80040a4:	0628      	lsls	r0, r5, #24
 80040a6:	d501      	bpl.n	80040ac <_printf_i+0xec>
 80040a8:	681d      	ldr	r5, [r3, #0]
 80040aa:	e002      	b.n	80040b2 <_printf_i+0xf2>
 80040ac:	0669      	lsls	r1, r5, #25
 80040ae:	d5fb      	bpl.n	80040a8 <_printf_i+0xe8>
 80040b0:	881d      	ldrh	r5, [r3, #0]
 80040b2:	4854      	ldr	r0, [pc, #336]	; (8004204 <_printf_i+0x244>)
 80040b4:	2f6f      	cmp	r7, #111	; 0x6f
 80040b6:	bf0c      	ite	eq
 80040b8:	2308      	moveq	r3, #8
 80040ba:	230a      	movne	r3, #10
 80040bc:	2100      	movs	r1, #0
 80040be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040c2:	6866      	ldr	r6, [r4, #4]
 80040c4:	60a6      	str	r6, [r4, #8]
 80040c6:	2e00      	cmp	r6, #0
 80040c8:	bfa2      	ittt	ge
 80040ca:	6821      	ldrge	r1, [r4, #0]
 80040cc:	f021 0104 	bicge.w	r1, r1, #4
 80040d0:	6021      	strge	r1, [r4, #0]
 80040d2:	b90d      	cbnz	r5, 80040d8 <_printf_i+0x118>
 80040d4:	2e00      	cmp	r6, #0
 80040d6:	d04d      	beq.n	8004174 <_printf_i+0x1b4>
 80040d8:	4616      	mov	r6, r2
 80040da:	fbb5 f1f3 	udiv	r1, r5, r3
 80040de:	fb03 5711 	mls	r7, r3, r1, r5
 80040e2:	5dc7      	ldrb	r7, [r0, r7]
 80040e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040e8:	462f      	mov	r7, r5
 80040ea:	42bb      	cmp	r3, r7
 80040ec:	460d      	mov	r5, r1
 80040ee:	d9f4      	bls.n	80040da <_printf_i+0x11a>
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d10b      	bne.n	800410c <_printf_i+0x14c>
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	07df      	lsls	r7, r3, #31
 80040f8:	d508      	bpl.n	800410c <_printf_i+0x14c>
 80040fa:	6923      	ldr	r3, [r4, #16]
 80040fc:	6861      	ldr	r1, [r4, #4]
 80040fe:	4299      	cmp	r1, r3
 8004100:	bfde      	ittt	le
 8004102:	2330      	movle	r3, #48	; 0x30
 8004104:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004108:	f106 36ff 	addle.w	r6, r6, #4294967295
 800410c:	1b92      	subs	r2, r2, r6
 800410e:	6122      	str	r2, [r4, #16]
 8004110:	f8cd a000 	str.w	sl, [sp]
 8004114:	464b      	mov	r3, r9
 8004116:	aa03      	add	r2, sp, #12
 8004118:	4621      	mov	r1, r4
 800411a:	4640      	mov	r0, r8
 800411c:	f7ff fee2 	bl	8003ee4 <_printf_common>
 8004120:	3001      	adds	r0, #1
 8004122:	d14c      	bne.n	80041be <_printf_i+0x1fe>
 8004124:	f04f 30ff 	mov.w	r0, #4294967295
 8004128:	b004      	add	sp, #16
 800412a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800412e:	4835      	ldr	r0, [pc, #212]	; (8004204 <_printf_i+0x244>)
 8004130:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	680e      	ldr	r6, [r1, #0]
 8004138:	061f      	lsls	r7, r3, #24
 800413a:	f856 5b04 	ldr.w	r5, [r6], #4
 800413e:	600e      	str	r6, [r1, #0]
 8004140:	d514      	bpl.n	800416c <_printf_i+0x1ac>
 8004142:	07d9      	lsls	r1, r3, #31
 8004144:	bf44      	itt	mi
 8004146:	f043 0320 	orrmi.w	r3, r3, #32
 800414a:	6023      	strmi	r3, [r4, #0]
 800414c:	b91d      	cbnz	r5, 8004156 <_printf_i+0x196>
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	f023 0320 	bic.w	r3, r3, #32
 8004154:	6023      	str	r3, [r4, #0]
 8004156:	2310      	movs	r3, #16
 8004158:	e7b0      	b.n	80040bc <_printf_i+0xfc>
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	f043 0320 	orr.w	r3, r3, #32
 8004160:	6023      	str	r3, [r4, #0]
 8004162:	2378      	movs	r3, #120	; 0x78
 8004164:	4828      	ldr	r0, [pc, #160]	; (8004208 <_printf_i+0x248>)
 8004166:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800416a:	e7e3      	b.n	8004134 <_printf_i+0x174>
 800416c:	065e      	lsls	r6, r3, #25
 800416e:	bf48      	it	mi
 8004170:	b2ad      	uxthmi	r5, r5
 8004172:	e7e6      	b.n	8004142 <_printf_i+0x182>
 8004174:	4616      	mov	r6, r2
 8004176:	e7bb      	b.n	80040f0 <_printf_i+0x130>
 8004178:	680b      	ldr	r3, [r1, #0]
 800417a:	6826      	ldr	r6, [r4, #0]
 800417c:	6960      	ldr	r0, [r4, #20]
 800417e:	1d1d      	adds	r5, r3, #4
 8004180:	600d      	str	r5, [r1, #0]
 8004182:	0635      	lsls	r5, r6, #24
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	d501      	bpl.n	800418c <_printf_i+0x1cc>
 8004188:	6018      	str	r0, [r3, #0]
 800418a:	e002      	b.n	8004192 <_printf_i+0x1d2>
 800418c:	0671      	lsls	r1, r6, #25
 800418e:	d5fb      	bpl.n	8004188 <_printf_i+0x1c8>
 8004190:	8018      	strh	r0, [r3, #0]
 8004192:	2300      	movs	r3, #0
 8004194:	6123      	str	r3, [r4, #16]
 8004196:	4616      	mov	r6, r2
 8004198:	e7ba      	b.n	8004110 <_printf_i+0x150>
 800419a:	680b      	ldr	r3, [r1, #0]
 800419c:	1d1a      	adds	r2, r3, #4
 800419e:	600a      	str	r2, [r1, #0]
 80041a0:	681e      	ldr	r6, [r3, #0]
 80041a2:	6862      	ldr	r2, [r4, #4]
 80041a4:	2100      	movs	r1, #0
 80041a6:	4630      	mov	r0, r6
 80041a8:	f7fc f812 	bl	80001d0 <memchr>
 80041ac:	b108      	cbz	r0, 80041b2 <_printf_i+0x1f2>
 80041ae:	1b80      	subs	r0, r0, r6
 80041b0:	6060      	str	r0, [r4, #4]
 80041b2:	6863      	ldr	r3, [r4, #4]
 80041b4:	6123      	str	r3, [r4, #16]
 80041b6:	2300      	movs	r3, #0
 80041b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041bc:	e7a8      	b.n	8004110 <_printf_i+0x150>
 80041be:	6923      	ldr	r3, [r4, #16]
 80041c0:	4632      	mov	r2, r6
 80041c2:	4649      	mov	r1, r9
 80041c4:	4640      	mov	r0, r8
 80041c6:	47d0      	blx	sl
 80041c8:	3001      	adds	r0, #1
 80041ca:	d0ab      	beq.n	8004124 <_printf_i+0x164>
 80041cc:	6823      	ldr	r3, [r4, #0]
 80041ce:	079b      	lsls	r3, r3, #30
 80041d0:	d413      	bmi.n	80041fa <_printf_i+0x23a>
 80041d2:	68e0      	ldr	r0, [r4, #12]
 80041d4:	9b03      	ldr	r3, [sp, #12]
 80041d6:	4298      	cmp	r0, r3
 80041d8:	bfb8      	it	lt
 80041da:	4618      	movlt	r0, r3
 80041dc:	e7a4      	b.n	8004128 <_printf_i+0x168>
 80041de:	2301      	movs	r3, #1
 80041e0:	4632      	mov	r2, r6
 80041e2:	4649      	mov	r1, r9
 80041e4:	4640      	mov	r0, r8
 80041e6:	47d0      	blx	sl
 80041e8:	3001      	adds	r0, #1
 80041ea:	d09b      	beq.n	8004124 <_printf_i+0x164>
 80041ec:	3501      	adds	r5, #1
 80041ee:	68e3      	ldr	r3, [r4, #12]
 80041f0:	9903      	ldr	r1, [sp, #12]
 80041f2:	1a5b      	subs	r3, r3, r1
 80041f4:	42ab      	cmp	r3, r5
 80041f6:	dcf2      	bgt.n	80041de <_printf_i+0x21e>
 80041f8:	e7eb      	b.n	80041d2 <_printf_i+0x212>
 80041fa:	2500      	movs	r5, #0
 80041fc:	f104 0619 	add.w	r6, r4, #25
 8004200:	e7f5      	b.n	80041ee <_printf_i+0x22e>
 8004202:	bf00      	nop
 8004204:	080045f9 	.word	0x080045f9
 8004208:	0800460a 	.word	0x0800460a

0800420c <_sbrk_r>:
 800420c:	b538      	push	{r3, r4, r5, lr}
 800420e:	4d06      	ldr	r5, [pc, #24]	; (8004228 <_sbrk_r+0x1c>)
 8004210:	2300      	movs	r3, #0
 8004212:	4604      	mov	r4, r0
 8004214:	4608      	mov	r0, r1
 8004216:	602b      	str	r3, [r5, #0]
 8004218:	f7fc fffa 	bl	8001210 <_sbrk>
 800421c:	1c43      	adds	r3, r0, #1
 800421e:	d102      	bne.n	8004226 <_sbrk_r+0x1a>
 8004220:	682b      	ldr	r3, [r5, #0]
 8004222:	b103      	cbz	r3, 8004226 <_sbrk_r+0x1a>
 8004224:	6023      	str	r3, [r4, #0]
 8004226:	bd38      	pop	{r3, r4, r5, pc}
 8004228:	200000a0 	.word	0x200000a0

0800422c <__sread>:
 800422c:	b510      	push	{r4, lr}
 800422e:	460c      	mov	r4, r1
 8004230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004234:	f000 f960 	bl	80044f8 <_read_r>
 8004238:	2800      	cmp	r0, #0
 800423a:	bfab      	itete	ge
 800423c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800423e:	89a3      	ldrhlt	r3, [r4, #12]
 8004240:	181b      	addge	r3, r3, r0
 8004242:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004246:	bfac      	ite	ge
 8004248:	6563      	strge	r3, [r4, #84]	; 0x54
 800424a:	81a3      	strhlt	r3, [r4, #12]
 800424c:	bd10      	pop	{r4, pc}

0800424e <__swrite>:
 800424e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004252:	461f      	mov	r7, r3
 8004254:	898b      	ldrh	r3, [r1, #12]
 8004256:	05db      	lsls	r3, r3, #23
 8004258:	4605      	mov	r5, r0
 800425a:	460c      	mov	r4, r1
 800425c:	4616      	mov	r6, r2
 800425e:	d505      	bpl.n	800426c <__swrite+0x1e>
 8004260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004264:	2302      	movs	r3, #2
 8004266:	2200      	movs	r2, #0
 8004268:	f000 f928 	bl	80044bc <_lseek_r>
 800426c:	89a3      	ldrh	r3, [r4, #12]
 800426e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004272:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004276:	81a3      	strh	r3, [r4, #12]
 8004278:	4632      	mov	r2, r6
 800427a:	463b      	mov	r3, r7
 800427c:	4628      	mov	r0, r5
 800427e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004282:	f000 b869 	b.w	8004358 <_write_r>

08004286 <__sseek>:
 8004286:	b510      	push	{r4, lr}
 8004288:	460c      	mov	r4, r1
 800428a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800428e:	f000 f915 	bl	80044bc <_lseek_r>
 8004292:	1c43      	adds	r3, r0, #1
 8004294:	89a3      	ldrh	r3, [r4, #12]
 8004296:	bf15      	itete	ne
 8004298:	6560      	strne	r0, [r4, #84]	; 0x54
 800429a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800429e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80042a2:	81a3      	strheq	r3, [r4, #12]
 80042a4:	bf18      	it	ne
 80042a6:	81a3      	strhne	r3, [r4, #12]
 80042a8:	bd10      	pop	{r4, pc}

080042aa <__sclose>:
 80042aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ae:	f000 b8d3 	b.w	8004458 <_close_r>
	...

080042b4 <__swbuf_r>:
 80042b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b6:	460e      	mov	r6, r1
 80042b8:	4614      	mov	r4, r2
 80042ba:	4605      	mov	r5, r0
 80042bc:	b118      	cbz	r0, 80042c6 <__swbuf_r+0x12>
 80042be:	6983      	ldr	r3, [r0, #24]
 80042c0:	b90b      	cbnz	r3, 80042c6 <__swbuf_r+0x12>
 80042c2:	f7ff faff 	bl	80038c4 <__sinit>
 80042c6:	4b21      	ldr	r3, [pc, #132]	; (800434c <__swbuf_r+0x98>)
 80042c8:	429c      	cmp	r4, r3
 80042ca:	d12b      	bne.n	8004324 <__swbuf_r+0x70>
 80042cc:	686c      	ldr	r4, [r5, #4]
 80042ce:	69a3      	ldr	r3, [r4, #24]
 80042d0:	60a3      	str	r3, [r4, #8]
 80042d2:	89a3      	ldrh	r3, [r4, #12]
 80042d4:	071a      	lsls	r2, r3, #28
 80042d6:	d52f      	bpl.n	8004338 <__swbuf_r+0x84>
 80042d8:	6923      	ldr	r3, [r4, #16]
 80042da:	b36b      	cbz	r3, 8004338 <__swbuf_r+0x84>
 80042dc:	6923      	ldr	r3, [r4, #16]
 80042de:	6820      	ldr	r0, [r4, #0]
 80042e0:	1ac0      	subs	r0, r0, r3
 80042e2:	6963      	ldr	r3, [r4, #20]
 80042e4:	b2f6      	uxtb	r6, r6
 80042e6:	4283      	cmp	r3, r0
 80042e8:	4637      	mov	r7, r6
 80042ea:	dc04      	bgt.n	80042f6 <__swbuf_r+0x42>
 80042ec:	4621      	mov	r1, r4
 80042ee:	4628      	mov	r0, r5
 80042f0:	f7ff fa54 	bl	800379c <_fflush_r>
 80042f4:	bb30      	cbnz	r0, 8004344 <__swbuf_r+0x90>
 80042f6:	68a3      	ldr	r3, [r4, #8]
 80042f8:	3b01      	subs	r3, #1
 80042fa:	60a3      	str	r3, [r4, #8]
 80042fc:	6823      	ldr	r3, [r4, #0]
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	6022      	str	r2, [r4, #0]
 8004302:	701e      	strb	r6, [r3, #0]
 8004304:	6963      	ldr	r3, [r4, #20]
 8004306:	3001      	adds	r0, #1
 8004308:	4283      	cmp	r3, r0
 800430a:	d004      	beq.n	8004316 <__swbuf_r+0x62>
 800430c:	89a3      	ldrh	r3, [r4, #12]
 800430e:	07db      	lsls	r3, r3, #31
 8004310:	d506      	bpl.n	8004320 <__swbuf_r+0x6c>
 8004312:	2e0a      	cmp	r6, #10
 8004314:	d104      	bne.n	8004320 <__swbuf_r+0x6c>
 8004316:	4621      	mov	r1, r4
 8004318:	4628      	mov	r0, r5
 800431a:	f7ff fa3f 	bl	800379c <_fflush_r>
 800431e:	b988      	cbnz	r0, 8004344 <__swbuf_r+0x90>
 8004320:	4638      	mov	r0, r7
 8004322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004324:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <__swbuf_r+0x9c>)
 8004326:	429c      	cmp	r4, r3
 8004328:	d101      	bne.n	800432e <__swbuf_r+0x7a>
 800432a:	68ac      	ldr	r4, [r5, #8]
 800432c:	e7cf      	b.n	80042ce <__swbuf_r+0x1a>
 800432e:	4b09      	ldr	r3, [pc, #36]	; (8004354 <__swbuf_r+0xa0>)
 8004330:	429c      	cmp	r4, r3
 8004332:	bf08      	it	eq
 8004334:	68ec      	ldreq	r4, [r5, #12]
 8004336:	e7ca      	b.n	80042ce <__swbuf_r+0x1a>
 8004338:	4621      	mov	r1, r4
 800433a:	4628      	mov	r0, r5
 800433c:	f000 f81e 	bl	800437c <__swsetup_r>
 8004340:	2800      	cmp	r0, #0
 8004342:	d0cb      	beq.n	80042dc <__swbuf_r+0x28>
 8004344:	f04f 37ff 	mov.w	r7, #4294967295
 8004348:	e7ea      	b.n	8004320 <__swbuf_r+0x6c>
 800434a:	bf00      	nop
 800434c:	080045a8 	.word	0x080045a8
 8004350:	080045c8 	.word	0x080045c8
 8004354:	08004588 	.word	0x08004588

08004358 <_write_r>:
 8004358:	b538      	push	{r3, r4, r5, lr}
 800435a:	4d07      	ldr	r5, [pc, #28]	; (8004378 <_write_r+0x20>)
 800435c:	4604      	mov	r4, r0
 800435e:	4608      	mov	r0, r1
 8004360:	4611      	mov	r1, r2
 8004362:	2200      	movs	r2, #0
 8004364:	602a      	str	r2, [r5, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	f7fc ff01 	bl	800116e <_write>
 800436c:	1c43      	adds	r3, r0, #1
 800436e:	d102      	bne.n	8004376 <_write_r+0x1e>
 8004370:	682b      	ldr	r3, [r5, #0]
 8004372:	b103      	cbz	r3, 8004376 <_write_r+0x1e>
 8004374:	6023      	str	r3, [r4, #0]
 8004376:	bd38      	pop	{r3, r4, r5, pc}
 8004378:	200000a0 	.word	0x200000a0

0800437c <__swsetup_r>:
 800437c:	4b32      	ldr	r3, [pc, #200]	; (8004448 <__swsetup_r+0xcc>)
 800437e:	b570      	push	{r4, r5, r6, lr}
 8004380:	681d      	ldr	r5, [r3, #0]
 8004382:	4606      	mov	r6, r0
 8004384:	460c      	mov	r4, r1
 8004386:	b125      	cbz	r5, 8004392 <__swsetup_r+0x16>
 8004388:	69ab      	ldr	r3, [r5, #24]
 800438a:	b913      	cbnz	r3, 8004392 <__swsetup_r+0x16>
 800438c:	4628      	mov	r0, r5
 800438e:	f7ff fa99 	bl	80038c4 <__sinit>
 8004392:	4b2e      	ldr	r3, [pc, #184]	; (800444c <__swsetup_r+0xd0>)
 8004394:	429c      	cmp	r4, r3
 8004396:	d10f      	bne.n	80043b8 <__swsetup_r+0x3c>
 8004398:	686c      	ldr	r4, [r5, #4]
 800439a:	89a3      	ldrh	r3, [r4, #12]
 800439c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043a0:	0719      	lsls	r1, r3, #28
 80043a2:	d42c      	bmi.n	80043fe <__swsetup_r+0x82>
 80043a4:	06dd      	lsls	r5, r3, #27
 80043a6:	d411      	bmi.n	80043cc <__swsetup_r+0x50>
 80043a8:	2309      	movs	r3, #9
 80043aa:	6033      	str	r3, [r6, #0]
 80043ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80043b0:	81a3      	strh	r3, [r4, #12]
 80043b2:	f04f 30ff 	mov.w	r0, #4294967295
 80043b6:	e03e      	b.n	8004436 <__swsetup_r+0xba>
 80043b8:	4b25      	ldr	r3, [pc, #148]	; (8004450 <__swsetup_r+0xd4>)
 80043ba:	429c      	cmp	r4, r3
 80043bc:	d101      	bne.n	80043c2 <__swsetup_r+0x46>
 80043be:	68ac      	ldr	r4, [r5, #8]
 80043c0:	e7eb      	b.n	800439a <__swsetup_r+0x1e>
 80043c2:	4b24      	ldr	r3, [pc, #144]	; (8004454 <__swsetup_r+0xd8>)
 80043c4:	429c      	cmp	r4, r3
 80043c6:	bf08      	it	eq
 80043c8:	68ec      	ldreq	r4, [r5, #12]
 80043ca:	e7e6      	b.n	800439a <__swsetup_r+0x1e>
 80043cc:	0758      	lsls	r0, r3, #29
 80043ce:	d512      	bpl.n	80043f6 <__swsetup_r+0x7a>
 80043d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043d2:	b141      	cbz	r1, 80043e6 <__swsetup_r+0x6a>
 80043d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043d8:	4299      	cmp	r1, r3
 80043da:	d002      	beq.n	80043e2 <__swsetup_r+0x66>
 80043dc:	4630      	mov	r0, r6
 80043de:	f7ff fb7d 	bl	8003adc <_free_r>
 80043e2:	2300      	movs	r3, #0
 80043e4:	6363      	str	r3, [r4, #52]	; 0x34
 80043e6:	89a3      	ldrh	r3, [r4, #12]
 80043e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80043ec:	81a3      	strh	r3, [r4, #12]
 80043ee:	2300      	movs	r3, #0
 80043f0:	6063      	str	r3, [r4, #4]
 80043f2:	6923      	ldr	r3, [r4, #16]
 80043f4:	6023      	str	r3, [r4, #0]
 80043f6:	89a3      	ldrh	r3, [r4, #12]
 80043f8:	f043 0308 	orr.w	r3, r3, #8
 80043fc:	81a3      	strh	r3, [r4, #12]
 80043fe:	6923      	ldr	r3, [r4, #16]
 8004400:	b94b      	cbnz	r3, 8004416 <__swsetup_r+0x9a>
 8004402:	89a3      	ldrh	r3, [r4, #12]
 8004404:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800440c:	d003      	beq.n	8004416 <__swsetup_r+0x9a>
 800440e:	4621      	mov	r1, r4
 8004410:	4630      	mov	r0, r6
 8004412:	f7ff fb1b 	bl	8003a4c <__smakebuf_r>
 8004416:	89a0      	ldrh	r0, [r4, #12]
 8004418:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800441c:	f010 0301 	ands.w	r3, r0, #1
 8004420:	d00a      	beq.n	8004438 <__swsetup_r+0xbc>
 8004422:	2300      	movs	r3, #0
 8004424:	60a3      	str	r3, [r4, #8]
 8004426:	6963      	ldr	r3, [r4, #20]
 8004428:	425b      	negs	r3, r3
 800442a:	61a3      	str	r3, [r4, #24]
 800442c:	6923      	ldr	r3, [r4, #16]
 800442e:	b943      	cbnz	r3, 8004442 <__swsetup_r+0xc6>
 8004430:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004434:	d1ba      	bne.n	80043ac <__swsetup_r+0x30>
 8004436:	bd70      	pop	{r4, r5, r6, pc}
 8004438:	0781      	lsls	r1, r0, #30
 800443a:	bf58      	it	pl
 800443c:	6963      	ldrpl	r3, [r4, #20]
 800443e:	60a3      	str	r3, [r4, #8]
 8004440:	e7f4      	b.n	800442c <__swsetup_r+0xb0>
 8004442:	2000      	movs	r0, #0
 8004444:	e7f7      	b.n	8004436 <__swsetup_r+0xba>
 8004446:	bf00      	nop
 8004448:	20000004 	.word	0x20000004
 800444c:	080045a8 	.word	0x080045a8
 8004450:	080045c8 	.word	0x080045c8
 8004454:	08004588 	.word	0x08004588

08004458 <_close_r>:
 8004458:	b538      	push	{r3, r4, r5, lr}
 800445a:	4d06      	ldr	r5, [pc, #24]	; (8004474 <_close_r+0x1c>)
 800445c:	2300      	movs	r3, #0
 800445e:	4604      	mov	r4, r0
 8004460:	4608      	mov	r0, r1
 8004462:	602b      	str	r3, [r5, #0]
 8004464:	f7fc fe9f 	bl	80011a6 <_close>
 8004468:	1c43      	adds	r3, r0, #1
 800446a:	d102      	bne.n	8004472 <_close_r+0x1a>
 800446c:	682b      	ldr	r3, [r5, #0]
 800446e:	b103      	cbz	r3, 8004472 <_close_r+0x1a>
 8004470:	6023      	str	r3, [r4, #0]
 8004472:	bd38      	pop	{r3, r4, r5, pc}
 8004474:	200000a0 	.word	0x200000a0

08004478 <_fstat_r>:
 8004478:	b538      	push	{r3, r4, r5, lr}
 800447a:	4d07      	ldr	r5, [pc, #28]	; (8004498 <_fstat_r+0x20>)
 800447c:	2300      	movs	r3, #0
 800447e:	4604      	mov	r4, r0
 8004480:	4608      	mov	r0, r1
 8004482:	4611      	mov	r1, r2
 8004484:	602b      	str	r3, [r5, #0]
 8004486:	f7fc fe9a 	bl	80011be <_fstat>
 800448a:	1c43      	adds	r3, r0, #1
 800448c:	d102      	bne.n	8004494 <_fstat_r+0x1c>
 800448e:	682b      	ldr	r3, [r5, #0]
 8004490:	b103      	cbz	r3, 8004494 <_fstat_r+0x1c>
 8004492:	6023      	str	r3, [r4, #0]
 8004494:	bd38      	pop	{r3, r4, r5, pc}
 8004496:	bf00      	nop
 8004498:	200000a0 	.word	0x200000a0

0800449c <_isatty_r>:
 800449c:	b538      	push	{r3, r4, r5, lr}
 800449e:	4d06      	ldr	r5, [pc, #24]	; (80044b8 <_isatty_r+0x1c>)
 80044a0:	2300      	movs	r3, #0
 80044a2:	4604      	mov	r4, r0
 80044a4:	4608      	mov	r0, r1
 80044a6:	602b      	str	r3, [r5, #0]
 80044a8:	f7fc fe99 	bl	80011de <_isatty>
 80044ac:	1c43      	adds	r3, r0, #1
 80044ae:	d102      	bne.n	80044b6 <_isatty_r+0x1a>
 80044b0:	682b      	ldr	r3, [r5, #0]
 80044b2:	b103      	cbz	r3, 80044b6 <_isatty_r+0x1a>
 80044b4:	6023      	str	r3, [r4, #0]
 80044b6:	bd38      	pop	{r3, r4, r5, pc}
 80044b8:	200000a0 	.word	0x200000a0

080044bc <_lseek_r>:
 80044bc:	b538      	push	{r3, r4, r5, lr}
 80044be:	4d07      	ldr	r5, [pc, #28]	; (80044dc <_lseek_r+0x20>)
 80044c0:	4604      	mov	r4, r0
 80044c2:	4608      	mov	r0, r1
 80044c4:	4611      	mov	r1, r2
 80044c6:	2200      	movs	r2, #0
 80044c8:	602a      	str	r2, [r5, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	f7fc fe92 	bl	80011f4 <_lseek>
 80044d0:	1c43      	adds	r3, r0, #1
 80044d2:	d102      	bne.n	80044da <_lseek_r+0x1e>
 80044d4:	682b      	ldr	r3, [r5, #0]
 80044d6:	b103      	cbz	r3, 80044da <_lseek_r+0x1e>
 80044d8:	6023      	str	r3, [r4, #0]
 80044da:	bd38      	pop	{r3, r4, r5, pc}
 80044dc:	200000a0 	.word	0x200000a0

080044e0 <__malloc_lock>:
 80044e0:	4801      	ldr	r0, [pc, #4]	; (80044e8 <__malloc_lock+0x8>)
 80044e2:	f7ff ba8d 	b.w	8003a00 <__retarget_lock_acquire_recursive>
 80044e6:	bf00      	nop
 80044e8:	2000009a 	.word	0x2000009a

080044ec <__malloc_unlock>:
 80044ec:	4801      	ldr	r0, [pc, #4]	; (80044f4 <__malloc_unlock+0x8>)
 80044ee:	f7ff ba88 	b.w	8003a02 <__retarget_lock_release_recursive>
 80044f2:	bf00      	nop
 80044f4:	2000009a 	.word	0x2000009a

080044f8 <_read_r>:
 80044f8:	b538      	push	{r3, r4, r5, lr}
 80044fa:	4d07      	ldr	r5, [pc, #28]	; (8004518 <_read_r+0x20>)
 80044fc:	4604      	mov	r4, r0
 80044fe:	4608      	mov	r0, r1
 8004500:	4611      	mov	r1, r2
 8004502:	2200      	movs	r2, #0
 8004504:	602a      	str	r2, [r5, #0]
 8004506:	461a      	mov	r2, r3
 8004508:	f7fc fe14 	bl	8001134 <_read>
 800450c:	1c43      	adds	r3, r0, #1
 800450e:	d102      	bne.n	8004516 <_read_r+0x1e>
 8004510:	682b      	ldr	r3, [r5, #0]
 8004512:	b103      	cbz	r3, 8004516 <_read_r+0x1e>
 8004514:	6023      	str	r3, [r4, #0]
 8004516:	bd38      	pop	{r3, r4, r5, pc}
 8004518:	200000a0 	.word	0x200000a0

0800451c <_init>:
 800451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451e:	bf00      	nop
 8004520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004522:	bc08      	pop	{r3}
 8004524:	469e      	mov	lr, r3
 8004526:	4770      	bx	lr

08004528 <_fini>:
 8004528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452a:	bf00      	nop
 800452c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452e:	bc08      	pop	{r3}
 8004530:	469e      	mov	lr, r3
 8004532:	4770      	bx	lr
