
utsutsu_LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d5c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002ee4  08002ee4  00012ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f1c  08002f1c  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  08002f1c  08002f1c  00012f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f24  08002f24  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f24  08002f24  00012f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f28  08002f28  00012f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08002f30  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08002f30  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007656  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017c5  00000000  00000000  0002768a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000880  00000000  00000000  00028e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000788  00000000  00000000  000296d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b3cf  00000000  00000000  00029e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000067bc  00000000  00000000  00045227  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009b57e  00000000  00000000  0004b9e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e6f61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021e8  00000000  00000000  000e6fdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ecc 	.word	0x08002ecc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002ecc 	.word	0x08002ecc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80004c8:	b490      	push	{r4, r7}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	332c      	adds	r3, #44	; 0x2c
 80004d8:	4619      	mov	r1, r3
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80004e0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80004e4:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004e6:	697a      	ldr	r2, [r7, #20]
 80004e8:	fa92 f2a2 	rbit	r2, r2
 80004ec:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80004ee:	693a      	ldr	r2, [r7, #16]
 80004f0:	fab2 f282 	clz	r2, r2
 80004f4:	b2d2      	uxtb	r2, r2
 80004f6:	40d3      	lsrs	r3, r2
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	440b      	add	r3, r1
 80004fc:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 80004fe:	6822      	ldr	r2, [r4, #0]
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	f003 031f 	and.w	r3, r3, #31
 8000506:	211f      	movs	r1, #31
 8000508:	fa01 f303 	lsl.w	r3, r1, r3
 800050c:	43db      	mvns	r3, r3
 800050e:	401a      	ands	r2, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f003 011f 	and.w	r1, r3, #31
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	f003 031f 	and.w	r3, r3, #31
 800051c:	fa01 f303 	lsl.w	r3, r1, r3
 8000520:	4313      	orrs	r3, r2
 8000522:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000524:	bf00      	nop
 8000526:	3718      	adds	r7, #24
 8000528:	46bd      	mov	sp, r7
 800052a:	bc90      	pop	{r4, r7}
 800052c:	4770      	bx	lr

0800052e <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 800052e:	b480      	push	{r7}
 8000530:	b083      	sub	sp, #12
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
 8000536:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	431a      	orrs	r2, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	609a      	str	r2, [r3, #8]
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000554:	b490      	push	{r4, r7}
 8000556:	b08a      	sub	sp, #40	; 0x28
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	330c      	adds	r3, #12
 8000564:	4619      	mov	r1, r3
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800056c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000570:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000572:	697a      	ldr	r2, [r7, #20]
 8000574:	fa92 f2a2 	rbit	r2, r2
 8000578:	613a      	str	r2, [r7, #16]
  return result;
 800057a:	693a      	ldr	r2, [r7, #16]
 800057c:	fab2 f282 	clz	r2, r2
 8000580:	b2d2      	uxtb	r2, r2
 8000582:	40d3      	lsrs	r3, r2
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	440b      	add	r3, r1
 8000588:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 800058a:	6822      	ldr	r2, [r4, #0]
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000592:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000596:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000598:	69f9      	ldr	r1, [r7, #28]
 800059a:	fa91 f1a1 	rbit	r1, r1
 800059e:	61b9      	str	r1, [r7, #24]
  return result;
 80005a0:	69b9      	ldr	r1, [r7, #24]
 80005a2:	fab1 f181 	clz	r1, r1
 80005a6:	b2c9      	uxtb	r1, r1
 80005a8:	40cb      	lsrs	r3, r1
 80005aa:	2107      	movs	r1, #7
 80005ac:	fa01 f303 	lsl.w	r3, r1, r3
 80005b0:	43db      	mvns	r3, r3
 80005b2:	401a      	ands	r2, r3
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80005ba:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80005be:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80005c2:	fa91 f1a1 	rbit	r1, r1
 80005c6:	6239      	str	r1, [r7, #32]
  return result;
 80005c8:	6a39      	ldr	r1, [r7, #32]
 80005ca:	fab1 f181 	clz	r1, r1
 80005ce:	b2c9      	uxtb	r1, r1
 80005d0:	40cb      	lsrs	r3, r1
 80005d2:	6879      	ldr	r1, [r7, #4]
 80005d4:	fa01 f303 	lsl.w	r3, r1, r3
 80005d8:	4313      	orrs	r3, r2
 80005da:	6023      	str	r3, [r4, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80005dc:	bf00      	nop
 80005de:	3728      	adds	r7, #40	; 0x28
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc90      	pop	{r4, r7}
 80005e4:	4770      	bx	lr
	...

080005e8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f4:	4907      	ldr	r1, [pc, #28]	; (8000614 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4313      	orrs	r3, r2
 80005fa:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4013      	ands	r3, r2
 8000604:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000606:	68fb      	ldr	r3, [r7, #12]
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	40023800 	.word	0x40023800

08000618 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000622:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000624:	4907      	ldr	r1, [pc, #28]	; (8000644 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4313      	orrs	r3, r2
 800062a:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <LL_APB2_GRP1_EnableClock+0x2c>)
 800062e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4013      	ands	r3, r2
 8000634:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000636:	68fb      	ldr	r3, [r7, #12]
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	40023800 	.word	0x40023800

08000648 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b092      	sub	sp, #72	; 0x48
 800064c:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800064e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800065a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800066a:	f107 0318 	add.w	r3, r7, #24
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	463b      	mov	r3, r7
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]
 8000686:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000688:	f44f 7080 	mov.w	r0, #256	; 0x100
 800068c:	f7ff ffc4 	bl	8000618 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000690:	2001      	movs	r0, #1
 8000692:	f7ff ffa9 	bl	80005e8 <LL_AHB1_GRP1_EnableClock>
  PA1   ------> ADC1_IN1
  PA2   ------> ADC1_IN2
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  */
  GPIO_InitStruct.Pin = AD_FR_Pin|AD_R_Pin|AD_FF_Pin|AD_L_Pin
 8000696:	2337      	movs	r3, #55	; 0x37
 8000698:	603b      	str	r3, [r7, #0]
                          |AD_FL_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800069a:	2303      	movs	r3, #3
 800069c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a2:	463b      	mov	r3, r7
 80006a4:	4619      	mov	r1, r3
 80006a6:	481f      	ldr	r0, [pc, #124]	; (8000724 <MX_ADC1_Init+0xdc>)
 80006a8:	f001 fbd3 	bl	8001e52 <LL_GPIO_Init>

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80006b0:	2300      	movs	r3, #0
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80006b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006bc:	4619      	mov	r1, r3
 80006be:	481a      	ldr	r0, [pc, #104]	; (8000728 <MX_ADC1_Init+0xe0>)
 80006c0:	f001 fa54 	bl	8001b6c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80006d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006dc:	4619      	mov	r1, r3
 80006de:	4812      	ldr	r0, [pc, #72]	; (8000728 <MX_ADC1_Init+0xe0>)
 80006e0:	f001 fa70 	bl	8001bc4 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 80006e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e8:	480f      	ldr	r0, [pc, #60]	; (8000728 <MX_ADC1_Init+0xe0>)
 80006ea:	f7ff ff20 	bl	800052e <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80006f6:	f107 0318 	add.w	r3, r7, #24
 80006fa:	4619      	mov	r1, r3
 80006fc:	480b      	ldr	r0, [pc, #44]	; (800072c <MX_ADC1_Init+0xe4>)
 80006fe:	f001 f9ed 	bl	8001adc <LL_ADC_CommonInit>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8000702:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000706:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <MX_ADC1_Init+0xe0>)
 800070c:	f7ff fedc 	bl	80004c8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8000710:	2200      	movs	r2, #0
 8000712:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000716:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_ADC1_Init+0xe0>)
 8000718:	f7ff ff1c 	bl	8000554 <LL_ADC_SetChannelSamplingTime>

}
 800071c:	bf00      	nop
 800071e:	3748      	adds	r7, #72	; 0x48
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40020000 	.word	0x40020000
 8000728:	40012000 	.word	0x40012000
 800072c:	40012300 	.word	0x40012300

08000730 <LL_AHB1_GRP1_EnableClock>:
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800073a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800073c:	4907      	ldr	r1, [pc, #28]	; (800075c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4313      	orrs	r3, r2
 8000742:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4013      	ands	r3, r2
 800074c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800074e:	68fb      	ldr	r3, [r7, #12]
}
 8000750:	bf00      	nop
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	40023800 	.word	0x40023800

08000760 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	041a      	lsls	r2, r3, #16
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	619a      	str	r2, [r3, #24]
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
	...

08000780 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	463b      	mov	r3, r7
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
 8000794:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000796:	2004      	movs	r0, #4
 8000798:	f7ff ffca 	bl	8000730 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800079c:	2001      	movs	r0, #1
 800079e:	f7ff ffc7 	bl	8000730 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80007a2:	2002      	movs	r0, #2
 80007a4:	f7ff ffc4 	bl	8000730 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80007a8:	2008      	movs	r0, #8
 80007aa:	f7ff ffc1 	bl	8000730 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LED_FR_Pin|LED_R_Pin|STBY_Pin|LED3_Pin);
 80007ae:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80007b2:	4830      	ldr	r0, [pc, #192]	; (8000874 <MX_GPIO_Init+0xf4>)
 80007b4:	f7ff ffd4 	bl	8000760 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LED_FF_Pin|LED_L_Pin|LED_FL_Pin|RIGHT_DIR1_Pin
 80007b8:	f24c 01c8 	movw	r1, #49352	; 0xc0c8
 80007bc:	482e      	ldr	r0, [pc, #184]	; (8000878 <MX_GPIO_Init+0xf8>)
 80007be:	f7ff ffcf 	bl	8000760 <LL_GPIO_ResetOutputPin>
                          |RIGHT_DIR2_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LEFT_DIR1_Pin|LEFT_DIR2_Pin|LED1_Pin|LED2_Pin
 80007c2:	f24c 0133 	movw	r1, #49203	; 0xc033
 80007c6:	482d      	ldr	r0, [pc, #180]	; (800087c <MX_GPIO_Init+0xfc>)
 80007c8:	f7ff ffca 	bl	8000760 <LL_GPIO_ResetOutputPin>
                          |LED4_Pin|LED5_Pin);

  /**/
  LL_GPIO_ResetOutputPin(SPI_CS_GPIO_Port, SPI_CS_Pin);
 80007cc:	2104      	movs	r1, #4
 80007ce:	482c      	ldr	r0, [pc, #176]	; (8000880 <MX_GPIO_Init+0x100>)
 80007d0:	f7ff ffc6 	bl	8000760 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_FR_Pin|LED_R_Pin|STBY_Pin|LED3_Pin;
 80007d4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80007d8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007da:	2301      	movs	r3, #1
 80007dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ea:	463b      	mov	r3, r7
 80007ec:	4619      	mov	r1, r3
 80007ee:	4821      	ldr	r0, [pc, #132]	; (8000874 <MX_GPIO_Init+0xf4>)
 80007f0:	f001 fb2f 	bl	8001e52 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_FF_Pin|LED_L_Pin|LED_FL_Pin|RIGHT_DIR1_Pin
 80007f4:	f24c 03c8 	movw	r3, #49352	; 0xc0c8
 80007f8:	603b      	str	r3, [r7, #0]
                          |RIGHT_DIR2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007fa:	2301      	movs	r3, #1
 80007fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	463b      	mov	r3, r7
 800080c:	4619      	mov	r1, r3
 800080e:	481a      	ldr	r0, [pc, #104]	; (8000878 <MX_GPIO_Init+0xf8>)
 8000810:	f001 fb1f 	bl	8001e52 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LEFT_DIR1_Pin|LEFT_DIR2_Pin|LED1_Pin|LED2_Pin
 8000814:	f24c 0333 	movw	r3, #49203	; 0xc033
 8000818:	603b      	str	r3, [r7, #0]
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800081a:	2301      	movs	r3, #1
 800081c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082a:	463b      	mov	r3, r7
 800082c:	4619      	mov	r1, r3
 800082e:	4813      	ldr	r0, [pc, #76]	; (800087c <MX_GPIO_Init+0xfc>)
 8000830:	f001 fb0f 	bl	8001e52 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000834:	2304      	movs	r3, #4
 8000836:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000838:	2301      	movs	r3, #1
 800083a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000844:	2300      	movs	r3, #0
 8000846:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000848:	463b      	mov	r3, r7
 800084a:	4619      	mov	r1, r3
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <MX_GPIO_Init+0x100>)
 800084e:	f001 fb00 	bl	8001e52 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000852:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000856:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000860:	463b      	mov	r3, r7
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_GPIO_Init+0xfc>)
 8000866:	f001 faf4 	bl	8001e52 <LL_GPIO_Init>

}
 800086a:	bf00      	nop
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40020800 	.word	0x40020800
 8000878:	40020000 	.word	0x40020000
 800087c:	40020400 	.word	0x40020400
 8000880:	40020c00 	.word	0x40020c00

08000884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800089a:	68ba      	ldr	r2, [r7, #8]
 800089c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008a0:	4013      	ands	r3, r2
 80008a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008b6:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <__NVIC_SetPriorityGrouping+0x44>)
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	60d3      	str	r3, [r2, #12]
}
 80008bc:	bf00      	nop
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <LL_RCC_HSI_Enable+0x1c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <LL_RCC_HSI_Enable+0x1c>)
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	6013      	str	r3, [r2, #0]
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <LL_RCC_HSI_IsReady+0x20>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f003 0302 	and.w	r3, r3, #2
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	bf0c      	ite	eq
 80008fc:	2301      	moveq	r3, #1
 80008fe:	2300      	movne	r3, #0
 8000900:	b2db      	uxtb	r3, r3
}
 8000902:	4618      	mov	r0, r3
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	40023800 	.word	0x40023800

08000910 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	00db      	lsls	r3, r3, #3
 8000924:	4904      	ldr	r1, [pc, #16]	; (8000938 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000926:	4313      	orrs	r3, r2
 8000928:	600b      	str	r3, [r1, #0]
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800

0800093c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <LL_RCC_SetSysClkSource+0x24>)
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	f023 0203 	bic.w	r2, r3, #3
 800094c:	4904      	ldr	r1, [pc, #16]	; (8000960 <LL_RCC_SetSysClkSource+0x24>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4313      	orrs	r3, r2
 8000952:	608b      	str	r3, [r1, #8]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	40023800 	.word	0x40023800

08000964 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <LL_RCC_GetSysClkSource+0x18>)
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	f003 030c 	and.w	r3, r3, #12
}
 8000970:	4618      	mov	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800

08000980 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <LL_RCC_SetAHBPrescaler+0x24>)
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000990:	4904      	ldr	r1, [pc, #16]	; (80009a4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4313      	orrs	r3, r2
 8000996:	608b      	str	r3, [r1, #8]
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	40023800 	.word	0x40023800

080009a8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <LL_RCC_SetAPB1Prescaler+0x24>)
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80009b8:	4904      	ldr	r1, [pc, #16]	; (80009cc <LL_RCC_SetAPB1Prescaler+0x24>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4313      	orrs	r3, r2
 80009be:	608b      	str	r3, [r1, #8]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	40023800 	.word	0x40023800

080009d0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80009e0:	4904      	ldr	r1, [pc, #16]	; (80009f4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	608b      	str	r3, [r1, #8]
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	40023800 	.word	0x40023800

080009f8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <LL_RCC_PLL_Enable+0x1c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <LL_RCC_PLL_Enable+0x1c>)
 8000a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a06:	6013      	str	r3, [r2, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <LL_RCC_PLL_IsReady+0x24>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000a28:	bf0c      	ite	eq
 8000a2a:	2301      	moveq	r3, #1
 8000a2c:	2300      	movne	r3, #0
 8000a2e:	b2db      	uxtb	r3, r3
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800

08000a40 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000a50:	685a      	ldr	r2, [r3, #4]
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000a54:	4013      	ands	r3, r2
 8000a56:	68f9      	ldr	r1, [r7, #12]
 8000a58:	68ba      	ldr	r2, [r7, #8]
 8000a5a:	4311      	orrs	r1, r2
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	0192      	lsls	r2, r2, #6
 8000a60:	430a      	orrs	r2, r1
 8000a62:	4908      	ldr	r1, [pc, #32]	; (8000a84 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000a64:	4313      	orrs	r3, r2
 8000a66:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000a70:	4904      	ldr	r1, [pc, #16]	; (8000a84 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	40023800 	.word	0x40023800
 8000a88:	ffbf8000 	.word	0xffbf8000

08000a8c <LL_APB1_GRP1_EnableClock>:
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a98:	4907      	ldr	r1, [pc, #28]	; (8000ab8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000aa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
}
 8000aac:	bf00      	nop
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	40023800 	.word	0x40023800

08000abc <LL_APB2_GRP1_EnableClock>:
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ac6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ac8:	4907      	ldr	r1, [pc, #28]	; (8000ae8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ad2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ada:	68fb      	ldr	r3, [r7, #12]
}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	40023800 	.word	0x40023800

08000aec <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <LL_FLASH_SetLatency+0x24>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f023 020f 	bic.w	r2, r3, #15
 8000afc:	4904      	ldr	r1, [pc, #16]	; (8000b10 <LL_FLASH_SetLatency+0x24>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	600b      	str	r3, [r1, #0]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	40023c00 	.word	0x40023c00

08000b14 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <LL_FLASH_GetLatency+0x18>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f003 030f 	and.w	r3, r3, #15
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40023c00 	.word	0x40023c00

08000b30 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000b40:	4904      	ldr	r1, [pc, #16]	; (8000b54 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	600b      	str	r3, [r1, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	40007000 	.word	0x40007000

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000b5c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b60:	f7ff ffac 	bl	8000abc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000b64:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000b68:	f7ff ff90 	bl	8000a8c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f7ff fe89 	bl	8000884 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b72:	f000 f829 	bl	8000bc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b76:	f7ff fe03 	bl	8000780 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b7a:	f7ff fd65 	bl	8000648 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000b7e:	f000 fb8b 	bl	8001298 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b82:	f000 fc23 	bl	80013cc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b86:	f000 fc97 	bl	80014b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b8a:	f000 fd0f 	bl	80015ac <MX_TIM4_Init>
  MX_TIM8_Init();
 8000b8e:	f000 fdb1 	bl	80016f4 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000b92:	f000 ff03 	bl	800199c <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8000b96:	f000 f8a1 	bl	8000cdc <MX_SPI3_Init>
  MX_TIM11_Init();
 8000b9a:	f000 fe43 	bl	8001824 <MX_TIM11_Init>
  MX_TIM6_Init();
 8000b9e:	f000 fd7f 	bl	80016a0 <MX_TIM6_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  LED1_GPIO_Port->BSRR = LED1_Pin;			//LEDをセットした感じ
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <main+0x6c>)
 8000ba4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ba8:	619a      	str	r2, [r3, #24]
	  LL_mDelay(500);
 8000baa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bae:	f002 f92d 	bl	8002e0c <LL_mDelay>
	  LED1_GPIO_Port->BSRR = (LED1_Pin << 16);
 8000bb2:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <main+0x6c>)
 8000bb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bb8:	619a      	str	r2, [r3, #24]
	  LL_mDelay(500);
 8000bba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bbe:	f002 f925 	bl	8002e0c <LL_mDelay>
	  LED1_GPIO_Port->BSRR = LED1_Pin;			//LEDをセットした感じ
 8000bc2:	e7ee      	b.n	8000ba2 <main+0x4a>
 8000bc4:	40020400 	.word	0x40020400

08000bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8000bcc:	2005      	movs	r0, #5
 8000bce:	f7ff ff8d 	bl	8000aec <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8000bd2:	bf00      	nop
 8000bd4:	f7ff ff9e 	bl	8000b14 <LL_FLASH_GetLatency>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b05      	cmp	r3, #5
 8000bdc:	d1fa      	bne.n	8000bd4 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000bde:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000be2:	f7ff ffa5 	bl	8000b30 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000be6:	2010      	movs	r0, #16
 8000be8:	f7ff fe92 	bl	8000910 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000bec:	f7ff fe6e 	bl	80008cc <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000bf0:	bf00      	nop
 8000bf2:	f7ff fe7b 	bl	80008ec <LL_RCC_HSI_IsReady>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d1fa      	bne.n	8000bf2 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 168, LL_RCC_PLLP_DIV_2);
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	22a8      	movs	r2, #168	; 0xa8
 8000c00:	2108      	movs	r1, #8
 8000c02:	2000      	movs	r0, #0
 8000c04:	f7ff ff1c 	bl	8000a40 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000c08:	f7ff fef6 	bl	80009f8 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000c0c:	bf00      	nop
 8000c0e:	f7ff ff03 	bl	8000a18 <LL_RCC_PLL_IsReady>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d1fa      	bne.n	8000c0e <SystemClock_Config+0x46>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff feb1 	bl	8000980 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000c1e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000c22:	f7ff fec1 	bl	80009a8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_4);
 8000c26:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 8000c2a:	f7ff fed1 	bl	80009d0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000c2e:	2002      	movs	r0, #2
 8000c30:	f7ff fe84 	bl	800093c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000c34:	bf00      	nop
 8000c36:	f7ff fe95 	bl	8000964 <LL_RCC_GetSysClkSource>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b08      	cmp	r3, #8
 8000c3e:	d1fa      	bne.n	8000c36 <SystemClock_Config+0x6e>
  {

  }
  LL_Init1msTick(168000000);
 8000c40:	4803      	ldr	r0, [pc, #12]	; (8000c50 <SystemClock_Config+0x88>)
 8000c42:	f002 f8d5 	bl	8002df0 <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 8000c46:	4802      	ldr	r0, [pc, #8]	; (8000c50 <SystemClock_Config+0x88>)
 8000c48:	f002 f904 	bl	8002e54 <LL_SetSystemCoreClock>
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	0a037a00 	.word	0x0a037a00

08000c54 <LL_AHB1_GRP1_EnableClock>:
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c60:	4907      	ldr	r1, [pc, #28]	; (8000c80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c72:	68fb      	ldr	r3, [r7, #12]
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	40023800 	.word	0x40023800

08000c84 <LL_APB1_GRP1_EnableClock>:
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c90:	4907      	ldr	r1, [pc, #28]	; (8000cb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f023 0210 	bic.w	r2, r3, #16
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	605a      	str	r2, [r3, #4]
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <MX_SPI3_Init>:

/* USER CODE END 0 */

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b090      	sub	sp, #64	; 0x40
 8000ce0:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000ce2:	f107 0318 	add.w	r3, r7, #24
 8000ce6:	2228      	movs	r2, #40	; 0x28
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f002 f8e6 	bl	8002ebc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]
 8000cfe:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8000d00:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000d04:	f7ff ffbe 	bl	8000c84 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000d08:	2004      	movs	r0, #4
 8000d0a:	f7ff ffa3 	bl	8000c54 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8000d0e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d12:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d14:	2302      	movs	r3, #2
 8000d16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d20:	2300      	movs	r3, #0
 8000d22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8000d24:	2306      	movs	r3, #6
 8000d26:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d28:	463b      	mov	r3, r7
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4813      	ldr	r0, [pc, #76]	; (8000d7c <MX_SPI3_Init+0xa0>)
 8000d2e:	f001 f890 	bl	8001e52 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000d36:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000d3a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8000d40:	2302      	movs	r3, #2
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8000d44:	2301      	movs	r3, #1
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000d52:	2300      	movs	r3, #0
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8000d5a:	230a      	movs	r3, #10
 8000d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8000d5e:	f107 0318 	add.w	r3, r7, #24
 8000d62:	4619      	mov	r1, r3
 8000d64:	4806      	ldr	r0, [pc, #24]	; (8000d80 <MX_SPI3_Init+0xa4>)
 8000d66:	f001 fa42 	bl	80021ee <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4804      	ldr	r0, [pc, #16]	; (8000d80 <MX_SPI3_Init+0xa4>)
 8000d6e:	f7ff ffa1 	bl	8000cb4 <LL_SPI_SetStandard>

}
 8000d72:	bf00      	nop
 8000d74:	3740      	adds	r7, #64	; 0x40
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40020800 	.word	0x40020800
 8000d80:	40003c00 	.word	0x40003c00

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <NMI_Handler+0x4>

08000d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <MemManage_Handler+0x4>

08000d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <SystemInit+0x28>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de6:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <SystemInit+0x28>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <SystemInit+0x28>)
 8000df2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000df6:	609a      	str	r2, [r3, #8]
#endif
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <LL_AHB1_GRP1_EnableClock>:
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e14:	4907      	ldr	r1, [pc, #28]	; (8000e34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4013      	ands	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e26:	68fb      	ldr	r3, [r7, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	40023800 	.word	0x40023800

08000e38 <LL_APB1_GRP1_EnableClock>:
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e44:	4907      	ldr	r1, [pc, #28]	; (8000e64 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4013      	ands	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e56:	68fb      	ldr	r3, [r7, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	40023800 	.word	0x40023800

08000e68 <LL_APB2_GRP1_EnableClock>:
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e74:	4907      	ldr	r1, [pc, #28]	; (8000e94 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4013      	ands	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e86:	68fb      	ldr	r3, [r7, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	40023800 	.word	0x40023800

08000e98 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	601a      	str	r2, [r3, #0]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000eb8:	b4b0      	push	{r4, r5, r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d01c      	beq.n	8000f02 <LL_TIM_OC_DisableFast+0x4a>
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	d017      	beq.n	8000efe <LL_TIM_OC_DisableFast+0x46>
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	2b10      	cmp	r3, #16
 8000ed2:	d012      	beq.n	8000efa <LL_TIM_OC_DisableFast+0x42>
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	2b40      	cmp	r3, #64	; 0x40
 8000ed8:	d00d      	beq.n	8000ef6 <LL_TIM_OC_DisableFast+0x3e>
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ee0:	d007      	beq.n	8000ef2 <LL_TIM_OC_DisableFast+0x3a>
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ee8:	d101      	bne.n	8000eee <LL_TIM_OC_DisableFast+0x36>
 8000eea:	2305      	movs	r3, #5
 8000eec:	e00a      	b.n	8000f04 <LL_TIM_OC_DisableFast+0x4c>
 8000eee:	2306      	movs	r3, #6
 8000ef0:	e008      	b.n	8000f04 <LL_TIM_OC_DisableFast+0x4c>
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	e006      	b.n	8000f04 <LL_TIM_OC_DisableFast+0x4c>
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e004      	b.n	8000f04 <LL_TIM_OC_DisableFast+0x4c>
 8000efa:	2302      	movs	r3, #2
 8000efc:	e002      	b.n	8000f04 <LL_TIM_OC_DisableFast+0x4c>
 8000efe:	2301      	movs	r3, #1
 8000f00:	e000      	b.n	8000f04 <LL_TIM_OC_DisableFast+0x4c>
 8000f02:	2300      	movs	r3, #0
 8000f04:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3318      	adds	r3, #24
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	4629      	mov	r1, r5
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <LL_TIM_OC_DisableFast+0x7c>)
 8000f10:	5c5b      	ldrb	r3, [r3, r1]
 8000f12:	4413      	add	r3, r2
 8000f14:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000f16:	6822      	ldr	r2, [r4, #0]
 8000f18:	4629      	mov	r1, r5
 8000f1a:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <LL_TIM_OC_DisableFast+0x80>)
 8000f1c:	5c5b      	ldrb	r3, [r3, r1]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	2304      	movs	r3, #4
 8000f22:	408b      	lsls	r3, r1
 8000f24:	43db      	mvns	r3, r3
 8000f26:	4013      	ands	r3, r2
 8000f28:	6023      	str	r3, [r4, #0]

}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bcb0      	pop	{r4, r5, r7}
 8000f32:	4770      	bx	lr
 8000f34:	08002efc 	.word	0x08002efc
 8000f38:	08002f04 	.word	0x08002f04

08000f3c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000f3c:	b4b0      	push	{r4, r5, r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d01c      	beq.n	8000f86 <LL_TIM_OC_EnablePreload+0x4a>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	d017      	beq.n	8000f82 <LL_TIM_OC_EnablePreload+0x46>
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	2b10      	cmp	r3, #16
 8000f56:	d012      	beq.n	8000f7e <LL_TIM_OC_EnablePreload+0x42>
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	2b40      	cmp	r3, #64	; 0x40
 8000f5c:	d00d      	beq.n	8000f7a <LL_TIM_OC_EnablePreload+0x3e>
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f64:	d007      	beq.n	8000f76 <LL_TIM_OC_EnablePreload+0x3a>
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f6c:	d101      	bne.n	8000f72 <LL_TIM_OC_EnablePreload+0x36>
 8000f6e:	2305      	movs	r3, #5
 8000f70:	e00a      	b.n	8000f88 <LL_TIM_OC_EnablePreload+0x4c>
 8000f72:	2306      	movs	r3, #6
 8000f74:	e008      	b.n	8000f88 <LL_TIM_OC_EnablePreload+0x4c>
 8000f76:	2304      	movs	r3, #4
 8000f78:	e006      	b.n	8000f88 <LL_TIM_OC_EnablePreload+0x4c>
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e004      	b.n	8000f88 <LL_TIM_OC_EnablePreload+0x4c>
 8000f7e:	2302      	movs	r3, #2
 8000f80:	e002      	b.n	8000f88 <LL_TIM_OC_EnablePreload+0x4c>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <LL_TIM_OC_EnablePreload+0x4c>
 8000f86:	2300      	movs	r3, #0
 8000f88:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3318      	adds	r3, #24
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4629      	mov	r1, r5
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <LL_TIM_OC_EnablePreload+0x7c>)
 8000f94:	5c5b      	ldrb	r3, [r3, r1]
 8000f96:	4413      	add	r3, r2
 8000f98:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000f9a:	6822      	ldr	r2, [r4, #0]
 8000f9c:	4629      	mov	r1, r5
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <LL_TIM_OC_EnablePreload+0x80>)
 8000fa0:	5c5b      	ldrb	r3, [r3, r1]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	2308      	movs	r3, #8
 8000fa6:	408b      	lsls	r3, r1
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	6023      	str	r3, [r4, #0]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bcb0      	pop	{r4, r5, r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	08002efc 	.word	0x08002efc
 8000fbc:	08002f04 	.word	0x08002f04

08000fc0 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8000fc0:	b4b0      	push	{r4, r5, r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d01c      	beq.n	800100c <LL_TIM_IC_SetActiveInput+0x4c>
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	d017      	beq.n	8001008 <LL_TIM_IC_SetActiveInput+0x48>
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	2b10      	cmp	r3, #16
 8000fdc:	d012      	beq.n	8001004 <LL_TIM_IC_SetActiveInput+0x44>
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	2b40      	cmp	r3, #64	; 0x40
 8000fe2:	d00d      	beq.n	8001000 <LL_TIM_IC_SetActiveInput+0x40>
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fea:	d007      	beq.n	8000ffc <LL_TIM_IC_SetActiveInput+0x3c>
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff2:	d101      	bne.n	8000ff8 <LL_TIM_IC_SetActiveInput+0x38>
 8000ff4:	2305      	movs	r3, #5
 8000ff6:	e00a      	b.n	800100e <LL_TIM_IC_SetActiveInput+0x4e>
 8000ff8:	2306      	movs	r3, #6
 8000ffa:	e008      	b.n	800100e <LL_TIM_IC_SetActiveInput+0x4e>
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	e006      	b.n	800100e <LL_TIM_IC_SetActiveInput+0x4e>
 8001000:	2303      	movs	r3, #3
 8001002:	e004      	b.n	800100e <LL_TIM_IC_SetActiveInput+0x4e>
 8001004:	2302      	movs	r3, #2
 8001006:	e002      	b.n	800100e <LL_TIM_IC_SetActiveInput+0x4e>
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <LL_TIM_IC_SetActiveInput+0x4e>
 800100c:	2300      	movs	r3, #0
 800100e:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3318      	adds	r3, #24
 8001014:	461a      	mov	r2, r3
 8001016:	4629      	mov	r1, r5
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <LL_TIM_IC_SetActiveInput+0x8c>)
 800101a:	5c5b      	ldrb	r3, [r3, r1]
 800101c:	4413      	add	r3, r2
 800101e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001020:	6822      	ldr	r2, [r4, #0]
 8001022:	4629      	mov	r1, r5
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <LL_TIM_IC_SetActiveInput+0x90>)
 8001026:	5c5b      	ldrb	r3, [r3, r1]
 8001028:	4619      	mov	r1, r3
 800102a:	2303      	movs	r3, #3
 800102c:	408b      	lsls	r3, r1
 800102e:	43db      	mvns	r3, r3
 8001030:	401a      	ands	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	0c1b      	lsrs	r3, r3, #16
 8001036:	4628      	mov	r0, r5
 8001038:	4905      	ldr	r1, [pc, #20]	; (8001050 <LL_TIM_IC_SetActiveInput+0x90>)
 800103a:	5c09      	ldrb	r1, [r1, r0]
 800103c:	408b      	lsls	r3, r1
 800103e:	4313      	orrs	r3, r2
 8001040:	6023      	str	r3, [r4, #0]
}
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	bcb0      	pop	{r4, r5, r7}
 800104a:	4770      	bx	lr
 800104c:	08002efc 	.word	0x08002efc
 8001050:	08002f0c 	.word	0x08002f0c

08001054 <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8001054:	b4b0      	push	{r4, r5, r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d01c      	beq.n	80010a0 <LL_TIM_IC_SetPrescaler+0x4c>
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	2b04      	cmp	r3, #4
 800106a:	d017      	beq.n	800109c <LL_TIM_IC_SetPrescaler+0x48>
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	2b10      	cmp	r3, #16
 8001070:	d012      	beq.n	8001098 <LL_TIM_IC_SetPrescaler+0x44>
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	2b40      	cmp	r3, #64	; 0x40
 8001076:	d00d      	beq.n	8001094 <LL_TIM_IC_SetPrescaler+0x40>
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800107e:	d007      	beq.n	8001090 <LL_TIM_IC_SetPrescaler+0x3c>
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001086:	d101      	bne.n	800108c <LL_TIM_IC_SetPrescaler+0x38>
 8001088:	2305      	movs	r3, #5
 800108a:	e00a      	b.n	80010a2 <LL_TIM_IC_SetPrescaler+0x4e>
 800108c:	2306      	movs	r3, #6
 800108e:	e008      	b.n	80010a2 <LL_TIM_IC_SetPrescaler+0x4e>
 8001090:	2304      	movs	r3, #4
 8001092:	e006      	b.n	80010a2 <LL_TIM_IC_SetPrescaler+0x4e>
 8001094:	2303      	movs	r3, #3
 8001096:	e004      	b.n	80010a2 <LL_TIM_IC_SetPrescaler+0x4e>
 8001098:	2302      	movs	r3, #2
 800109a:	e002      	b.n	80010a2 <LL_TIM_IC_SetPrescaler+0x4e>
 800109c:	2301      	movs	r3, #1
 800109e:	e000      	b.n	80010a2 <LL_TIM_IC_SetPrescaler+0x4e>
 80010a0:	2300      	movs	r3, #0
 80010a2:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	3318      	adds	r3, #24
 80010a8:	461a      	mov	r2, r3
 80010aa:	4629      	mov	r1, r5
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <LL_TIM_IC_SetPrescaler+0x8c>)
 80010ae:	5c5b      	ldrb	r3, [r3, r1]
 80010b0:	4413      	add	r3, r2
 80010b2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80010b4:	6822      	ldr	r2, [r4, #0]
 80010b6:	4629      	mov	r1, r5
 80010b8:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <LL_TIM_IC_SetPrescaler+0x90>)
 80010ba:	5c5b      	ldrb	r3, [r3, r1]
 80010bc:	4619      	mov	r1, r3
 80010be:	230c      	movs	r3, #12
 80010c0:	408b      	lsls	r3, r1
 80010c2:	43db      	mvns	r3, r3
 80010c4:	401a      	ands	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	0c1b      	lsrs	r3, r3, #16
 80010ca:	4628      	mov	r0, r5
 80010cc:	4905      	ldr	r1, [pc, #20]	; (80010e4 <LL_TIM_IC_SetPrescaler+0x90>)
 80010ce:	5c09      	ldrb	r1, [r1, r0]
 80010d0:	408b      	lsls	r3, r1
 80010d2:	4313      	orrs	r3, r2
 80010d4:	6023      	str	r3, [r4, #0]
}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	bcb0      	pop	{r4, r5, r7}
 80010de:	4770      	bx	lr
 80010e0:	08002efc 	.word	0x08002efc
 80010e4:	08002f0c 	.word	0x08002f0c

080010e8 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 80010e8:	b4b0      	push	{r4, r5, r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d01c      	beq.n	8001134 <LL_TIM_IC_SetFilter+0x4c>
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	2b04      	cmp	r3, #4
 80010fe:	d017      	beq.n	8001130 <LL_TIM_IC_SetFilter+0x48>
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	2b10      	cmp	r3, #16
 8001104:	d012      	beq.n	800112c <LL_TIM_IC_SetFilter+0x44>
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	2b40      	cmp	r3, #64	; 0x40
 800110a:	d00d      	beq.n	8001128 <LL_TIM_IC_SetFilter+0x40>
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001112:	d007      	beq.n	8001124 <LL_TIM_IC_SetFilter+0x3c>
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800111a:	d101      	bne.n	8001120 <LL_TIM_IC_SetFilter+0x38>
 800111c:	2305      	movs	r3, #5
 800111e:	e00a      	b.n	8001136 <LL_TIM_IC_SetFilter+0x4e>
 8001120:	2306      	movs	r3, #6
 8001122:	e008      	b.n	8001136 <LL_TIM_IC_SetFilter+0x4e>
 8001124:	2304      	movs	r3, #4
 8001126:	e006      	b.n	8001136 <LL_TIM_IC_SetFilter+0x4e>
 8001128:	2303      	movs	r3, #3
 800112a:	e004      	b.n	8001136 <LL_TIM_IC_SetFilter+0x4e>
 800112c:	2302      	movs	r3, #2
 800112e:	e002      	b.n	8001136 <LL_TIM_IC_SetFilter+0x4e>
 8001130:	2301      	movs	r3, #1
 8001132:	e000      	b.n	8001136 <LL_TIM_IC_SetFilter+0x4e>
 8001134:	2300      	movs	r3, #0
 8001136:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	3318      	adds	r3, #24
 800113c:	461a      	mov	r2, r3
 800113e:	4629      	mov	r1, r5
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <LL_TIM_IC_SetFilter+0x8c>)
 8001142:	5c5b      	ldrb	r3, [r3, r1]
 8001144:	4413      	add	r3, r2
 8001146:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001148:	6822      	ldr	r2, [r4, #0]
 800114a:	4629      	mov	r1, r5
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <LL_TIM_IC_SetFilter+0x90>)
 800114e:	5c5b      	ldrb	r3, [r3, r1]
 8001150:	4619      	mov	r1, r3
 8001152:	23f0      	movs	r3, #240	; 0xf0
 8001154:	408b      	lsls	r3, r1
 8001156:	43db      	mvns	r3, r3
 8001158:	401a      	ands	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	0c1b      	lsrs	r3, r3, #16
 800115e:	4628      	mov	r0, r5
 8001160:	4905      	ldr	r1, [pc, #20]	; (8001178 <LL_TIM_IC_SetFilter+0x90>)
 8001162:	5c09      	ldrb	r1, [r1, r0]
 8001164:	408b      	lsls	r3, r1
 8001166:	4313      	orrs	r3, r2
 8001168:	6023      	str	r3, [r4, #0]
}
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	bcb0      	pop	{r4, r5, r7}
 8001172:	4770      	bx	lr
 8001174:	08002efc 	.word	0x08002efc
 8001178:	08002f0c 	.word	0x08002f0c

0800117c <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 800117c:	b490      	push	{r4, r7}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d01c      	beq.n	80011c8 <LL_TIM_IC_SetPolarity+0x4c>
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	2b04      	cmp	r3, #4
 8001192:	d017      	beq.n	80011c4 <LL_TIM_IC_SetPolarity+0x48>
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	2b10      	cmp	r3, #16
 8001198:	d012      	beq.n	80011c0 <LL_TIM_IC_SetPolarity+0x44>
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	2b40      	cmp	r3, #64	; 0x40
 800119e:	d00d      	beq.n	80011bc <LL_TIM_IC_SetPolarity+0x40>
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011a6:	d007      	beq.n	80011b8 <LL_TIM_IC_SetPolarity+0x3c>
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ae:	d101      	bne.n	80011b4 <LL_TIM_IC_SetPolarity+0x38>
 80011b0:	2305      	movs	r3, #5
 80011b2:	e00a      	b.n	80011ca <LL_TIM_IC_SetPolarity+0x4e>
 80011b4:	2306      	movs	r3, #6
 80011b6:	e008      	b.n	80011ca <LL_TIM_IC_SetPolarity+0x4e>
 80011b8:	2304      	movs	r3, #4
 80011ba:	e006      	b.n	80011ca <LL_TIM_IC_SetPolarity+0x4e>
 80011bc:	2303      	movs	r3, #3
 80011be:	e004      	b.n	80011ca <LL_TIM_IC_SetPolarity+0x4e>
 80011c0:	2302      	movs	r3, #2
 80011c2:	e002      	b.n	80011ca <LL_TIM_IC_SetPolarity+0x4e>
 80011c4:	2301      	movs	r3, #1
 80011c6:	e000      	b.n	80011ca <LL_TIM_IC_SetPolarity+0x4e>
 80011c8:	2300      	movs	r3, #0
 80011ca:	461c      	mov	r4, r3
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6a1a      	ldr	r2, [r3, #32]
 80011d0:	4621      	mov	r1, r4
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <LL_TIM_IC_SetPolarity+0x80>)
 80011d4:	5c5b      	ldrb	r3, [r3, r1]
 80011d6:	4619      	mov	r1, r3
 80011d8:	230a      	movs	r3, #10
 80011da:	408b      	lsls	r3, r1
 80011dc:	43db      	mvns	r3, r3
 80011de:	401a      	ands	r2, r3
 80011e0:	4621      	mov	r1, r4
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <LL_TIM_IC_SetPolarity+0x80>)
 80011e4:	5c5b      	ldrb	r3, [r3, r1]
 80011e6:	4619      	mov	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	408b      	lsls	r3, r1
 80011ec:	431a      	orrs	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc90      	pop	{r4, r7}
 80011fa:	4770      	bx	lr
 80011fc:	08002f14 	.word	0x08002f14

08001200 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001212:	f023 0307 	bic.w	r3, r3, #7
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	431a      	orrs	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	609a      	str	r2, [r3, #8]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f023 0207 	bic.w	r2, r3, #7
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	431a      	orrs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	609a      	str	r2, [r3, #8]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	431a      	orrs	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	605a      	str	r2, [r3, #4]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	609a      	str	r2, [r3, #8]
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b09a      	sub	sp, #104	; 0x68
 800129c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800129e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80012ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012b2:	2220      	movs	r2, #32
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f001 fe00 	bl	8002ebc <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
 80012cc:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
 80012dc:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80012de:	2001      	movs	r0, #1
 80012e0:	f7ff fdc2 	bl	8000e68 <LL_APB2_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80012ea:	2300      	movs	r3, #0
 80012ec:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 80012ee:	4b34      	ldr	r3, [pc, #208]	; (80013c0 <MX_TIM1_Init+0x128>)
 80012f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80012fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001300:	4619      	mov	r1, r3
 8001302:	4830      	ldr	r0, [pc, #192]	; (80013c4 <MX_TIM1_Init+0x12c>)
 8001304:	f001 f838 	bl	8002378 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8001308:	482e      	ldr	r0, [pc, #184]	; (80013c4 <MX_TIM1_Init+0x12c>)
 800130a:	f7ff fdc5 	bl	8000e98 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 800130e:	2100      	movs	r1, #0
 8001310:	482c      	ldr	r0, [pc, #176]	; (80013c4 <MX_TIM1_Init+0x12c>)
 8001312:	f7ff ff75 	bl	8001200 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8001316:	2101      	movs	r1, #1
 8001318:	482a      	ldr	r0, [pc, #168]	; (80013c4 <MX_TIM1_Init+0x12c>)
 800131a:	f7ff fe0f 	bl	8000f3c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800131e:	2360      	movs	r3, #96	; 0x60
 8001320:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800132e:	2300      	movs	r3, #0
 8001330:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001332:	2300      	movs	r3, #0
 8001334:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800133e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001342:	461a      	mov	r2, r3
 8001344:	2101      	movs	r1, #1
 8001346:	481f      	ldr	r0, [pc, #124]	; (80013c4 <MX_TIM1_Init+0x12c>)
 8001348:	f001 f8b0 	bl	80024ac <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 800134c:	2101      	movs	r1, #1
 800134e:	481d      	ldr	r0, [pc, #116]	; (80013c4 <MX_TIM1_Init+0x12c>)
 8001350:	f7ff fdb2 	bl	8000eb8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8001354:	2100      	movs	r1, #0
 8001356:	481b      	ldr	r0, [pc, #108]	; (80013c4 <MX_TIM1_Init+0x12c>)
 8001358:	f7ff ff7a 	bl	8001250 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 800135c:	4819      	ldr	r0, [pc, #100]	; (80013c4 <MX_TIM1_Init+0x12c>)
 800135e:	f7ff ff8a 	bl	8001276 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8001378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800137c:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4619      	mov	r1, r3
 8001388:	480e      	ldr	r0, [pc, #56]	; (80013c4 <MX_TIM1_Init+0x12c>)
 800138a:	f001 f8c7 	bl	800251c <LL_TIM_BDTR_Init>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800138e:	2001      	movs	r0, #1
 8001390:	f7ff fd3a 	bl	8000e08 <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
  GPIO_InitStruct.Pin = LEFT_PWM_Pin;
 8001394:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001398:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800139a:	2302      	movs	r3, #2
 800139c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80013aa:	2301      	movs	r3, #1
 80013ac:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(LEFT_PWM_GPIO_Port, &GPIO_InitStruct);
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	4619      	mov	r1, r3
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_TIM1_Init+0x130>)
 80013b4:	f000 fd4d 	bl	8001e52 <LL_GPIO_Init>

}
 80013b8:	bf00      	nop
 80013ba:	3768      	adds	r7, #104	; 0x68
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	fff003e8 	.word	0xfff003e8
 80013c4:	40010000 	.word	0x40010000
 80013c8:	40020000 	.word	0x40020000

080013cc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b094      	sub	sp, #80	; 0x50
 80013d0:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80013d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	2220      	movs	r2, #32
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 fd66 	bl	8002ebc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]
 80013fe:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001400:	2001      	movs	r0, #1
 8001402:	f7ff fd19 	bl	8000e38 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800140a:	2300      	movs	r3, #0
 800140c:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 800140e:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <MX_TIM2_Init+0xe4>)
 8001410:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001416:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800141a:	4619      	mov	r1, r3
 800141c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001420:	f000 ffaa 	bl	8002378 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001424:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001428:	f7ff fd36 	bl	8000e98 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 800142c:	2100      	movs	r1, #0
 800142e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001432:	f7ff fee5 	bl	8001200 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 8001436:	2110      	movs	r1, #16
 8001438:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800143c:	f7ff fd7e 	bl	8000f3c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001440:	2360      	movs	r3, #96	; 0x60
 8001442:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001450:	2300      	movs	r3, #0
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	461a      	mov	r2, r3
 800145a:	2110      	movs	r1, #16
 800145c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001460:	f001 f824 	bl	80024ac <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8001464:	2110      	movs	r1, #16
 8001466:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800146a:	f7ff fd25 	bl	8000eb8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800146e:	2100      	movs	r1, #0
 8001470:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001474:	f7ff feec 	bl	8001250 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001478:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800147c:	f7ff fefb 	bl	8001276 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001480:	2002      	movs	r0, #2
 8001482:	f7ff fcc1 	bl	8000e08 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
  GPIO_InitStruct.Pin = RIGHT_PWM_Pin;
 8001486:	2308      	movs	r3, #8
 8001488:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800148a:	2302      	movs	r3, #2
 800148c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800149a:	2301      	movs	r3, #1
 800149c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(RIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	4619      	mov	r1, r3
 80014a2:	4804      	ldr	r0, [pc, #16]	; (80014b4 <MX_TIM2_Init+0xe8>)
 80014a4:	f000 fcd5 	bl	8001e52 <LL_GPIO_Init>

}
 80014a8:	bf00      	nop
 80014aa:	3750      	adds	r7, #80	; 0x50
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	fff003e8 	.word	0xfff003e8
 80014b4:	40020400 	.word	0x40020400

080014b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08c      	sub	sp, #48	; 0x30
 80014bc:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80014be:	f107 031c 	add.w	r3, r7, #28
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
 80014dc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80014de:	2002      	movs	r0, #2
 80014e0:	f7ff fcaa 	bl	8000e38 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80014e4:	2004      	movs	r0, #4
 80014e6:	f7ff fc8f 	bl	8000e08 <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PC6   ------> TIM3_CH1
  PC7   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = ENCODER_L_CH1_Pin|ENCODER_L_CH2_Pin;
 80014ea:	23c0      	movs	r3, #192	; 0xc0
 80014ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80014ee:	2302      	movs	r3, #2
 80014f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	4619      	mov	r1, r3
 8001506:	4827      	ldr	r0, [pc, #156]	; (80015a4 <MX_TIM3_Init+0xec>)
 8001508:	f000 fca3 	bl	8001e52 <LL_GPIO_Init>

  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X2_TI1);
 800150c:	2101      	movs	r1, #1
 800150e:	4826      	ldr	r0, [pc, #152]	; (80015a8 <MX_TIM3_Init+0xf0>)
 8001510:	f7ff fe8b 	bl	800122a <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001514:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001518:	2101      	movs	r1, #1
 800151a:	4823      	ldr	r0, [pc, #140]	; (80015a8 <MX_TIM3_Init+0xf0>)
 800151c:	f7ff fd50 	bl	8000fc0 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8001520:	2200      	movs	r2, #0
 8001522:	2101      	movs	r1, #1
 8001524:	4820      	ldr	r0, [pc, #128]	; (80015a8 <MX_TIM3_Init+0xf0>)
 8001526:	f7ff fd95 	bl	8001054 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 800152a:	2200      	movs	r2, #0
 800152c:	2101      	movs	r1, #1
 800152e:	481e      	ldr	r0, [pc, #120]	; (80015a8 <MX_TIM3_Init+0xf0>)
 8001530:	f7ff fdda 	bl	80010e8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8001534:	2200      	movs	r2, #0
 8001536:	2101      	movs	r1, #1
 8001538:	481b      	ldr	r0, [pc, #108]	; (80015a8 <MX_TIM3_Init+0xf0>)
 800153a:	f7ff fe1f 	bl	800117c <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 800153e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001542:	2110      	movs	r1, #16
 8001544:	4818      	ldr	r0, [pc, #96]	; (80015a8 <MX_TIM3_Init+0xf0>)
 8001546:	f7ff fd3b 	bl	8000fc0 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 800154a:	2200      	movs	r2, #0
 800154c:	2110      	movs	r1, #16
 800154e:	4816      	ldr	r0, [pc, #88]	; (80015a8 <MX_TIM3_Init+0xf0>)
 8001550:	f7ff fd80 	bl	8001054 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8001554:	2200      	movs	r2, #0
 8001556:	2110      	movs	r1, #16
 8001558:	4813      	ldr	r0, [pc, #76]	; (80015a8 <MX_TIM3_Init+0xf0>)
 800155a:	f7ff fdc5 	bl	80010e8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 800155e:	2200      	movs	r2, #0
 8001560:	2110      	movs	r1, #16
 8001562:	4811      	ldr	r0, [pc, #68]	; (80015a8 <MX_TIM3_Init+0xf0>)
 8001564:	f7ff fe0a 	bl	800117c <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8001570:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	4619      	mov	r1, r3
 8001580:	4809      	ldr	r0, [pc, #36]	; (80015a8 <MX_TIM3_Init+0xf0>)
 8001582:	f000 fef9 	bl	8002378 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8001586:	4808      	ldr	r0, [pc, #32]	; (80015a8 <MX_TIM3_Init+0xf0>)
 8001588:	f7ff fc86 	bl	8000e98 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800158c:	2100      	movs	r1, #0
 800158e:	4806      	ldr	r0, [pc, #24]	; (80015a8 <MX_TIM3_Init+0xf0>)
 8001590:	f7ff fe5e 	bl	8001250 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <MX_TIM3_Init+0xf0>)
 8001596:	f7ff fe6e 	bl	8001276 <LL_TIM_DisableMasterSlaveMode>

}
 800159a:	bf00      	nop
 800159c:	3730      	adds	r7, #48	; 0x30
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40020800 	.word	0x40020800
 80015a8:	40000400 	.word	0x40000400

080015ac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08c      	sub	sp, #48	; 0x30
 80015b0:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
 80015c0:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
 80015d0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 80015d2:	2004      	movs	r0, #4
 80015d4:	f7ff fc30 	bl	8000e38 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80015d8:	2002      	movs	r0, #2
 80015da:	f7ff fc15 	bl	8000e08 <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PB6   ------> TIM4_CH1
  PB7   ------> TIM4_CH2
  */
  GPIO_InitStruct.Pin = ENCODER_R_CH1_Pin|ENCODER_R_CH2_Pin;
 80015de:	23c0      	movs	r3, #192	; 0xc0
 80015e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80015e2:	2302      	movs	r3, #2
 80015e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80015f2:	2302      	movs	r3, #2
 80015f4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	4619      	mov	r1, r3
 80015fa:	4827      	ldr	r0, [pc, #156]	; (8001698 <MX_TIM4_Init+0xec>)
 80015fc:	f000 fc29 	bl	8001e52 <LL_GPIO_Init>

  LL_TIM_SetEncoderMode(TIM4, LL_TIM_ENCODERMODE_X2_TI1);
 8001600:	2101      	movs	r1, #1
 8001602:	4826      	ldr	r0, [pc, #152]	; (800169c <MX_TIM4_Init+0xf0>)
 8001604:	f7ff fe11 	bl	800122a <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001608:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800160c:	2101      	movs	r1, #1
 800160e:	4823      	ldr	r0, [pc, #140]	; (800169c <MX_TIM4_Init+0xf0>)
 8001610:	f7ff fcd6 	bl	8000fc0 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8001614:	2200      	movs	r2, #0
 8001616:	2101      	movs	r1, #1
 8001618:	4820      	ldr	r0, [pc, #128]	; (800169c <MX_TIM4_Init+0xf0>)
 800161a:	f7ff fd1b 	bl	8001054 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 800161e:	2200      	movs	r2, #0
 8001620:	2101      	movs	r1, #1
 8001622:	481e      	ldr	r0, [pc, #120]	; (800169c <MX_TIM4_Init+0xf0>)
 8001624:	f7ff fd60 	bl	80010e8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8001628:	2200      	movs	r2, #0
 800162a:	2101      	movs	r1, #1
 800162c:	481b      	ldr	r0, [pc, #108]	; (800169c <MX_TIM4_Init+0xf0>)
 800162e:	f7ff fda5 	bl	800117c <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001632:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001636:	2110      	movs	r1, #16
 8001638:	4818      	ldr	r0, [pc, #96]	; (800169c <MX_TIM4_Init+0xf0>)
 800163a:	f7ff fcc1 	bl	8000fc0 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 800163e:	2200      	movs	r2, #0
 8001640:	2110      	movs	r1, #16
 8001642:	4816      	ldr	r0, [pc, #88]	; (800169c <MX_TIM4_Init+0xf0>)
 8001644:	f7ff fd06 	bl	8001054 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8001648:	2200      	movs	r2, #0
 800164a:	2110      	movs	r1, #16
 800164c:	4813      	ldr	r0, [pc, #76]	; (800169c <MX_TIM4_Init+0xf0>)
 800164e:	f7ff fd4b 	bl	80010e8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8001652:	2200      	movs	r2, #0
 8001654:	2110      	movs	r1, #16
 8001656:	4811      	ldr	r0, [pc, #68]	; (800169c <MX_TIM4_Init+0xf0>)
 8001658:	f7ff fd90 	bl	800117c <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8001664:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 800166e:	f107 031c 	add.w	r3, r7, #28
 8001672:	4619      	mov	r1, r3
 8001674:	4809      	ldr	r0, [pc, #36]	; (800169c <MX_TIM4_Init+0xf0>)
 8001676:	f000 fe7f 	bl	8002378 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 800167a:	4808      	ldr	r0, [pc, #32]	; (800169c <MX_TIM4_Init+0xf0>)
 800167c:	f7ff fc0c 	bl	8000e98 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8001680:	2100      	movs	r1, #0
 8001682:	4806      	ldr	r0, [pc, #24]	; (800169c <MX_TIM4_Init+0xf0>)
 8001684:	f7ff fde4 	bl	8001250 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8001688:	4804      	ldr	r0, [pc, #16]	; (800169c <MX_TIM4_Init+0xf0>)
 800168a:	f7ff fdf4 	bl	8001276 <LL_TIM_DisableMasterSlaveMode>

}
 800168e:	bf00      	nop
 8001690:	3730      	adds	r7, #48	; 0x30
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40020400 	.word	0x40020400
 800169c:	40000800 	.word	0x40000800

080016a0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 80016b4:	2010      	movs	r0, #16
 80016b6:	f7ff fbbf 	bl	8000e38 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 80016c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016c6:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	4619      	mov	r1, r3
 80016cc:	4808      	ldr	r0, [pc, #32]	; (80016f0 <MX_TIM6_Init+0x50>)
 80016ce:	f000 fe53 	bl	8002378 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 80016d2:	4807      	ldr	r0, [pc, #28]	; (80016f0 <MX_TIM6_Init+0x50>)
 80016d4:	f7ff fbe0 	bl	8000e98 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 80016d8:	2100      	movs	r1, #0
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_TIM6_Init+0x50>)
 80016dc:	f7ff fdb8 	bl	8001250 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 80016e0:	4803      	ldr	r0, [pc, #12]	; (80016f0 <MX_TIM6_Init+0x50>)
 80016e2:	f7ff fdc8 	bl	8001276 <LL_TIM_DisableMasterSlaveMode>

}
 80016e6:	bf00      	nop
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40001000 	.word	0x40001000

080016f4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b09a      	sub	sp, #104	; 0x68
 80016f8:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80016fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
 8001708:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800170a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800170e:	2220      	movs	r2, #32
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f001 fbd2 	bl	8002ebc <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001718:	f107 031c 	add.w	r3, r7, #28
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
 8001728:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
 8001738:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 800173a:	2002      	movs	r0, #2
 800173c:	f7ff fb94 	bl	8000e68 <LL_APB2_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 84-LL_TIM_IC_FILTER_FDIV1_N2;
 8001740:	2354      	movs	r3, #84	; 0x54
 8001742:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001746:	2300      	movs	r3, #0
 8001748:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 800174a:	4b33      	ldr	r3, [pc, #204]	; (8001818 <MX_TIM8_Init+0x124>)
 800174c:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800174e:	2300      	movs	r3, #0
 8001750:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 8001758:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800175c:	4619      	mov	r1, r3
 800175e:	482f      	ldr	r0, [pc, #188]	; (800181c <MX_TIM8_Init+0x128>)
 8001760:	f000 fe0a 	bl	8002378 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM8);
 8001764:	482d      	ldr	r0, [pc, #180]	; (800181c <MX_TIM8_Init+0x128>)
 8001766:	f7ff fb97 	bl	8000e98 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM8, LL_TIM_CHANNEL_CH4);
 800176a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800176e:	482b      	ldr	r0, [pc, #172]	; (800181c <MX_TIM8_Init+0x128>)
 8001770:	f7ff fbe4 	bl	8000f3c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001774:	2360      	movs	r3, #96	; 0x60
 8001776:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 50;
 8001780:	2332      	movs	r3, #50	; 0x32
 8001782:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001784:	2300      	movs	r3, #0
 8001786:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001790:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001794:	461a      	mov	r2, r3
 8001796:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800179a:	4820      	ldr	r0, [pc, #128]	; (800181c <MX_TIM8_Init+0x128>)
 800179c:	f000 fe86 	bl	80024ac <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM8, LL_TIM_CHANNEL_CH4);
 80017a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017a4:	481d      	ldr	r0, [pc, #116]	; (800181c <MX_TIM8_Init+0x128>)
 80017a6:	f7ff fb87 	bl	8000eb8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM8, LL_TIM_TRGO_RESET);
 80017aa:	2100      	movs	r1, #0
 80017ac:	481b      	ldr	r0, [pc, #108]	; (800181c <MX_TIM8_Init+0x128>)
 80017ae:	f7ff fd4f 	bl	8001250 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM8);
 80017b2:	481a      	ldr	r0, [pc, #104]	; (800181c <MX_TIM8_Init+0x128>)
 80017b4:	f7ff fd5f 	bl	8001276 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 80017c0:	2300      	movs	r3, #0
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 80017ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM8, &TIM_BDTRInitStruct);
 80017d8:	f107 031c 	add.w	r3, r7, #28
 80017dc:	4619      	mov	r1, r3
 80017de:	480f      	ldr	r0, [pc, #60]	; (800181c <MX_TIM8_Init+0x128>)
 80017e0:	f000 fe9c 	bl	800251c <LL_TIM_BDTR_Init>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80017e4:	2004      	movs	r0, #4
 80017e6:	f7ff fb0f 	bl	8000e08 <LL_AHB1_GRP1_EnableClock>
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80017ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017f0:	2302      	movs	r3, #2
 80017f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8001800:	2303      	movs	r3, #3
 8001802:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	4619      	mov	r1, r3
 8001808:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_TIM8_Init+0x12c>)
 800180a:	f000 fb22 	bl	8001e52 <LL_GPIO_Init>

}
 800180e:	bf00      	nop
 8001810:	3768      	adds	r7, #104	; 0x68
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	fff003e8 	.word	0xfff003e8
 800181c:	40010400 	.word	0x40010400
 8001820:	40020800 	.word	0x40020800

08001824 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b094      	sub	sp, #80	; 0x50
 8001828:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800182a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	2220      	movs	r2, #32
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f001 fb3a 	bl	8002ebc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]
 8001856:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM11);
 8001858:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800185c:	f7ff fb04 	bl	8000e68 <LL_APB2_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001864:	2300      	movs	r3, #0
 8001866:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 65535;
 8001868:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800186c:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800186e:	2300      	movs	r3, #0
 8001870:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM11, &TIM_InitStruct);
 8001872:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001876:	4619      	mov	r1, r3
 8001878:	481b      	ldr	r0, [pc, #108]	; (80018e8 <MX_TIM11_Init+0xc4>)
 800187a:	f000 fd7d 	bl	8002378 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM11);
 800187e:	481a      	ldr	r0, [pc, #104]	; (80018e8 <MX_TIM11_Init+0xc4>)
 8001880:	f7ff fb0a 	bl	8000e98 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM11, LL_TIM_CHANNEL_CH1);
 8001884:	2101      	movs	r1, #1
 8001886:	4818      	ldr	r0, [pc, #96]	; (80018e8 <MX_TIM11_Init+0xc4>)
 8001888:	f7ff fb58 	bl	8000f3c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800188c:	2360      	movs	r3, #96	; 0x60
 800188e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800189c:	2300      	movs	r3, #0
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM11, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80018a0:	f107 031c 	add.w	r3, r7, #28
 80018a4:	461a      	mov	r2, r3
 80018a6:	2101      	movs	r1, #1
 80018a8:	480f      	ldr	r0, [pc, #60]	; (80018e8 <MX_TIM11_Init+0xc4>)
 80018aa:	f000 fdff 	bl	80024ac <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM11, LL_TIM_CHANNEL_CH1);
 80018ae:	2101      	movs	r1, #1
 80018b0:	480d      	ldr	r0, [pc, #52]	; (80018e8 <MX_TIM11_Init+0xc4>)
 80018b2:	f7ff fb01 	bl	8000eb8 <LL_TIM_OC_DisableFast>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80018b6:	2002      	movs	r0, #2
 80018b8:	f7ff faa6 	bl	8000e08 <LL_AHB1_GRP1_EnableClock>
    /**TIM11 GPIO Configuration
    PB9     ------> TIM11_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80018bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80018c2:	2302      	movs	r3, #2
 80018c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 80018d2:	2303      	movs	r3, #3
 80018d4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	4619      	mov	r1, r3
 80018da:	4804      	ldr	r0, [pc, #16]	; (80018ec <MX_TIM11_Init+0xc8>)
 80018dc:	f000 fab9 	bl	8001e52 <LL_GPIO_Init>

}
 80018e0:	bf00      	nop
 80018e2:	3750      	adds	r7, #80	; 0x50
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40014800 	.word	0x40014800
 80018ec:	40020400 	.word	0x40020400

080018f0 <LL_AHB1_GRP1_EnableClock>:
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018fc:	4907      	ldr	r1, [pc, #28]	; (800191c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4313      	orrs	r3, r2
 8001902:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4013      	ands	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800190e:	68fb      	ldr	r3, [r7, #12]
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	40023800 	.word	0x40023800

08001920 <LL_APB2_GRP1_EnableClock>:
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <LL_APB2_GRP1_EnableClock+0x2c>)
 800192a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800192c:	4907      	ldr	r1, [pc, #28]	; (800194c <LL_APB2_GRP1_EnableClock+0x2c>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4313      	orrs	r3, r2
 8001932:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001936:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4013      	ands	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	40023800 	.word	0x40023800

08001950 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	60da      	str	r2, [r3, #12]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	615a      	str	r2, [r3, #20]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08e      	sub	sp, #56	; 0x38
 80019a0:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80019a2:	f107 031c 	add.w	r3, r7, #28
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]
 80019b0:	611a      	str	r2, [r3, #16]
 80019b2:	615a      	str	r2, [r3, #20]
 80019b4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
 80019c4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80019c6:	2010      	movs	r0, #16
 80019c8:	f7ff ffaa 	bl	8001920 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80019cc:	2001      	movs	r0, #1
 80019ce:	f7ff ff8f 	bl	80018f0 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 80019d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80019d8:	2302      	movs	r3, #2
 80019da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80019dc:	2303      	movs	r3, #3
 80019de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80019e8:	2307      	movs	r3, #7
 80019ea:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	4619      	mov	r1, r3
 80019f0:	4810      	ldr	r0, [pc, #64]	; (8001a34 <MX_USART1_UART_Init+0x98>)
 80019f2:	f000 fa2e 	bl	8001e52 <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 80019f6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80019fa:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80019fc:	2300      	movs	r3, #0
 80019fe:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001a00:	2300      	movs	r3, #0
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001a08:	230c      	movs	r3, #12
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001a10:	2300      	movs	r3, #0
 8001a12:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4807      	ldr	r0, [pc, #28]	; (8001a38 <MX_USART1_UART_Init+0x9c>)
 8001a1c:	f001 f94e 	bl	8002cbc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001a20:	4805      	ldr	r0, [pc, #20]	; (8001a38 <MX_USART1_UART_Init+0x9c>)
 8001a22:	f7ff ffa5 	bl	8001970 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001a26:	4804      	ldr	r0, [pc, #16]	; (8001a38 <MX_USART1_UART_Init+0x9c>)
 8001a28:	f7ff ff92 	bl	8001950 <LL_USART_Enable>

}
 8001a2c:	bf00      	nop
 8001a2e:	3738      	adds	r7, #56	; 0x38
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40020000 	.word	0x40020000
 8001a38:	40011000 	.word	0x40011000

08001a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a42:	e003      	b.n	8001a4c <LoopCopyDataInit>

08001a44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a4a:	3104      	adds	r1, #4

08001a4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a4c:	480b      	ldr	r0, [pc, #44]	; (8001a7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a54:	d3f6      	bcc.n	8001a44 <CopyDataInit>
  ldr  r2, =_sbss
 8001a56:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a58:	e002      	b.n	8001a60 <LoopFillZerobss>

08001a5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a5c:	f842 3b04 	str.w	r3, [r2], #4

08001a60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a60:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a64:	d3f9      	bcc.n	8001a5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a66:	f7ff f9b9 	bl	8000ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a6a:	f001 fa03 	bl	8002e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a6e:	f7ff f873 	bl	8000b58 <main>
  bx  lr    
 8001a72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a74:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a78:	08002f2c 	.word	0x08002f2c
  ldr  r0, =_sdata
 8001a7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a80:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001a84:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001a88:	20000020 	.word	0x20000020

08001a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a8c:	e7fe      	b.n	8001a8c <ADC_IRQHandler>

08001a8e <LL_ADC_REG_SetSequencerLength>:
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	bf0c      	ite	eq
 8001ac8:	2301      	moveq	r3, #1
 8001aca:	2300      	movne	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8001adc:	b590      	push	{r4, r7, lr}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8001aea:	481c      	ldr	r0, [pc, #112]	; (8001b5c <LL_ADC_CommonInit+0x80>)
 8001aec:	f7ff ffe2 	bl	8001ab4 <LL_ADC_IsEnabled>
 8001af0:	4604      	mov	r4, r0
 8001af2:	481b      	ldr	r0, [pc, #108]	; (8001b60 <LL_ADC_CommonInit+0x84>)
 8001af4:	f7ff ffde 	bl	8001ab4 <LL_ADC_IsEnabled>
 8001af8:	4603      	mov	r3, r0
 8001afa:	431c      	orrs	r4, r3
 8001afc:	4819      	ldr	r0, [pc, #100]	; (8001b64 <LL_ADC_CommonInit+0x88>)
 8001afe:	f7ff ffd9 	bl	8001ab4 <LL_ADC_IsEnabled>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4323      	orrs	r3, r4
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d120      	bne.n	8001b4c <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d012      	beq.n	8001b38 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <LL_ADC_CommonInit+0x8c>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	6811      	ldr	r1, [r2, #0]
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	6852      	ldr	r2, [r2, #4]
 8001b22:	4311      	orrs	r1, r2
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	6892      	ldr	r2, [r2, #8]
 8001b28:	4311      	orrs	r1, r2
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	68d2      	ldr	r2, [r2, #12]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	e00b      	b.n	8001b50 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <LL_ADC_CommonInit+0x8c>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	e001      	b.n	8001b50 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd90      	pop	{r4, r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40012000 	.word	0x40012000
 8001b60:	40012100 	.word	0x40012100
 8001b64:	40012200 	.word	0x40012200
 8001b68:	fffc10e0 	.word	0xfffc10e0

08001b6c <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001b76:	2300      	movs	r3, #0
 8001b78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ff9a 	bl	8001ab4 <LL_ADC_IsEnabled>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d117      	bne.n	8001bb6 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001b8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	6811      	ldr	r1, [r2, #0]
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	6892      	ldr	r2, [r2, #8]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	e001      	b.n	8001bba <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff ff6e 	bl	8001ab4 <LL_ADC_IsEnabled>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d12b      	bne.n	8001c36 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d009      	beq.n	8001bfa <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	605a      	str	r2, [r3, #4]
 8001bf8:	e005      	b.n	8001c06 <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <LL_ADC_REG_Init+0x80>)
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	68d2      	ldr	r2, [r2, #12]
 8001c1a:	4311      	orrs	r1, r2
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	6912      	ldr	r2, [r2, #16]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff ff2d 	bl	8001a8e <LL_ADC_REG_SetSequencerLength>
 8001c34:	e001      	b.n	8001c3a <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	c0fffcfd 	.word	0xc0fffcfd

08001c48 <LL_GPIO_SetPinMode>:
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b089      	sub	sp, #36	; 0x24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	fa93 f3a3 	rbit	r3, r3
 8001c62:	613b      	str	r3, [r7, #16]
  return result;
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	fab3 f383 	clz	r3, r3
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	2103      	movs	r1, #3
 8001c70:	fa01 f303 	lsl.w	r3, r1, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	401a      	ands	r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	fa93 f3a3 	rbit	r3, r3
 8001c82:	61bb      	str	r3, [r7, #24]
  return result;
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	fab3 f383 	clz	r3, r3
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	fa01 f303 	lsl.w	r3, r1, r3
 8001c94:	431a      	orrs	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	601a      	str	r2, [r3, #0]
}
 8001c9a:	bf00      	nop
 8001c9c:	3724      	adds	r7, #36	; 0x24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_GPIO_SetPinOutputType>:
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b085      	sub	sp, #20
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	401a      	ands	r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	fb01 f303 	mul.w	r3, r1, r3
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	605a      	str	r2, [r3, #4]
}
 8001cca:	bf00      	nop
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <LL_GPIO_SetPinSpeed>:
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b089      	sub	sp, #36	; 0x24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	60f8      	str	r0, [r7, #12]
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	613b      	str	r3, [r7, #16]
  return result;
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	fab3 f383 	clz	r3, r3
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	2103      	movs	r1, #3
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	401a      	ands	r2, r3
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	61bb      	str	r3, [r7, #24]
  return result;
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	fab3 f383 	clz	r3, r3
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d22:	431a      	orrs	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	609a      	str	r2, [r3, #8]
}
 8001d28:	bf00      	nop
 8001d2a:	3724      	adds	r7, #36	; 0x24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_GPIO_SetPinPull>:
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	; 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	613b      	str	r3, [r7, #16]
  return result;
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	fab3 f383 	clz	r3, r3
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	2103      	movs	r1, #3
 8001d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	401a      	ands	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	fa93 f3a3 	rbit	r3, r3
 8001d6e:	61bb      	str	r3, [r7, #24]
  return result;
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d80:	431a      	orrs	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	60da      	str	r2, [r3, #12]
}
 8001d86:	bf00      	nop
 8001d88:	3724      	adds	r7, #36	; 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <LL_GPIO_SetAFPin_0_7>:
{
 8001d92:	b480      	push	{r7}
 8001d94:	b089      	sub	sp, #36	; 0x24
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6a1a      	ldr	r2, [r3, #32]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	613b      	str	r3, [r7, #16]
  return result;
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	fab3 f383 	clz	r3, r3
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	210f      	movs	r1, #15
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	401a      	ands	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	fa93 f3a3 	rbit	r3, r3
 8001dcc:	61bb      	str	r3, [r7, #24]
  return result;
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	fab3 f383 	clz	r3, r3
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	431a      	orrs	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	621a      	str	r2, [r3, #32]
}
 8001de4:	bf00      	nop
 8001de6:	3724      	adds	r7, #36	; 0x24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <LL_GPIO_SetAFPin_8_15>:
{
 8001df0:	b480      	push	{r7}
 8001df2:	b089      	sub	sp, #36	; 0x24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	fa93 f3a3 	rbit	r3, r3
 8001e0c:	613b      	str	r3, [r7, #16]
  return result;
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	fab3 f383 	clz	r3, r3
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	210f      	movs	r1, #15
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	401a      	ands	r2, r3
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	61bb      	str	r3, [r7, #24]
  return result;
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	fab3 f383 	clz	r3, r3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e40:	431a      	orrs	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001e46:	bf00      	nop
 8001e48:	3724      	adds	r7, #36	; 0x24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b088      	sub	sp, #32
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	fa93 f3a3 	rbit	r3, r3
 8001e70:	613b      	str	r3, [r7, #16]
  return result;
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	fab3 f383 	clz	r3, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001e7c:	e050      	b.n	8001f20 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	2101      	movs	r1, #1
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d042      	beq.n	8001f1a <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d003      	beq.n	8001ea4 <LL_GPIO_Init+0x52>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d10d      	bne.n	8001ec0 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	69b9      	ldr	r1, [r7, #24]
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff12 	bl	8001cd6 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	69b9      	ldr	r1, [r7, #24]
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff fef3 	bl	8001ca6 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	69b9      	ldr	r1, [r7, #24]
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ff33 	bl	8001d34 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d11a      	bne.n	8001f0c <LL_GPIO_Init+0xba>
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	fa93 f3a3 	rbit	r3, r3
 8001ee0:	60bb      	str	r3, [r7, #8]
  return result;
 8001ee2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001ee4:	fab3 f383 	clz	r3, r3
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b07      	cmp	r3, #7
 8001eec:	d807      	bhi.n	8001efe <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	69b9      	ldr	r1, [r7, #24]
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ff4b 	bl	8001d92 <LL_GPIO_SetAFPin_0_7>
 8001efc:	e006      	b.n	8001f0c <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	461a      	mov	r2, r3
 8001f04:	69b9      	ldr	r1, [r7, #24]
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ff72 	bl	8001df0 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	461a      	mov	r2, r3
 8001f12:	69b9      	ldr	r1, [r7, #24]
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff fe97 	bl	8001c48 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1a7      	bne.n	8001e7e <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3720      	adds	r7, #32
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <LL_RCC_GetSysClkSource>:
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001f3c:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <LL_RCC_GetSysClkSource+0x18>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 030c 	and.w	r3, r3, #12
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800

08001f54 <LL_RCC_GetAHBPrescaler>:
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <LL_RCC_GetAHBPrescaler+0x18>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800

08001f70 <LL_RCC_GetAPB1Prescaler>:
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800

08001f8c <LL_RCC_GetAPB2Prescaler>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800

08001fa8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <LL_RCC_PLL_GetMainSource+0x18>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800

08001fc4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <LL_RCC_PLL_GetN+0x18>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	099b      	lsrs	r3, r3, #6
 8001fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	40023800 	.word	0x40023800

08001fe0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <LL_RCC_PLL_GetP+0x18>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800

08001ffc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002000:	4b04      	ldr	r3, [pc, #16]	; (8002014 <LL_RCC_PLL_GetDivider+0x18>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40023800 	.word	0x40023800

08002018 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002020:	f000 f820 	bl	8002064 <RCC_GetSystemClockFreq>
 8002024:	4602      	mov	r2, r0
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f000 f83e 	bl	80020b0 <RCC_GetHCLKClockFreq>
 8002034:	4602      	mov	r2, r0
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f84c 	bl	80020dc <RCC_GetPCLK1ClockFreq>
 8002044:	4602      	mov	r2, r0
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4618      	mov	r0, r3
 8002050:	f000 f858 	bl	8002104 <RCC_GetPCLK2ClockFreq>
 8002054:	4602      	mov	r2, r0
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	60da      	str	r2, [r3, #12]
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800206a:	2300      	movs	r3, #0
 800206c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800206e:	f7ff ff63 	bl	8001f38 <LL_RCC_GetSysClkSource>
 8002072:	4603      	mov	r3, r0
 8002074:	2b04      	cmp	r3, #4
 8002076:	d006      	beq.n	8002086 <RCC_GetSystemClockFreq+0x22>
 8002078:	2b08      	cmp	r3, #8
 800207a:	d007      	beq.n	800208c <RCC_GetSystemClockFreq+0x28>
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10a      	bne.n	8002096 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <RCC_GetSystemClockFreq+0x44>)
 8002082:	607b      	str	r3, [r7, #4]
      break;
 8002084:	e00a      	b.n	800209c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002086:	4b09      	ldr	r3, [pc, #36]	; (80020ac <RCC_GetSystemClockFreq+0x48>)
 8002088:	607b      	str	r3, [r7, #4]
      break;
 800208a:	e007      	b.n	800209c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800208c:	2008      	movs	r0, #8
 800208e:	f000 f84d 	bl	800212c <RCC_PLL_GetFreqDomain_SYS>
 8002092:	6078      	str	r0, [r7, #4]
      break;
 8002094:	e002      	b.n	800209c <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002096:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <RCC_GetSystemClockFreq+0x44>)
 8002098:	607b      	str	r3, [r7, #4]
      break;
 800209a:	bf00      	nop
  }

  return frequency;
 800209c:	687b      	ldr	r3, [r7, #4]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	00f42400 	.word	0x00f42400
 80020ac:	017d7840 	.word	0x017d7840

080020b0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80020b8:	f7ff ff4c 	bl	8001f54 <LL_RCC_GetAHBPrescaler>
 80020bc:	4603      	mov	r3, r0
 80020be:	091b      	lsrs	r3, r3, #4
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	4a04      	ldr	r2, [pc, #16]	; (80020d8 <RCC_GetHCLKClockFreq+0x28>)
 80020c6:	5cd3      	ldrb	r3, [r2, r3]
 80020c8:	461a      	mov	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	40d3      	lsrs	r3, r2
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	08002ee4 	.word	0x08002ee4

080020dc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80020e4:	f7ff ff44 	bl	8001f70 <LL_RCC_GetAPB1Prescaler>
 80020e8:	4603      	mov	r3, r0
 80020ea:	0a9b      	lsrs	r3, r3, #10
 80020ec:	4a04      	ldr	r2, [pc, #16]	; (8002100 <RCC_GetPCLK1ClockFreq+0x24>)
 80020ee:	5cd3      	ldrb	r3, [r2, r3]
 80020f0:	461a      	mov	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	40d3      	lsrs	r3, r2
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	08002ef4 	.word	0x08002ef4

08002104 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800210c:	f7ff ff3e 	bl	8001f8c <LL_RCC_GetAPB2Prescaler>
 8002110:	4603      	mov	r3, r0
 8002112:	0b5b      	lsrs	r3, r3, #13
 8002114:	4a04      	ldr	r2, [pc, #16]	; (8002128 <RCC_GetPCLK2ClockFreq+0x24>)
 8002116:	5cd3      	ldrb	r3, [r2, r3]
 8002118:	461a      	mov	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	40d3      	lsrs	r3, r2
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	08002ef4 	.word	0x08002ef4

0800212c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800212c:	b590      	push	{r4, r7, lr}
 800212e:	b087      	sub	sp, #28
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	2300      	movs	r3, #0
 800213e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002140:	f7ff ff32 	bl	8001fa8 <LL_RCC_PLL_GetMainSource>
 8002144:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <RCC_PLL_GetFreqDomain_SYS+0x28>
 800214c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002150:	d003      	beq.n	800215a <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8002152:	e005      	b.n	8002160 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002154:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002156:	617b      	str	r3, [r7, #20]
      break;
 8002158:	e005      	b.n	8002166 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800215a:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800215c:	617b      	str	r3, [r7, #20]
      break;
 800215e:	e002      	b.n	8002166 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8002160:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002162:	617b      	str	r3, [r7, #20]
      break;
 8002164:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b08      	cmp	r3, #8
 800216a:	d113      	bne.n	8002194 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800216c:	f7ff ff46 	bl	8001ffc <LL_RCC_PLL_GetDivider>
 8002170:	4602      	mov	r2, r0
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	fbb3 f4f2 	udiv	r4, r3, r2
 8002178:	f7ff ff24 	bl	8001fc4 <LL_RCC_PLL_GetN>
 800217c:	4603      	mov	r3, r0
 800217e:	fb03 f404 	mul.w	r4, r3, r4
 8002182:	f7ff ff2d 	bl	8001fe0 <LL_RCC_PLL_GetP>
 8002186:	4603      	mov	r3, r0
 8002188:	0c1b      	lsrs	r3, r3, #16
 800218a:	3301      	adds	r3, #1
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	fbb4 f3f3 	udiv	r3, r4, r3
 8002192:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002194:	693b      	ldr	r3, [r7, #16]
}
 8002196:	4618      	mov	r0, r3
 8002198:	371c      	adds	r7, #28
 800219a:	46bd      	mov	sp, r7
 800219c:	bd90      	pop	{r4, r7, pc}
 800219e:	bf00      	nop
 80021a0:	00f42400 	.word	0x00f42400
 80021a4:	017d7840 	.word	0x017d7840

080021a8 <LL_SPI_IsEnabled>:
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b8:	2b40      	cmp	r3, #64	; 0x40
 80021ba:	d101      	bne.n	80021c0 <LL_SPI_IsEnabled+0x18>
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <LL_SPI_IsEnabled+0x1a>
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	461a      	mov	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	611a      	str	r2, [r3, #16]
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b084      	sub	sp, #16
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff ffd3 	bl	80021a8 <LL_SPI_IsEnabled>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d139      	bne.n	800227c <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002210:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	6811      	ldr	r1, [r2, #0]
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	6852      	ldr	r2, [r2, #4]
 800221c:	4311      	orrs	r1, r2
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	6892      	ldr	r2, [r2, #8]
 8002222:	4311      	orrs	r1, r2
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	68d2      	ldr	r2, [r2, #12]
 8002228:	4311      	orrs	r1, r2
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	6912      	ldr	r2, [r2, #16]
 800222e:	4311      	orrs	r1, r2
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	6952      	ldr	r2, [r2, #20]
 8002234:	4311      	orrs	r1, r2
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	6992      	ldr	r2, [r2, #24]
 800223a:	4311      	orrs	r1, r2
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	69d2      	ldr	r2, [r2, #28]
 8002240:	4311      	orrs	r1, r2
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	6a12      	ldr	r2, [r2, #32]
 8002246:	430a      	orrs	r2, r1
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f023 0204 	bic.w	r2, r3, #4
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	0c1b      	lsrs	r3, r3, #16
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800226a:	d105      	bne.n	8002278 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	4619      	mov	r1, r3
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff ffab 	bl	80021ce <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002278:	2300      	movs	r3, #0
 800227a:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	61da      	str	r2, [r3, #28]
  return status;
 8002288:	7bfb      	ldrb	r3, [r7, #15]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <LL_TIM_SetPrescaler>:
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
 800229a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <LL_TIM_SetAutoReload>:
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <LL_TIM_SetRepetitionCounter>:
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <LL_TIM_OC_SetCompareCH1>:
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <LL_TIM_OC_SetCompareCH2>:
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <LL_TIM_OC_SetCompareCH3>:
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <LL_TIM_OC_SetCompareCH4>:
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	641a      	str	r2, [r3, #64]	; 0x40
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f043 0201 	orr.w	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	615a      	str	r2, [r3, #20]
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a3d      	ldr	r2, [pc, #244]	; (8002480 <LL_TIM_Init+0x108>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d013      	beq.n	80023b8 <LL_TIM_Init+0x40>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002396:	d00f      	beq.n	80023b8 <LL_TIM_Init+0x40>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a3a      	ldr	r2, [pc, #232]	; (8002484 <LL_TIM_Init+0x10c>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d00b      	beq.n	80023b8 <LL_TIM_Init+0x40>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a39      	ldr	r2, [pc, #228]	; (8002488 <LL_TIM_Init+0x110>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d007      	beq.n	80023b8 <LL_TIM_Init+0x40>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a38      	ldr	r2, [pc, #224]	; (800248c <LL_TIM_Init+0x114>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d003      	beq.n	80023b8 <LL_TIM_Init+0x40>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a37      	ldr	r2, [pc, #220]	; (8002490 <LL_TIM_Init+0x118>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d106      	bne.n	80023c6 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a2d      	ldr	r2, [pc, #180]	; (8002480 <LL_TIM_Init+0x108>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d02b      	beq.n	8002426 <LL_TIM_Init+0xae>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d4:	d027      	beq.n	8002426 <LL_TIM_Init+0xae>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a2a      	ldr	r2, [pc, #168]	; (8002484 <LL_TIM_Init+0x10c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d023      	beq.n	8002426 <LL_TIM_Init+0xae>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a29      	ldr	r2, [pc, #164]	; (8002488 <LL_TIM_Init+0x110>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d01f      	beq.n	8002426 <LL_TIM_Init+0xae>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a28      	ldr	r2, [pc, #160]	; (800248c <LL_TIM_Init+0x114>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d01b      	beq.n	8002426 <LL_TIM_Init+0xae>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a27      	ldr	r2, [pc, #156]	; (8002490 <LL_TIM_Init+0x118>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d017      	beq.n	8002426 <LL_TIM_Init+0xae>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a26      	ldr	r2, [pc, #152]	; (8002494 <LL_TIM_Init+0x11c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d013      	beq.n	8002426 <LL_TIM_Init+0xae>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a25      	ldr	r2, [pc, #148]	; (8002498 <LL_TIM_Init+0x120>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00f      	beq.n	8002426 <LL_TIM_Init+0xae>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a24      	ldr	r2, [pc, #144]	; (800249c <LL_TIM_Init+0x124>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d00b      	beq.n	8002426 <LL_TIM_Init+0xae>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a23      	ldr	r2, [pc, #140]	; (80024a0 <LL_TIM_Init+0x128>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d007      	beq.n	8002426 <LL_TIM_Init+0xae>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a22      	ldr	r2, [pc, #136]	; (80024a4 <LL_TIM_Init+0x12c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d003      	beq.n	8002426 <LL_TIM_Init+0xae>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a21      	ldr	r2, [pc, #132]	; (80024a8 <LL_TIM_Init+0x130>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d106      	bne.n	8002434 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4313      	orrs	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	4619      	mov	r1, r3
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7ff ff34 	bl	80022ae <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	4619      	mov	r1, r3
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff ff20 	bl	8002292 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <LL_TIM_Init+0x108>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d003      	beq.n	8002462 <LL_TIM_Init+0xea>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a0c      	ldr	r2, [pc, #48]	; (8002490 <LL_TIM_Init+0x118>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d105      	bne.n	800246e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	7c1b      	ldrb	r3, [r3, #16]
 8002466:	4619      	mov	r1, r3
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff ff2e 	bl	80022ca <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff ff71 	bl	8002356 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40010000 	.word	0x40010000
 8002484:	40000400 	.word	0x40000400
 8002488:	40000800 	.word	0x40000800
 800248c:	40000c00 	.word	0x40000c00
 8002490:	40010400 	.word	0x40010400
 8002494:	40014000 	.word	0x40014000
 8002498:	40014400 	.word	0x40014400
 800249c:	40014800 	.word	0x40014800
 80024a0:	40001800 	.word	0x40001800
 80024a4:	40001c00 	.word	0x40001c00
 80024a8:	40002000 	.word	0x40002000

080024ac <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b10      	cmp	r3, #16
 80024c0:	d012      	beq.n	80024e8 <LL_TIM_OC_Init+0x3c>
 80024c2:	2b10      	cmp	r3, #16
 80024c4:	d802      	bhi.n	80024cc <LL_TIM_OC_Init+0x20>
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d007      	beq.n	80024da <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80024ca:	e022      	b.n	8002512 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 80024cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024d0:	d011      	beq.n	80024f6 <LL_TIM_OC_Init+0x4a>
 80024d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d6:	d015      	beq.n	8002504 <LL_TIM_OC_Init+0x58>
      break;
 80024d8:	e01b      	b.n	8002512 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 f867 	bl	80025b0 <OC1Config>
 80024e2:	4603      	mov	r3, r0
 80024e4:	75fb      	strb	r3, [r7, #23]
      break;
 80024e6:	e014      	b.n	8002512 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 f8cc 	bl	8002688 <OC2Config>
 80024f0:	4603      	mov	r3, r0
 80024f2:	75fb      	strb	r3, [r7, #23]
      break;
 80024f4:	e00d      	b.n	8002512 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 f935 	bl	8002768 <OC3Config>
 80024fe:	4603      	mov	r3, r0
 8002500:	75fb      	strb	r3, [r7, #23]
      break;
 8002502:	e006      	b.n	8002512 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 f99e 	bl	8002848 <OC4Config>
 800250c:	4603      	mov	r3, r0
 800250e:	75fb      	strb	r3, [r7, #23]
      break;
 8002510:	bf00      	nop
  }

  return result;
 8002512:	7dfb      	ldrb	r3, [r7, #23]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	7b12      	ldrb	r2, [r2, #12]
 8002534:	4313      	orrs	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	4313      	orrs	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4313      	orrs	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	89d2      	ldrh	r2, [r2, #14]
 800256c:	4313      	orrs	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	4313      	orrs	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	4313      	orrs	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	f023 0201 	bic.w	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f023 0303 	bic.w	r3, r3, #3
 80025de:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f023 0202 	bic.w	r2, r3, #2
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f023 0201 	bic.w	r2, r3, #1
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4313      	orrs	r3, r2
 8002608:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a1c      	ldr	r2, [pc, #112]	; (8002680 <OC1Config+0xd0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d003      	beq.n	800261a <OC1Config+0x6a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a1b      	ldr	r2, [pc, #108]	; (8002684 <OC1Config+0xd4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d11e      	bne.n	8002658 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f023 0208 	bic.w	r2, r3, #8
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4313      	orrs	r3, r2
 8002628:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f023 0204 	bic.w	r2, r3, #4
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4313      	orrs	r3, r2
 8002638:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4619      	mov	r1, r3
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff fe3b 	bl	80022e6 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40010000 	.word	0x40010000
 8002684:	40010400 	.word	0x40010400

08002688 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	f023 0210 	bic.w	r2, r3, #16
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	021b      	lsls	r3, r3, #8
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f023 0220 	bic.w	r2, r3, #32
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	4313      	orrs	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f023 0210 	bic.w	r2, r3, #16
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	4313      	orrs	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a1d      	ldr	r2, [pc, #116]	; (8002760 <OC2Config+0xd8>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d003      	beq.n	80026f8 <OC2Config+0x70>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a1c      	ldr	r2, [pc, #112]	; (8002764 <OC2Config+0xdc>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d11f      	bne.n	8002738 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	019b      	lsls	r3, r3, #6
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	019b      	lsls	r3, r3, #6
 8002714:	4313      	orrs	r3, r2
 8002716:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4619      	mov	r1, r3
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff fdd9 	bl	8002302 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40010000 	.word	0x40010000
 8002764:	40010400 	.word	0x40010400

08002768 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 0303 	bic.w	r3, r3, #3
 8002796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	4313      	orrs	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	021b      	lsls	r3, r3, #8
 80027c2:	4313      	orrs	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a1d      	ldr	r2, [pc, #116]	; (8002840 <OC3Config+0xd8>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d003      	beq.n	80027d6 <OC3Config+0x6e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a1c      	ldr	r2, [pc, #112]	; (8002844 <OC3Config+0xdc>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d11f      	bne.n	8002816 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	029b      	lsls	r3, r3, #10
 80027e2:	4313      	orrs	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	029b      	lsls	r3, r3, #10
 80027f2:	4313      	orrs	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	4313      	orrs	r3, r2
 8002804:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	015b      	lsls	r3, r3, #5
 8002812:	4313      	orrs	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	4619      	mov	r1, r3
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff fd78 	bl	800231e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40010000 	.word	0x40010000
 8002844:	40010400 	.word	0x40010400

08002848 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	021b      	lsls	r3, r3, #8
 8002884:	4313      	orrs	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	031b      	lsls	r3, r3, #12
 8002894:	4313      	orrs	r3, r2
 8002896:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	031b      	lsls	r3, r3, #12
 80028a4:	4313      	orrs	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a11      	ldr	r2, [pc, #68]	; (80028f0 <OC4Config+0xa8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d003      	beq.n	80028b8 <OC4Config+0x70>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a10      	ldr	r2, [pc, #64]	; (80028f4 <OC4Config+0xac>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d107      	bne.n	80028c8 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	019b      	lsls	r3, r3, #6
 80028c4:	4313      	orrs	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4619      	mov	r1, r3
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff fd2d 	bl	800233a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40010000 	.word	0x40010000
 80028f4:	40010400 	.word	0x40010400

080028f8 <LL_USART_IsEnabled>:
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002908:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800290c:	bf0c      	ite	eq
 800290e:	2301      	moveq	r3, #1
 8002910:	2300      	movne	r3, #0
 8002912:	b2db      	uxtb	r3, r3
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <LL_USART_SetStopBitsLength>:
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	611a      	str	r2, [r3, #16]
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <LL_USART_SetHWFlowCtrl>:
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	615a      	str	r2, [r3, #20]
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <LL_USART_SetBaudRate>:
{
 800296c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002970:	b085      	sub	sp, #20
 8002972:	af00      	add	r7, sp, #0
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002982:	f040 80c1 	bne.w	8002b08 <LL_USART_SetBaudRate+0x19c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	461d      	mov	r5, r3
 800298a:	f04f 0600 	mov.w	r6, #0
 800298e:	46a8      	mov	r8, r5
 8002990:	46b1      	mov	r9, r6
 8002992:	eb18 0308 	adds.w	r3, r8, r8
 8002996:	eb49 0409 	adc.w	r4, r9, r9
 800299a:	4698      	mov	r8, r3
 800299c:	46a1      	mov	r9, r4
 800299e:	eb18 0805 	adds.w	r8, r8, r5
 80029a2:	eb49 0906 	adc.w	r9, r9, r6
 80029a6:	f04f 0100 	mov.w	r1, #0
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80029b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80029b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80029ba:	4688      	mov	r8, r1
 80029bc:	4691      	mov	r9, r2
 80029be:	eb18 0005 	adds.w	r0, r8, r5
 80029c2:	eb49 0106 	adc.w	r1, r9, r6
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	461d      	mov	r5, r3
 80029ca:	f04f 0600 	mov.w	r6, #0
 80029ce:	196b      	adds	r3, r5, r5
 80029d0:	eb46 0406 	adc.w	r4, r6, r6
 80029d4:	461a      	mov	r2, r3
 80029d6:	4623      	mov	r3, r4
 80029d8:	f7fd fbf6 	bl	80001c8 <__aeabi_uldivmod>
 80029dc:	4603      	mov	r3, r0
 80029de:	460c      	mov	r4, r1
 80029e0:	461a      	mov	r2, r3
 80029e2:	4bb5      	ldr	r3, [pc, #724]	; (8002cb8 <LL_USART_SetBaudRate+0x34c>)
 80029e4:	fba3 2302 	umull	r2, r3, r3, r2
 80029e8:	095b      	lsrs	r3, r3, #5
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	fa1f f883 	uxth.w	r8, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	461d      	mov	r5, r3
 80029f6:	f04f 0600 	mov.w	r6, #0
 80029fa:	46a9      	mov	r9, r5
 80029fc:	46b2      	mov	sl, r6
 80029fe:	eb19 0309 	adds.w	r3, r9, r9
 8002a02:	eb4a 040a 	adc.w	r4, sl, sl
 8002a06:	4699      	mov	r9, r3
 8002a08:	46a2      	mov	sl, r4
 8002a0a:	eb19 0905 	adds.w	r9, r9, r5
 8002a0e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a12:	f04f 0100 	mov.w	r1, #0
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a26:	4689      	mov	r9, r1
 8002a28:	4692      	mov	sl, r2
 8002a2a:	eb19 0005 	adds.w	r0, r9, r5
 8002a2e:	eb4a 0106 	adc.w	r1, sl, r6
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	461d      	mov	r5, r3
 8002a36:	f04f 0600 	mov.w	r6, #0
 8002a3a:	196b      	adds	r3, r5, r5
 8002a3c:	eb46 0406 	adc.w	r4, r6, r6
 8002a40:	461a      	mov	r2, r3
 8002a42:	4623      	mov	r3, r4
 8002a44:	f7fd fbc0 	bl	80001c8 <__aeabi_uldivmod>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	460c      	mov	r4, r1
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4b9a      	ldr	r3, [pc, #616]	; (8002cb8 <LL_USART_SetBaudRate+0x34c>)
 8002a50:	fba3 1302 	umull	r1, r3, r3, r2
 8002a54:	095b      	lsrs	r3, r3, #5
 8002a56:	2164      	movs	r1, #100	; 0x64
 8002a58:	fb01 f303 	mul.w	r3, r1, r3
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	3332      	adds	r3, #50	; 0x32
 8002a62:	4a95      	ldr	r2, [pc, #596]	; (8002cb8 <LL_USART_SetBaudRate+0x34c>)
 8002a64:	fba2 2303 	umull	r2, r3, r2, r3
 8002a68:	095b      	lsrs	r3, r3, #5
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	4443      	add	r3, r8
 8002a78:	fa1f f883 	uxth.w	r8, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	461d      	mov	r5, r3
 8002a80:	f04f 0600 	mov.w	r6, #0
 8002a84:	46a9      	mov	r9, r5
 8002a86:	46b2      	mov	sl, r6
 8002a88:	eb19 0309 	adds.w	r3, r9, r9
 8002a8c:	eb4a 040a 	adc.w	r4, sl, sl
 8002a90:	4699      	mov	r9, r3
 8002a92:	46a2      	mov	sl, r4
 8002a94:	eb19 0905 	adds.w	r9, r9, r5
 8002a98:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a9c:	f04f 0100 	mov.w	r1, #0
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002aa8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002aac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ab0:	4689      	mov	r9, r1
 8002ab2:	4692      	mov	sl, r2
 8002ab4:	eb19 0005 	adds.w	r0, r9, r5
 8002ab8:	eb4a 0106 	adc.w	r1, sl, r6
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	461d      	mov	r5, r3
 8002ac0:	f04f 0600 	mov.w	r6, #0
 8002ac4:	196b      	adds	r3, r5, r5
 8002ac6:	eb46 0406 	adc.w	r4, r6, r6
 8002aca:	461a      	mov	r2, r3
 8002acc:	4623      	mov	r3, r4
 8002ace:	f7fd fb7b 	bl	80001c8 <__aeabi_uldivmod>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	460c      	mov	r4, r1
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	4b77      	ldr	r3, [pc, #476]	; (8002cb8 <LL_USART_SetBaudRate+0x34c>)
 8002ada:	fba3 1302 	umull	r1, r3, r3, r2
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	2164      	movs	r1, #100	; 0x64
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	3332      	adds	r3, #50	; 0x32
 8002aec:	4a72      	ldr	r2, [pc, #456]	; (8002cb8 <LL_USART_SetBaudRate+0x34c>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	4443      	add	r3, r8
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	461a      	mov	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	609a      	str	r2, [r3, #8]
}
 8002b06:	e0d2      	b.n	8002cae <LL_USART_SetBaudRate+0x342>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	469a      	mov	sl, r3
 8002b0c:	f04f 0b00 	mov.w	fp, #0
 8002b10:	46d0      	mov	r8, sl
 8002b12:	46d9      	mov	r9, fp
 8002b14:	eb18 0308 	adds.w	r3, r8, r8
 8002b18:	eb49 0409 	adc.w	r4, r9, r9
 8002b1c:	4698      	mov	r8, r3
 8002b1e:	46a1      	mov	r9, r4
 8002b20:	eb18 080a 	adds.w	r8, r8, sl
 8002b24:	eb49 090b 	adc.w	r9, r9, fp
 8002b28:	f04f 0100 	mov.w	r1, #0
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b34:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b38:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b3c:	4688      	mov	r8, r1
 8002b3e:	4691      	mov	r9, r2
 8002b40:	eb1a 0508 	adds.w	r5, sl, r8
 8002b44:	eb4b 0609 	adc.w	r6, fp, r9
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	f04f 0400 	mov.w	r4, #0
 8002b58:	0094      	lsls	r4, r2, #2
 8002b5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b5e:	008b      	lsls	r3, r1, #2
 8002b60:	461a      	mov	r2, r3
 8002b62:	4623      	mov	r3, r4
 8002b64:	4628      	mov	r0, r5
 8002b66:	4631      	mov	r1, r6
 8002b68:	f7fd fb2e 	bl	80001c8 <__aeabi_uldivmod>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	460c      	mov	r4, r1
 8002b70:	461a      	mov	r2, r3
 8002b72:	4b51      	ldr	r3, [pc, #324]	; (8002cb8 <LL_USART_SetBaudRate+0x34c>)
 8002b74:	fba3 2302 	umull	r2, r3, r3, r2
 8002b78:	095b      	lsrs	r3, r3, #5
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	fa1f f883 	uxth.w	r8, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	469b      	mov	fp, r3
 8002b86:	f04f 0c00 	mov.w	ip, #0
 8002b8a:	46d9      	mov	r9, fp
 8002b8c:	46e2      	mov	sl, ip
 8002b8e:	eb19 0309 	adds.w	r3, r9, r9
 8002b92:	eb4a 040a 	adc.w	r4, sl, sl
 8002b96:	4699      	mov	r9, r3
 8002b98:	46a2      	mov	sl, r4
 8002b9a:	eb19 090b 	adds.w	r9, r9, fp
 8002b9e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ba2:	f04f 0100 	mov.w	r1, #0
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002bb2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bb6:	4689      	mov	r9, r1
 8002bb8:	4692      	mov	sl, r2
 8002bba:	eb1b 0509 	adds.w	r5, fp, r9
 8002bbe:	eb4c 060a 	adc.w	r6, ip, sl
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	f04f 0400 	mov.w	r4, #0
 8002bd2:	0094      	lsls	r4, r2, #2
 8002bd4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bd8:	008b      	lsls	r3, r1, #2
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4623      	mov	r3, r4
 8002bde:	4628      	mov	r0, r5
 8002be0:	4631      	mov	r1, r6
 8002be2:	f7fd faf1 	bl	80001c8 <__aeabi_uldivmod>
 8002be6:	4603      	mov	r3, r0
 8002be8:	460c      	mov	r4, r1
 8002bea:	461a      	mov	r2, r3
 8002bec:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <LL_USART_SetBaudRate+0x34c>)
 8002bee:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf2:	095b      	lsrs	r3, r3, #5
 8002bf4:	2164      	movs	r1, #100	; 0x64
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	3332      	adds	r3, #50	; 0x32
 8002c00:	4a2d      	ldr	r2, [pc, #180]	; (8002cb8 <LL_USART_SetBaudRate+0x34c>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	4443      	add	r3, r8
 8002c12:	fa1f f883 	uxth.w	r8, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	469b      	mov	fp, r3
 8002c1a:	f04f 0c00 	mov.w	ip, #0
 8002c1e:	46d9      	mov	r9, fp
 8002c20:	46e2      	mov	sl, ip
 8002c22:	eb19 0309 	adds.w	r3, r9, r9
 8002c26:	eb4a 040a 	adc.w	r4, sl, sl
 8002c2a:	4699      	mov	r9, r3
 8002c2c:	46a2      	mov	sl, r4
 8002c2e:	eb19 090b 	adds.w	r9, r9, fp
 8002c32:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c36:	f04f 0100 	mov.w	r1, #0
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c4a:	4689      	mov	r9, r1
 8002c4c:	4692      	mov	sl, r2
 8002c4e:	eb1b 0509 	adds.w	r5, fp, r9
 8002c52:	eb4c 060a 	adc.w	r6, ip, sl
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	4619      	mov	r1, r3
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	f04f 0400 	mov.w	r4, #0
 8002c66:	0094      	lsls	r4, r2, #2
 8002c68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c6c:	008b      	lsls	r3, r1, #2
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4623      	mov	r3, r4
 8002c72:	4628      	mov	r0, r5
 8002c74:	4631      	mov	r1, r6
 8002c76:	f7fd faa7 	bl	80001c8 <__aeabi_uldivmod>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	460c      	mov	r4, r1
 8002c7e:	461a      	mov	r2, r3
 8002c80:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <LL_USART_SetBaudRate+0x34c>)
 8002c82:	fba3 1302 	umull	r1, r3, r3, r2
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	2164      	movs	r1, #100	; 0x64
 8002c8a:	fb01 f303 	mul.w	r3, r1, r3
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	3332      	adds	r3, #50	; 0x32
 8002c94:	4a08      	ldr	r2, [pc, #32]	; (8002cb8 <LL_USART_SetBaudRate+0x34c>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	4443      	add	r3, r8
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	461a      	mov	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	609a      	str	r2, [r3, #8]
}
 8002cae:	bf00      	nop
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cb8:	51eb851f 	.word	0x51eb851f

08002cbc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff fe12 	bl	80028f8 <LL_USART_IsEnabled>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d15e      	bne.n	8002d98 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002ce2:	f023 030c 	bic.w	r3, r3, #12
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	6851      	ldr	r1, [r2, #4]
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	68d2      	ldr	r2, [r2, #12]
 8002cee:	4311      	orrs	r1, r2
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	6912      	ldr	r2, [r2, #16]
 8002cf4:	4311      	orrs	r1, r2
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	6992      	ldr	r2, [r2, #24]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	4619      	mov	r1, r3
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff fe09 	bl	8002920 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	4619      	mov	r1, r3
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7ff fe16 	bl	8002946 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002d1a:	f107 0308 	add.w	r3, r7, #8
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff f97a 	bl	8002018 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a1f      	ldr	r2, [pc, #124]	; (8002da4 <LL_USART_Init+0xe8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d102      	bne.n	8002d32 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	61bb      	str	r3, [r7, #24]
 8002d30:	e021      	b.n	8002d76 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a1c      	ldr	r2, [pc, #112]	; (8002da8 <LL_USART_Init+0xec>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d102      	bne.n	8002d40 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	61bb      	str	r3, [r7, #24]
 8002d3e:	e01a      	b.n	8002d76 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a1a      	ldr	r2, [pc, #104]	; (8002dac <LL_USART_Init+0xf0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d102      	bne.n	8002d4e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	61bb      	str	r3, [r7, #24]
 8002d4c:	e013      	b.n	8002d76 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a17      	ldr	r2, [pc, #92]	; (8002db0 <LL_USART_Init+0xf4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d102      	bne.n	8002d5c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	61bb      	str	r3, [r7, #24]
 8002d5a:	e00c      	b.n	8002d76 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a15      	ldr	r2, [pc, #84]	; (8002db4 <LL_USART_Init+0xf8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d102      	bne.n	8002d6a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	61bb      	str	r3, [r7, #24]
 8002d68:	e005      	b.n	8002d76 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a12      	ldr	r2, [pc, #72]	; (8002db8 <LL_USART_Init+0xfc>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d101      	bne.n	8002d76 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00d      	beq.n	8002d98 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d009      	beq.n	8002d98 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8002d84:	2300      	movs	r3, #0
 8002d86:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	699a      	ldr	r2, [r3, #24]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	69b9      	ldr	r1, [r7, #24]
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff fdea 	bl	800296c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002d98:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3720      	adds	r7, #32
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40011000 	.word	0x40011000
 8002da8:	40004400 	.word	0x40004400
 8002dac:	40004800 	.word	0x40004800
 8002db0:	40011400 	.word	0x40011400
 8002db4:	40004c00 	.word	0x40004c00
 8002db8:	40005000 	.word	0x40005000

08002dbc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dce:	4a07      	ldr	r2, [pc, #28]	; (8002dec <LL_InitTick+0x30>)
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <LL_InitTick+0x30>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dda:	4b04      	ldr	r3, [pc, #16]	; (8002dec <LL_InitTick+0x30>)
 8002ddc:	2205      	movs	r2, #5
 8002dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	e000e010 	.word	0xe000e010

08002df0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002df8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7ff ffdd 	bl	8002dbc <LL_InitTick>
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002e14:	4b0e      	ldr	r3, [pc, #56]	; (8002e50 <LL_mDelay+0x44>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002e1a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e22:	d00c      	beq.n	8002e3e <LL_mDelay+0x32>
  {
    Delay++;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3301      	adds	r3, #1
 8002e28:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002e2a:	e008      	b.n	8002e3e <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002e2c:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <LL_mDelay+0x44>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d002      	beq.n	8002e3e <LL_mDelay+0x32>
    {
      Delay--;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1f3      	bne.n	8002e2c <LL_mDelay+0x20>
    }
  }
}
 8002e44:	bf00      	nop
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	e000e010 	.word	0xe000e010

08002e54 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002e5c:	4a04      	ldr	r2, [pc, #16]	; (8002e70 <LL_SetSystemCoreClock+0x1c>)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6013      	str	r3, [r2, #0]
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	20000000 	.word	0x20000000

08002e74 <__libc_init_array>:
 8002e74:	b570      	push	{r4, r5, r6, lr}
 8002e76:	4e0d      	ldr	r6, [pc, #52]	; (8002eac <__libc_init_array+0x38>)
 8002e78:	4c0d      	ldr	r4, [pc, #52]	; (8002eb0 <__libc_init_array+0x3c>)
 8002e7a:	1ba4      	subs	r4, r4, r6
 8002e7c:	10a4      	asrs	r4, r4, #2
 8002e7e:	2500      	movs	r5, #0
 8002e80:	42a5      	cmp	r5, r4
 8002e82:	d109      	bne.n	8002e98 <__libc_init_array+0x24>
 8002e84:	4e0b      	ldr	r6, [pc, #44]	; (8002eb4 <__libc_init_array+0x40>)
 8002e86:	4c0c      	ldr	r4, [pc, #48]	; (8002eb8 <__libc_init_array+0x44>)
 8002e88:	f000 f820 	bl	8002ecc <_init>
 8002e8c:	1ba4      	subs	r4, r4, r6
 8002e8e:	10a4      	asrs	r4, r4, #2
 8002e90:	2500      	movs	r5, #0
 8002e92:	42a5      	cmp	r5, r4
 8002e94:	d105      	bne.n	8002ea2 <__libc_init_array+0x2e>
 8002e96:	bd70      	pop	{r4, r5, r6, pc}
 8002e98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e9c:	4798      	blx	r3
 8002e9e:	3501      	adds	r5, #1
 8002ea0:	e7ee      	b.n	8002e80 <__libc_init_array+0xc>
 8002ea2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ea6:	4798      	blx	r3
 8002ea8:	3501      	adds	r5, #1
 8002eaa:	e7f2      	b.n	8002e92 <__libc_init_array+0x1e>
 8002eac:	08002f24 	.word	0x08002f24
 8002eb0:	08002f24 	.word	0x08002f24
 8002eb4:	08002f24 	.word	0x08002f24
 8002eb8:	08002f28 	.word	0x08002f28

08002ebc <memset>:
 8002ebc:	4402      	add	r2, r0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d100      	bne.n	8002ec6 <memset+0xa>
 8002ec4:	4770      	bx	lr
 8002ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eca:	e7f9      	b.n	8002ec0 <memset+0x4>

08002ecc <_init>:
 8002ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ece:	bf00      	nop
 8002ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ed2:	bc08      	pop	{r3}
 8002ed4:	469e      	mov	lr, r3
 8002ed6:	4770      	bx	lr

08002ed8 <_fini>:
 8002ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eda:	bf00      	nop
 8002edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ede:	bc08      	pop	{r3}
 8002ee0:	469e      	mov	lr, r3
 8002ee2:	4770      	bx	lr
