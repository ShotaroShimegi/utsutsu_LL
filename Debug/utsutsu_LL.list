
utsutsu_LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d8c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002f14  08002f14  00012f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f4c  08002f4c  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  08002f4c  08002f4c  00012f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f54  08002f54  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f54  08002f54  00012f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f58  08002f58  00012f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08002f60  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08002f60  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000802f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a98  00000000  00000000  00028063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  00029b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b0  00000000  00000000  0002a3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020fd  00000000  00000000  0002ab58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000076b4  00000000  00000000  0002cc55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b6ea  00000000  00000000  00034309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf9f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022a4  00000000  00000000  000cfa48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002efc 	.word	0x08002efc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002efc 	.word	0x08002efc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80004c0:	b490      	push	{r4, r7}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	332c      	adds	r3, #44	; 0x2c
 80004d0:	4619      	mov	r1, r3
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80004d8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80004dc:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004de:	697a      	ldr	r2, [r7, #20]
 80004e0:	fa92 f2a2 	rbit	r2, r2
 80004e4:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80004e6:	693a      	ldr	r2, [r7, #16]
 80004e8:	fab2 f282 	clz	r2, r2
 80004ec:	b2d2      	uxtb	r2, r2
 80004ee:	40d3      	lsrs	r3, r2
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	440b      	add	r3, r1
 80004f4:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 80004f6:	6822      	ldr	r2, [r4, #0]
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	f003 031f 	and.w	r3, r3, #31
 80004fe:	211f      	movs	r1, #31
 8000500:	fa01 f303 	lsl.w	r3, r1, r3
 8000504:	43db      	mvns	r3, r3
 8000506:	401a      	ands	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f003 011f 	and.w	r1, r3, #31
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	f003 031f 	and.w	r3, r3, #31
 8000514:	fa01 f303 	lsl.w	r3, r1, r3
 8000518:	4313      	orrs	r3, r2
 800051a:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800051c:	bf00      	nop
 800051e:	3718      	adds	r7, #24
 8000520:	46bd      	mov	sp, r7
 8000522:	bc90      	pop	{r4, r7}
 8000524:	4770      	bx	lr

08000526 <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 8000526:	b480      	push	{r7}
 8000528:	b083      	sub	sp, #12
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
 800052e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	689b      	ldr	r3, [r3, #8]
 8000534:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	431a      	orrs	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	609a      	str	r2, [r3, #8]
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800054c:	b490      	push	{r4, r7}
 800054e:	b08a      	sub	sp, #40	; 0x28
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	330c      	adds	r3, #12
 800055c:	4619      	mov	r1, r3
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000564:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000568:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800056a:	697a      	ldr	r2, [r7, #20]
 800056c:	fa92 f2a2 	rbit	r2, r2
 8000570:	613a      	str	r2, [r7, #16]
  return result;
 8000572:	693a      	ldr	r2, [r7, #16]
 8000574:	fab2 f282 	clz	r2, r2
 8000578:	b2d2      	uxtb	r2, r2
 800057a:	40d3      	lsrs	r3, r2
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	440b      	add	r3, r1
 8000580:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8000582:	6822      	ldr	r2, [r4, #0]
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800058a:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800058e:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000590:	69f9      	ldr	r1, [r7, #28]
 8000592:	fa91 f1a1 	rbit	r1, r1
 8000596:	61b9      	str	r1, [r7, #24]
  return result;
 8000598:	69b9      	ldr	r1, [r7, #24]
 800059a:	fab1 f181 	clz	r1, r1
 800059e:	b2c9      	uxtb	r1, r1
 80005a0:	40cb      	lsrs	r3, r1
 80005a2:	2107      	movs	r1, #7
 80005a4:	fa01 f303 	lsl.w	r3, r1, r3
 80005a8:	43db      	mvns	r3, r3
 80005aa:	401a      	ands	r2, r3
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80005b2:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80005b6:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80005ba:	fa91 f1a1 	rbit	r1, r1
 80005be:	6239      	str	r1, [r7, #32]
  return result;
 80005c0:	6a39      	ldr	r1, [r7, #32]
 80005c2:	fab1 f181 	clz	r1, r1
 80005c6:	b2c9      	uxtb	r1, r1
 80005c8:	40cb      	lsrs	r3, r1
 80005ca:	6879      	ldr	r1, [r7, #4]
 80005cc:	fa01 f303 	lsl.w	r3, r1, r3
 80005d0:	4313      	orrs	r3, r2
 80005d2:	6023      	str	r3, [r4, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80005d4:	bf00      	nop
 80005d6:	3728      	adds	r7, #40	; 0x28
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc90      	pop	{r4, r7}
 80005dc:	4770      	bx	lr
	...

080005e0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ec:	4907      	ldr	r1, [pc, #28]	; (800060c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4313      	orrs	r3, r2
 80005f2:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4013      	ands	r3, r2
 80005fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005fe:	68fb      	ldr	r3, [r7, #12]
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	40023800 	.word	0x40023800

08000610 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <LL_APB2_GRP1_EnableClock+0x2c>)
 800061a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800061c:	4907      	ldr	r1, [pc, #28]	; (800063c <LL_APB2_GRP1_EnableClock+0x2c>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4313      	orrs	r3, r2
 8000622:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000626:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4013      	ands	r3, r2
 800062c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800062e:	68fb      	ldr	r3, [r7, #12]
}
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	40023800 	.word	0x40023800

08000640 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b092      	sub	sp, #72	; 0x48
 8000644:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000646:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000652:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000662:	f107 0318 	add.w	r3, r7, #24
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	463b      	mov	r3, r7
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]
 800067e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000680:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000684:	f7ff ffc4 	bl	8000610 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000688:	2001      	movs	r0, #1
 800068a:	f7ff ffa9 	bl	80005e0 <LL_AHB1_GRP1_EnableClock>
  PA1   ------> ADC1_IN1
  PA2   ------> ADC1_IN2
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  */
  GPIO_InitStruct.Pin = AD_FR_Pin|AD_R_Pin|AD_FF_Pin|AD_L_Pin
 800068e:	2337      	movs	r3, #55	; 0x37
 8000690:	603b      	str	r3, [r7, #0]
                          |AD_FL_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000692:	2303      	movs	r3, #3
 8000694:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069a:	463b      	mov	r3, r7
 800069c:	4619      	mov	r1, r3
 800069e:	481f      	ldr	r0, [pc, #124]	; (800071c <MX_ADC1_Init+0xdc>)
 80006a0:	f001 fbfb 	bl	8001e9a <LL_GPIO_Init>

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80006a8:	2300      	movs	r3, #0
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80006b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006b4:	4619      	mov	r1, r3
 80006b6:	481a      	ldr	r0, [pc, #104]	; (8000720 <MX_ADC1_Init+0xe0>)
 80006b8:	f001 fa7c 	bl	8001bb4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80006bc:	2300      	movs	r3, #0
 80006be:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80006d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006d4:	4619      	mov	r1, r3
 80006d6:	4812      	ldr	r0, [pc, #72]	; (8000720 <MX_ADC1_Init+0xe0>)
 80006d8:	f001 fa98 	bl	8001c0c <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 80006dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e0:	480f      	ldr	r0, [pc, #60]	; (8000720 <MX_ADC1_Init+0xe0>)
 80006e2:	f7ff ff20 	bl	8000526 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80006ee:	f107 0318 	add.w	r3, r7, #24
 80006f2:	4619      	mov	r1, r3
 80006f4:	480b      	ldr	r0, [pc, #44]	; (8000724 <MX_ADC1_Init+0xe4>)
 80006f6:	f001 fa15 	bl	8001b24 <LL_ADC_CommonInit>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 80006fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80006fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000702:	4807      	ldr	r0, [pc, #28]	; (8000720 <MX_ADC1_Init+0xe0>)
 8000704:	f7ff fedc 	bl	80004c0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8000708:	2200      	movs	r2, #0
 800070a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800070e:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_ADC1_Init+0xe0>)
 8000710:	f7ff ff1c 	bl	800054c <LL_ADC_SetChannelSamplingTime>

}
 8000714:	bf00      	nop
 8000716:	3748      	adds	r7, #72	; 0x48
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40020000 	.word	0x40020000
 8000720:	40012000 	.word	0x40012000
 8000724:	40012300 	.word	0x40012300

08000728 <LL_AHB1_GRP1_EnableClock>:
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000732:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000734:	4907      	ldr	r1, [pc, #28]	; (8000754 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4313      	orrs	r3, r2
 800073a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800073e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4013      	ands	r3, r2
 8000744:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000746:	68fb      	ldr	r3, [r7, #12]
}
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	40023800 	.word	0x40023800

08000758 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	041a      	lsls	r2, r3, #16
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	619a      	str	r2, [r3, #24]
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
	...

08000778 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	463b      	mov	r3, r7
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
 800078c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800078e:	2004      	movs	r0, #4
 8000790:	f7ff ffca 	bl	8000728 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000794:	2001      	movs	r0, #1
 8000796:	f7ff ffc7 	bl	8000728 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800079a:	2002      	movs	r0, #2
 800079c:	f7ff ffc4 	bl	8000728 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80007a0:	2008      	movs	r0, #8
 80007a2:	f7ff ffc1 	bl	8000728 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, FrontRight_Pin|Right_Pin|STBY_Pin|LED3_Pin);
 80007a6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80007aa:	4830      	ldr	r0, [pc, #192]	; (800086c <MX_GPIO_Init+0xf4>)
 80007ac:	f7ff ffd4 	bl	8000758 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, FrontCenter_Pin|Left_Pin|FrontLeft_Pin|RIGHT_DIR1_Pin
 80007b0:	f24c 01c8 	movw	r1, #49352	; 0xc0c8
 80007b4:	482e      	ldr	r0, [pc, #184]	; (8000870 <MX_GPIO_Init+0xf8>)
 80007b6:	f7ff ffcf 	bl	8000758 <LL_GPIO_ResetOutputPin>
                          |RIGHT_DIR2_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LEFT_DIR1_Pin|LEFT_DIR2_Pin|LED1_Pin|LED2_Pin
 80007ba:	f24c 0133 	movw	r1, #49203	; 0xc033
 80007be:	482d      	ldr	r0, [pc, #180]	; (8000874 <MX_GPIO_Init+0xfc>)
 80007c0:	f7ff ffca 	bl	8000758 <LL_GPIO_ResetOutputPin>
                          |LED4_Pin|LED5_Pin);

  /**/
  LL_GPIO_ResetOutputPin(SPI_CS_GPIO_Port, SPI_CS_Pin);
 80007c4:	2104      	movs	r1, #4
 80007c6:	482c      	ldr	r0, [pc, #176]	; (8000878 <MX_GPIO_Init+0x100>)
 80007c8:	f7ff ffc6 	bl	8000758 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = FrontRight_Pin|Right_Pin|STBY_Pin|LED3_Pin;
 80007cc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80007d0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007d2:	2301      	movs	r3, #1
 80007d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e2:	463b      	mov	r3, r7
 80007e4:	4619      	mov	r1, r3
 80007e6:	4821      	ldr	r0, [pc, #132]	; (800086c <MX_GPIO_Init+0xf4>)
 80007e8:	f001 fb57 	bl	8001e9a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FrontCenter_Pin|Left_Pin|FrontLeft_Pin|RIGHT_DIR1_Pin
 80007ec:	f24c 03c8 	movw	r3, #49352	; 0xc0c8
 80007f0:	603b      	str	r3, [r7, #0]
                          |RIGHT_DIR2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007f2:	2301      	movs	r3, #1
 80007f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000802:	463b      	mov	r3, r7
 8000804:	4619      	mov	r1, r3
 8000806:	481a      	ldr	r0, [pc, #104]	; (8000870 <MX_GPIO_Init+0xf8>)
 8000808:	f001 fb47 	bl	8001e9a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LEFT_DIR1_Pin|LEFT_DIR2_Pin|LED1_Pin|LED2_Pin
 800080c:	f24c 0333 	movw	r3, #49203	; 0xc033
 8000810:	603b      	str	r3, [r7, #0]
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000812:	2301      	movs	r3, #1
 8000814:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000822:	463b      	mov	r3, r7
 8000824:	4619      	mov	r1, r3
 8000826:	4813      	ldr	r0, [pc, #76]	; (8000874 <MX_GPIO_Init+0xfc>)
 8000828:	f001 fb37 	bl	8001e9a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800082c:	2304      	movs	r3, #4
 800082e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000830:	2301      	movs	r3, #1
 8000832:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000840:	463b      	mov	r3, r7
 8000842:	4619      	mov	r1, r3
 8000844:	480c      	ldr	r0, [pc, #48]	; (8000878 <MX_GPIO_Init+0x100>)
 8000846:	f001 fb28 	bl	8001e9a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800084a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800084e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_GPIO_Init+0xfc>)
 800085e:	f001 fb1c 	bl	8001e9a <LL_GPIO_Init>

}
 8000862:	bf00      	nop
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40020800 	.word	0x40020800
 8000870:	40020000 	.word	0x40020000
 8000874:	40020400 	.word	0x40020400
 8000878:	40020c00 	.word	0x40020c00

0800087c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <__NVIC_SetPriorityGrouping+0x44>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000898:	4013      	ands	r3, r2
 800089a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ae:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <__NVIC_SetPriorityGrouping+0x44>)
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	60d3      	str	r3, [r2, #12]
}
 80008b4:	bf00      	nop
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <LL_RCC_HSI_Enable+0x1c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <LL_RCC_HSI_Enable+0x1c>)
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	6013      	str	r3, [r2, #0]
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <LL_RCC_HSI_IsReady+0x20>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f003 0302 	and.w	r3, r3, #2
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	bf0c      	ite	eq
 80008f4:	2301      	moveq	r3, #1
 80008f6:	2300      	movne	r3, #0
 80008f8:	b2db      	uxtb	r3, r3
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	40023800 	.word	0x40023800

08000908 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	4904      	ldr	r1, [pc, #16]	; (8000930 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800091e:	4313      	orrs	r3, r2
 8000920:	600b      	str	r3, [r1, #0]
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800

08000934 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <LL_RCC_SetSysClkSource+0x24>)
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	f023 0203 	bic.w	r2, r3, #3
 8000944:	4904      	ldr	r1, [pc, #16]	; (8000958 <LL_RCC_SetSysClkSource+0x24>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4313      	orrs	r3, r2
 800094a:	608b      	str	r3, [r1, #8]
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	40023800 	.word	0x40023800

0800095c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000960:	4b04      	ldr	r3, [pc, #16]	; (8000974 <LL_RCC_GetSysClkSource+0x18>)
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	f003 030c 	and.w	r3, r3, #12
}
 8000968:	4618      	mov	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800

08000978 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <LL_RCC_SetAHBPrescaler+0x24>)
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000988:	4904      	ldr	r1, [pc, #16]	; (800099c <LL_RCC_SetAHBPrescaler+0x24>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4313      	orrs	r3, r2
 800098e:	608b      	str	r3, [r1, #8]
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	40023800 	.word	0x40023800

080009a0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80009b0:	4904      	ldr	r1, [pc, #16]	; (80009c4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	608b      	str	r3, [r1, #8]
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	40023800 	.word	0x40023800

080009c8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <LL_RCC_SetAPB2Prescaler+0x24>)
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80009d8:	4904      	ldr	r1, [pc, #16]	; (80009ec <LL_RCC_SetAPB2Prescaler+0x24>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4313      	orrs	r3, r2
 80009de:	608b      	str	r3, [r1, #8]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	40023800 	.word	0x40023800

080009f0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <LL_RCC_PLL_Enable+0x1c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <LL_RCC_PLL_Enable+0x1c>)
 80009fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009fe:	6013      	str	r3, [r2, #0]
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <LL_RCC_PLL_IsReady+0x24>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000a20:	bf0c      	ite	eq
 8000a22:	2301      	moveq	r3, #1
 8000a24:	2300      	movne	r3, #0
 8000a26:	b2db      	uxtb	r3, r3
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
 8000a44:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000a48:	685a      	ldr	r2, [r3, #4]
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	68f9      	ldr	r1, [r7, #12]
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	4311      	orrs	r1, r2
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	0192      	lsls	r2, r2, #6
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	4908      	ldr	r1, [pc, #32]	; (8000a7c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000a68:	4904      	ldr	r1, [pc, #16]	; (8000a7c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000a70:	bf00      	nop
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	ffbf8000 	.word	0xffbf8000

08000a84 <LL_APB1_GRP1_EnableClock>:
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a90:	4907      	ldr	r1, [pc, #28]	; (8000ab0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <LL_APB2_GRP1_EnableClock>:
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000abe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ac0:	4907      	ldr	r1, [pc, #28]	; (8000ae0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000aca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	40023800 	.word	0x40023800

08000ae4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <LL_FLASH_SetLatency+0x24>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f023 020f 	bic.w	r2, r3, #15
 8000af4:	4904      	ldr	r1, [pc, #16]	; (8000b08 <LL_FLASH_SetLatency+0x24>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	600b      	str	r3, [r1, #0]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	40023c00 	.word	0x40023c00

08000b0c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <LL_FLASH_GetLatency+0x18>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f003 030f 	and.w	r3, r3, #15
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40023c00 	.word	0x40023c00

08000b28 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000b38:	4904      	ldr	r1, [pc, #16]	; (8000b4c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	600b      	str	r3, [r1, #0]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	40007000 	.word	0x40007000

08000b50 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f043 0201 	orr.w	r2, r3, #1
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	601a      	str	r2, [r3, #0]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	f043 0201 	orr.w	r2, r3, #1
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	60da      	str	r2, [r3, #12]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000b94:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b98:	f7ff ff8c 	bl	8000ab4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000b9c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000ba0:	f7ff ff70 	bl	8000a84 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f7ff fe69 	bl	800087c <__NVIC_SetPriorityGrouping>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000baa:	f000 f831 	bl	8000c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bae:	f7ff fde3 	bl	8000778 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000bb2:	f7ff fd45 	bl	8000640 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000bb6:	f000 fb93 	bl	80012e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bba:	f000 fc2b 	bl	8001414 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bbe:	f000 fc9f 	bl	8001500 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000bc2:	f000 fd17 	bl	80015f4 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000bc6:	f000 fdb9 	bl	800173c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000bca:	f000 ff0b 	bl	80019e4 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8000bce:	f000 f8a9 	bl	8000d24 <MX_SPI3_Init>
  MX_TIM11_Init();
 8000bd2:	f000 fe4b 	bl	800186c <MX_TIM11_Init>
  MX_TIM6_Init();
 8000bd6:	f000 fd87 	bl	80016e8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  LL_TIM_EnableIT_UPDATE(TIM6);
 8000bda:	480b      	ldr	r0, [pc, #44]	; (8000c08 <main+0x78>)
 8000bdc:	f7ff ffc8 	bl	8000b70 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM6);
 8000be0:	4809      	ldr	r0, [pc, #36]	; (8000c08 <main+0x78>)
 8000be2:	f7ff ffb5 	bl	8000b50 <LL_TIM_EnableCounter>
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  LED1_GPIO_Port->BSRR = LED1_Pin;
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <main+0x7c>)
 8000be8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bec:	619a      	str	r2, [r3, #24]
	  LL_mDelay(500);
 8000bee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bf2:	f002 f921 	bl	8002e38 <LL_mDelay>
	  LED1_GPIO_Port->BSRR = (LED1_Pin << 16);
 8000bf6:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <main+0x7c>)
 8000bf8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bfc:	619a      	str	r2, [r3, #24]
	  LL_mDelay(500);
 8000bfe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c02:	f002 f919 	bl	8002e38 <LL_mDelay>
	  LED1_GPIO_Port->BSRR = LED1_Pin;
 8000c06:	e7ee      	b.n	8000be6 <main+0x56>
 8000c08:	40001000 	.word	0x40001000
 8000c0c:	40020400 	.word	0x40020400

08000c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8000c14:	2005      	movs	r0, #5
 8000c16:	f7ff ff65 	bl	8000ae4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8000c1a:	bf00      	nop
 8000c1c:	f7ff ff76 	bl	8000b0c <LL_FLASH_GetLatency>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b05      	cmp	r3, #5
 8000c24:	d1fa      	bne.n	8000c1c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000c26:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c2a:	f7ff ff7d 	bl	8000b28 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000c2e:	2010      	movs	r0, #16
 8000c30:	f7ff fe6a 	bl	8000908 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000c34:	f7ff fe46 	bl	80008c4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000c38:	bf00      	nop
 8000c3a:	f7ff fe53 	bl	80008e4 <LL_RCC_HSI_IsReady>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d1fa      	bne.n	8000c3a <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 168, LL_RCC_PLLP_DIV_2);
 8000c44:	2300      	movs	r3, #0
 8000c46:	22a8      	movs	r2, #168	; 0xa8
 8000c48:	2108      	movs	r1, #8
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f7ff fef4 	bl	8000a38 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000c50:	f7ff fece 	bl	80009f0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000c54:	bf00      	nop
 8000c56:	f7ff fedb 	bl	8000a10 <LL_RCC_PLL_IsReady>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d1fa      	bne.n	8000c56 <SystemClock_Config+0x46>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000c60:	2000      	movs	r0, #0
 8000c62:	f7ff fe89 	bl	8000978 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000c66:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000c6a:	f7ff fe99 	bl	80009a0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_4);
 8000c6e:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 8000c72:	f7ff fea9 	bl	80009c8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000c76:	2002      	movs	r0, #2
 8000c78:	f7ff fe5c 	bl	8000934 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000c7c:	bf00      	nop
 8000c7e:	f7ff fe6d 	bl	800095c <LL_RCC_GetSysClkSource>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b08      	cmp	r3, #8
 8000c86:	d1fa      	bne.n	8000c7e <SystemClock_Config+0x6e>
  {

  }
  LL_Init1msTick(168000000);
 8000c88:	4803      	ldr	r0, [pc, #12]	; (8000c98 <SystemClock_Config+0x88>)
 8000c8a:	f002 f8c7 	bl	8002e1c <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 8000c8e:	4802      	ldr	r0, [pc, #8]	; (8000c98 <SystemClock_Config+0x88>)
 8000c90:	f002 f8f8 	bl	8002e84 <LL_SetSystemCoreClock>
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	0a037a00 	.word	0x0a037a00

08000c9c <LL_AHB1_GRP1_EnableClock>:
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ca8:	4907      	ldr	r1, [pc, #28]	; (8000cc8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cba:	68fb      	ldr	r3, [r7, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	40023800 	.word	0x40023800

08000ccc <LL_APB1_GRP1_EnableClock>:
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000cd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cd8:	4907      	ldr	r1, [pc, #28]	; (8000cf8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cea:	68fb      	ldr	r3, [r7, #12]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	40023800 	.word	0x40023800

08000cfc <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f023 0210 	bic.w	r2, r3, #16
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	431a      	orrs	r2, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	605a      	str	r2, [r3, #4]
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
	...

08000d24 <MX_SPI3_Init>:

/* USER CODE END 0 */

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b090      	sub	sp, #64	; 0x40
 8000d28:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000d2a:	f107 0318 	add.w	r3, r7, #24
 8000d2e:	2228      	movs	r2, #40	; 0x28
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f002 f8da 	bl	8002eec <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	463b      	mov	r3, r7
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]
 8000d46:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8000d48:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000d4c:	f7ff ffbe 	bl	8000ccc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000d50:	2004      	movs	r0, #4
 8000d52:	f7ff ffa3 	bl	8000c9c <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8000d56:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d5a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8000d6c:	2306      	movs	r3, #6
 8000d6e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d70:	463b      	mov	r3, r7
 8000d72:	4619      	mov	r1, r3
 8000d74:	4813      	ldr	r0, [pc, #76]	; (8000dc4 <MX_SPI3_Init+0xa0>)
 8000d76:	f001 f890 	bl	8001e9a <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000d7e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000d82:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000d84:	2300      	movs	r3, #0
 8000d86:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000d90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8000d96:	2300      	movs	r3, #0
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8000da2:	230a      	movs	r3, #10
 8000da4:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8000da6:	f107 0318 	add.w	r3, r7, #24
 8000daa:	4619      	mov	r1, r3
 8000dac:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <MX_SPI3_Init+0xa4>)
 8000dae:	f001 fa44 	bl	800223a <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8000db2:	2100      	movs	r1, #0
 8000db4:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <MX_SPI3_Init+0xa4>)
 8000db6:	f7ff ffa1 	bl	8000cfc <LL_SPI_SetStandard>

}
 8000dba:	bf00      	nop
 8000dbc:	3740      	adds	r7, #64	; 0x40
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40020800 	.word	0x40020800
 8000dc8:	40003c00 	.word	0x40003c00

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <SystemInit+0x28>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2e:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <SystemInit+0x28>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <SystemInit+0x28>)
 8000e3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e3e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <LL_AHB1_GRP1_EnableClock>:
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e5c:	4907      	ldr	r1, [pc, #28]	; (8000e7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	40023800 	.word	0x40023800

08000e80 <LL_APB1_GRP1_EnableClock>:
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e8c:	4907      	ldr	r1, [pc, #28]	; (8000eac <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	40023800 	.word	0x40023800

08000eb0 <LL_APB2_GRP1_EnableClock>:
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <LL_APB2_GRP1_EnableClock+0x2c>)
 8000eba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ebc:	4907      	ldr	r1, [pc, #28]	; (8000edc <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ec6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ece:	68fb      	ldr	r3, [r7, #12]
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	40023800 	.word	0x40023800

08000ee0 <LL_TIM_DisableARRPreload>:
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	601a      	str	r2, [r3, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <LL_TIM_OC_DisableFast>:
{
 8000f00:	b4b0      	push	{r4, r5, r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d01c      	beq.n	8000f4a <LL_TIM_OC_DisableFast+0x4a>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	d017      	beq.n	8000f46 <LL_TIM_OC_DisableFast+0x46>
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	2b10      	cmp	r3, #16
 8000f1a:	d012      	beq.n	8000f42 <LL_TIM_OC_DisableFast+0x42>
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	2b40      	cmp	r3, #64	; 0x40
 8000f20:	d00d      	beq.n	8000f3e <LL_TIM_OC_DisableFast+0x3e>
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f28:	d007      	beq.n	8000f3a <LL_TIM_OC_DisableFast+0x3a>
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f30:	d101      	bne.n	8000f36 <LL_TIM_OC_DisableFast+0x36>
 8000f32:	2305      	movs	r3, #5
 8000f34:	e00a      	b.n	8000f4c <LL_TIM_OC_DisableFast+0x4c>
 8000f36:	2306      	movs	r3, #6
 8000f38:	e008      	b.n	8000f4c <LL_TIM_OC_DisableFast+0x4c>
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	e006      	b.n	8000f4c <LL_TIM_OC_DisableFast+0x4c>
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e004      	b.n	8000f4c <LL_TIM_OC_DisableFast+0x4c>
 8000f42:	2302      	movs	r3, #2
 8000f44:	e002      	b.n	8000f4c <LL_TIM_OC_DisableFast+0x4c>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <LL_TIM_OC_DisableFast+0x4c>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3318      	adds	r3, #24
 8000f52:	461a      	mov	r2, r3
 8000f54:	4629      	mov	r1, r5
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <LL_TIM_OC_DisableFast+0x7c>)
 8000f58:	5c5b      	ldrb	r3, [r3, r1]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000f5e:	6822      	ldr	r2, [r4, #0]
 8000f60:	4629      	mov	r1, r5
 8000f62:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <LL_TIM_OC_DisableFast+0x80>)
 8000f64:	5c5b      	ldrb	r3, [r3, r1]
 8000f66:	4619      	mov	r1, r3
 8000f68:	2304      	movs	r3, #4
 8000f6a:	408b      	lsls	r3, r1
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	4013      	ands	r3, r2
 8000f70:	6023      	str	r3, [r4, #0]
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bcb0      	pop	{r4, r5, r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	08002f2c 	.word	0x08002f2c
 8000f80:	08002f34 	.word	0x08002f34

08000f84 <LL_TIM_OC_EnablePreload>:
{
 8000f84:	b4b0      	push	{r4, r5, r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d01c      	beq.n	8000fce <LL_TIM_OC_EnablePreload+0x4a>
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	d017      	beq.n	8000fca <LL_TIM_OC_EnablePreload+0x46>
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	2b10      	cmp	r3, #16
 8000f9e:	d012      	beq.n	8000fc6 <LL_TIM_OC_EnablePreload+0x42>
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	2b40      	cmp	r3, #64	; 0x40
 8000fa4:	d00d      	beq.n	8000fc2 <LL_TIM_OC_EnablePreload+0x3e>
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fac:	d007      	beq.n	8000fbe <LL_TIM_OC_EnablePreload+0x3a>
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fb4:	d101      	bne.n	8000fba <LL_TIM_OC_EnablePreload+0x36>
 8000fb6:	2305      	movs	r3, #5
 8000fb8:	e00a      	b.n	8000fd0 <LL_TIM_OC_EnablePreload+0x4c>
 8000fba:	2306      	movs	r3, #6
 8000fbc:	e008      	b.n	8000fd0 <LL_TIM_OC_EnablePreload+0x4c>
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	e006      	b.n	8000fd0 <LL_TIM_OC_EnablePreload+0x4c>
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e004      	b.n	8000fd0 <LL_TIM_OC_EnablePreload+0x4c>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e002      	b.n	8000fd0 <LL_TIM_OC_EnablePreload+0x4c>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <LL_TIM_OC_EnablePreload+0x4c>
 8000fce:	2300      	movs	r3, #0
 8000fd0:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3318      	adds	r3, #24
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4629      	mov	r1, r5
 8000fda:	4b09      	ldr	r3, [pc, #36]	; (8001000 <LL_TIM_OC_EnablePreload+0x7c>)
 8000fdc:	5c5b      	ldrb	r3, [r3, r1]
 8000fde:	4413      	add	r3, r2
 8000fe0:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000fe2:	6822      	ldr	r2, [r4, #0]
 8000fe4:	4629      	mov	r1, r5
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <LL_TIM_OC_EnablePreload+0x80>)
 8000fe8:	5c5b      	ldrb	r3, [r3, r1]
 8000fea:	4619      	mov	r1, r3
 8000fec:	2308      	movs	r3, #8
 8000fee:	408b      	lsls	r3, r1
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	6023      	str	r3, [r4, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bcb0      	pop	{r4, r5, r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	08002f2c 	.word	0x08002f2c
 8001004:	08002f34 	.word	0x08002f34

08001008 <LL_TIM_IC_SetActiveInput>:
{
 8001008:	b4b0      	push	{r4, r5, r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d01c      	beq.n	8001054 <LL_TIM_IC_SetActiveInput+0x4c>
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	2b04      	cmp	r3, #4
 800101e:	d017      	beq.n	8001050 <LL_TIM_IC_SetActiveInput+0x48>
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	2b10      	cmp	r3, #16
 8001024:	d012      	beq.n	800104c <LL_TIM_IC_SetActiveInput+0x44>
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	2b40      	cmp	r3, #64	; 0x40
 800102a:	d00d      	beq.n	8001048 <LL_TIM_IC_SetActiveInput+0x40>
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001032:	d007      	beq.n	8001044 <LL_TIM_IC_SetActiveInput+0x3c>
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800103a:	d101      	bne.n	8001040 <LL_TIM_IC_SetActiveInput+0x38>
 800103c:	2305      	movs	r3, #5
 800103e:	e00a      	b.n	8001056 <LL_TIM_IC_SetActiveInput+0x4e>
 8001040:	2306      	movs	r3, #6
 8001042:	e008      	b.n	8001056 <LL_TIM_IC_SetActiveInput+0x4e>
 8001044:	2304      	movs	r3, #4
 8001046:	e006      	b.n	8001056 <LL_TIM_IC_SetActiveInput+0x4e>
 8001048:	2303      	movs	r3, #3
 800104a:	e004      	b.n	8001056 <LL_TIM_IC_SetActiveInput+0x4e>
 800104c:	2302      	movs	r3, #2
 800104e:	e002      	b.n	8001056 <LL_TIM_IC_SetActiveInput+0x4e>
 8001050:	2301      	movs	r3, #1
 8001052:	e000      	b.n	8001056 <LL_TIM_IC_SetActiveInput+0x4e>
 8001054:	2300      	movs	r3, #0
 8001056:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3318      	adds	r3, #24
 800105c:	461a      	mov	r2, r3
 800105e:	4629      	mov	r1, r5
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <LL_TIM_IC_SetActiveInput+0x8c>)
 8001062:	5c5b      	ldrb	r3, [r3, r1]
 8001064:	4413      	add	r3, r2
 8001066:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001068:	6822      	ldr	r2, [r4, #0]
 800106a:	4629      	mov	r1, r5
 800106c:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <LL_TIM_IC_SetActiveInput+0x90>)
 800106e:	5c5b      	ldrb	r3, [r3, r1]
 8001070:	4619      	mov	r1, r3
 8001072:	2303      	movs	r3, #3
 8001074:	408b      	lsls	r3, r1
 8001076:	43db      	mvns	r3, r3
 8001078:	401a      	ands	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	0c1b      	lsrs	r3, r3, #16
 800107e:	4628      	mov	r0, r5
 8001080:	4905      	ldr	r1, [pc, #20]	; (8001098 <LL_TIM_IC_SetActiveInput+0x90>)
 8001082:	5c09      	ldrb	r1, [r1, r0]
 8001084:	408b      	lsls	r3, r1
 8001086:	4313      	orrs	r3, r2
 8001088:	6023      	str	r3, [r4, #0]
}
 800108a:	bf00      	nop
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	bcb0      	pop	{r4, r5, r7}
 8001092:	4770      	bx	lr
 8001094:	08002f2c 	.word	0x08002f2c
 8001098:	08002f3c 	.word	0x08002f3c

0800109c <LL_TIM_IC_SetPrescaler>:
{
 800109c:	b4b0      	push	{r4, r5, r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d01c      	beq.n	80010e8 <LL_TIM_IC_SetPrescaler+0x4c>
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d017      	beq.n	80010e4 <LL_TIM_IC_SetPrescaler+0x48>
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	2b10      	cmp	r3, #16
 80010b8:	d012      	beq.n	80010e0 <LL_TIM_IC_SetPrescaler+0x44>
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	2b40      	cmp	r3, #64	; 0x40
 80010be:	d00d      	beq.n	80010dc <LL_TIM_IC_SetPrescaler+0x40>
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010c6:	d007      	beq.n	80010d8 <LL_TIM_IC_SetPrescaler+0x3c>
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ce:	d101      	bne.n	80010d4 <LL_TIM_IC_SetPrescaler+0x38>
 80010d0:	2305      	movs	r3, #5
 80010d2:	e00a      	b.n	80010ea <LL_TIM_IC_SetPrescaler+0x4e>
 80010d4:	2306      	movs	r3, #6
 80010d6:	e008      	b.n	80010ea <LL_TIM_IC_SetPrescaler+0x4e>
 80010d8:	2304      	movs	r3, #4
 80010da:	e006      	b.n	80010ea <LL_TIM_IC_SetPrescaler+0x4e>
 80010dc:	2303      	movs	r3, #3
 80010de:	e004      	b.n	80010ea <LL_TIM_IC_SetPrescaler+0x4e>
 80010e0:	2302      	movs	r3, #2
 80010e2:	e002      	b.n	80010ea <LL_TIM_IC_SetPrescaler+0x4e>
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <LL_TIM_IC_SetPrescaler+0x4e>
 80010e8:	2300      	movs	r3, #0
 80010ea:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	3318      	adds	r3, #24
 80010f0:	461a      	mov	r2, r3
 80010f2:	4629      	mov	r1, r5
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <LL_TIM_IC_SetPrescaler+0x8c>)
 80010f6:	5c5b      	ldrb	r3, [r3, r1]
 80010f8:	4413      	add	r3, r2
 80010fa:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80010fc:	6822      	ldr	r2, [r4, #0]
 80010fe:	4629      	mov	r1, r5
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <LL_TIM_IC_SetPrescaler+0x90>)
 8001102:	5c5b      	ldrb	r3, [r3, r1]
 8001104:	4619      	mov	r1, r3
 8001106:	230c      	movs	r3, #12
 8001108:	408b      	lsls	r3, r1
 800110a:	43db      	mvns	r3, r3
 800110c:	401a      	ands	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	0c1b      	lsrs	r3, r3, #16
 8001112:	4628      	mov	r0, r5
 8001114:	4905      	ldr	r1, [pc, #20]	; (800112c <LL_TIM_IC_SetPrescaler+0x90>)
 8001116:	5c09      	ldrb	r1, [r1, r0]
 8001118:	408b      	lsls	r3, r1
 800111a:	4313      	orrs	r3, r2
 800111c:	6023      	str	r3, [r4, #0]
}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	bcb0      	pop	{r4, r5, r7}
 8001126:	4770      	bx	lr
 8001128:	08002f2c 	.word	0x08002f2c
 800112c:	08002f3c 	.word	0x08002f3c

08001130 <LL_TIM_IC_SetFilter>:
{
 8001130:	b4b0      	push	{r4, r5, r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d01c      	beq.n	800117c <LL_TIM_IC_SetFilter+0x4c>
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	2b04      	cmp	r3, #4
 8001146:	d017      	beq.n	8001178 <LL_TIM_IC_SetFilter+0x48>
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	2b10      	cmp	r3, #16
 800114c:	d012      	beq.n	8001174 <LL_TIM_IC_SetFilter+0x44>
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	2b40      	cmp	r3, #64	; 0x40
 8001152:	d00d      	beq.n	8001170 <LL_TIM_IC_SetFilter+0x40>
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800115a:	d007      	beq.n	800116c <LL_TIM_IC_SetFilter+0x3c>
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001162:	d101      	bne.n	8001168 <LL_TIM_IC_SetFilter+0x38>
 8001164:	2305      	movs	r3, #5
 8001166:	e00a      	b.n	800117e <LL_TIM_IC_SetFilter+0x4e>
 8001168:	2306      	movs	r3, #6
 800116a:	e008      	b.n	800117e <LL_TIM_IC_SetFilter+0x4e>
 800116c:	2304      	movs	r3, #4
 800116e:	e006      	b.n	800117e <LL_TIM_IC_SetFilter+0x4e>
 8001170:	2303      	movs	r3, #3
 8001172:	e004      	b.n	800117e <LL_TIM_IC_SetFilter+0x4e>
 8001174:	2302      	movs	r3, #2
 8001176:	e002      	b.n	800117e <LL_TIM_IC_SetFilter+0x4e>
 8001178:	2301      	movs	r3, #1
 800117a:	e000      	b.n	800117e <LL_TIM_IC_SetFilter+0x4e>
 800117c:	2300      	movs	r3, #0
 800117e:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	3318      	adds	r3, #24
 8001184:	461a      	mov	r2, r3
 8001186:	4629      	mov	r1, r5
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <LL_TIM_IC_SetFilter+0x8c>)
 800118a:	5c5b      	ldrb	r3, [r3, r1]
 800118c:	4413      	add	r3, r2
 800118e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001190:	6822      	ldr	r2, [r4, #0]
 8001192:	4629      	mov	r1, r5
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <LL_TIM_IC_SetFilter+0x90>)
 8001196:	5c5b      	ldrb	r3, [r3, r1]
 8001198:	4619      	mov	r1, r3
 800119a:	23f0      	movs	r3, #240	; 0xf0
 800119c:	408b      	lsls	r3, r1
 800119e:	43db      	mvns	r3, r3
 80011a0:	401a      	ands	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	0c1b      	lsrs	r3, r3, #16
 80011a6:	4628      	mov	r0, r5
 80011a8:	4905      	ldr	r1, [pc, #20]	; (80011c0 <LL_TIM_IC_SetFilter+0x90>)
 80011aa:	5c09      	ldrb	r1, [r1, r0]
 80011ac:	408b      	lsls	r3, r1
 80011ae:	4313      	orrs	r3, r2
 80011b0:	6023      	str	r3, [r4, #0]
}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bcb0      	pop	{r4, r5, r7}
 80011ba:	4770      	bx	lr
 80011bc:	08002f2c 	.word	0x08002f2c
 80011c0:	08002f3c 	.word	0x08002f3c

080011c4 <LL_TIM_IC_SetPolarity>:
{
 80011c4:	b490      	push	{r4, r7}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d01c      	beq.n	8001210 <LL_TIM_IC_SetPolarity+0x4c>
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	2b04      	cmp	r3, #4
 80011da:	d017      	beq.n	800120c <LL_TIM_IC_SetPolarity+0x48>
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	2b10      	cmp	r3, #16
 80011e0:	d012      	beq.n	8001208 <LL_TIM_IC_SetPolarity+0x44>
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	2b40      	cmp	r3, #64	; 0x40
 80011e6:	d00d      	beq.n	8001204 <LL_TIM_IC_SetPolarity+0x40>
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011ee:	d007      	beq.n	8001200 <LL_TIM_IC_SetPolarity+0x3c>
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011f6:	d101      	bne.n	80011fc <LL_TIM_IC_SetPolarity+0x38>
 80011f8:	2305      	movs	r3, #5
 80011fa:	e00a      	b.n	8001212 <LL_TIM_IC_SetPolarity+0x4e>
 80011fc:	2306      	movs	r3, #6
 80011fe:	e008      	b.n	8001212 <LL_TIM_IC_SetPolarity+0x4e>
 8001200:	2304      	movs	r3, #4
 8001202:	e006      	b.n	8001212 <LL_TIM_IC_SetPolarity+0x4e>
 8001204:	2303      	movs	r3, #3
 8001206:	e004      	b.n	8001212 <LL_TIM_IC_SetPolarity+0x4e>
 8001208:	2302      	movs	r3, #2
 800120a:	e002      	b.n	8001212 <LL_TIM_IC_SetPolarity+0x4e>
 800120c:	2301      	movs	r3, #1
 800120e:	e000      	b.n	8001212 <LL_TIM_IC_SetPolarity+0x4e>
 8001210:	2300      	movs	r3, #0
 8001212:	461c      	mov	r4, r3
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6a1a      	ldr	r2, [r3, #32]
 8001218:	4621      	mov	r1, r4
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <LL_TIM_IC_SetPolarity+0x80>)
 800121c:	5c5b      	ldrb	r3, [r3, r1]
 800121e:	4619      	mov	r1, r3
 8001220:	230a      	movs	r3, #10
 8001222:	408b      	lsls	r3, r1
 8001224:	43db      	mvns	r3, r3
 8001226:	401a      	ands	r2, r3
 8001228:	4621      	mov	r1, r4
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <LL_TIM_IC_SetPolarity+0x80>)
 800122c:	5c5b      	ldrb	r3, [r3, r1]
 800122e:	4619      	mov	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	408b      	lsls	r3, r1
 8001234:	431a      	orrs	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	621a      	str	r2, [r3, #32]
}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bc90      	pop	{r4, r7}
 8001242:	4770      	bx	lr
 8001244:	08002f44 	.word	0x08002f44

08001248 <LL_TIM_SetClockSource>:
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800125a:	f023 0307 	bic.w	r3, r3, #7
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	431a      	orrs	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	609a      	str	r2, [r3, #8]
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <LL_TIM_SetEncoderMode>:
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
 800127a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f023 0207 	bic.w	r2, r3, #7
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	431a      	orrs	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	609a      	str	r2, [r3, #8]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <LL_TIM_SetTriggerOutput>:
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	431a      	orrs	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	605a      	str	r2, [r3, #4]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <LL_TIM_DisableMasterSlaveMode>:
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	609a      	str	r2, [r3, #8]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b09a      	sub	sp, #104	; 0x68
 80012e4:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80012e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80012f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012fa:	2220      	movs	r2, #32
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f001 fdf4 	bl	8002eec <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
 8001314:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
 8001324:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001326:	2001      	movs	r0, #1
 8001328:	f7ff fdc2 	bl	8000eb0 <LL_APB2_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001332:	2300      	movs	r3, #0
 8001334:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 8001336:	4b34      	ldr	r3, [pc, #208]	; (8001408 <MX_TIM1_Init+0x128>)
 8001338:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001344:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001348:	4619      	mov	r1, r3
 800134a:	4830      	ldr	r0, [pc, #192]	; (800140c <MX_TIM1_Init+0x12c>)
 800134c:	f001 f83a 	bl	80023c4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8001350:	482e      	ldr	r0, [pc, #184]	; (800140c <MX_TIM1_Init+0x12c>)
 8001352:	f7ff fdc5 	bl	8000ee0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001356:	2100      	movs	r1, #0
 8001358:	482c      	ldr	r0, [pc, #176]	; (800140c <MX_TIM1_Init+0x12c>)
 800135a:	f7ff ff75 	bl	8001248 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 800135e:	2101      	movs	r1, #1
 8001360:	482a      	ldr	r0, [pc, #168]	; (800140c <MX_TIM1_Init+0x12c>)
 8001362:	f7ff fe0f 	bl	8000f84 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001366:	2360      	movs	r3, #96	; 0x60
 8001368:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001376:	2300      	movs	r3, #0
 8001378:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 800137a:	2300      	movs	r3, #0
 800137c:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001386:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800138a:	461a      	mov	r2, r3
 800138c:	2101      	movs	r1, #1
 800138e:	481f      	ldr	r0, [pc, #124]	; (800140c <MX_TIM1_Init+0x12c>)
 8001390:	f001 f8b2 	bl	80024f8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8001394:	2101      	movs	r1, #1
 8001396:	481d      	ldr	r0, [pc, #116]	; (800140c <MX_TIM1_Init+0x12c>)
 8001398:	f7ff fdb2 	bl	8000f00 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800139c:	2100      	movs	r1, #0
 800139e:	481b      	ldr	r0, [pc, #108]	; (800140c <MX_TIM1_Init+0x12c>)
 80013a0:	f7ff ff7a 	bl	8001298 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 80013a4:	4819      	ldr	r0, [pc, #100]	; (800140c <MX_TIM1_Init+0x12c>)
 80013a6:	f7ff ff8a 	bl	80012be <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 80013c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	4619      	mov	r1, r3
 80013d0:	480e      	ldr	r0, [pc, #56]	; (800140c <MX_TIM1_Init+0x12c>)
 80013d2:	f001 f8d2 	bl	800257a <LL_TIM_BDTR_Init>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80013d6:	2001      	movs	r0, #1
 80013d8:	f7ff fd3a 	bl	8000e50 <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
  GPIO_InitStruct.Pin = LEFT_PWM_Pin;
 80013dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013e2:	2302      	movs	r3, #2
 80013e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80013f2:	2301      	movs	r3, #1
 80013f4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(LEFT_PWM_GPIO_Port, &GPIO_InitStruct);
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	4619      	mov	r1, r3
 80013fa:	4805      	ldr	r0, [pc, #20]	; (8001410 <MX_TIM1_Init+0x130>)
 80013fc:	f000 fd4d 	bl	8001e9a <LL_GPIO_Init>

}
 8001400:	bf00      	nop
 8001402:	3768      	adds	r7, #104	; 0x68
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	fff003e8 	.word	0xfff003e8
 800140c:	40010000 	.word	0x40010000
 8001410:	40020000 	.word	0x40020000

08001414 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b094      	sub	sp, #80	; 0x50
 8001418:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800141a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	2220      	movs	r2, #32
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f001 fd5a 	bl	8002eec <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
 8001446:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001448:	2001      	movs	r0, #1
 800144a:	f7ff fd19 	bl	8000e80 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001452:	2300      	movs	r3, #0
 8001454:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 8001456:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <MX_TIM2_Init+0xe4>)
 8001458:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800145e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001462:	4619      	mov	r1, r3
 8001464:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001468:	f000 ffac 	bl	80023c4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800146c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001470:	f7ff fd36 	bl	8000ee0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001474:	2100      	movs	r1, #0
 8001476:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800147a:	f7ff fee5 	bl	8001248 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 800147e:	2110      	movs	r1, #16
 8001480:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001484:	f7ff fd7e 	bl	8000f84 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001488:	2360      	movs	r3, #96	; 0x60
 800148a:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001498:	2300      	movs	r3, #0
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	461a      	mov	r2, r3
 80014a2:	2110      	movs	r1, #16
 80014a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80014a8:	f001 f826 	bl	80024f8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 80014ac:	2110      	movs	r1, #16
 80014ae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80014b2:	f7ff fd25 	bl	8000f00 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80014b6:	2100      	movs	r1, #0
 80014b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80014bc:	f7ff feec 	bl	8001298 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80014c0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80014c4:	f7ff fefb 	bl	80012be <LL_TIM_DisableMasterSlaveMode>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80014c8:	2002      	movs	r0, #2
 80014ca:	f7ff fcc1 	bl	8000e50 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
  GPIO_InitStruct.Pin = RIGHT_PWM_Pin;
 80014ce:	2308      	movs	r3, #8
 80014d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80014d2:	2302      	movs	r3, #2
 80014d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80014e2:	2301      	movs	r3, #1
 80014e4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(RIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	4619      	mov	r1, r3
 80014ea:	4804      	ldr	r0, [pc, #16]	; (80014fc <MX_TIM2_Init+0xe8>)
 80014ec:	f000 fcd5 	bl	8001e9a <LL_GPIO_Init>

}
 80014f0:	bf00      	nop
 80014f2:	3750      	adds	r7, #80	; 0x50
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	fff003e8 	.word	0xfff003e8
 80014fc:	40020400 	.word	0x40020400

08001500 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08c      	sub	sp, #48	; 0x30
 8001504:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
 8001524:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001526:	2002      	movs	r0, #2
 8001528:	f7ff fcaa 	bl	8000e80 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800152c:	2004      	movs	r0, #4
 800152e:	f7ff fc8f 	bl	8000e50 <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PC6   ------> TIM3_CH1
  PC7   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = ENCODER_L_CH1_Pin|ENCODER_L_CH2_Pin;
 8001532:	23c0      	movs	r3, #192	; 0xc0
 8001534:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001536:	2302      	movs	r3, #2
 8001538:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001546:	2302      	movs	r3, #2
 8001548:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4827      	ldr	r0, [pc, #156]	; (80015ec <MX_TIM3_Init+0xec>)
 8001550:	f000 fca3 	bl	8001e9a <LL_GPIO_Init>

  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X2_TI1);
 8001554:	2101      	movs	r1, #1
 8001556:	4826      	ldr	r0, [pc, #152]	; (80015f0 <MX_TIM3_Init+0xf0>)
 8001558:	f7ff fe8b 	bl	8001272 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 800155c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001560:	2101      	movs	r1, #1
 8001562:	4823      	ldr	r0, [pc, #140]	; (80015f0 <MX_TIM3_Init+0xf0>)
 8001564:	f7ff fd50 	bl	8001008 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8001568:	2200      	movs	r2, #0
 800156a:	2101      	movs	r1, #1
 800156c:	4820      	ldr	r0, [pc, #128]	; (80015f0 <MX_TIM3_Init+0xf0>)
 800156e:	f7ff fd95 	bl	800109c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8001572:	2200      	movs	r2, #0
 8001574:	2101      	movs	r1, #1
 8001576:	481e      	ldr	r0, [pc, #120]	; (80015f0 <MX_TIM3_Init+0xf0>)
 8001578:	f7ff fdda 	bl	8001130 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 800157c:	2200      	movs	r2, #0
 800157e:	2101      	movs	r1, #1
 8001580:	481b      	ldr	r0, [pc, #108]	; (80015f0 <MX_TIM3_Init+0xf0>)
 8001582:	f7ff fe1f 	bl	80011c4 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001586:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800158a:	2110      	movs	r1, #16
 800158c:	4818      	ldr	r0, [pc, #96]	; (80015f0 <MX_TIM3_Init+0xf0>)
 800158e:	f7ff fd3b 	bl	8001008 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8001592:	2200      	movs	r2, #0
 8001594:	2110      	movs	r1, #16
 8001596:	4816      	ldr	r0, [pc, #88]	; (80015f0 <MX_TIM3_Init+0xf0>)
 8001598:	f7ff fd80 	bl	800109c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 800159c:	2200      	movs	r2, #0
 800159e:	2110      	movs	r1, #16
 80015a0:	4813      	ldr	r0, [pc, #76]	; (80015f0 <MX_TIM3_Init+0xf0>)
 80015a2:	f7ff fdc5 	bl	8001130 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2110      	movs	r1, #16
 80015aa:	4811      	ldr	r0, [pc, #68]	; (80015f0 <MX_TIM3_Init+0xf0>)
 80015ac:	f7ff fe0a 	bl	80011c4 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 80015b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80015be:	2300      	movs	r3, #0
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	4619      	mov	r1, r3
 80015c8:	4809      	ldr	r0, [pc, #36]	; (80015f0 <MX_TIM3_Init+0xf0>)
 80015ca:	f000 fefb 	bl	80023c4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80015ce:	4808      	ldr	r0, [pc, #32]	; (80015f0 <MX_TIM3_Init+0xf0>)
 80015d0:	f7ff fc86 	bl	8000ee0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80015d4:	2100      	movs	r1, #0
 80015d6:	4806      	ldr	r0, [pc, #24]	; (80015f0 <MX_TIM3_Init+0xf0>)
 80015d8:	f7ff fe5e 	bl	8001298 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <MX_TIM3_Init+0xf0>)
 80015de:	f7ff fe6e 	bl	80012be <LL_TIM_DisableMasterSlaveMode>

}
 80015e2:	bf00      	nop
 80015e4:	3730      	adds	r7, #48	; 0x30
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40020800 	.word	0x40020800
 80015f0:	40000400 	.word	0x40000400

080015f4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08c      	sub	sp, #48	; 0x30
 80015f8:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
 8001618:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 800161a:	2004      	movs	r0, #4
 800161c:	f7ff fc30 	bl	8000e80 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001620:	2002      	movs	r0, #2
 8001622:	f7ff fc15 	bl	8000e50 <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PB6   ------> TIM4_CH1
  PB7   ------> TIM4_CH2
  */
  GPIO_InitStruct.Pin = ENCODER_R_CH1_Pin|ENCODER_R_CH2_Pin;
 8001626:	23c0      	movs	r3, #192	; 0xc0
 8001628:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800162a:	2302      	movs	r3, #2
 800162c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800163a:	2302      	movs	r3, #2
 800163c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	4619      	mov	r1, r3
 8001642:	4827      	ldr	r0, [pc, #156]	; (80016e0 <MX_TIM4_Init+0xec>)
 8001644:	f000 fc29 	bl	8001e9a <LL_GPIO_Init>

  LL_TIM_SetEncoderMode(TIM4, LL_TIM_ENCODERMODE_X2_TI1);
 8001648:	2101      	movs	r1, #1
 800164a:	4826      	ldr	r0, [pc, #152]	; (80016e4 <MX_TIM4_Init+0xf0>)
 800164c:	f7ff fe11 	bl	8001272 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001650:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001654:	2101      	movs	r1, #1
 8001656:	4823      	ldr	r0, [pc, #140]	; (80016e4 <MX_TIM4_Init+0xf0>)
 8001658:	f7ff fcd6 	bl	8001008 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 800165c:	2200      	movs	r2, #0
 800165e:	2101      	movs	r1, #1
 8001660:	4820      	ldr	r0, [pc, #128]	; (80016e4 <MX_TIM4_Init+0xf0>)
 8001662:	f7ff fd1b 	bl	800109c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8001666:	2200      	movs	r2, #0
 8001668:	2101      	movs	r1, #1
 800166a:	481e      	ldr	r0, [pc, #120]	; (80016e4 <MX_TIM4_Init+0xf0>)
 800166c:	f7ff fd60 	bl	8001130 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8001670:	2200      	movs	r2, #0
 8001672:	2101      	movs	r1, #1
 8001674:	481b      	ldr	r0, [pc, #108]	; (80016e4 <MX_TIM4_Init+0xf0>)
 8001676:	f7ff fda5 	bl	80011c4 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 800167a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800167e:	2110      	movs	r1, #16
 8001680:	4818      	ldr	r0, [pc, #96]	; (80016e4 <MX_TIM4_Init+0xf0>)
 8001682:	f7ff fcc1 	bl	8001008 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8001686:	2200      	movs	r2, #0
 8001688:	2110      	movs	r1, #16
 800168a:	4816      	ldr	r0, [pc, #88]	; (80016e4 <MX_TIM4_Init+0xf0>)
 800168c:	f7ff fd06 	bl	800109c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8001690:	2200      	movs	r2, #0
 8001692:	2110      	movs	r1, #16
 8001694:	4813      	ldr	r0, [pc, #76]	; (80016e4 <MX_TIM4_Init+0xf0>)
 8001696:	f7ff fd4b 	bl	8001130 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 800169a:	2200      	movs	r2, #0
 800169c:	2110      	movs	r1, #16
 800169e:	4811      	ldr	r0, [pc, #68]	; (80016e4 <MX_TIM4_Init+0xf0>)
 80016a0:	f7ff fd90 	bl	80011c4 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80016a8:	2300      	movs	r3, #0
 80016aa:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 80016ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	4809      	ldr	r0, [pc, #36]	; (80016e4 <MX_TIM4_Init+0xf0>)
 80016be:	f000 fe81 	bl	80023c4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 80016c2:	4808      	ldr	r0, [pc, #32]	; (80016e4 <MX_TIM4_Init+0xf0>)
 80016c4:	f7ff fc0c 	bl	8000ee0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 80016c8:	2100      	movs	r1, #0
 80016ca:	4806      	ldr	r0, [pc, #24]	; (80016e4 <MX_TIM4_Init+0xf0>)
 80016cc:	f7ff fde4 	bl	8001298 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 80016d0:	4804      	ldr	r0, [pc, #16]	; (80016e4 <MX_TIM4_Init+0xf0>)
 80016d2:	f7ff fdf4 	bl	80012be <LL_TIM_DisableMasterSlaveMode>

}
 80016d6:	bf00      	nop
 80016d8:	3730      	adds	r7, #48	; 0x30
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40020400 	.word	0x40020400
 80016e4:	40000800 	.word	0x40000800

080016e8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 80016fc:	2010      	movs	r0, #16
 80016fe:	f7ff fbbf 	bl	8000e80 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 84-LL_TIM_IC_FILTER_FDIV1_N2;
 8001702:	2354      	movs	r3, #84	; 0x54
 8001704:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 800170a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800170e:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	4619      	mov	r1, r3
 8001714:	4808      	ldr	r0, [pc, #32]	; (8001738 <MX_TIM6_Init+0x50>)
 8001716:	f000 fe55 	bl	80023c4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 800171a:	4807      	ldr	r0, [pc, #28]	; (8001738 <MX_TIM6_Init+0x50>)
 800171c:	f7ff fbe0 	bl	8000ee0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8001720:	2100      	movs	r1, #0
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <MX_TIM6_Init+0x50>)
 8001724:	f7ff fdb8 	bl	8001298 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8001728:	4803      	ldr	r0, [pc, #12]	; (8001738 <MX_TIM6_Init+0x50>)
 800172a:	f7ff fdc8 	bl	80012be <LL_TIM_DisableMasterSlaveMode>

}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40001000 	.word	0x40001000

0800173c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b09a      	sub	sp, #104	; 0x68
 8001740:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001742:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
 8001750:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001752:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001756:	2220      	movs	r2, #32
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f001 fbc6 	bl	8002eec <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001760:	f107 031c 	add.w	r3, r7, #28
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
 8001770:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
 8001780:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 8001782:	2002      	movs	r0, #2
 8001784:	f7ff fb94 	bl	8000eb0 <LL_APB2_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 84-LL_TIM_IC_FILTER_FDIV1_N2;
 8001788:	2354      	movs	r3, #84	; 0x54
 800178a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800178e:	2300      	movs	r3, #0
 8001790:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 8001792:	4b33      	ldr	r3, [pc, #204]	; (8001860 <MX_TIM8_Init+0x124>)
 8001794:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001796:	2300      	movs	r3, #0
 8001798:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 80017a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017a4:	4619      	mov	r1, r3
 80017a6:	482f      	ldr	r0, [pc, #188]	; (8001864 <MX_TIM8_Init+0x128>)
 80017a8:	f000 fe0c 	bl	80023c4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM8);
 80017ac:	482d      	ldr	r0, [pc, #180]	; (8001864 <MX_TIM8_Init+0x128>)
 80017ae:	f7ff fb97 	bl	8000ee0 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM8, LL_TIM_CHANNEL_CH4);
 80017b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017b6:	482b      	ldr	r0, [pc, #172]	; (8001864 <MX_TIM8_Init+0x128>)
 80017b8:	f7ff fbe4 	bl	8000f84 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80017bc:	2360      	movs	r3, #96	; 0x60
 80017be:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 50;
 80017c8:	2332      	movs	r3, #50	; 0x32
 80017ca:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80017cc:	2300      	movs	r3, #0
 80017ce:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80017d4:	2300      	movs	r3, #0
 80017d6:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80017d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017dc:	461a      	mov	r2, r3
 80017de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017e2:	4820      	ldr	r0, [pc, #128]	; (8001864 <MX_TIM8_Init+0x128>)
 80017e4:	f000 fe88 	bl	80024f8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM8, LL_TIM_CHANNEL_CH4);
 80017e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ec:	481d      	ldr	r0, [pc, #116]	; (8001864 <MX_TIM8_Init+0x128>)
 80017ee:	f7ff fb87 	bl	8000f00 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM8, LL_TIM_TRGO_RESET);
 80017f2:	2100      	movs	r1, #0
 80017f4:	481b      	ldr	r0, [pc, #108]	; (8001864 <MX_TIM8_Init+0x128>)
 80017f6:	f7ff fd4f 	bl	8001298 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM8);
 80017fa:	481a      	ldr	r0, [pc, #104]	; (8001864 <MX_TIM8_Init+0x128>)
 80017fc:	f7ff fd5f 	bl	80012be <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8001816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 800181c:	2300      	movs	r3, #0
 800181e:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM8, &TIM_BDTRInitStruct);
 8001820:	f107 031c 	add.w	r3, r7, #28
 8001824:	4619      	mov	r1, r3
 8001826:	480f      	ldr	r0, [pc, #60]	; (8001864 <MX_TIM8_Init+0x128>)
 8001828:	f000 fea7 	bl	800257a <LL_TIM_BDTR_Init>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800182c:	2004      	movs	r0, #4
 800182e:	f7ff fb0f 	bl	8000e50 <LL_AHB1_GRP1_EnableClock>
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8001832:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001836:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001838:	2302      	movs	r3, #2
 800183a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8001848:	2303      	movs	r3, #3
 800184a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	4619      	mov	r1, r3
 8001850:	4805      	ldr	r0, [pc, #20]	; (8001868 <MX_TIM8_Init+0x12c>)
 8001852:	f000 fb22 	bl	8001e9a <LL_GPIO_Init>

}
 8001856:	bf00      	nop
 8001858:	3768      	adds	r7, #104	; 0x68
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	fff003e8 	.word	0xfff003e8
 8001864:	40010400 	.word	0x40010400
 8001868:	40020800 	.word	0x40020800

0800186c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b094      	sub	sp, #80	; 0x50
 8001870:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001872:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	2220      	movs	r2, #32
 8001888:	2100      	movs	r1, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f001 fb2e 	bl	8002eec <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
 800189c:	611a      	str	r2, [r3, #16]
 800189e:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM11);
 80018a0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80018a4:	f7ff fb04 	bl	8000eb0 <LL_APB2_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80018ac:	2300      	movs	r3, #0
 80018ae:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 65535;
 80018b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018b4:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80018b6:	2300      	movs	r3, #0
 80018b8:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM11, &TIM_InitStruct);
 80018ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018be:	4619      	mov	r1, r3
 80018c0:	481b      	ldr	r0, [pc, #108]	; (8001930 <MX_TIM11_Init+0xc4>)
 80018c2:	f000 fd7f 	bl	80023c4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM11);
 80018c6:	481a      	ldr	r0, [pc, #104]	; (8001930 <MX_TIM11_Init+0xc4>)
 80018c8:	f7ff fb0a 	bl	8000ee0 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM11, LL_TIM_CHANNEL_CH1);
 80018cc:	2101      	movs	r1, #1
 80018ce:	4818      	ldr	r0, [pc, #96]	; (8001930 <MX_TIM11_Init+0xc4>)
 80018d0:	f7ff fb58 	bl	8000f84 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80018d4:	2360      	movs	r3, #96	; 0x60
 80018d6:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM11, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80018e8:	f107 031c 	add.w	r3, r7, #28
 80018ec:	461a      	mov	r2, r3
 80018ee:	2101      	movs	r1, #1
 80018f0:	480f      	ldr	r0, [pc, #60]	; (8001930 <MX_TIM11_Init+0xc4>)
 80018f2:	f000 fe01 	bl	80024f8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM11, LL_TIM_CHANNEL_CH1);
 80018f6:	2101      	movs	r1, #1
 80018f8:	480d      	ldr	r0, [pc, #52]	; (8001930 <MX_TIM11_Init+0xc4>)
 80018fa:	f7ff fb01 	bl	8000f00 <LL_TIM_OC_DisableFast>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80018fe:	2002      	movs	r0, #2
 8001900:	f7ff faa6 	bl	8000e50 <LL_AHB1_GRP1_EnableClock>
    /**TIM11 GPIO Configuration
    PB9     ------> TIM11_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001908:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800190a:	2302      	movs	r3, #2
 800190c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 800191a:	2303      	movs	r3, #3
 800191c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	4619      	mov	r1, r3
 8001922:	4804      	ldr	r0, [pc, #16]	; (8001934 <MX_TIM11_Init+0xc8>)
 8001924:	f000 fab9 	bl	8001e9a <LL_GPIO_Init>

}
 8001928:	bf00      	nop
 800192a:	3750      	adds	r7, #80	; 0x50
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40014800 	.word	0x40014800
 8001934:	40020400 	.word	0x40020400

08001938 <LL_AHB1_GRP1_EnableClock>:
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001944:	4907      	ldr	r1, [pc, #28]	; (8001964 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4313      	orrs	r3, r2
 800194a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800194e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4013      	ands	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001956:	68fb      	ldr	r3, [r7, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	40023800 	.word	0x40023800

08001968 <LL_APB2_GRP1_EnableClock>:
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001972:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001974:	4907      	ldr	r1, [pc, #28]	; (8001994 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4313      	orrs	r3, r2
 800197a:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <LL_APB2_GRP1_EnableClock+0x2c>)
 800197e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4013      	ands	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001986:	68fb      	ldr	r3, [r7, #12]
}
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	40023800 	.word	0x40023800

08001998 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	60da      	str	r2, [r3, #12]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	615a      	str	r2, [r3, #20]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08e      	sub	sp, #56	; 0x38
 80019e8:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
 80019f8:	611a      	str	r2, [r3, #16]
 80019fa:	615a      	str	r2, [r3, #20]
 80019fc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
 8001a0c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001a0e:	2010      	movs	r0, #16
 8001a10:	f7ff ffaa 	bl	8001968 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001a14:	2001      	movs	r0, #1
 8001a16:	f7ff ff8f 	bl	8001938 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8001a1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a20:	2302      	movs	r3, #2
 8001a22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001a24:	2303      	movs	r3, #3
 8001a26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001a30:	2307      	movs	r3, #7
 8001a32:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	4619      	mov	r1, r3
 8001a38:	4810      	ldr	r0, [pc, #64]	; (8001a7c <MX_USART1_UART_Init+0x98>)
 8001a3a:	f000 fa2e 	bl	8001e9a <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 8001a3e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001a42:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001a44:	2300      	movs	r3, #0
 8001a46:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001a50:	230c      	movs	r3, #12
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8001a5c:	f107 031c 	add.w	r3, r7, #28
 8001a60:	4619      	mov	r1, r3
 8001a62:	4807      	ldr	r0, [pc, #28]	; (8001a80 <MX_USART1_UART_Init+0x9c>)
 8001a64:	f001 f940 	bl	8002ce8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001a68:	4805      	ldr	r0, [pc, #20]	; (8001a80 <MX_USART1_UART_Init+0x9c>)
 8001a6a:	f7ff ffa5 	bl	80019b8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001a6e:	4804      	ldr	r0, [pc, #16]	; (8001a80 <MX_USART1_UART_Init+0x9c>)
 8001a70:	f7ff ff92 	bl	8001998 <LL_USART_Enable>

}
 8001a74:	bf00      	nop
 8001a76:	3738      	adds	r7, #56	; 0x38
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40020000 	.word	0x40020000
 8001a80:	40011000 	.word	0x40011000

08001a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001abc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a8a:	e003      	b.n	8001a94 <LoopCopyDataInit>

08001a8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a92:	3104      	adds	r1, #4

08001a94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a94:	480b      	ldr	r0, [pc, #44]	; (8001ac4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a9c:	d3f6      	bcc.n	8001a8c <CopyDataInit>
  ldr  r2, =_sbss
 8001a9e:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001aa0:	e002      	b.n	8001aa8 <LoopFillZerobss>

08001aa2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001aa2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001aa4:	f842 3b04 	str.w	r3, [r2], #4

08001aa8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001aaa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001aac:	d3f9      	bcc.n	8001aa2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aae:	f7ff f9b9 	bl	8000e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f001 f9f7 	bl	8002ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ab6:	f7ff f86b 	bl	8000b90 <main>
  bx  lr    
 8001aba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001abc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ac0:	08002f5c 	.word	0x08002f5c
  ldr  r0, =_sdata
 8001ac4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ac8:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001acc:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001ad0:	20000020 	.word	0x20000020

08001ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC_IRQHandler>

08001ad6 <LL_ADC_REG_SetSequencerLength>:
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	bf0c      	ite	eq
 8001b10:	2301      	moveq	r3, #1
 8001b12:	2300      	movne	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8001b32:	481c      	ldr	r0, [pc, #112]	; (8001ba4 <LL_ADC_CommonInit+0x80>)
 8001b34:	f7ff ffe2 	bl	8001afc <LL_ADC_IsEnabled>
 8001b38:	4604      	mov	r4, r0
 8001b3a:	481b      	ldr	r0, [pc, #108]	; (8001ba8 <LL_ADC_CommonInit+0x84>)
 8001b3c:	f7ff ffde 	bl	8001afc <LL_ADC_IsEnabled>
 8001b40:	4603      	mov	r3, r0
 8001b42:	431c      	orrs	r4, r3
 8001b44:	4819      	ldr	r0, [pc, #100]	; (8001bac <LL_ADC_CommonInit+0x88>)
 8001b46:	f7ff ffd9 	bl	8001afc <LL_ADC_IsEnabled>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	4323      	orrs	r3, r4
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d120      	bne.n	8001b94 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d012      	beq.n	8001b80 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <LL_ADC_CommonInit+0x8c>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	6811      	ldr	r1, [r2, #0]
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	6852      	ldr	r2, [r2, #4]
 8001b6a:	4311      	orrs	r1, r2
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	6892      	ldr	r2, [r2, #8]
 8001b70:	4311      	orrs	r1, r2
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	68d2      	ldr	r2, [r2, #12]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	e00b      	b.n	8001b98 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <LL_ADC_CommonInit+0x8c>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	e001      	b.n	8001b98 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd90      	pop	{r4, r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40012000 	.word	0x40012000
 8001ba8:	40012100 	.word	0x40012100
 8001bac:	40012200 	.word	0x40012200
 8001bb0:	fffc10e0 	.word	0xfffc10e0

08001bb4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff ff9a 	bl	8001afc <LL_ADC_IsEnabled>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d117      	bne.n	8001bfe <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001bd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	6811      	ldr	r1, [r2, #0]
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	6892      	ldr	r2, [r2, #8]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	431a      	orrs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	e001      	b.n	8001c02 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001c16:	2300      	movs	r3, #0
 8001c18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff ff6e 	bl	8001afc <LL_ADC_IsEnabled>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d12b      	bne.n	8001c7e <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d009      	beq.n	8001c42 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	e005      	b.n	8001c4e <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <LL_ADC_REG_Init+0x80>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	68d2      	ldr	r2, [r2, #12]
 8001c62:	4311      	orrs	r1, r2
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	6912      	ldr	r2, [r2, #16]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	4619      	mov	r1, r3
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ff2d 	bl	8001ad6 <LL_ADC_REG_SetSequencerLength>
 8001c7c:	e001      	b.n	8001c82 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	c0fffcfd 	.word	0xc0fffcfd

08001c90 <LL_GPIO_SetPinMode>:
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fa93 f3a3 	rbit	r3, r3
 8001caa:	613b      	str	r3, [r7, #16]
  return result;
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	2103      	movs	r1, #3
 8001cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	61bb      	str	r3, [r7, #24]
  return result;
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	fab3 f383 	clz	r3, r3
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	601a      	str	r2, [r3, #0]
}
 8001ce2:	bf00      	nop
 8001ce4:	3724      	adds	r7, #36	; 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <LL_GPIO_SetPinOutputType>:
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b085      	sub	sp, #20
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	60f8      	str	r0, [r7, #12]
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	401a      	ands	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	fb01 f303 	mul.w	r3, r1, r3
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	605a      	str	r2, [r3, #4]
}
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <LL_GPIO_SetPinSpeed>:
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b089      	sub	sp, #36	; 0x24
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	fa93 f3a3 	rbit	r3, r3
 8001d38:	613b      	str	r3, [r7, #16]
  return result;
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	fab3 f383 	clz	r3, r3
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	2103      	movs	r1, #3
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	401a      	ands	r2, r3
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	fa93 f3a3 	rbit	r3, r3
 8001d58:	61bb      	str	r3, [r7, #24]
  return result;
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	fab3 f383 	clz	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	609a      	str	r2, [r3, #8]
}
 8001d70:	bf00      	nop
 8001d72:	3724      	adds	r7, #36	; 0x24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <LL_GPIO_SetPinPull>:
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa93 f3a3 	rbit	r3, r3
 8001d96:	613b      	str	r3, [r7, #16]
  return result;
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2103      	movs	r1, #3
 8001da4:	fa01 f303 	lsl.w	r3, r1, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	401a      	ands	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	fa93 f3a3 	rbit	r3, r3
 8001db6:	61bb      	str	r3, [r7, #24]
  return result;
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	fab3 f383 	clz	r3, r3
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	60da      	str	r2, [r3, #12]
}
 8001dce:	bf00      	nop
 8001dd0:	3724      	adds	r7, #36	; 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <LL_GPIO_SetAFPin_0_7>:
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b089      	sub	sp, #36	; 0x24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	60f8      	str	r0, [r7, #12]
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6a1a      	ldr	r2, [r3, #32]
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	613b      	str	r3, [r7, #16]
  return result;
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	fab3 f383 	clz	r3, r3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	210f      	movs	r1, #15
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	401a      	ands	r2, r3
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	fa93 f3a3 	rbit	r3, r3
 8001e14:	61bb      	str	r3, [r7, #24]
  return result;
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	fab3 f383 	clz	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	431a      	orrs	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	621a      	str	r2, [r3, #32]
}
 8001e2c:	bf00      	nop
 8001e2e:	3724      	adds	r7, #36	; 0x24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_GPIO_SetAFPin_8_15>:
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	0a1b      	lsrs	r3, r3, #8
 8001e4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	fa93 f3a3 	rbit	r3, r3
 8001e54:	613b      	str	r3, [r7, #16]
  return result;
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	210f      	movs	r1, #15
 8001e62:	fa01 f303 	lsl.w	r3, r1, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	401a      	ands	r2, r3
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	0a1b      	lsrs	r3, r3, #8
 8001e6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	fa93 f3a3 	rbit	r3, r3
 8001e76:	61bb      	str	r3, [r7, #24]
  return result;
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	fab3 f383 	clz	r3, r3
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001e8e:	bf00      	nop
 8001e90:	3724      	adds	r7, #36	; 0x24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b088      	sub	sp, #32
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	613b      	str	r3, [r7, #16]
  return result;
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	fab3 f383 	clz	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001ec4:	e050      	b.n	8001f68 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	2101      	movs	r1, #1
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d042      	beq.n	8001f62 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d003      	beq.n	8001eec <LL_GPIO_Init+0x52>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d10d      	bne.n	8001f08 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	69b9      	ldr	r1, [r7, #24]
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ff12 	bl	8001d1e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	461a      	mov	r2, r3
 8001f00:	69b9      	ldr	r1, [r7, #24]
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fef3 	bl	8001cee <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	69b9      	ldr	r1, [r7, #24]
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff ff33 	bl	8001d7c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d11a      	bne.n	8001f54 <LL_GPIO_Init+0xba>
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	fa93 f3a3 	rbit	r3, r3
 8001f28:	60bb      	str	r3, [r7, #8]
  return result;
 8001f2a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001f2c:	fab3 f383 	clz	r3, r3
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b07      	cmp	r3, #7
 8001f34:	d807      	bhi.n	8001f46 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	69b9      	ldr	r1, [r7, #24]
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff ff4b 	bl	8001dda <LL_GPIO_SetAFPin_0_7>
 8001f44:	e006      	b.n	8001f54 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	69b9      	ldr	r1, [r7, #24]
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ff72 	bl	8001e38 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	69b9      	ldr	r1, [r7, #24]
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff fe97 	bl	8001c90 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3301      	adds	r3, #1
 8001f66:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1a7      	bne.n	8001ec6 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3720      	adds	r7, #32
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <LL_RCC_GetSysClkSource>:
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001f84:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <LL_RCC_GetSysClkSource+0x18>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 030c 	and.w	r3, r3, #12
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800

08001f9c <LL_RCC_GetAHBPrescaler>:
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <LL_RCC_GetAHBPrescaler+0x18>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800

08001fb8 <LL_RCC_GetAPB1Prescaler>:
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800

08001fd4 <LL_RCC_GetAPB2Prescaler>:
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <LL_RCC_GetAPB2Prescaler+0x18>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800

08001ff0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001ff4:	4b04      	ldr	r3, [pc, #16]	; (8002008 <LL_RCC_PLL_GetMainSource+0x18>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800

0800200c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002010:	4b04      	ldr	r3, [pc, #16]	; (8002024 <LL_RCC_PLL_GetN+0x18>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	099b      	lsrs	r3, r3, #6
 8002016:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800201a:	4618      	mov	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	40023800 	.word	0x40023800

08002028 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <LL_RCC_PLL_GetP+0x18>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40023800 	.word	0x40023800

08002044 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <LL_RCC_PLL_GetDivider+0x18>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40023800 	.word	0x40023800

08002060 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002068:	f000 f820 	bl	80020ac <RCC_GetSystemClockFreq>
 800206c:	4602      	mov	r2, r0
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f000 f840 	bl	80020fc <RCC_GetHCLKClockFreq>
 800207c:	4602      	mov	r2, r0
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4618      	mov	r0, r3
 8002088:	f000 f84e 	bl	8002128 <RCC_GetPCLK1ClockFreq>
 800208c:	4602      	mov	r2, r0
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	4618      	mov	r0, r3
 8002098:	f000 f85a 	bl	8002150 <RCC_GetPCLK2ClockFreq>
 800209c:	4602      	mov	r2, r0
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	60da      	str	r2, [r3, #12]
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80020b6:	f7ff ff63 	bl	8001f80 <LL_RCC_GetSysClkSource>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b08      	cmp	r3, #8
 80020be:	d00c      	beq.n	80020da <RCC_GetSystemClockFreq+0x2e>
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d80f      	bhi.n	80020e4 <RCC_GetSystemClockFreq+0x38>
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d002      	beq.n	80020ce <RCC_GetSystemClockFreq+0x22>
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d003      	beq.n	80020d4 <RCC_GetSystemClockFreq+0x28>
 80020cc:	e00a      	b.n	80020e4 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <RCC_GetSystemClockFreq+0x48>)
 80020d0:	607b      	str	r3, [r7, #4]
      break;
 80020d2:	e00a      	b.n	80020ea <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80020d4:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <RCC_GetSystemClockFreq+0x4c>)
 80020d6:	607b      	str	r3, [r7, #4]
      break;
 80020d8:	e007      	b.n	80020ea <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80020da:	2008      	movs	r0, #8
 80020dc:	f000 f84c 	bl	8002178 <RCC_PLL_GetFreqDomain_SYS>
 80020e0:	6078      	str	r0, [r7, #4]
      break;
 80020e2:	e002      	b.n	80020ea <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80020e4:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <RCC_GetSystemClockFreq+0x48>)
 80020e6:	607b      	str	r3, [r7, #4]
      break;
 80020e8:	bf00      	nop
  }

  return frequency;
 80020ea:	687b      	ldr	r3, [r7, #4]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	00f42400 	.word	0x00f42400
 80020f8:	017d7840 	.word	0x017d7840

080020fc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002104:	f7ff ff4a 	bl	8001f9c <LL_RCC_GetAHBPrescaler>
 8002108:	4603      	mov	r3, r0
 800210a:	091b      	lsrs	r3, r3, #4
 800210c:	f003 030f 	and.w	r3, r3, #15
 8002110:	4a04      	ldr	r2, [pc, #16]	; (8002124 <RCC_GetHCLKClockFreq+0x28>)
 8002112:	5cd3      	ldrb	r3, [r2, r3]
 8002114:	461a      	mov	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	40d3      	lsrs	r3, r2
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	08002f14 	.word	0x08002f14

08002128 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002130:	f7ff ff42 	bl	8001fb8 <LL_RCC_GetAPB1Prescaler>
 8002134:	4603      	mov	r3, r0
 8002136:	0a9b      	lsrs	r3, r3, #10
 8002138:	4a04      	ldr	r2, [pc, #16]	; (800214c <RCC_GetPCLK1ClockFreq+0x24>)
 800213a:	5cd3      	ldrb	r3, [r2, r3]
 800213c:	461a      	mov	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	40d3      	lsrs	r3, r2
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	08002f24 	.word	0x08002f24

08002150 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002158:	f7ff ff3c 	bl	8001fd4 <LL_RCC_GetAPB2Prescaler>
 800215c:	4603      	mov	r3, r0
 800215e:	0b5b      	lsrs	r3, r3, #13
 8002160:	4a04      	ldr	r2, [pc, #16]	; (8002174 <RCC_GetPCLK2ClockFreq+0x24>)
 8002162:	5cd3      	ldrb	r3, [r2, r3]
 8002164:	461a      	mov	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	40d3      	lsrs	r3, r2
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	08002f24 	.word	0x08002f24

08002178 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002178:	b590      	push	{r4, r7, lr}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800218c:	f7ff ff30 	bl	8001ff0 <LL_RCC_PLL_GetMainSource>
 8002190:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d004      	beq.n	80021a2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800219e:	d003      	beq.n	80021a8 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80021a0:	e005      	b.n	80021ae <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80021a4:	617b      	str	r3, [r7, #20]
      break;
 80021a6:	e005      	b.n	80021b4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80021aa:	617b      	str	r3, [r7, #20]
      break;
 80021ac:	e002      	b.n	80021b4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80021b0:	617b      	str	r3, [r7, #20]
      break;
 80021b2:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d113      	bne.n	80021e2 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80021ba:	f7ff ff43 	bl	8002044 <LL_RCC_PLL_GetDivider>
 80021be:	4602      	mov	r2, r0
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fbb3 f4f2 	udiv	r4, r3, r2
 80021c6:	f7ff ff21 	bl	800200c <LL_RCC_PLL_GetN>
 80021ca:	4603      	mov	r3, r0
 80021cc:	fb03 f404 	mul.w	r4, r3, r4
 80021d0:	f7ff ff2a 	bl	8002028 <LL_RCC_PLL_GetP>
 80021d4:	4603      	mov	r3, r0
 80021d6:	0c1b      	lsrs	r3, r3, #16
 80021d8:	3301      	adds	r3, #1
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fbb4 f3f3 	udiv	r3, r4, r3
 80021e0:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80021e2:	693b      	ldr	r3, [r7, #16]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	371c      	adds	r7, #28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd90      	pop	{r4, r7, pc}
 80021ec:	00f42400 	.word	0x00f42400
 80021f0:	017d7840 	.word	0x017d7840

080021f4 <LL_SPI_IsEnabled>:
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002204:	2b40      	cmp	r3, #64	; 0x40
 8002206:	d101      	bne.n	800220c <LL_SPI_IsEnabled+0x18>
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <LL_SPI_IsEnabled+0x1a>
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	b29b      	uxth	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	611a      	str	r2, [r3, #16]
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b084      	sub	sp, #16
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff ffd3 	bl	80021f4 <LL_SPI_IsEnabled>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d139      	bne.n	80022c8 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800225c:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	6811      	ldr	r1, [r2, #0]
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	6852      	ldr	r2, [r2, #4]
 8002268:	4311      	orrs	r1, r2
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	6892      	ldr	r2, [r2, #8]
 800226e:	4311      	orrs	r1, r2
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	68d2      	ldr	r2, [r2, #12]
 8002274:	4311      	orrs	r1, r2
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	6912      	ldr	r2, [r2, #16]
 800227a:	4311      	orrs	r1, r2
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	6952      	ldr	r2, [r2, #20]
 8002280:	4311      	orrs	r1, r2
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	6992      	ldr	r2, [r2, #24]
 8002286:	4311      	orrs	r1, r2
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	69d2      	ldr	r2, [r2, #28]
 800228c:	4311      	orrs	r1, r2
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	6a12      	ldr	r2, [r2, #32]
 8002292:	430a      	orrs	r2, r1
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f023 0204 	bic.w	r2, r3, #4
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	0c1b      	lsrs	r3, r3, #16
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022b6:	d105      	bne.n	80022c4 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	4619      	mov	r1, r3
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff ffab 	bl	800221a <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80022c4:	2300      	movs	r3, #0
 80022c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	61da      	str	r2, [r3, #28]
  return status;
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <LL_TIM_SetPrescaler>:
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <LL_TIM_SetAutoReload>:
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <LL_TIM_SetRepetitionCounter>:
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <LL_TIM_OC_SetCompareCH1>:
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <LL_TIM_OC_SetCompareCH2>:
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <LL_TIM_OC_SetCompareCH3>:
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <LL_TIM_OC_SetCompareCH4>:
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	f043 0201 	orr.w	r2, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	615a      	str	r2, [r3, #20]
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a3d      	ldr	r2, [pc, #244]	; (80024cc <LL_TIM_Init+0x108>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d013      	beq.n	8002404 <LL_TIM_Init+0x40>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e2:	d00f      	beq.n	8002404 <LL_TIM_Init+0x40>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a3a      	ldr	r2, [pc, #232]	; (80024d0 <LL_TIM_Init+0x10c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d00b      	beq.n	8002404 <LL_TIM_Init+0x40>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a39      	ldr	r2, [pc, #228]	; (80024d4 <LL_TIM_Init+0x110>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d007      	beq.n	8002404 <LL_TIM_Init+0x40>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a38      	ldr	r2, [pc, #224]	; (80024d8 <LL_TIM_Init+0x114>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d003      	beq.n	8002404 <LL_TIM_Init+0x40>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a37      	ldr	r2, [pc, #220]	; (80024dc <LL_TIM_Init+0x118>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d106      	bne.n	8002412 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4313      	orrs	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a2d      	ldr	r2, [pc, #180]	; (80024cc <LL_TIM_Init+0x108>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d02b      	beq.n	8002472 <LL_TIM_Init+0xae>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002420:	d027      	beq.n	8002472 <LL_TIM_Init+0xae>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a2a      	ldr	r2, [pc, #168]	; (80024d0 <LL_TIM_Init+0x10c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d023      	beq.n	8002472 <LL_TIM_Init+0xae>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a29      	ldr	r2, [pc, #164]	; (80024d4 <LL_TIM_Init+0x110>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d01f      	beq.n	8002472 <LL_TIM_Init+0xae>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a28      	ldr	r2, [pc, #160]	; (80024d8 <LL_TIM_Init+0x114>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d01b      	beq.n	8002472 <LL_TIM_Init+0xae>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a27      	ldr	r2, [pc, #156]	; (80024dc <LL_TIM_Init+0x118>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d017      	beq.n	8002472 <LL_TIM_Init+0xae>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a26      	ldr	r2, [pc, #152]	; (80024e0 <LL_TIM_Init+0x11c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d013      	beq.n	8002472 <LL_TIM_Init+0xae>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a25      	ldr	r2, [pc, #148]	; (80024e4 <LL_TIM_Init+0x120>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00f      	beq.n	8002472 <LL_TIM_Init+0xae>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a24      	ldr	r2, [pc, #144]	; (80024e8 <LL_TIM_Init+0x124>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d00b      	beq.n	8002472 <LL_TIM_Init+0xae>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a23      	ldr	r2, [pc, #140]	; (80024ec <LL_TIM_Init+0x128>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d007      	beq.n	8002472 <LL_TIM_Init+0xae>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a22      	ldr	r2, [pc, #136]	; (80024f0 <LL_TIM_Init+0x12c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d003      	beq.n	8002472 <LL_TIM_Init+0xae>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a21      	ldr	r2, [pc, #132]	; (80024f4 <LL_TIM_Init+0x130>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d106      	bne.n	8002480 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	4313      	orrs	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	4619      	mov	r1, r3
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff ff34 	bl	80022fa <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	4619      	mov	r1, r3
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff ff20 	bl	80022de <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <LL_TIM_Init+0x108>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d003      	beq.n	80024ae <LL_TIM_Init+0xea>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a0c      	ldr	r2, [pc, #48]	; (80024dc <LL_TIM_Init+0x118>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d105      	bne.n	80024ba <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	7c1b      	ldrb	r3, [r3, #16]
 80024b2:	4619      	mov	r1, r3
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff ff2e 	bl	8002316 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff ff71 	bl	80023a2 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40010000 	.word	0x40010000
 80024d0:	40000400 	.word	0x40000400
 80024d4:	40000800 	.word	0x40000800
 80024d8:	40000c00 	.word	0x40000c00
 80024dc:	40010400 	.word	0x40010400
 80024e0:	40014000 	.word	0x40014000
 80024e4:	40014400 	.word	0x40014400
 80024e8:	40014800 	.word	0x40014800
 80024ec:	40001800 	.word	0x40001800
 80024f0:	40001c00 	.word	0x40001c00
 80024f4:	40002000 	.word	0x40002000

080024f8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800250e:	d027      	beq.n	8002560 <LL_TIM_OC_Init+0x68>
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002516:	d82a      	bhi.n	800256e <LL_TIM_OC_Init+0x76>
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800251e:	d018      	beq.n	8002552 <LL_TIM_OC_Init+0x5a>
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002526:	d822      	bhi.n	800256e <LL_TIM_OC_Init+0x76>
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d003      	beq.n	8002536 <LL_TIM_OC_Init+0x3e>
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2b10      	cmp	r3, #16
 8002532:	d007      	beq.n	8002544 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002534:	e01b      	b.n	800256e <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 f867 	bl	800260c <OC1Config>
 800253e:	4603      	mov	r3, r0
 8002540:	75fb      	strb	r3, [r7, #23]
      break;
 8002542:	e015      	b.n	8002570 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 f8cc 	bl	80026e4 <OC2Config>
 800254c:	4603      	mov	r3, r0
 800254e:	75fb      	strb	r3, [r7, #23]
      break;
 8002550:	e00e      	b.n	8002570 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f935 	bl	80027c4 <OC3Config>
 800255a:	4603      	mov	r3, r0
 800255c:	75fb      	strb	r3, [r7, #23]
      break;
 800255e:	e007      	b.n	8002570 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 f99e 	bl	80028a4 <OC4Config>
 8002568:	4603      	mov	r3, r0
 800256a:	75fb      	strb	r3, [r7, #23]
      break;
 800256c:	e000      	b.n	8002570 <LL_TIM_OC_Init+0x78>
      break;
 800256e:	bf00      	nop
  }

  return result;
 8002570:	7dfb      	ldrb	r3, [r7, #23]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 800257a:	b480      	push	{r7}
 800257c:	b085      	sub	sp, #20
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	7b12      	ldrb	r2, [r2, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4313      	orrs	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	89d2      	ldrh	r2, [r2, #14]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	f023 0201 	bic.w	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f023 0303 	bic.w	r3, r3, #3
 800263a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f023 0202 	bic.w	r2, r3, #2
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f023 0201 	bic.w	r2, r3, #1
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	4313      	orrs	r3, r2
 8002664:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a1c      	ldr	r2, [pc, #112]	; (80026dc <OC1Config+0xd0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d003      	beq.n	8002676 <OC1Config+0x6a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a1b      	ldr	r2, [pc, #108]	; (80026e0 <OC1Config+0xd4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d11e      	bne.n	80026b4 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f023 0208 	bic.w	r2, r3, #8
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4313      	orrs	r3, r2
 8002684:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f023 0204 	bic.w	r2, r3, #4
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4313      	orrs	r3, r2
 8002694:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4619      	mov	r1, r3
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff fe33 	bl	8002332 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40010000 	.word	0x40010000
 80026e0:	40010400 	.word	0x40010400

080026e4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	f023 0210 	bic.w	r2, r3, #16
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	4313      	orrs	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f023 0220 	bic.w	r2, r3, #32
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	4313      	orrs	r3, r2
 8002732:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f023 0210 	bic.w	r2, r3, #16
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	4313      	orrs	r3, r2
 8002742:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a1d      	ldr	r2, [pc, #116]	; (80027bc <OC2Config+0xd8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d003      	beq.n	8002754 <OC2Config+0x70>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a1c      	ldr	r2, [pc, #112]	; (80027c0 <OC2Config+0xdc>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d11f      	bne.n	8002794 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	019b      	lsls	r3, r3, #6
 8002760:	4313      	orrs	r3, r2
 8002762:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	019b      	lsls	r3, r3, #6
 8002770:	4313      	orrs	r3, r2
 8002772:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4313      	orrs	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4619      	mov	r1, r3
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff fdd1 	bl	800234e <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40010000 	.word	0x40010000
 80027c0:	40010400 	.word	0x40010400

080027c4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f023 0303 	bic.w	r3, r3, #3
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4313      	orrs	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	4313      	orrs	r3, r2
 8002810:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	021b      	lsls	r3, r3, #8
 800281e:	4313      	orrs	r3, r2
 8002820:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a1d      	ldr	r2, [pc, #116]	; (800289c <OC3Config+0xd8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d003      	beq.n	8002832 <OC3Config+0x6e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a1c      	ldr	r2, [pc, #112]	; (80028a0 <OC3Config+0xdc>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d11f      	bne.n	8002872 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	029b      	lsls	r3, r3, #10
 800283e:	4313      	orrs	r3, r2
 8002840:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	029b      	lsls	r3, r3, #10
 800284e:	4313      	orrs	r3, r2
 8002850:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	015b      	lsls	r3, r3, #5
 800286e:	4313      	orrs	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	4619      	mov	r1, r3
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff fd70 	bl	800236a <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40010000 	.word	0x40010000
 80028a0:	40010400 	.word	0x40010400

080028a4 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	031b      	lsls	r3, r3, #12
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	031b      	lsls	r3, r3, #12
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a11      	ldr	r2, [pc, #68]	; (800294c <OC4Config+0xa8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d003      	beq.n	8002914 <OC4Config+0x70>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a10      	ldr	r2, [pc, #64]	; (8002950 <OC4Config+0xac>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d107      	bne.n	8002924 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	019b      	lsls	r3, r3, #6
 8002920:	4313      	orrs	r3, r2
 8002922:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4619      	mov	r1, r3
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff fd25 	bl	8002386 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40010000 	.word	0x40010000
 8002950:	40010400 	.word	0x40010400

08002954 <LL_USART_IsEnabled>:
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002968:	bf0c      	ite	eq
 800296a:	2301      	moveq	r3, #1
 800296c:	2300      	movne	r3, #0
 800296e:	b2db      	uxtb	r3, r3
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <LL_USART_SetStopBitsLength>:
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	611a      	str	r2, [r3, #16]
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <LL_USART_SetHWFlowCtrl>:
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	615a      	str	r2, [r3, #20]
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <LL_USART_SetBaudRate>:
{
 80029c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029cc:	b09f      	sub	sp, #124	; 0x7c
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6778      	str	r0, [r7, #116]	; 0x74
 80029d2:	6739      	str	r1, [r7, #112]	; 0x70
 80029d4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029d6:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80029d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029de:	f040 80bc 	bne.w	8002b5a <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80029e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029e4:	461c      	mov	r4, r3
 80029e6:	f04f 0500 	mov.w	r5, #0
 80029ea:	4622      	mov	r2, r4
 80029ec:	462b      	mov	r3, r5
 80029ee:	eb12 0a02 	adds.w	sl, r2, r2
 80029f2:	eb43 0b03 	adc.w	fp, r3, r3
 80029f6:	4652      	mov	r2, sl
 80029f8:	465b      	mov	r3, fp
 80029fa:	1912      	adds	r2, r2, r4
 80029fc:	eb45 0303 	adc.w	r3, r5, r3
 8002a00:	f04f 0000 	mov.w	r0, #0
 8002a04:	f04f 0100 	mov.w	r1, #0
 8002a08:	00d9      	lsls	r1, r3, #3
 8002a0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a0e:	00d0      	lsls	r0, r2, #3
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	1911      	adds	r1, r2, r4
 8002a16:	6639      	str	r1, [r7, #96]	; 0x60
 8002a18:	416b      	adcs	r3, r5
 8002a1a:	667b      	str	r3, [r7, #100]	; 0x64
 8002a1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a1e:	461a      	mov	r2, r3
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	1891      	adds	r1, r2, r2
 8002a26:	6339      	str	r1, [r7, #48]	; 0x30
 8002a28:	415b      	adcs	r3, r3
 8002a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a2c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a30:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002a34:	f7fd fbc8 	bl	80001c8 <__aeabi_uldivmod>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4ba9      	ldr	r3, [pc, #676]	; (8002ce4 <LL_USART_SetBaudRate+0x31c>)
 8002a3e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	b29e      	uxth	r6, r3
 8002a4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a4c:	461c      	mov	r4, r3
 8002a4e:	f04f 0500 	mov.w	r5, #0
 8002a52:	4622      	mov	r2, r4
 8002a54:	462b      	mov	r3, r5
 8002a56:	1891      	adds	r1, r2, r2
 8002a58:	62b9      	str	r1, [r7, #40]	; 0x28
 8002a5a:	415b      	adcs	r3, r3
 8002a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a62:	1912      	adds	r2, r2, r4
 8002a64:	eb45 0303 	adc.w	r3, r5, r3
 8002a68:	f04f 0000 	mov.w	r0, #0
 8002a6c:	f04f 0100 	mov.w	r1, #0
 8002a70:	00d9      	lsls	r1, r3, #3
 8002a72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a76:	00d0      	lsls	r0, r2, #3
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	1911      	adds	r1, r2, r4
 8002a7e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a80:	416b      	adcs	r3, r5
 8002a82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a86:	461a      	mov	r2, r3
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	1891      	adds	r1, r2, r2
 8002a8e:	6239      	str	r1, [r7, #32]
 8002a90:	415b      	adcs	r3, r3
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
 8002a94:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a98:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002a9c:	f7fd fb94 	bl	80001c8 <__aeabi_uldivmod>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4b8f      	ldr	r3, [pc, #572]	; (8002ce4 <LL_USART_SetBaudRate+0x31c>)
 8002aa6:	fba3 1302 	umull	r1, r3, r3, r2
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	2164      	movs	r1, #100	; 0x64
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	3332      	adds	r3, #50	; 0x32
 8002ab8:	4a8a      	ldr	r2, [pc, #552]	; (8002ce4 <LL_USART_SetBaudRate+0x31c>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	4433      	add	r3, r6
 8002ace:	b29e      	uxth	r6, r3
 8002ad0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f04f 0100 	mov.w	r1, #0
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	1894      	adds	r4, r2, r2
 8002ade:	61bc      	str	r4, [r7, #24]
 8002ae0:	415b      	adcs	r3, r3
 8002ae2:	61fb      	str	r3, [r7, #28]
 8002ae4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ae8:	1812      	adds	r2, r2, r0
 8002aea:	eb41 0303 	adc.w	r3, r1, r3
 8002aee:	f04f 0400 	mov.w	r4, #0
 8002af2:	f04f 0500 	mov.w	r5, #0
 8002af6:	00dd      	lsls	r5, r3, #3
 8002af8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002afc:	00d4      	lsls	r4, r2, #3
 8002afe:	4622      	mov	r2, r4
 8002b00:	462b      	mov	r3, r5
 8002b02:	1814      	adds	r4, r2, r0
 8002b04:	653c      	str	r4, [r7, #80]	; 0x50
 8002b06:	414b      	adcs	r3, r1
 8002b08:	657b      	str	r3, [r7, #84]	; 0x54
 8002b0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	1891      	adds	r1, r2, r2
 8002b14:	6139      	str	r1, [r7, #16]
 8002b16:	415b      	adcs	r3, r3
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b1e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002b22:	f7fd fb51 	bl	80001c8 <__aeabi_uldivmod>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4b6e      	ldr	r3, [pc, #440]	; (8002ce4 <LL_USART_SetBaudRate+0x31c>)
 8002b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	2164      	movs	r1, #100	; 0x64
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	3332      	adds	r3, #50	; 0x32
 8002b3e:	4a69      	ldr	r2, [pc, #420]	; (8002ce4 <LL_USART_SetBaudRate+0x31c>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	095b      	lsrs	r3, r3, #5
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	4433      	add	r3, r6
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b56:	609a      	str	r2, [r3, #8]
}
 8002b58:	e0be      	b.n	8002cd8 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b5c:	461c      	mov	r4, r3
 8002b5e:	f04f 0500 	mov.w	r5, #0
 8002b62:	4622      	mov	r2, r4
 8002b64:	462b      	mov	r3, r5
 8002b66:	eb12 0802 	adds.w	r8, r2, r2
 8002b6a:	eb43 0903 	adc.w	r9, r3, r3
 8002b6e:	4642      	mov	r2, r8
 8002b70:	464b      	mov	r3, r9
 8002b72:	1912      	adds	r2, r2, r4
 8002b74:	eb45 0303 	adc.w	r3, r5, r3
 8002b78:	f04f 0000 	mov.w	r0, #0
 8002b7c:	f04f 0100 	mov.w	r1, #0
 8002b80:	00d9      	lsls	r1, r3, #3
 8002b82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b86:	00d0      	lsls	r0, r2, #3
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	1911      	adds	r1, r2, r4
 8002b8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b90:	416b      	adcs	r3, r5
 8002b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b96:	4618      	mov	r0, r3
 8002b98:	f04f 0100 	mov.w	r1, #0
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	008b      	lsls	r3, r1, #2
 8002ba6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002baa:	0082      	lsls	r2, r0, #2
 8002bac:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002bb0:	f7fd fb0a 	bl	80001c8 <__aeabi_uldivmod>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4b4a      	ldr	r3, [pc, #296]	; (8002ce4 <LL_USART_SetBaudRate+0x31c>)
 8002bba:	fba3 2302 	umull	r2, r3, r3, r2
 8002bbe:	095b      	lsrs	r3, r3, #5
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	b29e      	uxth	r6, r3
 8002bc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f04f 0100 	mov.w	r1, #0
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	1894      	adds	r4, r2, r2
 8002bd4:	60bc      	str	r4, [r7, #8]
 8002bd6:	415b      	adcs	r3, r3
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bde:	1812      	adds	r2, r2, r0
 8002be0:	eb41 0303 	adc.w	r3, r1, r3
 8002be4:	f04f 0400 	mov.w	r4, #0
 8002be8:	f04f 0500 	mov.w	r5, #0
 8002bec:	00dd      	lsls	r5, r3, #3
 8002bee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002bf2:	00d4      	lsls	r4, r2, #3
 8002bf4:	4622      	mov	r2, r4
 8002bf6:	462b      	mov	r3, r5
 8002bf8:	1814      	adds	r4, r2, r0
 8002bfa:	643c      	str	r4, [r7, #64]	; 0x40
 8002bfc:	414b      	adcs	r3, r1
 8002bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8002c00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c02:	4618      	mov	r0, r3
 8002c04:	f04f 0100 	mov.w	r1, #0
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	008b      	lsls	r3, r1, #2
 8002c12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002c16:	0082      	lsls	r2, r0, #2
 8002c18:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002c1c:	f7fd fad4 	bl	80001c8 <__aeabi_uldivmod>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4b2f      	ldr	r3, [pc, #188]	; (8002ce4 <LL_USART_SetBaudRate+0x31c>)
 8002c26:	fba3 1302 	umull	r1, r3, r3, r2
 8002c2a:	095b      	lsrs	r3, r3, #5
 8002c2c:	2164      	movs	r1, #100	; 0x64
 8002c2e:	fb01 f303 	mul.w	r3, r1, r3
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	3332      	adds	r3, #50	; 0x32
 8002c38:	4a2a      	ldr	r2, [pc, #168]	; (8002ce4 <LL_USART_SetBaudRate+0x31c>)
 8002c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	4433      	add	r3, r6
 8002c4a:	b29e      	uxth	r6, r3
 8002c4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f04f 0100 	mov.w	r1, #0
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	1894      	adds	r4, r2, r2
 8002c5a:	603c      	str	r4, [r7, #0]
 8002c5c:	415b      	adcs	r3, r3
 8002c5e:	607b      	str	r3, [r7, #4]
 8002c60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c64:	1812      	adds	r2, r2, r0
 8002c66:	eb41 0303 	adc.w	r3, r1, r3
 8002c6a:	f04f 0400 	mov.w	r4, #0
 8002c6e:	f04f 0500 	mov.w	r5, #0
 8002c72:	00dd      	lsls	r5, r3, #3
 8002c74:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002c78:	00d4      	lsls	r4, r2, #3
 8002c7a:	4622      	mov	r2, r4
 8002c7c:	462b      	mov	r3, r5
 8002c7e:	1814      	adds	r4, r2, r0
 8002c80:	63bc      	str	r4, [r7, #56]	; 0x38
 8002c82:	414b      	adcs	r3, r1
 8002c84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f04f 0100 	mov.w	r1, #0
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	008b      	lsls	r3, r1, #2
 8002c98:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002c9c:	0082      	lsls	r2, r0, #2
 8002c9e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002ca2:	f7fd fa91 	bl	80001c8 <__aeabi_uldivmod>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <LL_USART_SetBaudRate+0x31c>)
 8002cac:	fba3 1302 	umull	r1, r3, r3, r2
 8002cb0:	095b      	lsrs	r3, r3, #5
 8002cb2:	2164      	movs	r1, #100	; 0x64
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	011b      	lsls	r3, r3, #4
 8002cbc:	3332      	adds	r3, #50	; 0x32
 8002cbe:	4a09      	ldr	r2, [pc, #36]	; (8002ce4 <LL_USART_SetBaudRate+0x31c>)
 8002cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc4:	095b      	lsrs	r3, r3, #5
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	4433      	add	r3, r6
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cd6:	609a      	str	r2, [r3, #8]
}
 8002cd8:	bf00      	nop
 8002cda:	377c      	adds	r7, #124	; 0x7c
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ce2:	bf00      	nop
 8002ce4:	51eb851f 	.word	0x51eb851f

08002ce8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff fe2a 	bl	8002954 <LL_USART_IsEnabled>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d15e      	bne.n	8002dc4 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002d0e:	f023 030c 	bic.w	r3, r3, #12
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	6851      	ldr	r1, [r2, #4]
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	68d2      	ldr	r2, [r2, #12]
 8002d1a:	4311      	orrs	r1, r2
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	6912      	ldr	r2, [r2, #16]
 8002d20:	4311      	orrs	r1, r2
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	6992      	ldr	r2, [r2, #24]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	4619      	mov	r1, r3
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7ff fe21 	bl	800297c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	4619      	mov	r1, r3
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7ff fe2e 	bl	80029a2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002d46:	f107 0308 	add.w	r3, r7, #8
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff f988 	bl	8002060 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a1f      	ldr	r2, [pc, #124]	; (8002dd0 <LL_USART_Init+0xe8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d102      	bne.n	8002d5e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	61bb      	str	r3, [r7, #24]
 8002d5c:	e021      	b.n	8002da2 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a1c      	ldr	r2, [pc, #112]	; (8002dd4 <LL_USART_Init+0xec>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d102      	bne.n	8002d6c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	61bb      	str	r3, [r7, #24]
 8002d6a:	e01a      	b.n	8002da2 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a1a      	ldr	r2, [pc, #104]	; (8002dd8 <LL_USART_Init+0xf0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d102      	bne.n	8002d7a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	61bb      	str	r3, [r7, #24]
 8002d78:	e013      	b.n	8002da2 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a17      	ldr	r2, [pc, #92]	; (8002ddc <LL_USART_Init+0xf4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d102      	bne.n	8002d88 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	61bb      	str	r3, [r7, #24]
 8002d86:	e00c      	b.n	8002da2 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a15      	ldr	r2, [pc, #84]	; (8002de0 <LL_USART_Init+0xf8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d102      	bne.n	8002d96 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	61bb      	str	r3, [r7, #24]
 8002d94:	e005      	b.n	8002da2 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a12      	ldr	r2, [pc, #72]	; (8002de4 <LL_USART_Init+0xfc>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d101      	bne.n	8002da2 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00d      	beq.n	8002dc4 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d009      	beq.n	8002dc4 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8002db0:	2300      	movs	r3, #0
 8002db2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	699a      	ldr	r2, [r3, #24]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	69b9      	ldr	r1, [r7, #24]
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff fe02 	bl	80029c8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002dc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3720      	adds	r7, #32
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40011000 	.word	0x40011000
 8002dd4:	40004400 	.word	0x40004400
 8002dd8:	40004800 	.word	0x40004800
 8002ddc:	40011400 	.word	0x40011400
 8002de0:	40004c00 	.word	0x40004c00
 8002de4:	40005000 	.word	0x40005000

08002de8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfa:	4a07      	ldr	r2, [pc, #28]	; (8002e18 <LL_InitTick+0x30>)
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <LL_InitTick+0x30>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e06:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <LL_InitTick+0x30>)
 8002e08:	2205      	movs	r2, #5
 8002e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	e000e010 	.word	0xe000e010

08002e1c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002e24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff ffdd 	bl	8002de8 <LL_InitTick>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002e40:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <LL_mDelay+0x48>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002e46:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4e:	d00c      	beq.n	8002e6a <LL_mDelay+0x32>
  {
    Delay++;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3301      	adds	r3, #1
 8002e54:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002e56:	e008      	b.n	8002e6a <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002e58:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <LL_mDelay+0x48>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <LL_mDelay+0x32>
    {
      Delay--;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1f3      	bne.n	8002e58 <LL_mDelay+0x20>
    }
  }
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	e000e010 	.word	0xe000e010

08002e84 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002e8c:	4a04      	ldr	r2, [pc, #16]	; (8002ea0 <LL_SetSystemCoreClock+0x1c>)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6013      	str	r3, [r2, #0]
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000000 	.word	0x20000000

08002ea4 <__libc_init_array>:
 8002ea4:	b570      	push	{r4, r5, r6, lr}
 8002ea6:	4d0d      	ldr	r5, [pc, #52]	; (8002edc <__libc_init_array+0x38>)
 8002ea8:	4c0d      	ldr	r4, [pc, #52]	; (8002ee0 <__libc_init_array+0x3c>)
 8002eaa:	1b64      	subs	r4, r4, r5
 8002eac:	10a4      	asrs	r4, r4, #2
 8002eae:	2600      	movs	r6, #0
 8002eb0:	42a6      	cmp	r6, r4
 8002eb2:	d109      	bne.n	8002ec8 <__libc_init_array+0x24>
 8002eb4:	4d0b      	ldr	r5, [pc, #44]	; (8002ee4 <__libc_init_array+0x40>)
 8002eb6:	4c0c      	ldr	r4, [pc, #48]	; (8002ee8 <__libc_init_array+0x44>)
 8002eb8:	f000 f820 	bl	8002efc <_init>
 8002ebc:	1b64      	subs	r4, r4, r5
 8002ebe:	10a4      	asrs	r4, r4, #2
 8002ec0:	2600      	movs	r6, #0
 8002ec2:	42a6      	cmp	r6, r4
 8002ec4:	d105      	bne.n	8002ed2 <__libc_init_array+0x2e>
 8002ec6:	bd70      	pop	{r4, r5, r6, pc}
 8002ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ecc:	4798      	blx	r3
 8002ece:	3601      	adds	r6, #1
 8002ed0:	e7ee      	b.n	8002eb0 <__libc_init_array+0xc>
 8002ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ed6:	4798      	blx	r3
 8002ed8:	3601      	adds	r6, #1
 8002eda:	e7f2      	b.n	8002ec2 <__libc_init_array+0x1e>
 8002edc:	08002f54 	.word	0x08002f54
 8002ee0:	08002f54 	.word	0x08002f54
 8002ee4:	08002f54 	.word	0x08002f54
 8002ee8:	08002f58 	.word	0x08002f58

08002eec <memset>:
 8002eec:	4402      	add	r2, r0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d100      	bne.n	8002ef6 <memset+0xa>
 8002ef4:	4770      	bx	lr
 8002ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8002efa:	e7f9      	b.n	8002ef0 <memset+0x4>

08002efc <_init>:
 8002efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efe:	bf00      	nop
 8002f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f02:	bc08      	pop	{r3}
 8002f04:	469e      	mov	lr, r3
 8002f06:	4770      	bx	lr

08002f08 <_fini>:
 8002f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0a:	bf00      	nop
 8002f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0e:	bc08      	pop	{r3}
 8002f10:	469e      	mov	lr, r3
 8002f12:	4770      	bx	lr
