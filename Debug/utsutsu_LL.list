
utsutsu_LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08006e40  08006e40  00016e40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007274  08007274  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007274  08007274  00017274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800727c  0800727c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800727c  0800727c  0001727c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007280  08007280  00017280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  200001d4  08007458  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08007458  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000019d1  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007bc  00000000  00000000  00021bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00022398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  00022ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00003cb0  00000000  00000000  00023890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000160c  00000000  00000000  00027540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00028b4c  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003c58  00000000  00000000  00028ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e24 	.word	0x08006e24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08006e24 	.word	0x08006e24

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <WaitMs>:
{
	LL_TIM_DisableCounter(TIM6);
	LL_TIM_DisableIT_UPDATE(TIM6);
}

void WaitMs(uint16_t ms){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	80fb      	strh	r3, [r7, #6]
	LL_mDelay(ms);
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f003 f999 	bl	80041e4 <LL_mDelay>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f043 0201 	orr.w	r2, r3, #1
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	601a      	str	r2, [r3, #0]
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	683a      	ldr	r2, [r7, #0]
 8000ee8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	683a      	ldr	r2, [r7, #0]
 8000f04:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
 8000f1a:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a1a      	ldr	r2, [r3, #32]
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	431a      	orrs	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	621a      	str	r2, [r3, #32]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	683a      	ldr	r2, [r7, #0]
 8000f42:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <enableMelody>:
#include "Hardware/buzzer.h"
#include"Hardware/basic_timer.h"

#include"stm32f4xx_ll_tim.h"

void enableMelody(void){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM8, LL_TIM_CHANNEL_CH4);
 8000f74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f78:	4805      	ldr	r0, [pc, #20]	; (8000f90 <enableMelody+0x20>)
 8000f7a:	f7ff ffca 	bl	8000f12 <LL_TIM_CC_EnableChannel>
	LL_TIM_EnableCounter(TIM8);
 8000f7e:	4804      	ldr	r0, [pc, #16]	; (8000f90 <enableMelody+0x20>)
 8000f80:	f7ff ff9b 	bl	8000eba <LL_TIM_EnableCounter>

	LL_TIM_EnableAllOutputs(TIM8);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <enableMelody+0x20>)
 8000f86:	f7ff ffe3 	bl	8000f50 <LL_TIM_EnableAllOutputs>

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40010400 	.word	0x40010400

08000f94 <stopMelody>:
void disableMelody(void){
	LL_TIM_CC_DisableChannel(TIM8, LL_TIM_CHANNEL_CH4);
	LL_TIM_DisableCounter(TIM8);
}

void stopMelody(void){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	LL_TIM_OC_SetCompareCH4(TIM8, 0);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <stopMelody+0x10>)
 8000f9c:	f7ff ffca 	bl	8000f34 <LL_TIM_OC_SetCompareCH4>
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40010400 	.word	0x40010400

08000fa8 <Melody>:

void Melody(uint16_t hz, uint16_t ms)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	460a      	mov	r2, r1
 8000fb2:	80fb      	strh	r3, [r7, #6]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	80bb      	strh	r3, [r7, #4]
	LL_TIM_SetAutoReload(TIM8,100000/hz);
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <Melody+0x4c>)
 8000fbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <Melody+0x50>)
 8000fc4:	f7ff ff97 	bl	8000ef6 <LL_TIM_SetAutoReload>
	LL_TIM_OC_SetCompareCH4(TIM8, 95000 / hz );
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <Melody+0x54>)
 8000fcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <Melody+0x50>)
 8000fd4:	f7ff ffae 	bl	8000f34 <LL_TIM_OC_SetCompareCH4>
	LL_TIM_SetCounter(TIM8, 0);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4807      	ldr	r0, [pc, #28]	; (8000ff8 <Melody+0x50>)
 8000fdc:	f7ff ff7d 	bl	8000eda <LL_TIM_SetCounter>
	WaitMs(ms);
 8000fe0:	88bb      	ldrh	r3, [r7, #4]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff5c 	bl	8000ea0 <WaitMs>
	stopMelody();
 8000fe8:	f7ff ffd4 	bl	8000f94 <stopMelody>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	000186a0 	.word	0x000186a0
 8000ff8:	40010400 	.word	0x40010400
 8000ffc:	00017318 	.word	0x00017318

08001000 <setLED1State>:
 */

#include"Hardware/interface_LED.h"
#include"main.h"

void setLED1State(uint8_t state)	{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	if (state == 0) LED1_GPIO_Port->BSRR = LED1_Pin;
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d104      	bne.n	800101a <setLED1State+0x1a>
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <setLED1State+0x30>)
 8001012:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001016:	619a      	str	r2, [r3, #24]
	else			LED1_GPIO_Port->BSRR = (LED1_Pin << 16);
}
 8001018:	e003      	b.n	8001022 <setLED1State+0x22>
	else			LED1_GPIO_Port->BSRR = (LED1_Pin << 16);
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <setLED1State+0x30>)
 800101c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001020:	619a      	str	r2, [r3, #24]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40020400 	.word	0x40020400

08001034 <setLED2State>:
void setLED2State(uint8_t state)	{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
	if (state == 0) LED2_GPIO_Port->BSRR = LED2_Pin;
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d104      	bne.n	800104e <setLED2State+0x1a>
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <setLED2State+0x30>)
 8001046:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800104a:	619a      	str	r2, [r3, #24]
	else			LED2_GPIO_Port->BSRR = (LED2_Pin << 16);
}
 800104c:	e003      	b.n	8001056 <setLED2State+0x22>
	else			LED2_GPIO_Port->BSRR = (LED2_Pin << 16);
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <setLED2State+0x30>)
 8001050:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001054:	619a      	str	r2, [r3, #24]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40020400 	.word	0x40020400

08001068 <setLED3State>:
void setLED3State(uint8_t state)	{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	if (state == 0) LED3_GPIO_Port->BSRR = LED3_Pin;
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d104      	bne.n	8001082 <setLED3State+0x1a>
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <setLED3State+0x30>)
 800107a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800107e:	619a      	str	r2, [r3, #24]
	else			LED3_GPIO_Port->BSRR = (LED3_Pin << 16);
}
 8001080:	e003      	b.n	800108a <setLED3State+0x22>
	else			LED3_GPIO_Port->BSRR = (LED3_Pin << 16);
 8001082:	4b05      	ldr	r3, [pc, #20]	; (8001098 <setLED3State+0x30>)
 8001084:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001088:	619a      	str	r2, [r3, #24]
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40020800 	.word	0x40020800

0800109c <setLED4State>:
void setLED4State(uint8_t state)	{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
	if (state == 0) LED4_GPIO_Port->BSRR = LED4_Pin;
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d103      	bne.n	80010b4 <setLED4State+0x18>
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <setLED4State+0x2c>)
 80010ae:	2210      	movs	r2, #16
 80010b0:	619a      	str	r2, [r3, #24]
	else			LED4_GPIO_Port->BSRR = (LED4_Pin << 16);
}
 80010b2:	e003      	b.n	80010bc <setLED4State+0x20>
	else			LED4_GPIO_Port->BSRR = (LED4_Pin << 16);
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <setLED4State+0x2c>)
 80010b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010ba:	619a      	str	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	40020400 	.word	0x40020400

080010cc <setLED5State>:
void setLED5State(uint8_t state)	{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
	if (state == 0) LED5_GPIO_Port->BSRR = LED5_Pin;
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d103      	bne.n	80010e4 <setLED5State+0x18>
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <setLED5State+0x2c>)
 80010de:	2220      	movs	r2, #32
 80010e0:	619a      	str	r2, [r3, #24]
	else			LED5_GPIO_Port->BSRR = (LED5_Pin << 16);
}
 80010e2:	e003      	b.n	80010ec <setLED5State+0x20>
	else			LED5_GPIO_Port->BSRR = (LED5_Pin << 16);
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <setLED5State+0x2c>)
 80010e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010ea:	619a      	str	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	40020400 	.word	0x40020400

080010fc <callbackTIM>:
#include "System/callback.h"
#include"Hardware/interface_LED.h"

extern uint16_t tim_counter;

void callbackTIM(void){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	static uint16_t l_state;

	tim_counter++;
 8001100:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <callbackTIM+0x3c>)
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	3301      	adds	r3, #1
 8001106:	b29a      	uxth	r2, r3
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <callbackTIM+0x3c>)
 800110a:	801a      	strh	r2, [r3, #0]

	if(tim_counter > 3000) 	l_state = 0;
 800110c:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <callbackTIM+0x3c>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001114:	4293      	cmp	r3, r2
 8001116:	d903      	bls.n	8001120 <callbackTIM+0x24>
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <callbackTIM+0x40>)
 800111a:	2200      	movs	r2, #0
 800111c:	801a      	strh	r2, [r3, #0]
 800111e:	e002      	b.n	8001126 <callbackTIM+0x2a>
	else					l_state = 1;
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <callbackTIM+0x40>)
 8001122:	2201      	movs	r2, #1
 8001124:	801a      	strh	r2, [r3, #0]

	setLED5State(l_state);
 8001126:	4b05      	ldr	r3, [pc, #20]	; (800113c <callbackTIM+0x40>)
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ffcd 	bl	80010cc <setLED5State>

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000200 	.word	0x20000200
 800113c:	200001f0 	.word	0x200001f0

08001140 <MelodyRayearth>:
	Melody(c7,50);
	WaitMs(50);
	Melody(c7,200);
}

void MelodyRayearth(void){
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	Melody(f5,100);
 8001144:	2164      	movs	r1, #100	; 0x64
 8001146:	f240 20ba 	movw	r0, #698	; 0x2ba
 800114a:	f7ff ff2d 	bl	8000fa8 <Melody>
	WaitMs(10);
 800114e:	200a      	movs	r0, #10
 8001150:	f7ff fea6 	bl	8000ea0 <WaitMs>
	Melody(f5,600);
 8001154:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001158:	f240 20ba 	movw	r0, #698	; 0x2ba
 800115c:	f7ff ff24 	bl	8000fa8 <Melody>
	Melody(c6,400);
 8001160:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001164:	f240 4016 	movw	r0, #1046	; 0x416
 8001168:	f7ff ff1e 	bl	8000fa8 <Melody>
	Melody(d6,200);
 800116c:	21c8      	movs	r1, #200	; 0xc8
 800116e:	f240 4096 	movw	r0, #1174	; 0x496
 8001172:	f7ff ff19 	bl	8000fa8 <Melody>
	Melody(a5h,600);
 8001176:	f44f 7116 	mov.w	r1, #600	; 0x258
 800117a:	f44f 7069 	mov.w	r0, #932	; 0x3a4
 800117e:	f7ff ff13 	bl	8000fa8 <Melody>

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}

08001186 <MelodyGoal>:

void MelodyGoal(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	af00      	add	r7, sp, #0
	Melody(g6,300);
 800118a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800118e:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 8001192:	f7ff ff09 	bl	8000fa8 <Melody>
	Melody(f6,300);
 8001196:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800119a:	f240 5075 	movw	r0, #1397	; 0x575
 800119e:	f7ff ff03 	bl	8000fa8 <Melody>
	Melody(e6,300);
 80011a2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80011a6:	f240 5026 	movw	r0, #1318	; 0x526
 80011aa:	f7ff fefd 	bl	8000fa8 <Melody>

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <MelodyUrara>:

void MelodyUrara(void){
 80011b2:	b580      	push	{r7, lr}
 80011b4:	af00      	add	r7, sp, #0
	Melody(d7,100);
 80011b6:	2164      	movs	r1, #100	; 0x64
 80011b8:	f640 102d 	movw	r0, #2349	; 0x92d
 80011bc:	f7ff fef4 	bl	8000fa8 <Melody>
	Melody(a6,100);
 80011c0:	2164      	movs	r1, #100	; 0x64
 80011c2:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 80011c6:	f7ff feef 	bl	8000fa8 <Melody>
	WaitMs(10);
 80011ca:	200a      	movs	r0, #10
 80011cc:	f7ff fe68 	bl	8000ea0 <WaitMs>
	Melody(a6,200);
 80011d0:	21c8      	movs	r1, #200	; 0xc8
 80011d2:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 80011d6:	f7ff fee7 	bl	8000fa8 <Melody>
	WaitMs(50);
 80011da:	2032      	movs	r0, #50	; 0x32
 80011dc:	f7ff fe60 	bl	8000ea0 <WaitMs>

	Melody(d7,100);
 80011e0:	2164      	movs	r1, #100	; 0x64
 80011e2:	f640 102d 	movw	r0, #2349	; 0x92d
 80011e6:	f7ff fedf 	bl	8000fa8 <Melody>
	Melody(a6,100);
 80011ea:	2164      	movs	r1, #100	; 0x64
 80011ec:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 80011f0:	f7ff feda 	bl	8000fa8 <Melody>
	WaitMs(10);
 80011f4:	200a      	movs	r0, #10
 80011f6:	f7ff fe53 	bl	8000ea0 <WaitMs>
	Melody(a6,200);
 80011fa:	21c8      	movs	r1, #200	; 0xc8
 80011fc:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8001200:	f7ff fed2 	bl	8000fa8 <Melody>
	WaitMs(50);
 8001204:	2032      	movs	r0, #50	; 0x32
 8001206:	f7ff fe4b 	bl	8000ea0 <WaitMs>

	Melody(d7,100);
 800120a:	2164      	movs	r1, #100	; 0x64
 800120c:	f640 102d 	movw	r0, #2349	; 0x92d
 8001210:	f7ff feca 	bl	8000fa8 <Melody>
	Melody(c7,100);
 8001214:	2164      	movs	r1, #100	; 0x64
 8001216:	f640 002d 	movw	r0, #2093	; 0x82d
 800121a:	f7ff fec5 	bl	8000fa8 <Melody>
	Melody(d7,100);
 800121e:	2164      	movs	r1, #100	; 0x64
 8001220:	f640 102d 	movw	r0, #2349	; 0x92d
 8001224:	f7ff fec0 	bl	8000fa8 <Melody>
	Melody(c7,100);
 8001228:	2164      	movs	r1, #100	; 0x64
 800122a:	f640 002d 	movw	r0, #2093	; 0x82d
 800122e:	f7ff febb 	bl	8000fa8 <Melody>
	Melody(a6,200);
 8001232:	21c8      	movs	r1, #200	; 0xc8
 8001234:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8001238:	f7ff feb6 	bl	8000fa8 <Melody>
	WaitMs(50);
 800123c:	2032      	movs	r0, #50	; 0x32
 800123e:	f7ff fe2f 	bl	8000ea0 <WaitMs>

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}

08001246 <MelodyMrLawrence>:

void MelodyMrLawrence()
{
 8001246:	b580      	push	{r7, lr}
 8001248:	af00      	add	r7, sp, #0
	Melody(d7,100);
 800124a:	2164      	movs	r1, #100	; 0x64
 800124c:	f640 102d 	movw	r0, #2349	; 0x92d
 8001250:	f7ff feaa 	bl	8000fa8 <Melody>
	Melody(e7,100);
 8001254:	2164      	movs	r1, #100	; 0x64
 8001256:	f640 204d 	movw	r0, #2637	; 0xa4d
 800125a:	f7ff fea5 	bl	8000fa8 <Melody>
	Melody(d7,100);
 800125e:	2164      	movs	r1, #100	; 0x64
 8001260:	f640 102d 	movw	r0, #2349	; 0x92d
 8001264:	f7ff fea0 	bl	8000fa8 <Melody>
	Melody(a6,100);
 8001268:	2164      	movs	r1, #100	; 0x64
 800126a:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 800126e:	f7ff fe9b 	bl	8000fa8 <Melody>
	Melody(d7,100);
 8001272:	2164      	movs	r1, #100	; 0x64
 8001274:	f640 102d 	movw	r0, #2349	; 0x92d
 8001278:	f7ff fe96 	bl	8000fa8 <Melody>

	WaitMs(400);
 800127c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001280:	f7ff fe0e 	bl	8000ea0 <WaitMs>

	Melody(d7,100);
 8001284:	2164      	movs	r1, #100	; 0x64
 8001286:	f640 102d 	movw	r0, #2349	; 0x92d
 800128a:	f7ff fe8d 	bl	8000fa8 <Melody>
	Melody(e7,100);
 800128e:	2164      	movs	r1, #100	; 0x64
 8001290:	f640 204d 	movw	r0, #2637	; 0xa4d
 8001294:	f7ff fe88 	bl	8000fa8 <Melody>
	Melody(d7,100);
 8001298:	2164      	movs	r1, #100	; 0x64
 800129a:	f640 102d 	movw	r0, #2349	; 0x92d
 800129e:	f7ff fe83 	bl	8000fa8 <Melody>
	Melody(e6,100);
 80012a2:	2164      	movs	r1, #100	; 0x64
 80012a4:	f240 5026 	movw	r0, #1318	; 0x526
 80012a8:	f7ff fe7e 	bl	8000fa8 <Melody>
	Melody(g7,100);
 80012ac:	2164      	movs	r1, #100	; 0x64
 80012ae:	f44f 6044 	mov.w	r0, #3136	; 0xc40
 80012b2:	f7ff fe79 	bl	8000fa8 <Melody>
	Melody(e6,100);
 80012b6:	2164      	movs	r1, #100	; 0x64
 80012b8:	f240 5026 	movw	r0, #1318	; 0x526
 80012bc:	f7ff fe74 	bl	8000fa8 <Melody>
	Melody(d7,100);
 80012c0:	2164      	movs	r1, #100	; 0x64
 80012c2:	f640 102d 	movw	r0, #2349	; 0x92d
 80012c6:	f7ff fe6f 	bl	8000fa8 <Melody>
	Melody(e7,100);
 80012ca:	2164      	movs	r1, #100	; 0x64
 80012cc:	f640 204d 	movw	r0, #2637	; 0xa4d
 80012d0:	f7ff fe6a 	bl	8000fa8 <Melody>
	Melody(d7,100);
 80012d4:	2164      	movs	r1, #100	; 0x64
 80012d6:	f640 102d 	movw	r0, #2349	; 0x92d
 80012da:	f7ff fe65 	bl	8000fa8 <Melody>
	Melody(c7,100);
 80012de:	2164      	movs	r1, #100	; 0x64
 80012e0:	f640 002d 	movw	r0, #2093	; 0x82d
 80012e4:	f7ff fe60 	bl	8000fa8 <Melody>
	Melody(a6,100);
 80012e8:	2164      	movs	r1, #100	; 0x64
 80012ea:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 80012ee:	f7ff fe5b 	bl	8000fa8 <Melody>

}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <MelodyNatsumatsuri>:

void MelodyNatsumatsuri()
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	af00      	add	r7, sp, #0
	Melody(d6,200);
 80012fa:	21c8      	movs	r1, #200	; 0xc8
 80012fc:	f240 4096 	movw	r0, #1174	; 0x496
 8001300:	f7ff fe52 	bl	8000fa8 <Melody>
	Melody(f6,200);
 8001304:	21c8      	movs	r1, #200	; 0xc8
 8001306:	f240 5075 	movw	r0, #1397	; 0x575
 800130a:	f7ff fe4d 	bl	8000fa8 <Melody>
	Melody(g6,200);
 800130e:	21c8      	movs	r1, #200	; 0xc8
 8001310:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 8001314:	f7ff fe48 	bl	8000fa8 <Melody>
	Melody(f6,100);
 8001318:	2164      	movs	r1, #100	; 0x64
 800131a:	f240 5075 	movw	r0, #1397	; 0x575
 800131e:	f7ff fe43 	bl	8000fa8 <Melody>
	Melody(g6,100);
 8001322:	2164      	movs	r1, #100	; 0x64
 8001324:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 8001328:	f7ff fe3e 	bl	8000fa8 <Melody>
	Melody(a6,200);
 800132c:	21c8      	movs	r1, #200	; 0xc8
 800132e:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8001332:	f7ff fe39 	bl	8000fa8 <Melody>
	Melody(c6,200);
 8001336:	21c8      	movs	r1, #200	; 0xc8
 8001338:	f240 4016 	movw	r0, #1046	; 0x416
 800133c:	f7ff fe34 	bl	8000fa8 <Melody>
	Melody(d6,200);
 8001340:	21c8      	movs	r1, #200	; 0xc8
 8001342:	f240 4096 	movw	r0, #1174	; 0x496
 8001346:	f7ff fe2f 	bl	8000fa8 <Melody>


}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}

0800134e <MelodyKurenai>:

void MelodyKurenai(void){
 800134e:	b580      	push	{r7, lr}
 8001350:	af00      	add	r7, sp, #0
	Melody(c7,300);
 8001352:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001356:	f640 002d 	movw	r0, #2093	; 0x82d
 800135a:	f7ff fe25 	bl	8000fa8 <Melody>
	WaitMs(10);
 800135e:	200a      	movs	r0, #10
 8001360:	f7ff fd9e 	bl	8000ea0 <WaitMs>
	Melody(c7,100);
 8001364:	2164      	movs	r1, #100	; 0x64
 8001366:	f640 002d 	movw	r0, #2093	; 0x82d
 800136a:	f7ff fe1d 	bl	8000fa8 <Melody>
	Melody(b6,100);
 800136e:	2164      	movs	r1, #100	; 0x64
 8001370:	f44f 60f7 	mov.w	r0, #1976	; 0x7b8
 8001374:	f7ff fe18 	bl	8000fa8 <Melody>
	Melody(c7,300);
 8001378:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800137c:	f640 002d 	movw	r0, #2093	; 0x82d
 8001380:	f7ff fe12 	bl	8000fa8 <Melody>
	WaitMs(10);
 8001384:	200a      	movs	r0, #10
 8001386:	f7ff fd8b 	bl	8000ea0 <WaitMs>
	Melody(d6,100);
 800138a:	2164      	movs	r1, #100	; 0x64
 800138c:	f240 4096 	movw	r0, #1174	; 0x496
 8001390:	f7ff fe0a 	bl	8000fa8 <Melody>
	Melody(e7,300);
 8001394:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001398:	f640 204d 	movw	r0, #2637	; 0xa4d
 800139c:	f7ff fe04 	bl	8000fa8 <Melody>
	Melody(d7,100);
 80013a0:	2164      	movs	r1, #100	; 0x64
 80013a2:	f640 102d 	movw	r0, #2349	; 0x92d
 80013a6:	f7ff fdff 	bl	8000fa8 <Melody>
	Melody(c7,100);
 80013aa:	2164      	movs	r1, #100	; 0x64
 80013ac:	f640 002d 	movw	r0, #2093	; 0x82d
 80013b0:	f7ff fdfa 	bl	8000fa8 <Melody>
	Melody(b6,300);
 80013b4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80013b8:	f44f 60f7 	mov.w	r0, #1976	; 0x7b8
 80013bc:	f7ff fdf4 	bl	8000fa8 <Melody>

}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <MelodyYamato>:

void MelodyYamato(){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	Melody(e6,100);
 80013c8:	2164      	movs	r1, #100	; 0x64
 80013ca:	f240 5026 	movw	r0, #1318	; 0x526
 80013ce:	f7ff fdeb 	bl	8000fa8 <Melody>
	WaitMs(10);
 80013d2:	200a      	movs	r0, #10
 80013d4:	f7ff fd64 	bl	8000ea0 <WaitMs>
	Melody(e6,200);
 80013d8:	21c8      	movs	r1, #200	; 0xc8
 80013da:	f240 5026 	movw	r0, #1318	; 0x526
 80013de:	f7ff fde3 	bl	8000fa8 <Melody>
	Melody(f6,100);
 80013e2:	2164      	movs	r1, #100	; 0x64
 80013e4:	f240 5075 	movw	r0, #1397	; 0x575
 80013e8:	f7ff fdde 	bl	8000fa8 <Melody>
	Melody(e6,200);
 80013ec:	21c8      	movs	r1, #200	; 0xc8
 80013ee:	f240 5026 	movw	r0, #1318	; 0x526
 80013f2:	f7ff fdd9 	bl	8000fa8 <Melody>
	Melody(c6,200);
 80013f6:	21c8      	movs	r1, #200	; 0xc8
 80013f8:	f240 4016 	movw	r0, #1046	; 0x416
 80013fc:	f7ff fdd4 	bl	8000fa8 <Melody>

	Melody(f6,400);
 8001400:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001404:	f240 5075 	movw	r0, #1397	; 0x575
 8001408:	f7ff fdce 	bl	8000fa8 <Melody>
	Melody(e6,400);
 800140c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001410:	f240 5026 	movw	r0, #1318	; 0x526
 8001414:	f7ff fdc8 	bl	8000fa8 <Melody>
	Melody(d6,400);
 8001418:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800141c:	f240 4096 	movw	r0, #1174	; 0x496
 8001420:	f7ff fdc2 	bl	8000fa8 <Melody>

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001428:	b480      	push	{r7}
 800142a:	b089      	sub	sp, #36	; 0x24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	332c      	adds	r3, #44	; 0x2c
 8001438:	4619      	mov	r1, r3
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001440:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001444:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	fa92 f2a2 	rbit	r2, r2
 800144c:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	fab2 f282 	clz	r2, r2
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	40d3      	lsrs	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	440b      	add	r3, r1
 800145c:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	f003 031f 	and.w	r3, r3, #31
 8001468:	211f      	movs	r1, #31
 800146a:	fa01 f303 	lsl.w	r3, r1, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	401a      	ands	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f003 011f 	and.w	r1, r3, #31
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	f003 031f 	and.w	r3, r3, #31
 800147e:	fa01 f303 	lsl.w	r3, r1, r3
 8001482:	431a      	orrs	r2, r3
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001488:	bf00      	nop
 800148a:	3724      	adds	r7, #36	; 0x24
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	609a      	str	r2, [r3, #8]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b08d      	sub	sp, #52	; 0x34
 80014be:	af00      	add	r7, sp, #0
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	330c      	adds	r3, #12
 80014ca:	4619      	mov	r1, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	fa92 f2a2 	rbit	r2, r2
 80014de:	617a      	str	r2, [r7, #20]
  return result;
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	fab2 f282 	clz	r2, r2
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	40d3      	lsrs	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 80014f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80014fa:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80014fe:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001500:	6a39      	ldr	r1, [r7, #32]
 8001502:	fa91 f1a1 	rbit	r1, r1
 8001506:	61f9      	str	r1, [r7, #28]
  return result;
 8001508:	69f9      	ldr	r1, [r7, #28]
 800150a:	fab1 f181 	clz	r1, r1
 800150e:	b2c9      	uxtb	r1, r1
 8001510:	40cb      	lsrs	r3, r1
 8001512:	2107      	movs	r1, #7
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	401a      	ands	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001522:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001526:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001528:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800152a:	fa91 f1a1 	rbit	r1, r1
 800152e:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8001530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001532:	fab1 f181 	clz	r1, r1
 8001536:	b2c9      	uxtb	r1, r1
 8001538:	40cb      	lsrs	r3, r1
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	fa01 f303 	lsl.w	r3, r1, r3
 8001540:	431a      	orrs	r2, r3
 8001542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001544:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8001546:	bf00      	nop
 8001548:	3734      	adds	r7, #52	; 0x34
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800155e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001560:	4907      	ldr	r1, [pc, #28]	; (8001580 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4313      	orrs	r3, r2
 8001566:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800156a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4013      	ands	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001572:	68fb      	ldr	r3, [r7, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	40023800 	.word	0x40023800

08001584 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800158e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001590:	4907      	ldr	r1, [pc, #28]	; (80015b0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4313      	orrs	r3, r2
 8001596:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800159a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4013      	ands	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015a2:	68fb      	ldr	r3, [r7, #12]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	40023800 	.word	0x40023800

080015b4 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b092      	sub	sp, #72	; 0x48
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80015ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80015c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80015d6:	f107 0318 	add.w	r3, r7, #24
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	463b      	mov	r3, r7
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]
 80015f2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80015f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80015f8:	f7ff ffc4 	bl	8001584 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80015fc:	2001      	movs	r0, #1
 80015fe:	f7ff ffa9 	bl	8001554 <LL_AHB1_GRP1_EnableClock>
  PA1   ------> ADC1_IN1
  PA2   ------> ADC1_IN2
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  */
  GPIO_InitStruct.Pin = AD_FR_Pin|AD_R_Pin|AD_FF_Pin|AD_L_Pin
 8001602:	2337      	movs	r3, #55	; 0x37
 8001604:	603b      	str	r3, [r7, #0]
                          |AD_FL_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001606:	2303      	movs	r3, #3
 8001608:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	463b      	mov	r3, r7
 8001610:	4619      	mov	r1, r3
 8001612:	481f      	ldr	r0, [pc, #124]	; (8001690 <MX_ADC1_Init+0xdc>)
 8001614:	f001 fe17 	bl	8003246 <LL_GPIO_Init>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001618:	2300      	movs	r3, #0
 800161a:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800161c:	2300      	movs	r3, #0
 800161e:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001624:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001628:	4619      	mov	r1, r3
 800162a:	481a      	ldr	r0, [pc, #104]	; (8001694 <MX_ADC1_Init+0xe0>)
 800162c:	f001 fc98 	bl	8002f60 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001630:	2300      	movs	r3, #0
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800163c:	2300      	movs	r3, #0
 800163e:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8001640:	2300      	movs	r3, #0
 8001642:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001648:	4619      	mov	r1, r3
 800164a:	4812      	ldr	r0, [pc, #72]	; (8001694 <MX_ADC1_Init+0xe0>)
 800164c:	f001 fcb4 	bl	8002fb8 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8001650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001654:	480f      	ldr	r0, [pc, #60]	; (8001694 <MX_ADC1_Init+0xe0>)
 8001656:	f7ff ff1d 	bl	8001494 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001662:	f107 0318 	add.w	r3, r7, #24
 8001666:	4619      	mov	r1, r3
 8001668:	480b      	ldr	r0, [pc, #44]	; (8001698 <MX_ADC1_Init+0xe4>)
 800166a:	f001 fc31 	bl	8002ed0 <LL_ADC_CommonInit>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 800166e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001672:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001676:	4807      	ldr	r0, [pc, #28]	; (8001694 <MX_ADC1_Init+0xe0>)
 8001678:	f7ff fed6 	bl	8001428 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 800167c:	2200      	movs	r2, #0
 800167e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001682:	4804      	ldr	r0, [pc, #16]	; (8001694 <MX_ADC1_Init+0xe0>)
 8001684:	f7ff ff19 	bl	80014ba <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001688:	bf00      	nop
 800168a:	3748      	adds	r7, #72	; 0x48
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40020000 	.word	0x40020000
 8001694:	40012000 	.word	0x40012000
 8001698:	40012300 	.word	0x40012300

0800169c <LL_AHB1_GRP1_EnableClock>:
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016a8:	4907      	ldr	r1, [pc, #28]	; (80016c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4013      	ands	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016ba:	68fb      	ldr	r3, [r7, #12]
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	40023800 	.word	0x40023800

080016cc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	041a      	lsls	r2, r3, #16
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	619a      	str	r2, [r3, #24]
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f2:	463b      	mov	r3, r7
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
 8001700:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001702:	2004      	movs	r0, #4
 8001704:	f7ff ffca 	bl	800169c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001708:	2001      	movs	r0, #1
 800170a:	f7ff ffc7 	bl	800169c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800170e:	2002      	movs	r0, #2
 8001710:	f7ff ffc4 	bl	800169c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001714:	2008      	movs	r0, #8
 8001716:	f7ff ffc1 	bl	800169c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, FrontRight_Pin|Right_Pin|STBY_Pin|LED3_Pin);
 800171a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800171e:	4830      	ldr	r0, [pc, #192]	; (80017e0 <MX_GPIO_Init+0xf4>)
 8001720:	f7ff ffd4 	bl	80016cc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, FrontCenter_Pin|Left_Pin|FrontLeft_Pin|RIGHT_DIR1_Pin
 8001724:	f24c 01c8 	movw	r1, #49352	; 0xc0c8
 8001728:	482e      	ldr	r0, [pc, #184]	; (80017e4 <MX_GPIO_Init+0xf8>)
 800172a:	f7ff ffcf 	bl	80016cc <LL_GPIO_ResetOutputPin>
                          |RIGHT_DIR2_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LEFT_DIR1_Pin|LEFT_DIR2_Pin|LED1_Pin|LED2_Pin
 800172e:	f24c 0133 	movw	r1, #49203	; 0xc033
 8001732:	482d      	ldr	r0, [pc, #180]	; (80017e8 <MX_GPIO_Init+0xfc>)
 8001734:	f7ff ffca 	bl	80016cc <LL_GPIO_ResetOutputPin>
                          |LED4_Pin|LED5_Pin);

  /**/
  LL_GPIO_ResetOutputPin(SPI_CS_GPIO_Port, SPI_CS_Pin);
 8001738:	2104      	movs	r1, #4
 800173a:	482c      	ldr	r0, [pc, #176]	; (80017ec <MX_GPIO_Init+0x100>)
 800173c:	f7ff ffc6 	bl	80016cc <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = FrontRight_Pin|Right_Pin|STBY_Pin|LED3_Pin;
 8001740:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001744:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001746:	2301      	movs	r3, #1
 8001748:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001756:	463b      	mov	r3, r7
 8001758:	4619      	mov	r1, r3
 800175a:	4821      	ldr	r0, [pc, #132]	; (80017e0 <MX_GPIO_Init+0xf4>)
 800175c:	f001 fd73 	bl	8003246 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FrontCenter_Pin|Left_Pin|FrontLeft_Pin|RIGHT_DIR1_Pin
 8001760:	f24c 03c8 	movw	r3, #49352	; 0xc0c8
 8001764:	603b      	str	r3, [r7, #0]
                          |RIGHT_DIR2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001766:	2301      	movs	r3, #1
 8001768:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	463b      	mov	r3, r7
 8001778:	4619      	mov	r1, r3
 800177a:	481a      	ldr	r0, [pc, #104]	; (80017e4 <MX_GPIO_Init+0xf8>)
 800177c:	f001 fd63 	bl	8003246 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LEFT_DIR1_Pin|LEFT_DIR2_Pin|LED1_Pin|LED2_Pin
 8001780:	f24c 0333 	movw	r3, #49203	; 0xc033
 8001784:	603b      	str	r3, [r7, #0]
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001786:	2301      	movs	r3, #1
 8001788:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001796:	463b      	mov	r3, r7
 8001798:	4619      	mov	r1, r3
 800179a:	4813      	ldr	r0, [pc, #76]	; (80017e8 <MX_GPIO_Init+0xfc>)
 800179c:	f001 fd53 	bl	8003246 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80017a0:	2304      	movs	r3, #4
 80017a2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80017a4:	2301      	movs	r3, #1
 80017a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017b0:	2300      	movs	r3, #0
 80017b2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80017b4:	463b      	mov	r3, r7
 80017b6:	4619      	mov	r1, r3
 80017b8:	480c      	ldr	r0, [pc, #48]	; (80017ec <MX_GPIO_Init+0x100>)
 80017ba:	f001 fd44 	bl	8003246 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80017be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80017c4:	2300      	movs	r3, #0
 80017c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017cc:	463b      	mov	r3, r7
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_GPIO_Init+0xfc>)
 80017d2:	f001 fd38 	bl	8003246 <LL_GPIO_Init>

}
 80017d6:	bf00      	nop
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40020800 	.word	0x40020800
 80017e4:	40020000 	.word	0x40020000
 80017e8:	40020400 	.word	0x40020400
 80017ec:	40020c00 	.word	0x40020c00

080017f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800180c:	4013      	ands	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800181c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001822:	4a04      	ldr	r2, [pc, #16]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	60d3      	str	r3, [r2, #12]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <LL_RCC_HSI_Enable+0x1c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a04      	ldr	r2, [pc, #16]	; (8001854 <LL_RCC_HSI_Enable+0x1c>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6013      	str	r3, [r2, #0]
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800

08001858 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <LL_RCC_HSI_IsReady+0x20>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b02      	cmp	r3, #2
 8001866:	bf0c      	ite	eq
 8001868:	2301      	moveq	r3, #1
 800186a:	2300      	movne	r3, #0
 800186c:	b2db      	uxtb	r3, r3
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	40023800 	.word	0x40023800

0800187c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	4904      	ldr	r1, [pc, #16]	; (80018a4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001892:	4313      	orrs	r3, r2
 8001894:	600b      	str	r3, [r1, #0]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800

080018a8 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <LL_RCC_SetSysClkSource+0x24>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f023 0203 	bic.w	r2, r3, #3
 80018b8:	4904      	ldr	r1, [pc, #16]	; (80018cc <LL_RCC_SetSysClkSource+0x24>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4313      	orrs	r3, r2
 80018be:	608b      	str	r3, [r1, #8]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	40023800 	.word	0x40023800

080018d0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <LL_RCC_GetSysClkSource+0x18>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 030c 	and.w	r3, r3, #12
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800

080018ec <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <LL_RCC_SetAHBPrescaler+0x24>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018fc:	4904      	ldr	r1, [pc, #16]	; (8001910 <LL_RCC_SetAHBPrescaler+0x24>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4313      	orrs	r3, r2
 8001902:	608b      	str	r3, [r1, #8]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	40023800 	.word	0x40023800

08001914 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <LL_RCC_SetAPB1Prescaler+0x24>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001924:	4904      	ldr	r1, [pc, #16]	; (8001938 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4313      	orrs	r3, r2
 800192a:	608b      	str	r3, [r1, #8]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	40023800 	.word	0x40023800

0800193c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800194c:	4904      	ldr	r1, [pc, #16]	; (8001960 <LL_RCC_SetAPB2Prescaler+0x24>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4313      	orrs	r3, r2
 8001952:	608b      	str	r3, [r1, #8]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	40023800 	.word	0x40023800

08001964 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001968:	4b05      	ldr	r3, [pc, #20]	; (8001980 <LL_RCC_PLL_Enable+0x1c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a04      	ldr	r2, [pc, #16]	; (8001980 <LL_RCC_PLL_Enable+0x1c>)
 800196e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001972:	6013      	str	r3, [r2, #0]
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800

08001984 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001988:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <LL_RCC_PLL_IsReady+0x24>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001990:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001994:	bf0c      	ite	eq
 8001996:	2301      	moveq	r3, #1
 8001998:	2300      	movne	r3, #0
 800199a:	b2db      	uxtb	r3, r3
}
 800199c:	4618      	mov	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800

080019ac <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
 80019b8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80019ba:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	68f9      	ldr	r1, [r7, #12]
 80019c4:	68ba      	ldr	r2, [r7, #8]
 80019c6:	4311      	orrs	r1, r2
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	0192      	lsls	r2, r2, #6
 80019cc:	430a      	orrs	r2, r1
 80019ce:	4908      	ldr	r1, [pc, #32]	; (80019f0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019dc:	4904      	ldr	r1, [pc, #16]	; (80019f0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	40023800 	.word	0x40023800
 80019f4:	ffbf8000 	.word	0xffbf8000

080019f8 <LL_APB1_GRP1_EnableClock>:
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a04:	4907      	ldr	r1, [pc, #28]	; (8001a24 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4013      	ands	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a16:	68fb      	ldr	r3, [r7, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	40023800 	.word	0x40023800

08001a28 <LL_APB2_GRP1_EnableClock>:
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a34:	4907      	ldr	r1, [pc, #28]	; (8001a54 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4013      	ands	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a46:	68fb      	ldr	r3, [r7, #12]
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	40023800 	.word	0x40023800

08001a58 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <LL_FLASH_SetLatency+0x24>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f023 0207 	bic.w	r2, r3, #7
 8001a68:	4904      	ldr	r1, [pc, #16]	; (8001a7c <LL_FLASH_SetLatency+0x24>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	600b      	str	r3, [r1, #0]
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	40023c00 	.word	0x40023c00

08001a80 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001a84:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <LL_FLASH_GetLatency+0x18>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0307 	and.w	r3, r3, #7
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40023c00 	.word	0x40023c00

08001a9c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001aac:	4904      	ldr	r1, [pc, #16]	; (8001ac0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	600b      	str	r3, [r1, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	40007000 	.word	0x40007000

08001ac4 <LL_TIM_EnableCounter>:
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f043 0201 	orr.w	r2, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	601a      	str	r2, [r3, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f043 0201 	orr.w	r2, r3, #1
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	60da      	str	r2, [r3, #12]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b14:	2b80      	cmp	r3, #128	; 0x80
 8001b16:	bf0c      	ite	eq
 8001b18:	2301      	moveq	r3, #1
 8001b1a:	2300      	movne	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	460b      	mov	r3, r1
 8001b34:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001b36:	78fa      	ldrb	r2, [r7, #3]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	605a      	str	r2, [r3, #4]
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int c)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

int __io_putchar(int c) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  LL_USART_TransmitData8(USART1, (uint8_t)c);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	4619      	mov	r1, r3
 8001b56:	4807      	ldr	r0, [pc, #28]	; (8001b74 <__io_putchar+0x2c>)
 8001b58:	f7ff ffe7 	bl	8001b2a <LL_USART_TransmitData8>
  while(LL_USART_IsActiveFlag_TXE(USART1) == 0);
 8001b5c:	bf00      	nop
 8001b5e:	4805      	ldr	r0, [pc, #20]	; (8001b74 <__io_putchar+0x2c>)
 8001b60:	f7ff ffd0 	bl	8001b04 <LL_USART_IsActiveFlag_TXE>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f9      	beq.n	8001b5e <__io_putchar+0x16>
  return 0;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40011000 	.word	0x40011000

08001b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001b7c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b80:	f7ff ff52 	bl	8001a28 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001b84:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001b88:	f7ff ff36 	bl	80019f8 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b8c:	2003      	movs	r0, #3
 8001b8e:	f7ff fe2f 	bl	80017f0 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* USER CODE BEGIN Init */
  setbuf(stdout,NULL);
 8001b92:	4b2f      	ldr	r3, [pc, #188]	; (8001c50 <main+0xd8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 f80c 	bl	8004bb8 <setbuf>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ba0:	f000 f85e 	bl	8001c60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ba4:	f7ff fda2 	bl	80016ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8001ba8:	f7ff fd04 	bl	80015b4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001bac:	f000 fd56 	bl	800265c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001bb0:	f000 fdee 	bl	8002790 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bb4:	f000 fe62 	bl	800287c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001bb8:	f000 feda 	bl	8002970 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001bbc:	f000 ff92 	bl	8002ae4 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001bc0:	f001 f8e6 	bl	8002d90 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8001bc4:	f000 f8d6 	bl	8001d74 <MX_SPI3_Init>
  MX_TIM11_Init();
 8001bc8:	f001 f826 	bl	8002c18 <MX_TIM11_Init>
  MX_TIM5_Init();
 8001bcc:	f000 ff4a 	bl	8002a64 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  enableMelody();
 8001bd0:	f7ff f9ce 	bl	8000f70 <enableMelody>
  WaitMs(1);
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	f7ff f963 	bl	8000ea0 <WaitMs>
  MelodyGoal();
 8001bda:	f7ff fad4 	bl	8001186 <MelodyGoal>
  MelodyKurenai();
 8001bde:	f7ff fbb6 	bl	800134e <MelodyKurenai>
  MelodyMrLawrence();
 8001be2:	f7ff fb30 	bl	8001246 <MelodyMrLawrence>
  MelodyNatsumatsuri();
 8001be6:	f7ff fb86 	bl	80012f6 <MelodyNatsumatsuri>
  MelodyRayearth();
 8001bea:	f7ff faa9 	bl	8001140 <MelodyRayearth>
  MelodyUrara();
 8001bee:	f7ff fae0 	bl	80011b2 <MelodyUrara>
  MelodyYamato();
 8001bf2:	f7ff fbe7 	bl	80013c4 <MelodyYamato>

  LL_TIM_EnableIT_UPDATE(TIM5);
 8001bf6:	4817      	ldr	r0, [pc, #92]	; (8001c54 <main+0xdc>)
 8001bf8:	f7ff ff74 	bl	8001ae4 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM5);
 8001bfc:	4815      	ldr	r0, [pc, #84]	; (8001c54 <main+0xdc>)
 8001bfe:	f7ff ff61 	bl	8001ac4 <LL_TIM_EnableCounter>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  setLED1State(ON);
 8001c02:	2001      	movs	r0, #1
 8001c04:	f7ff f9fc 	bl	8001000 <setLED1State>
	  setLED2State(ON);
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f7ff fa13 	bl	8001034 <setLED2State>
	  setLED3State(ON);
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f7ff fa2a 	bl	8001068 <setLED3State>
	  setLED4State(ON);
 8001c14:	2001      	movs	r0, #1
 8001c16:	f7ff fa41 	bl	800109c <setLED4State>

	  printf("Hello,World tim = %d\r\n", tim_counter);
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <main+0xe0>)
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	480e      	ldr	r0, [pc, #56]	; (8001c5c <main+0xe4>)
 8001c22:	f002 ffb1 	bl	8004b88 <iprintf>

	  LL_mDelay(500);
 8001c26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c2a:	f002 fadb 	bl	80041e4 <LL_mDelay>

	  setLED1State(OFF);
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f7ff f9e6 	bl	8001000 <setLED1State>
	  setLED2State(OFF);
 8001c34:	2000      	movs	r0, #0
 8001c36:	f7ff f9fd 	bl	8001034 <setLED2State>
	  setLED3State(OFF);
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f7ff fa14 	bl	8001068 <setLED3State>
	  setLED4State(OFF);
 8001c40:	2000      	movs	r0, #0
 8001c42:	f7ff fa2b 	bl	800109c <setLED4State>

	  LL_mDelay(500);
 8001c46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c4a:	f002 facb 	bl	80041e4 <LL_mDelay>
	  setLED1State(ON);
 8001c4e:	e7d8      	b.n	8001c02 <main+0x8a>
 8001c50:	20000004 	.word	0x20000004
 8001c54:	40000c00 	.word	0x40000c00
 8001c58:	20000200 	.word	0x20000200
 8001c5c:	08006e40 	.word	0x08006e40

08001c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8001c64:	2005      	movs	r0, #5
 8001c66:	f7ff fef7 	bl	8001a58 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8001c6a:	bf00      	nop
 8001c6c:	f7ff ff08 	bl	8001a80 <LL_FLASH_GetLatency>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b05      	cmp	r3, #5
 8001c74:	d1fa      	bne.n	8001c6c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001c76:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c7a:	f7ff ff0f 	bl	8001a9c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8001c7e:	2010      	movs	r0, #16
 8001c80:	f7ff fdfc 	bl	800187c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8001c84:	f7ff fdd8 	bl	8001838 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001c88:	bf00      	nop
 8001c8a:	f7ff fde5 	bl	8001858 <LL_RCC_HSI_IsReady>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d1fa      	bne.n	8001c8a <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 168, LL_RCC_PLLP_DIV_2);
 8001c94:	2300      	movs	r3, #0
 8001c96:	22a8      	movs	r2, #168	; 0xa8
 8001c98:	2108      	movs	r1, #8
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	f7ff fe86 	bl	80019ac <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001ca0:	f7ff fe60 	bl	8001964 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001ca4:	bf00      	nop
 8001ca6:	f7ff fe6d 	bl	8001984 <LL_RCC_PLL_IsReady>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d1fa      	bne.n	8001ca6 <SystemClock_Config+0x46>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f7ff fe1b 	bl	80018ec <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8001cb6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001cba:	f7ff fe2b 	bl	8001914 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_4);
 8001cbe:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 8001cc2:	f7ff fe3b 	bl	800193c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f7ff fdee 	bl	80018a8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001ccc:	bf00      	nop
 8001cce:	f7ff fdff 	bl	80018d0 <LL_RCC_GetSysClkSource>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d1fa      	bne.n	8001cce <SystemClock_Config+0x6e>
  {

  }
  LL_Init1msTick(168000000);
 8001cd8:	4803      	ldr	r0, [pc, #12]	; (8001ce8 <SystemClock_Config+0x88>)
 8001cda:	f002 fa75 	bl	80041c8 <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 8001cde:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <SystemClock_Config+0x88>)
 8001ce0:	f002 faa6 	bl	8004230 <LL_SetSystemCoreClock>
}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	0a037a00 	.word	0x0a037a00

08001cec <LL_AHB1_GRP1_EnableClock>:
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001cf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cf8:	4907      	ldr	r1, [pc, #28]	; (8001d18 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4013      	ands	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	40023800 	.word	0x40023800

08001d1c <LL_APB1_GRP1_EnableClock>:
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001d24:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d28:	4907      	ldr	r1, [pc, #28]	; (8001d48 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4013      	ands	r3, r2
 8001d38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	40023800 	.word	0x40023800

08001d4c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f023 0210 	bic.w	r2, r3, #16
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	605a      	str	r2, [r3, #4]
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <MX_SPI3_Init>:

/* USER CODE END 0 */

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b090      	sub	sp, #64	; 0x40
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001d7a:	f107 0318 	add.w	r3, r7, #24
 8001d7e:	2228      	movs	r2, #40	; 0x28
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f002 fa8e 	bl	80042a4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	463b      	mov	r3, r7
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	60da      	str	r2, [r3, #12]
 8001d94:	611a      	str	r2, [r3, #16]
 8001d96:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001d98:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001d9c:	f7ff ffbe 	bl	8001d1c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001da0:	2004      	movs	r0, #4
 8001da2:	f7ff ffa3 	bl	8001cec <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8001da6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001daa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001dac:	2302      	movs	r3, #2
 8001dae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001db0:	2303      	movs	r3, #3
 8001db2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001db8:	2300      	movs	r3, #0
 8001dba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001dbc:	2306      	movs	r3, #6
 8001dbe:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc0:	463b      	mov	r3, r7
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4813      	ldr	r0, [pc, #76]	; (8001e14 <MX_SPI3_Init+0xa0>)
 8001dc6:	f001 fa3e 	bl	8003246 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001dce:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001dd2:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001de6:	2300      	movs	r3, #0
 8001de8:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001dea:	2300      	movs	r3, #0
 8001dec:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001df2:	230a      	movs	r3, #10
 8001df4:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8001df6:	f107 0318 	add.w	r3, r7, #24
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4806      	ldr	r0, [pc, #24]	; (8001e18 <MX_SPI3_Init+0xa4>)
 8001dfe:	f001 fbf2 	bl	80035e6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8001e02:	2100      	movs	r1, #0
 8001e04:	4804      	ldr	r0, [pc, #16]	; (8001e18 <MX_SPI3_Init+0xa4>)
 8001e06:	f7ff ffa1 	bl	8001d4c <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001e0a:	bf00      	nop
 8001e0c:	3740      	adds	r7, #64	; 0x40
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40020800 	.word	0x40020800
 8001e18:	40003c00 	.word	0x40003c00

08001e1c <LL_TIM_ClearFlag_UPDATE>:
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f06f 0201 	mvn.w	r2, #1
 8001e2a:	611a      	str	r2, [r3, #16]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e62:	e7fe      	b.n	8001e62 <NMI_Handler+0x4>

08001e64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <HardFault_Handler+0x4>

08001e6a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e6e:	e7fe      	b.n	8001e6e <MemManage_Handler+0x4>

08001e70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <BusFault_Handler+0x4>

08001e76 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e7a:	e7fe      	b.n	8001e7a <UsageFault_Handler+0x4>

08001e7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	callbackTIM();
 8001eb8:	f7ff f920 	bl	80010fc <callbackTIM>

	if(LL_TIM_IsActiveFlag_UPDATE(TIM5) == 1) {
 8001ebc:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <TIM5_IRQHandler+0x20>)
 8001ebe:	f7ff ffbb 	bl	8001e38 <LL_TIM_IsActiveFlag_UPDATE>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d102      	bne.n	8001ece <TIM5_IRQHandler+0x1a>
		LL_TIM_ClearFlag_UPDATE(TIM5);
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <TIM5_IRQHandler+0x20>)
 8001eca:	f7ff ffa7 	bl	8001e1c <LL_TIM_ClearFlag_UPDATE>

  /* USER CODE END TIM5_IRQn 0 */
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40000c00 	.word	0x40000c00

08001ed8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
	return 1;
 8001edc:	2301      	movs	r3, #1
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <_kill>:

int _kill(int pid, int sig)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ef2:	f002 f9ad 	bl	8004250 <__errno>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2216      	movs	r2, #22
 8001efa:	601a      	str	r2, [r3, #0]
	return -1;
 8001efc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <_exit>:

void _exit (int status)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f10:	f04f 31ff 	mov.w	r1, #4294967295
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ffe7 	bl	8001ee8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f1a:	e7fe      	b.n	8001f1a <_exit+0x12>

08001f1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	e00a      	b.n	8001f44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f2e:	f3af 8000 	nop.w
 8001f32:	4601      	mov	r1, r0
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	60ba      	str	r2, [r7, #8]
 8001f3a:	b2ca      	uxtb	r2, r1
 8001f3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	3301      	adds	r3, #1
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	dbf0      	blt.n	8001f2e <_read+0x12>
	}

return len;
 8001f4c:	687b      	ldr	r3, [r7, #4]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b086      	sub	sp, #24
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	60f8      	str	r0, [r7, #12]
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	e009      	b.n	8001f7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	60ba      	str	r2, [r7, #8]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fde9 	bl	8001b48 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	dbf1      	blt.n	8001f68 <_write+0x12>
	}
	return len;
 8001f84:	687b      	ldr	r3, [r7, #4]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <_close>:

int _close(int file)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
	return -1;
 8001f96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fb6:	605a      	str	r2, [r3, #4]
	return 0;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <_isatty>:

int _isatty(int file)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
	return 1;
 8001fce:	2301      	movs	r3, #1
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
	return 0;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002000:	4a14      	ldr	r2, [pc, #80]	; (8002054 <_sbrk+0x5c>)
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <_sbrk+0x60>)
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800200c:	4b13      	ldr	r3, [pc, #76]	; (800205c <_sbrk+0x64>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d102      	bne.n	800201a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <_sbrk+0x64>)
 8002016:	4a12      	ldr	r2, [pc, #72]	; (8002060 <_sbrk+0x68>)
 8002018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <_sbrk+0x64>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	429a      	cmp	r2, r3
 8002026:	d207      	bcs.n	8002038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002028:	f002 f912 	bl	8004250 <__errno>
 800202c:	4603      	mov	r3, r0
 800202e:	220c      	movs	r2, #12
 8002030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002032:	f04f 33ff 	mov.w	r3, #4294967295
 8002036:	e009      	b.n	800204c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <_sbrk+0x64>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800203e:	4b07      	ldr	r3, [pc, #28]	; (800205c <_sbrk+0x64>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	4a05      	ldr	r2, [pc, #20]	; (800205c <_sbrk+0x64>)
 8002048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800204a:	68fb      	ldr	r3, [r7, #12]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20020000 	.word	0x20020000
 8002058:	00000400 	.word	0x00000400
 800205c:	200001f4 	.word	0x200001f4
 8002060:	20000210 	.word	0x20000210

08002064 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <SystemInit+0x28>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206e:	4a07      	ldr	r2, [pc, #28]	; (800208c <SystemInit+0x28>)
 8002070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <SystemInit+0x28>)
 800207a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800207e:	609a      	str	r2, [r3, #8]
#endif
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	0a1b      	lsrs	r3, r3, #8
 800209a:	f003 0307 	and.w	r3, r3, #7
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	db0b      	blt.n	80020d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	f003 021f 	and.w	r2, r3, #31
 80020c4:	4907      	ldr	r1, [pc, #28]	; (80020e4 <__NVIC_EnableIRQ+0x38>)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	2001      	movs	r0, #1
 80020ce:	fa00 f202 	lsl.w	r2, r0, r2
 80020d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000e100 	.word	0xe000e100

080020e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	6039      	str	r1, [r7, #0]
 80020f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	db0a      	blt.n	8002112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	490c      	ldr	r1, [pc, #48]	; (8002134 <__NVIC_SetPriority+0x4c>)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	0112      	lsls	r2, r2, #4
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	440b      	add	r3, r1
 800210c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002110:	e00a      	b.n	8002128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4908      	ldr	r1, [pc, #32]	; (8002138 <__NVIC_SetPriority+0x50>)
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	3b04      	subs	r3, #4
 8002120:	0112      	lsls	r2, r2, #4
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	440b      	add	r3, r1
 8002126:	761a      	strb	r2, [r3, #24]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000e100 	.word	0xe000e100
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800213c:	b480      	push	{r7}
 800213e:	b089      	sub	sp, #36	; 0x24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f1c3 0307 	rsb	r3, r3, #7
 8002156:	2b04      	cmp	r3, #4
 8002158:	bf28      	it	cs
 800215a:	2304      	movcs	r3, #4
 800215c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3304      	adds	r3, #4
 8002162:	2b06      	cmp	r3, #6
 8002164:	d902      	bls.n	800216c <NVIC_EncodePriority+0x30>
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3b03      	subs	r3, #3
 800216a:	e000      	b.n	800216e <NVIC_EncodePriority+0x32>
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	f04f 32ff 	mov.w	r2, #4294967295
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43da      	mvns	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	401a      	ands	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002184:	f04f 31ff 	mov.w	r1, #4294967295
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	fa01 f303 	lsl.w	r3, r1, r3
 800218e:	43d9      	mvns	r1, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	4313      	orrs	r3, r2
         );
}
 8002196:	4618      	mov	r0, r3
 8002198:	3724      	adds	r7, #36	; 0x24
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <LL_AHB1_GRP1_EnableClock>:
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80021ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021b0:	4907      	ldr	r1, [pc, #28]	; (80021d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80021ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4013      	ands	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021c2:	68fb      	ldr	r3, [r7, #12]
}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	40023800 	.word	0x40023800

080021d4 <LL_APB1_GRP1_EnableClock>:
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80021dc:	4b08      	ldr	r3, [pc, #32]	; (8002200 <LL_APB1_GRP1_EnableClock+0x2c>)
 80021de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021e0:	4907      	ldr	r1, [pc, #28]	; (8002200 <LL_APB1_GRP1_EnableClock+0x2c>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <LL_APB1_GRP1_EnableClock+0x2c>)
 80021ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4013      	ands	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021f2:	68fb      	ldr	r3, [r7, #12]
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	40023800 	.word	0x40023800

08002204 <LL_APB2_GRP1_EnableClock>:
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <LL_APB2_GRP1_EnableClock+0x2c>)
 800220e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002210:	4907      	ldr	r1, [pc, #28]	; (8002230 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4313      	orrs	r3, r2
 8002216:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <LL_APB2_GRP1_EnableClock+0x2c>)
 800221a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4013      	ands	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002222:	68fb      	ldr	r3, [r7, #12]
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	40023800 	.word	0x40023800

08002234 <LL_TIM_DisableARRPreload>:
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	601a      	str	r2, [r3, #0]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <LL_TIM_OC_DisableFast>:
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d01c      	beq.n	800229e <LL_TIM_OC_DisableFast+0x4a>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	2b04      	cmp	r3, #4
 8002268:	d017      	beq.n	800229a <LL_TIM_OC_DisableFast+0x46>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b10      	cmp	r3, #16
 800226e:	d012      	beq.n	8002296 <LL_TIM_OC_DisableFast+0x42>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2b40      	cmp	r3, #64	; 0x40
 8002274:	d00d      	beq.n	8002292 <LL_TIM_OC_DisableFast+0x3e>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800227c:	d007      	beq.n	800228e <LL_TIM_OC_DisableFast+0x3a>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002284:	d101      	bne.n	800228a <LL_TIM_OC_DisableFast+0x36>
 8002286:	2305      	movs	r3, #5
 8002288:	e00a      	b.n	80022a0 <LL_TIM_OC_DisableFast+0x4c>
 800228a:	2306      	movs	r3, #6
 800228c:	e008      	b.n	80022a0 <LL_TIM_OC_DisableFast+0x4c>
 800228e:	2304      	movs	r3, #4
 8002290:	e006      	b.n	80022a0 <LL_TIM_OC_DisableFast+0x4c>
 8002292:	2303      	movs	r3, #3
 8002294:	e004      	b.n	80022a0 <LL_TIM_OC_DisableFast+0x4c>
 8002296:	2302      	movs	r3, #2
 8002298:	e002      	b.n	80022a0 <LL_TIM_OC_DisableFast+0x4c>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <LL_TIM_OC_DisableFast+0x4c>
 800229e:	2300      	movs	r3, #0
 80022a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3318      	adds	r3, #24
 80022a6:	4619      	mov	r1, r3
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <LL_TIM_OC_DisableFast+0x84>)
 80022ac:	5cd3      	ldrb	r3, [r2, r3]
 80022ae:	440b      	add	r3, r1
 80022b0:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	4908      	ldr	r1, [pc, #32]	; (80022dc <LL_TIM_OC_DisableFast+0x88>)
 80022ba:	5ccb      	ldrb	r3, [r1, r3]
 80022bc:	4619      	mov	r1, r3
 80022be:	2304      	movs	r3, #4
 80022c0:	408b      	lsls	r3, r1
 80022c2:	43db      	mvns	r3, r3
 80022c4:	401a      	ands	r2, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	601a      	str	r2, [r3, #0]
}
 80022ca:	bf00      	nop
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	08006e70 	.word	0x08006e70
 80022dc:	08006e78 	.word	0x08006e78

080022e0 <LL_TIM_OC_EnablePreload>:
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d01c      	beq.n	800232a <LL_TIM_OC_EnablePreload+0x4a>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d017      	beq.n	8002326 <LL_TIM_OC_EnablePreload+0x46>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2b10      	cmp	r3, #16
 80022fa:	d012      	beq.n	8002322 <LL_TIM_OC_EnablePreload+0x42>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	2b40      	cmp	r3, #64	; 0x40
 8002300:	d00d      	beq.n	800231e <LL_TIM_OC_EnablePreload+0x3e>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002308:	d007      	beq.n	800231a <LL_TIM_OC_EnablePreload+0x3a>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002310:	d101      	bne.n	8002316 <LL_TIM_OC_EnablePreload+0x36>
 8002312:	2305      	movs	r3, #5
 8002314:	e00a      	b.n	800232c <LL_TIM_OC_EnablePreload+0x4c>
 8002316:	2306      	movs	r3, #6
 8002318:	e008      	b.n	800232c <LL_TIM_OC_EnablePreload+0x4c>
 800231a:	2304      	movs	r3, #4
 800231c:	e006      	b.n	800232c <LL_TIM_OC_EnablePreload+0x4c>
 800231e:	2303      	movs	r3, #3
 8002320:	e004      	b.n	800232c <LL_TIM_OC_EnablePreload+0x4c>
 8002322:	2302      	movs	r3, #2
 8002324:	e002      	b.n	800232c <LL_TIM_OC_EnablePreload+0x4c>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <LL_TIM_OC_EnablePreload+0x4c>
 800232a:	2300      	movs	r3, #0
 800232c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3318      	adds	r3, #24
 8002332:	4619      	mov	r1, r3
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <LL_TIM_OC_EnablePreload+0x80>)
 8002338:	5cd3      	ldrb	r3, [r2, r3]
 800233a:	440b      	add	r3, r1
 800233c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	4907      	ldr	r1, [pc, #28]	; (8002364 <LL_TIM_OC_EnablePreload+0x84>)
 8002346:	5ccb      	ldrb	r3, [r1, r3]
 8002348:	4619      	mov	r1, r3
 800234a:	2308      	movs	r3, #8
 800234c:	408b      	lsls	r3, r1
 800234e:	431a      	orrs	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	601a      	str	r2, [r3, #0]
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	08006e70 	.word	0x08006e70
 8002364:	08006e78 	.word	0x08006e78

08002368 <LL_TIM_IC_SetActiveInput>:
{
 8002368:	b480      	push	{r7}
 800236a:	b087      	sub	sp, #28
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d01c      	beq.n	80023b4 <LL_TIM_IC_SetActiveInput+0x4c>
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2b04      	cmp	r3, #4
 800237e:	d017      	beq.n	80023b0 <LL_TIM_IC_SetActiveInput+0x48>
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2b10      	cmp	r3, #16
 8002384:	d012      	beq.n	80023ac <LL_TIM_IC_SetActiveInput+0x44>
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b40      	cmp	r3, #64	; 0x40
 800238a:	d00d      	beq.n	80023a8 <LL_TIM_IC_SetActiveInput+0x40>
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002392:	d007      	beq.n	80023a4 <LL_TIM_IC_SetActiveInput+0x3c>
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800239a:	d101      	bne.n	80023a0 <LL_TIM_IC_SetActiveInput+0x38>
 800239c:	2305      	movs	r3, #5
 800239e:	e00a      	b.n	80023b6 <LL_TIM_IC_SetActiveInput+0x4e>
 80023a0:	2306      	movs	r3, #6
 80023a2:	e008      	b.n	80023b6 <LL_TIM_IC_SetActiveInput+0x4e>
 80023a4:	2304      	movs	r3, #4
 80023a6:	e006      	b.n	80023b6 <LL_TIM_IC_SetActiveInput+0x4e>
 80023a8:	2303      	movs	r3, #3
 80023aa:	e004      	b.n	80023b6 <LL_TIM_IC_SetActiveInput+0x4e>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e002      	b.n	80023b6 <LL_TIM_IC_SetActiveInput+0x4e>
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <LL_TIM_IC_SetActiveInput+0x4e>
 80023b4:	2300      	movs	r3, #0
 80023b6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3318      	adds	r3, #24
 80023bc:	4619      	mov	r1, r3
 80023be:	7dfb      	ldrb	r3, [r7, #23]
 80023c0:	4a0e      	ldr	r2, [pc, #56]	; (80023fc <LL_TIM_IC_SetActiveInput+0x94>)
 80023c2:	5cd3      	ldrb	r3, [r2, r3]
 80023c4:	440b      	add	r3, r1
 80023c6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	7dfb      	ldrb	r3, [r7, #23]
 80023ce:	490c      	ldr	r1, [pc, #48]	; (8002400 <LL_TIM_IC_SetActiveInput+0x98>)
 80023d0:	5ccb      	ldrb	r3, [r1, r3]
 80023d2:	4619      	mov	r1, r3
 80023d4:	2303      	movs	r3, #3
 80023d6:	408b      	lsls	r3, r1
 80023d8:	43db      	mvns	r3, r3
 80023da:	401a      	ands	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	0c1b      	lsrs	r3, r3, #16
 80023e0:	7df9      	ldrb	r1, [r7, #23]
 80023e2:	4807      	ldr	r0, [pc, #28]	; (8002400 <LL_TIM_IC_SetActiveInput+0x98>)
 80023e4:	5c41      	ldrb	r1, [r0, r1]
 80023e6:	408b      	lsls	r3, r1
 80023e8:	431a      	orrs	r2, r3
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	601a      	str	r2, [r3, #0]
}
 80023ee:	bf00      	nop
 80023f0:	371c      	adds	r7, #28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	08006e70 	.word	0x08006e70
 8002400:	08006e80 	.word	0x08006e80

08002404 <LL_TIM_IC_SetPrescaler>:
{
 8002404:	b480      	push	{r7}
 8002406:	b087      	sub	sp, #28
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d01c      	beq.n	8002450 <LL_TIM_IC_SetPrescaler+0x4c>
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2b04      	cmp	r3, #4
 800241a:	d017      	beq.n	800244c <LL_TIM_IC_SetPrescaler+0x48>
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b10      	cmp	r3, #16
 8002420:	d012      	beq.n	8002448 <LL_TIM_IC_SetPrescaler+0x44>
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b40      	cmp	r3, #64	; 0x40
 8002426:	d00d      	beq.n	8002444 <LL_TIM_IC_SetPrescaler+0x40>
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800242e:	d007      	beq.n	8002440 <LL_TIM_IC_SetPrescaler+0x3c>
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002436:	d101      	bne.n	800243c <LL_TIM_IC_SetPrescaler+0x38>
 8002438:	2305      	movs	r3, #5
 800243a:	e00a      	b.n	8002452 <LL_TIM_IC_SetPrescaler+0x4e>
 800243c:	2306      	movs	r3, #6
 800243e:	e008      	b.n	8002452 <LL_TIM_IC_SetPrescaler+0x4e>
 8002440:	2304      	movs	r3, #4
 8002442:	e006      	b.n	8002452 <LL_TIM_IC_SetPrescaler+0x4e>
 8002444:	2303      	movs	r3, #3
 8002446:	e004      	b.n	8002452 <LL_TIM_IC_SetPrescaler+0x4e>
 8002448:	2302      	movs	r3, #2
 800244a:	e002      	b.n	8002452 <LL_TIM_IC_SetPrescaler+0x4e>
 800244c:	2301      	movs	r3, #1
 800244e:	e000      	b.n	8002452 <LL_TIM_IC_SetPrescaler+0x4e>
 8002450:	2300      	movs	r3, #0
 8002452:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	3318      	adds	r3, #24
 8002458:	4619      	mov	r1, r3
 800245a:	7dfb      	ldrb	r3, [r7, #23]
 800245c:	4a0e      	ldr	r2, [pc, #56]	; (8002498 <LL_TIM_IC_SetPrescaler+0x94>)
 800245e:	5cd3      	ldrb	r3, [r2, r3]
 8002460:	440b      	add	r3, r1
 8002462:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	7dfb      	ldrb	r3, [r7, #23]
 800246a:	490c      	ldr	r1, [pc, #48]	; (800249c <LL_TIM_IC_SetPrescaler+0x98>)
 800246c:	5ccb      	ldrb	r3, [r1, r3]
 800246e:	4619      	mov	r1, r3
 8002470:	230c      	movs	r3, #12
 8002472:	408b      	lsls	r3, r1
 8002474:	43db      	mvns	r3, r3
 8002476:	401a      	ands	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	0c1b      	lsrs	r3, r3, #16
 800247c:	7df9      	ldrb	r1, [r7, #23]
 800247e:	4807      	ldr	r0, [pc, #28]	; (800249c <LL_TIM_IC_SetPrescaler+0x98>)
 8002480:	5c41      	ldrb	r1, [r0, r1]
 8002482:	408b      	lsls	r3, r1
 8002484:	431a      	orrs	r2, r3
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	601a      	str	r2, [r3, #0]
}
 800248a:	bf00      	nop
 800248c:	371c      	adds	r7, #28
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	08006e70 	.word	0x08006e70
 800249c:	08006e80 	.word	0x08006e80

080024a0 <LL_TIM_IC_SetFilter>:
{
 80024a0:	b480      	push	{r7}
 80024a2:	b087      	sub	sp, #28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d01c      	beq.n	80024ec <LL_TIM_IC_SetFilter+0x4c>
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d017      	beq.n	80024e8 <LL_TIM_IC_SetFilter+0x48>
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b10      	cmp	r3, #16
 80024bc:	d012      	beq.n	80024e4 <LL_TIM_IC_SetFilter+0x44>
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b40      	cmp	r3, #64	; 0x40
 80024c2:	d00d      	beq.n	80024e0 <LL_TIM_IC_SetFilter+0x40>
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ca:	d007      	beq.n	80024dc <LL_TIM_IC_SetFilter+0x3c>
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d2:	d101      	bne.n	80024d8 <LL_TIM_IC_SetFilter+0x38>
 80024d4:	2305      	movs	r3, #5
 80024d6:	e00a      	b.n	80024ee <LL_TIM_IC_SetFilter+0x4e>
 80024d8:	2306      	movs	r3, #6
 80024da:	e008      	b.n	80024ee <LL_TIM_IC_SetFilter+0x4e>
 80024dc:	2304      	movs	r3, #4
 80024de:	e006      	b.n	80024ee <LL_TIM_IC_SetFilter+0x4e>
 80024e0:	2303      	movs	r3, #3
 80024e2:	e004      	b.n	80024ee <LL_TIM_IC_SetFilter+0x4e>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e002      	b.n	80024ee <LL_TIM_IC_SetFilter+0x4e>
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <LL_TIM_IC_SetFilter+0x4e>
 80024ec:	2300      	movs	r3, #0
 80024ee:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	3318      	adds	r3, #24
 80024f4:	4619      	mov	r1, r3
 80024f6:	7dfb      	ldrb	r3, [r7, #23]
 80024f8:	4a0e      	ldr	r2, [pc, #56]	; (8002534 <LL_TIM_IC_SetFilter+0x94>)
 80024fa:	5cd3      	ldrb	r3, [r2, r3]
 80024fc:	440b      	add	r3, r1
 80024fe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	7dfb      	ldrb	r3, [r7, #23]
 8002506:	490c      	ldr	r1, [pc, #48]	; (8002538 <LL_TIM_IC_SetFilter+0x98>)
 8002508:	5ccb      	ldrb	r3, [r1, r3]
 800250a:	4619      	mov	r1, r3
 800250c:	23f0      	movs	r3, #240	; 0xf0
 800250e:	408b      	lsls	r3, r1
 8002510:	43db      	mvns	r3, r3
 8002512:	401a      	ands	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	0c1b      	lsrs	r3, r3, #16
 8002518:	7df9      	ldrb	r1, [r7, #23]
 800251a:	4807      	ldr	r0, [pc, #28]	; (8002538 <LL_TIM_IC_SetFilter+0x98>)
 800251c:	5c41      	ldrb	r1, [r0, r1]
 800251e:	408b      	lsls	r3, r1
 8002520:	431a      	orrs	r2, r3
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	601a      	str	r2, [r3, #0]
}
 8002526:	bf00      	nop
 8002528:	371c      	adds	r7, #28
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	08006e70 	.word	0x08006e70
 8002538:	08006e80 	.word	0x08006e80

0800253c <LL_TIM_IC_SetPolarity>:
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d01c      	beq.n	8002588 <LL_TIM_IC_SetPolarity+0x4c>
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b04      	cmp	r3, #4
 8002552:	d017      	beq.n	8002584 <LL_TIM_IC_SetPolarity+0x48>
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2b10      	cmp	r3, #16
 8002558:	d012      	beq.n	8002580 <LL_TIM_IC_SetPolarity+0x44>
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2b40      	cmp	r3, #64	; 0x40
 800255e:	d00d      	beq.n	800257c <LL_TIM_IC_SetPolarity+0x40>
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002566:	d007      	beq.n	8002578 <LL_TIM_IC_SetPolarity+0x3c>
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800256e:	d101      	bne.n	8002574 <LL_TIM_IC_SetPolarity+0x38>
 8002570:	2305      	movs	r3, #5
 8002572:	e00a      	b.n	800258a <LL_TIM_IC_SetPolarity+0x4e>
 8002574:	2306      	movs	r3, #6
 8002576:	e008      	b.n	800258a <LL_TIM_IC_SetPolarity+0x4e>
 8002578:	2304      	movs	r3, #4
 800257a:	e006      	b.n	800258a <LL_TIM_IC_SetPolarity+0x4e>
 800257c:	2303      	movs	r3, #3
 800257e:	e004      	b.n	800258a <LL_TIM_IC_SetPolarity+0x4e>
 8002580:	2302      	movs	r3, #2
 8002582:	e002      	b.n	800258a <LL_TIM_IC_SetPolarity+0x4e>
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <LL_TIM_IC_SetPolarity+0x4e>
 8002588:	2300      	movs	r3, #0
 800258a:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a1a      	ldr	r2, [r3, #32]
 8002590:	7dfb      	ldrb	r3, [r7, #23]
 8002592:	490b      	ldr	r1, [pc, #44]	; (80025c0 <LL_TIM_IC_SetPolarity+0x84>)
 8002594:	5ccb      	ldrb	r3, [r1, r3]
 8002596:	4619      	mov	r1, r3
 8002598:	230a      	movs	r3, #10
 800259a:	408b      	lsls	r3, r1
 800259c:	43db      	mvns	r3, r3
 800259e:	401a      	ands	r2, r3
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
 80025a2:	4907      	ldr	r1, [pc, #28]	; (80025c0 <LL_TIM_IC_SetPolarity+0x84>)
 80025a4:	5ccb      	ldrb	r3, [r1, r3]
 80025a6:	4619      	mov	r1, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	408b      	lsls	r3, r1
 80025ac:	431a      	orrs	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	621a      	str	r2, [r3, #32]
}
 80025b2:	bf00      	nop
 80025b4:	371c      	adds	r7, #28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	08006e88 	.word	0x08006e88

080025c4 <LL_TIM_SetClockSource>:
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025d6:	f023 0307 	bic.w	r3, r3, #7
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	609a      	str	r2, [r3, #8]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <LL_TIM_SetEncoderMode>:
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f023 0207 	bic.w	r2, r3, #7
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	609a      	str	r2, [r3, #8]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <LL_TIM_SetTriggerOutput>:
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	431a      	orrs	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	605a      	str	r2, [r3, #4]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <LL_TIM_DisableMasterSlaveMode>:
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	609a      	str	r2, [r3, #8]
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
	...

0800265c <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b09a      	sub	sp, #104	; 0x68
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002662:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	60da      	str	r2, [r3, #12]
 8002670:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002672:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002676:	2220      	movs	r2, #32
 8002678:	2100      	movs	r1, #0
 800267a:	4618      	mov	r0, r3
 800267c:	f001 fe12 	bl	80042a4 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8002680:	f107 031c 	add.w	r3, r7, #28
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]
 8002690:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002692:	1d3b      	adds	r3, r7, #4
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
 80026a0:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80026a2:	2001      	movs	r0, #1
 80026a4:	f7ff fdae 	bl	8002204 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80026ae:	2300      	movs	r3, #0
 80026b0:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 80026b2:	4b34      	ldr	r3, [pc, #208]	; (8002784 <MX_TIM1_Init+0x128>)
 80026b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80026b6:	2300      	movs	r3, #0
 80026b8:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	667b      	str	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80026be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026c2:	4619      	mov	r1, r3
 80026c4:	4830      	ldr	r0, [pc, #192]	; (8002788 <MX_TIM1_Init+0x12c>)
 80026c6:	f001 f853 	bl	8003770 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 80026ca:	482f      	ldr	r0, [pc, #188]	; (8002788 <MX_TIM1_Init+0x12c>)
 80026cc:	f7ff fdb2 	bl	8002234 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 80026d0:	2100      	movs	r1, #0
 80026d2:	482d      	ldr	r0, [pc, #180]	; (8002788 <MX_TIM1_Init+0x12c>)
 80026d4:	f7ff ff76 	bl	80025c4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 80026d8:	2101      	movs	r1, #1
 80026da:	482b      	ldr	r0, [pc, #172]	; (8002788 <MX_TIM1_Init+0x12c>)
 80026dc:	f7ff fe00 	bl	80022e0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80026e0:	2360      	movs	r3, #96	; 0x60
 80026e2:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80026e4:	2300      	movs	r3, #0
 80026e6:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80026e8:	2300      	movs	r3, #0
 80026ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80026f0:	2300      	movs	r3, #0
 80026f2:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 80026f4:	2300      	movs	r3, #0
 80026f6:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80026f8:	2300      	movs	r3, #0
 80026fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80026fc:	2300      	movs	r3, #0
 80026fe:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002700:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002704:	461a      	mov	r2, r3
 8002706:	2101      	movs	r1, #1
 8002708:	481f      	ldr	r0, [pc, #124]	; (8002788 <MX_TIM1_Init+0x12c>)
 800270a:	f001 f8cb 	bl	80038a4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 800270e:	2101      	movs	r1, #1
 8002710:	481d      	ldr	r0, [pc, #116]	; (8002788 <MX_TIM1_Init+0x12c>)
 8002712:	f7ff fd9f 	bl	8002254 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8002716:	2100      	movs	r1, #0
 8002718:	481b      	ldr	r0, [pc, #108]	; (8002788 <MX_TIM1_Init+0x12c>)
 800271a:	f7ff ff7b 	bl	8002614 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 800271e:	481a      	ldr	r0, [pc, #104]	; (8002788 <MX_TIM1_Init+0x12c>)
 8002720:	f7ff ff8b 	bl	800263a <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8002724:	2300      	movs	r3, #0
 8002726:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8002728:	2300      	movs	r3, #0
 800272a:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 800272c:	2300      	movs	r3, #0
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8002736:	2300      	movs	r3, #0
 8002738:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 800273a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8002740:	2300      	movs	r3, #0
 8002742:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8002744:	f107 031c 	add.w	r3, r7, #28
 8002748:	4619      	mov	r1, r3
 800274a:	480f      	ldr	r0, [pc, #60]	; (8002788 <MX_TIM1_Init+0x12c>)
 800274c:	f001 f8eb 	bl	8003926 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002750:	2001      	movs	r0, #1
 8002752:	f7ff fd27 	bl	80021a4 <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
  GPIO_InitStruct.Pin = LEFT_PWM_Pin;
 8002756:	f44f 7380 	mov.w	r3, #256	; 0x100
 800275a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800275c:	2302      	movs	r3, #2
 800275e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002760:	2300      	movs	r3, #0
 8002762:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800276c:	2301      	movs	r3, #1
 800276e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(LEFT_PWM_GPIO_Port, &GPIO_InitStruct);
 8002770:	1d3b      	adds	r3, r7, #4
 8002772:	4619      	mov	r1, r3
 8002774:	4805      	ldr	r0, [pc, #20]	; (800278c <MX_TIM1_Init+0x130>)
 8002776:	f000 fd66 	bl	8003246 <LL_GPIO_Init>

}
 800277a:	bf00      	nop
 800277c:	3768      	adds	r7, #104	; 0x68
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	fff003e8 	.word	0xfff003e8
 8002788:	40010000 	.word	0x40010000
 800278c:	40020000 	.word	0x40020000

08002790 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b094      	sub	sp, #80	; 0x50
 8002794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002796:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	60da      	str	r2, [r3, #12]
 80027a4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80027a6:	f107 031c 	add.w	r3, r7, #28
 80027aa:	2220      	movs	r2, #32
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f001 fd78 	bl	80042a4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b4:	1d3b      	adds	r3, r7, #4
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	605a      	str	r2, [r3, #4]
 80027bc:	609a      	str	r2, [r3, #8]
 80027be:	60da      	str	r2, [r3, #12]
 80027c0:	611a      	str	r2, [r3, #16]
 80027c2:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80027c4:	2001      	movs	r0, #1
 80027c6:	f7ff fd05 	bl	80021d4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80027ce:	2300      	movs	r3, #0
 80027d0:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 80027d2:	4b28      	ldr	r3, [pc, #160]	; (8002874 <MX_TIM2_Init+0xe4>)
 80027d4:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80027d6:	2300      	movs	r3, #0
 80027d8:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80027da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027de:	4619      	mov	r1, r3
 80027e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80027e4:	f000 ffc4 	bl	8003770 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80027e8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80027ec:	f7ff fd22 	bl	8002234 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80027f0:	2100      	movs	r1, #0
 80027f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80027f6:	f7ff fee5 	bl	80025c4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 80027fa:	2110      	movs	r1, #16
 80027fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002800:	f7ff fd6e 	bl	80022e0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002804:	2360      	movs	r3, #96	; 0x60
 8002806:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002808:	2300      	movs	r3, #0
 800280a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800280c:	2300      	movs	r3, #0
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002814:	2300      	movs	r3, #0
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002818:	f107 031c 	add.w	r3, r7, #28
 800281c:	461a      	mov	r2, r3
 800281e:	2110      	movs	r1, #16
 8002820:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002824:	f001 f83e 	bl	80038a4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8002828:	2110      	movs	r1, #16
 800282a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800282e:	f7ff fd11 	bl	8002254 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002832:	2100      	movs	r1, #0
 8002834:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002838:	f7ff feec 	bl	8002614 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800283c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002840:	f7ff fefb 	bl	800263a <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002844:	2002      	movs	r0, #2
 8002846:	f7ff fcad 	bl	80021a4 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
  GPIO_InitStruct.Pin = RIGHT_PWM_Pin;
 800284a:	2308      	movs	r3, #8
 800284c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800284e:	2302      	movs	r3, #2
 8002850:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800285e:	2301      	movs	r3, #1
 8002860:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(RIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 8002862:	1d3b      	adds	r3, r7, #4
 8002864:	4619      	mov	r1, r3
 8002866:	4804      	ldr	r0, [pc, #16]	; (8002878 <MX_TIM2_Init+0xe8>)
 8002868:	f000 fced 	bl	8003246 <LL_GPIO_Init>

}
 800286c:	bf00      	nop
 800286e:	3750      	adds	r7, #80	; 0x50
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	fff003e8 	.word	0xfff003e8
 8002878:	40020400 	.word	0x40020400

0800287c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08c      	sub	sp, #48	; 0x30
 8002880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002882:	f107 031c 	add.w	r3, r7, #28
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	605a      	str	r2, [r3, #4]
 800288c:	609a      	str	r2, [r3, #8]
 800288e:	60da      	str	r2, [r3, #12]
 8002890:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002892:	1d3b      	adds	r3, r7, #4
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]
 80028a0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80028a2:	2002      	movs	r0, #2
 80028a4:	f7ff fc96 	bl	80021d4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80028a8:	2004      	movs	r0, #4
 80028aa:	f7ff fc7b 	bl	80021a4 <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PC6   ------> TIM3_CH1
  PC7   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = ENCODER_L_CH1_Pin|ENCODER_L_CH2_Pin;
 80028ae:	23c0      	movs	r3, #192	; 0xc0
 80028b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80028b2:	2302      	movs	r3, #2
 80028b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80028c2:	2302      	movs	r3, #2
 80028c4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028c6:	1d3b      	adds	r3, r7, #4
 80028c8:	4619      	mov	r1, r3
 80028ca:	4827      	ldr	r0, [pc, #156]	; (8002968 <MX_TIM3_Init+0xec>)
 80028cc:	f000 fcbb 	bl	8003246 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X2_TI1);
 80028d0:	2101      	movs	r1, #1
 80028d2:	4826      	ldr	r0, [pc, #152]	; (800296c <MX_TIM3_Init+0xf0>)
 80028d4:	f7ff fe8b 	bl	80025ee <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80028d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028dc:	2101      	movs	r1, #1
 80028de:	4823      	ldr	r0, [pc, #140]	; (800296c <MX_TIM3_Init+0xf0>)
 80028e0:	f7ff fd42 	bl	8002368 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 80028e4:	2200      	movs	r2, #0
 80028e6:	2101      	movs	r1, #1
 80028e8:	4820      	ldr	r0, [pc, #128]	; (800296c <MX_TIM3_Init+0xf0>)
 80028ea:	f7ff fd8b 	bl	8002404 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 80028ee:	2200      	movs	r2, #0
 80028f0:	2101      	movs	r1, #1
 80028f2:	481e      	ldr	r0, [pc, #120]	; (800296c <MX_TIM3_Init+0xf0>)
 80028f4:	f7ff fdd4 	bl	80024a0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 80028f8:	2200      	movs	r2, #0
 80028fa:	2101      	movs	r1, #1
 80028fc:	481b      	ldr	r0, [pc, #108]	; (800296c <MX_TIM3_Init+0xf0>)
 80028fe:	f7ff fe1d 	bl	800253c <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002902:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002906:	2110      	movs	r1, #16
 8002908:	4818      	ldr	r0, [pc, #96]	; (800296c <MX_TIM3_Init+0xf0>)
 800290a:	f7ff fd2d 	bl	8002368 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 800290e:	2200      	movs	r2, #0
 8002910:	2110      	movs	r1, #16
 8002912:	4816      	ldr	r0, [pc, #88]	; (800296c <MX_TIM3_Init+0xf0>)
 8002914:	f7ff fd76 	bl	8002404 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8002918:	2200      	movs	r2, #0
 800291a:	2110      	movs	r1, #16
 800291c:	4813      	ldr	r0, [pc, #76]	; (800296c <MX_TIM3_Init+0xf0>)
 800291e:	f7ff fdbf 	bl	80024a0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8002922:	2200      	movs	r2, #0
 8002924:	2110      	movs	r1, #16
 8002926:	4811      	ldr	r0, [pc, #68]	; (800296c <MX_TIM3_Init+0xf0>)
 8002928:	f7ff fe08 	bl	800253c <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002930:	2300      	movs	r3, #0
 8002932:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8002934:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800293a:	2300      	movs	r3, #0
 800293c:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800293e:	f107 031c 	add.w	r3, r7, #28
 8002942:	4619      	mov	r1, r3
 8002944:	4809      	ldr	r0, [pc, #36]	; (800296c <MX_TIM3_Init+0xf0>)
 8002946:	f000 ff13 	bl	8003770 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 800294a:	4808      	ldr	r0, [pc, #32]	; (800296c <MX_TIM3_Init+0xf0>)
 800294c:	f7ff fc72 	bl	8002234 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002950:	2100      	movs	r1, #0
 8002952:	4806      	ldr	r0, [pc, #24]	; (800296c <MX_TIM3_Init+0xf0>)
 8002954:	f7ff fe5e 	bl	8002614 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002958:	4804      	ldr	r0, [pc, #16]	; (800296c <MX_TIM3_Init+0xf0>)
 800295a:	f7ff fe6e 	bl	800263a <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800295e:	bf00      	nop
 8002960:	3730      	adds	r7, #48	; 0x30
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40020800 	.word	0x40020800
 800296c:	40000400 	.word	0x40000400

08002970 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08c      	sub	sp, #48	; 0x30
 8002974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002976:	f107 031c 	add.w	r3, r7, #28
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	609a      	str	r2, [r3, #8]
 8002982:	60da      	str	r2, [r3, #12]
 8002984:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002986:	1d3b      	adds	r3, r7, #4
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	60da      	str	r2, [r3, #12]
 8002992:	611a      	str	r2, [r3, #16]
 8002994:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8002996:	2004      	movs	r0, #4
 8002998:	f7ff fc1c 	bl	80021d4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800299c:	2002      	movs	r0, #2
 800299e:	f7ff fc01 	bl	80021a4 <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PB6   ------> TIM4_CH1
  PB7   ------> TIM4_CH2
  */
  GPIO_InitStruct.Pin = ENCODER_R_CH1_Pin|ENCODER_R_CH2_Pin;
 80029a2:	23c0      	movs	r3, #192	; 0xc0
 80029a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80029a6:	2302      	movs	r3, #2
 80029a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80029b6:	2302      	movs	r3, #2
 80029b8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ba:	1d3b      	adds	r3, r7, #4
 80029bc:	4619      	mov	r1, r3
 80029be:	4827      	ldr	r0, [pc, #156]	; (8002a5c <MX_TIM4_Init+0xec>)
 80029c0:	f000 fc41 	bl	8003246 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  LL_TIM_SetEncoderMode(TIM4, LL_TIM_ENCODERMODE_X2_TI1);
 80029c4:	2101      	movs	r1, #1
 80029c6:	4826      	ldr	r0, [pc, #152]	; (8002a60 <MX_TIM4_Init+0xf0>)
 80029c8:	f7ff fe11 	bl	80025ee <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80029cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029d0:	2101      	movs	r1, #1
 80029d2:	4823      	ldr	r0, [pc, #140]	; (8002a60 <MX_TIM4_Init+0xf0>)
 80029d4:	f7ff fcc8 	bl	8002368 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 80029d8:	2200      	movs	r2, #0
 80029da:	2101      	movs	r1, #1
 80029dc:	4820      	ldr	r0, [pc, #128]	; (8002a60 <MX_TIM4_Init+0xf0>)
 80029de:	f7ff fd11 	bl	8002404 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 80029e2:	2200      	movs	r2, #0
 80029e4:	2101      	movs	r1, #1
 80029e6:	481e      	ldr	r0, [pc, #120]	; (8002a60 <MX_TIM4_Init+0xf0>)
 80029e8:	f7ff fd5a 	bl	80024a0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 80029ec:	2200      	movs	r2, #0
 80029ee:	2101      	movs	r1, #1
 80029f0:	481b      	ldr	r0, [pc, #108]	; (8002a60 <MX_TIM4_Init+0xf0>)
 80029f2:	f7ff fda3 	bl	800253c <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80029f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029fa:	2110      	movs	r1, #16
 80029fc:	4818      	ldr	r0, [pc, #96]	; (8002a60 <MX_TIM4_Init+0xf0>)
 80029fe:	f7ff fcb3 	bl	8002368 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8002a02:	2200      	movs	r2, #0
 8002a04:	2110      	movs	r1, #16
 8002a06:	4816      	ldr	r0, [pc, #88]	; (8002a60 <MX_TIM4_Init+0xf0>)
 8002a08:	f7ff fcfc 	bl	8002404 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2110      	movs	r1, #16
 8002a10:	4813      	ldr	r0, [pc, #76]	; (8002a60 <MX_TIM4_Init+0xf0>)
 8002a12:	f7ff fd45 	bl	80024a0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8002a16:	2200      	movs	r2, #0
 8002a18:	2110      	movs	r1, #16
 8002a1a:	4811      	ldr	r0, [pc, #68]	; (8002a60 <MX_TIM4_Init+0xf0>)
 8002a1c:	f7ff fd8e 	bl	800253c <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002a24:	2300      	movs	r3, #0
 8002a26:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8002a28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8002a32:	f107 031c 	add.w	r3, r7, #28
 8002a36:	4619      	mov	r1, r3
 8002a38:	4809      	ldr	r0, [pc, #36]	; (8002a60 <MX_TIM4_Init+0xf0>)
 8002a3a:	f000 fe99 	bl	8003770 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8002a3e:	4808      	ldr	r0, [pc, #32]	; (8002a60 <MX_TIM4_Init+0xf0>)
 8002a40:	f7ff fbf8 	bl	8002234 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8002a44:	2100      	movs	r1, #0
 8002a46:	4806      	ldr	r0, [pc, #24]	; (8002a60 <MX_TIM4_Init+0xf0>)
 8002a48:	f7ff fde4 	bl	8002614 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8002a4c:	4804      	ldr	r0, [pc, #16]	; (8002a60 <MX_TIM4_Init+0xf0>)
 8002a4e:	f7ff fdf4 	bl	800263a <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a52:	bf00      	nop
 8002a54:	3730      	adds	r7, #48	; 0x30
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40020400 	.word	0x40020400
 8002a60:	40000800 	.word	0x40000800

08002a64 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002a6a:	1d3b      	adds	r3, r7, #4
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8002a78:	2008      	movs	r0, #8
 8002a7a:	f7ff fbab 	bl	80021d4 <LL_APB1_GRP1_EnableClock>

  /* TIM5 interrupt Init */
  NVIC_SetPriority(TIM5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002a7e:	f7ff fb07 	bl	8002090 <__NVIC_GetPriorityGrouping>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2200      	movs	r2, #0
 8002a86:	2100      	movs	r1, #0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fb57 	bl	800213c <NVIC_EncodePriority>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	4619      	mov	r1, r3
 8002a92:	2032      	movs	r0, #50	; 0x32
 8002a94:	f7ff fb28 	bl	80020e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 8002a98:	2032      	movs	r0, #50	; 0x32
 8002a9a:	f7ff fb07 	bl	80020ac <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 8002a9e:	2353      	movs	r3, #83	; 0x53
 8002aa0:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 8002aa6:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002aaa:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002aac:	2300      	movs	r3, #0
 8002aae:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8002ab0:	1d3b      	adds	r3, r7, #4
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	480a      	ldr	r0, [pc, #40]	; (8002ae0 <MX_TIM5_Init+0x7c>)
 8002ab6:	f000 fe5b 	bl	8003770 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 8002aba:	4809      	ldr	r0, [pc, #36]	; (8002ae0 <MX_TIM5_Init+0x7c>)
 8002abc:	f7ff fbba 	bl	8002234 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4807      	ldr	r0, [pc, #28]	; (8002ae0 <MX_TIM5_Init+0x7c>)
 8002ac4:	f7ff fd7e 	bl	80025c4 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8002ac8:	2100      	movs	r1, #0
 8002aca:	4805      	ldr	r0, [pc, #20]	; (8002ae0 <MX_TIM5_Init+0x7c>)
 8002acc:	f7ff fda2 	bl	8002614 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8002ad0:	4803      	ldr	r0, [pc, #12]	; (8002ae0 <MX_TIM5_Init+0x7c>)
 8002ad2:	f7ff fdb2 	bl	800263a <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002ad6:	bf00      	nop
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40000c00 	.word	0x40000c00

08002ae4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b09a      	sub	sp, #104	; 0x68
 8002ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002aea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	609a      	str	r2, [r3, #8]
 8002af6:	60da      	str	r2, [r3, #12]
 8002af8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002afa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002afe:	2220      	movs	r2, #32
 8002b00:	2100      	movs	r1, #0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f001 fbce 	bl	80042a4 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8002b08:	f107 031c 	add.w	r3, r7, #28
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
 8002b18:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1a:	1d3b      	adds	r3, r7, #4
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	611a      	str	r2, [r3, #16]
 8002b28:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 8002b2a:	2002      	movs	r0, #2
 8002b2c:	f7ff fb6a 	bl	8002204 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  TIM_InitStruct.Prescaler = 840-1;
 8002b30:	f240 3347 	movw	r3, #839	; 0x347
 8002b34:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 10000;
 8002b3c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002b40:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002b42:	2300      	movs	r3, #0
 8002b44:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	667b      	str	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 8002b4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b4e:	4619      	mov	r1, r3
 8002b50:	482f      	ldr	r0, [pc, #188]	; (8002c10 <MX_TIM8_Init+0x12c>)
 8002b52:	f000 fe0d 	bl	8003770 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM8);
 8002b56:	482e      	ldr	r0, [pc, #184]	; (8002c10 <MX_TIM8_Init+0x12c>)
 8002b58:	f7ff fb6c 	bl	8002234 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM8, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	482c      	ldr	r0, [pc, #176]	; (8002c10 <MX_TIM8_Init+0x12c>)
 8002b60:	f7ff fd30 	bl	80025c4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM8, LL_TIM_CHANNEL_CH4);
 8002b64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b68:	4829      	ldr	r0, [pc, #164]	; (8002c10 <MX_TIM8_Init+0x12c>)
 8002b6a:	f7ff fbb9 	bl	80022e0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002b6e:	2360      	movs	r3, #96	; 0x60
 8002b70:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002b72:	2300      	movs	r3, #0
 8002b74:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002b76:	2300      	movs	r3, #0
 8002b78:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 100;
 8002b7a:	2364      	movs	r3, #100	; 0x64
 8002b7c:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002b82:	2300      	movs	r3, #0
 8002b84:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002b86:	2300      	movs	r3, #0
 8002b88:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8002b8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b94:	481e      	ldr	r0, [pc, #120]	; (8002c10 <MX_TIM8_Init+0x12c>)
 8002b96:	f000 fe85 	bl	80038a4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM8, LL_TIM_CHANNEL_CH4);
 8002b9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b9e:	481c      	ldr	r0, [pc, #112]	; (8002c10 <MX_TIM8_Init+0x12c>)
 8002ba0:	f7ff fb58 	bl	8002254 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM8, LL_TIM_TRGO_RESET);
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	481a      	ldr	r0, [pc, #104]	; (8002c10 <MX_TIM8_Init+0x12c>)
 8002ba8:	f7ff fd34 	bl	8002614 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM8);
 8002bac:	4818      	ldr	r0, [pc, #96]	; (8002c10 <MX_TIM8_Init+0x12c>)
 8002bae:	f7ff fd44 	bl	800263a <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8002bc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM8, &TIM_BDTRInitStruct);
 8002bd2:	f107 031c 	add.w	r3, r7, #28
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	480d      	ldr	r0, [pc, #52]	; (8002c10 <MX_TIM8_Init+0x12c>)
 8002bda:	f000 fea4 	bl	8003926 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002bde:	2004      	movs	r0, #4
 8002be0:	f7ff fae0 	bl	80021a4 <LL_AHB1_GRP1_EnableClock>
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8002be4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002be8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002bea:	2302      	movs	r3, #2
 8002bec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002bfe:	1d3b      	adds	r3, r7, #4
 8002c00:	4619      	mov	r1, r3
 8002c02:	4804      	ldr	r0, [pc, #16]	; (8002c14 <MX_TIM8_Init+0x130>)
 8002c04:	f000 fb1f 	bl	8003246 <LL_GPIO_Init>

}
 8002c08:	bf00      	nop
 8002c0a:	3768      	adds	r7, #104	; 0x68
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40010400 	.word	0x40010400
 8002c14:	40020800 	.word	0x40020800

08002c18 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b094      	sub	sp, #80	; 0x50
 8002c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002c1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	609a      	str	r2, [r3, #8]
 8002c2a:	60da      	str	r2, [r3, #12]
 8002c2c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002c2e:	f107 031c 	add.w	r3, r7, #28
 8002c32:	2220      	movs	r2, #32
 8002c34:	2100      	movs	r1, #0
 8002c36:	4618      	mov	r0, r3
 8002c38:	f001 fb34 	bl	80042a4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3c:	1d3b      	adds	r3, r7, #4
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	605a      	str	r2, [r3, #4]
 8002c44:	609a      	str	r2, [r3, #8]
 8002c46:	60da      	str	r2, [r3, #12]
 8002c48:	611a      	str	r2, [r3, #16]
 8002c4a:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM11);
 8002c4c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002c50:	f7ff fad8 	bl	8002204 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 65535;
 8002c5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c60:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002c62:	2300      	movs	r3, #0
 8002c64:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM11, &TIM_InitStruct);
 8002c66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	481b      	ldr	r0, [pc, #108]	; (8002cdc <MX_TIM11_Init+0xc4>)
 8002c6e:	f000 fd7f 	bl	8003770 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM11);
 8002c72:	481a      	ldr	r0, [pc, #104]	; (8002cdc <MX_TIM11_Init+0xc4>)
 8002c74:	f7ff fade 	bl	8002234 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM11, LL_TIM_CHANNEL_CH1);
 8002c78:	2101      	movs	r1, #1
 8002c7a:	4818      	ldr	r0, [pc, #96]	; (8002cdc <MX_TIM11_Init+0xc4>)
 8002c7c:	f7ff fb30 	bl	80022e0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002c80:	2360      	movs	r3, #96	; 0x60
 8002c82:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002c84:	2300      	movs	r3, #0
 8002c86:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002c90:	2300      	movs	r3, #0
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM11, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002c94:	f107 031c 	add.w	r3, r7, #28
 8002c98:	461a      	mov	r2, r3
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	480f      	ldr	r0, [pc, #60]	; (8002cdc <MX_TIM11_Init+0xc4>)
 8002c9e:	f000 fe01 	bl	80038a4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM11, LL_TIM_CHANNEL_CH1);
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	480d      	ldr	r0, [pc, #52]	; (8002cdc <MX_TIM11_Init+0xc4>)
 8002ca6:	f7ff fad5 	bl	8002254 <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002caa:	2002      	movs	r0, #2
 8002cac:	f7ff fa7a 	bl	80021a4 <LL_AHB1_GRP1_EnableClock>
    /**TIM11 GPIO Configuration
    PB9     ------> TIM11_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8002cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cb4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cca:	1d3b      	adds	r3, r7, #4
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4804      	ldr	r0, [pc, #16]	; (8002ce0 <MX_TIM11_Init+0xc8>)
 8002cd0:	f000 fab9 	bl	8003246 <LL_GPIO_Init>

}
 8002cd4:	bf00      	nop
 8002cd6:	3750      	adds	r7, #80	; 0x50
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40014800 	.word	0x40014800
 8002ce0:	40020400 	.word	0x40020400

08002ce4 <LL_AHB1_GRP1_EnableClock>:
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002cec:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002cee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cf0:	4907      	ldr	r1, [pc, #28]	; (8002d10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d02:	68fb      	ldr	r3, [r7, #12]
}
 8002d04:	bf00      	nop
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	40023800 	.word	0x40023800

08002d14 <LL_APB2_GRP1_EnableClock>:
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002d1c:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002d1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d20:	4907      	ldr	r1, [pc, #28]	; (8002d40 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002d2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d32:	68fb      	ldr	r3, [r7, #12]
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	40023800 	.word	0x40023800

08002d44 <LL_USART_Enable>:
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	60da      	str	r2, [r3, #12]
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <LL_USART_ConfigAsyncMode>:
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	615a      	str	r2, [r3, #20]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08e      	sub	sp, #56	; 0x38
 8002d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002d96:	f107 031c 	add.w	r3, r7, #28
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	605a      	str	r2, [r3, #4]
 8002da0:	609a      	str	r2, [r3, #8]
 8002da2:	60da      	str	r2, [r3, #12]
 8002da4:	611a      	str	r2, [r3, #16]
 8002da6:	615a      	str	r2, [r3, #20]
 8002da8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	605a      	str	r2, [r3, #4]
 8002db2:	609a      	str	r2, [r3, #8]
 8002db4:	60da      	str	r2, [r3, #12]
 8002db6:	611a      	str	r2, [r3, #16]
 8002db8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002dba:	2010      	movs	r0, #16
 8002dbc:	f7ff ffaa 	bl	8002d14 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	f7ff ff8f 	bl	8002ce4 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8002dc6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002dca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002ddc:	2307      	movs	r3, #7
 8002dde:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	4619      	mov	r1, r3
 8002de4:	4810      	ldr	r0, [pc, #64]	; (8002e28 <MX_USART1_UART_Init+0x98>)
 8002de6:	f000 fa2e 	bl	8003246 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8002dea:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002dee:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002df0:	2300      	movs	r3, #0
 8002df2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002df4:	2300      	movs	r3, #0
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002dfc:	230c      	movs	r3, #12
 8002dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002e00:	2300      	movs	r3, #0
 8002e02:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002e04:	2300      	movs	r3, #0
 8002e06:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8002e08:	f107 031c 	add.w	r3, r7, #28
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4807      	ldr	r0, [pc, #28]	; (8002e2c <MX_USART1_UART_Init+0x9c>)
 8002e10:	f001 f940 	bl	8004094 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8002e14:	4805      	ldr	r0, [pc, #20]	; (8002e2c <MX_USART1_UART_Init+0x9c>)
 8002e16:	f7ff ffa5 	bl	8002d64 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8002e1a:	4804      	ldr	r0, [pc, #16]	; (8002e2c <MX_USART1_UART_Init+0x9c>)
 8002e1c:	f7ff ff92 	bl	8002d44 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e20:	bf00      	nop
 8002e22:	3738      	adds	r7, #56	; 0x38
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40020000 	.word	0x40020000
 8002e2c:	40011000 	.word	0x40011000

08002e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e36:	e003      	b.n	8002e40 <LoopCopyDataInit>

08002e38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e3e:	3104      	adds	r1, #4

08002e40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e40:	480b      	ldr	r0, [pc, #44]	; (8002e70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e42:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e48:	d3f6      	bcc.n	8002e38 <CopyDataInit>
  ldr  r2, =_sbss
 8002e4a:	4a0b      	ldr	r2, [pc, #44]	; (8002e78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e4c:	e002      	b.n	8002e54 <LoopFillZerobss>

08002e4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e50:	f842 3b04 	str.w	r3, [r2], #4

08002e54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e54:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e58:	d3f9      	bcc.n	8002e4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e5a:	f7ff f903 	bl	8002064 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e5e:	f001 f9fd 	bl	800425c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e62:	f7fe fe89 	bl	8001b78 <main>
  bx  lr    
 8002e66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e68:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002e6c:	08007284 	.word	0x08007284
  ldr  r0, =_sdata
 8002e70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e74:	200001d4 	.word	0x200001d4
  ldr  r2, =_sbss
 8002e78:	200001d4 	.word	0x200001d4
  ldr  r3, = _ebss
 8002e7c:	20000210 	.word	0x20000210

08002e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e80:	e7fe      	b.n	8002e80 <ADC_IRQHandler>

08002e82 <LL_ADC_REG_SetSequencerLength>:
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	bf0c      	ite	eq
 8002ebc:	2301      	moveq	r3, #1
 8002ebe:	2300      	movne	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002eda:	2300      	movs	r3, #0
 8002edc:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8002ede:	481c      	ldr	r0, [pc, #112]	; (8002f50 <LL_ADC_CommonInit+0x80>)
 8002ee0:	f7ff ffe2 	bl	8002ea8 <LL_ADC_IsEnabled>
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	481b      	ldr	r0, [pc, #108]	; (8002f54 <LL_ADC_CommonInit+0x84>)
 8002ee8:	f7ff ffde 	bl	8002ea8 <LL_ADC_IsEnabled>
 8002eec:	4603      	mov	r3, r0
 8002eee:	431c      	orrs	r4, r3
 8002ef0:	4819      	ldr	r0, [pc, #100]	; (8002f58 <LL_ADC_CommonInit+0x88>)
 8002ef2:	f7ff ffd9 	bl	8002ea8 <LL_ADC_IsEnabled>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	4323      	orrs	r3, r4
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d120      	bne.n	8002f40 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d012      	beq.n	8002f2c <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	4b14      	ldr	r3, [pc, #80]	; (8002f5c <LL_ADC_CommonInit+0x8c>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	6811      	ldr	r1, [r2, #0]
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	6852      	ldr	r2, [r2, #4]
 8002f16:	4311      	orrs	r1, r2
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	6892      	ldr	r2, [r2, #8]
 8002f1c:	4311      	orrs	r1, r2
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	68d2      	ldr	r2, [r2, #12]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	e00b      	b.n	8002f44 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <LL_ADC_CommonInit+0x8c>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	e001      	b.n	8002f44 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd90      	pop	{r4, r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40012000 	.word	0x40012000
 8002f54:	40012100 	.word	0x40012100
 8002f58:	40012200 	.word	0x40012200
 8002f5c:	fffc10e0 	.word	0xfffc10e0

08002f60 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff ff9a 	bl	8002ea8 <LL_ADC_IsEnabled>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d117      	bne.n	8002faa <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002f82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	6811      	ldr	r1, [r2, #0]
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	6892      	ldr	r2, [r2, #8]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	e001      	b.n	8002fae <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff ff6e 	bl	8002ea8 <LL_ADC_IsEnabled>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d12b      	bne.n	800302a <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	605a      	str	r2, [r3, #4]
 8002fec:	e005      	b.n	8002ffa <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	4b0e      	ldr	r3, [pc, #56]	; (8003038 <LL_ADC_REG_Init+0x80>)
 8003000:	4013      	ands	r3, r2
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	6812      	ldr	r2, [r2, #0]
 8003006:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	68d2      	ldr	r2, [r2, #12]
 800300e:	4311      	orrs	r1, r2
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	6912      	ldr	r2, [r2, #16]
 8003014:	430a      	orrs	r2, r1
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	4619      	mov	r1, r3
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff ff2d 	bl	8002e82 <LL_ADC_REG_SetSequencerLength>
 8003028:	e001      	b.n	800302e <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800302e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	c0fffcfd 	.word	0xc0fffcfd

0800303c <LL_GPIO_SetPinMode>:
{
 800303c:	b480      	push	{r7}
 800303e:	b089      	sub	sp, #36	; 0x24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	fa93 f3a3 	rbit	r3, r3
 8003056:	613b      	str	r3, [r7, #16]
  return result;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	fab3 f383 	clz	r3, r3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	2103      	movs	r1, #3
 8003064:	fa01 f303 	lsl.w	r3, r1, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	401a      	ands	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	fa93 f3a3 	rbit	r3, r3
 8003076:	61bb      	str	r3, [r7, #24]
  return result;
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	fab3 f383 	clz	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	fa01 f303 	lsl.w	r3, r1, r3
 8003088:	431a      	orrs	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	601a      	str	r2, [r3, #0]
}
 800308e:	bf00      	nop
 8003090:	3724      	adds	r7, #36	; 0x24
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <LL_GPIO_SetPinOutputType>:
{
 800309a:	b480      	push	{r7}
 800309c:	b085      	sub	sp, #20
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	43db      	mvns	r3, r3
 80030ae:	401a      	ands	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	fb01 f303 	mul.w	r3, r1, r3
 80030b8:	431a      	orrs	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	605a      	str	r2, [r3, #4]
}
 80030be:	bf00      	nop
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <LL_GPIO_SetPinSpeed>:
{
 80030ca:	b480      	push	{r7}
 80030cc:	b089      	sub	sp, #36	; 0x24
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	fa93 f3a3 	rbit	r3, r3
 80030e4:	613b      	str	r3, [r7, #16]
  return result;
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	fab3 f383 	clz	r3, r3
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	2103      	movs	r1, #3
 80030f2:	fa01 f303 	lsl.w	r3, r1, r3
 80030f6:	43db      	mvns	r3, r3
 80030f8:	401a      	ands	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	fa93 f3a3 	rbit	r3, r3
 8003104:	61bb      	str	r3, [r7, #24]
  return result;
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	fab3 f383 	clz	r3, r3
 800310c:	b2db      	uxtb	r3, r3
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	fa01 f303 	lsl.w	r3, r1, r3
 8003116:	431a      	orrs	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	609a      	str	r2, [r3, #8]
}
 800311c:	bf00      	nop
 800311e:	3724      	adds	r7, #36	; 0x24
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <LL_GPIO_SetPinPull>:
{
 8003128:	b480      	push	{r7}
 800312a:	b089      	sub	sp, #36	; 0x24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	fa93 f3a3 	rbit	r3, r3
 8003142:	613b      	str	r3, [r7, #16]
  return result;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	fab3 f383 	clz	r3, r3
 800314a:	b2db      	uxtb	r3, r3
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	2103      	movs	r1, #3
 8003150:	fa01 f303 	lsl.w	r3, r1, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	401a      	ands	r2, r3
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	fa93 f3a3 	rbit	r3, r3
 8003162:	61bb      	str	r3, [r7, #24]
  return result;
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	fab3 f383 	clz	r3, r3
 800316a:	b2db      	uxtb	r3, r3
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	fa01 f303 	lsl.w	r3, r1, r3
 8003174:	431a      	orrs	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	60da      	str	r2, [r3, #12]
}
 800317a:	bf00      	nop
 800317c:	3724      	adds	r7, #36	; 0x24
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <LL_GPIO_SetAFPin_0_7>:
{
 8003186:	b480      	push	{r7}
 8003188:	b089      	sub	sp, #36	; 0x24
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a1a      	ldr	r2, [r3, #32]
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	fa93 f3a3 	rbit	r3, r3
 80031a0:	613b      	str	r3, [r7, #16]
  return result;
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	fab3 f383 	clz	r3, r3
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	210f      	movs	r1, #15
 80031ae:	fa01 f303 	lsl.w	r3, r1, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	401a      	ands	r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	fa93 f3a3 	rbit	r3, r3
 80031c0:	61bb      	str	r3, [r7, #24]
  return result;
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	fab3 f383 	clz	r3, r3
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	fa01 f303 	lsl.w	r3, r1, r3
 80031d2:	431a      	orrs	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	621a      	str	r2, [r3, #32]
}
 80031d8:	bf00      	nop
 80031da:	3724      	adds	r7, #36	; 0x24
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <LL_GPIO_SetAFPin_8_15>:
{
 80031e4:	b480      	push	{r7}
 80031e6:	b089      	sub	sp, #36	; 0x24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	0a1b      	lsrs	r3, r3, #8
 80031f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	fa93 f3a3 	rbit	r3, r3
 8003200:	613b      	str	r3, [r7, #16]
  return result;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	fab3 f383 	clz	r3, r3
 8003208:	b2db      	uxtb	r3, r3
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	210f      	movs	r1, #15
 800320e:	fa01 f303 	lsl.w	r3, r1, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	401a      	ands	r2, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	0a1b      	lsrs	r3, r3, #8
 800321a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	fa93 f3a3 	rbit	r3, r3
 8003222:	61bb      	str	r3, [r7, #24]
  return result;
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	fab3 f383 	clz	r3, r3
 800322a:	b2db      	uxtb	r3, r3
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	fa01 f303 	lsl.w	r3, r1, r3
 8003234:	431a      	orrs	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	625a      	str	r2, [r3, #36]	; 0x24
}
 800323a:	bf00      	nop
 800323c:	3724      	adds	r7, #36	; 0x24
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b088      	sub	sp, #32
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003250:	2300      	movs	r3, #0
 8003252:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003254:	2300      	movs	r3, #0
 8003256:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	fa93 f3a3 	rbit	r3, r3
 8003264:	613b      	str	r3, [r7, #16]
  return result;
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	fab3 f383 	clz	r3, r3
 800326c:	b2db      	uxtb	r3, r3
 800326e:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003270:	e050      	b.n	8003314 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	2101      	movs	r1, #1
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	fa01 f303 	lsl.w	r3, r1, r3
 800327e:	4013      	ands	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d042      	beq.n	800330e <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d003      	beq.n	8003298 <LL_GPIO_Init+0x52>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d10d      	bne.n	80032b4 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	461a      	mov	r2, r3
 800329e:	69b9      	ldr	r1, [r7, #24]
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff ff12 	bl	80030ca <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	461a      	mov	r2, r3
 80032ac:	69b9      	ldr	r1, [r7, #24]
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff fef3 	bl	800309a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	461a      	mov	r2, r3
 80032ba:	69b9      	ldr	r1, [r7, #24]
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff ff33 	bl	8003128 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d11a      	bne.n	8003300 <LL_GPIO_Init+0xba>
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	fa93 f3a3 	rbit	r3, r3
 80032d4:	60bb      	str	r3, [r7, #8]
  return result;
 80032d6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80032d8:	fab3 f383 	clz	r3, r3
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b07      	cmp	r3, #7
 80032e0:	d807      	bhi.n	80032f2 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	461a      	mov	r2, r3
 80032e8:	69b9      	ldr	r1, [r7, #24]
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff ff4b 	bl	8003186 <LL_GPIO_SetAFPin_0_7>
 80032f0:	e006      	b.n	8003300 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	461a      	mov	r2, r3
 80032f8:	69b9      	ldr	r1, [r7, #24]
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7ff ff72 	bl	80031e4 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	461a      	mov	r2, r3
 8003306:	69b9      	ldr	r1, [r7, #24]
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff fe97 	bl	800303c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	3301      	adds	r3, #1
 8003312:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	fa22 f303 	lsr.w	r3, r2, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1a7      	bne.n	8003272 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3720      	adds	r7, #32
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <LL_RCC_GetSysClkSource>:
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003330:	4b04      	ldr	r3, [pc, #16]	; (8003344 <LL_RCC_GetSysClkSource+0x18>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 030c 	and.w	r3, r3, #12
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40023800 	.word	0x40023800

08003348 <LL_RCC_GetAHBPrescaler>:
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800334c:	4b04      	ldr	r3, [pc, #16]	; (8003360 <LL_RCC_GetAHBPrescaler+0x18>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003354:	4618      	mov	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40023800 	.word	0x40023800

08003364 <LL_RCC_GetAPB1Prescaler>:
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003368:	4b04      	ldr	r3, [pc, #16]	; (800337c <LL_RCC_GetAPB1Prescaler+0x18>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003370:	4618      	mov	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40023800 	.word	0x40023800

08003380 <LL_RCC_GetAPB2Prescaler>:
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003384:	4b04      	ldr	r3, [pc, #16]	; (8003398 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800338c:	4618      	mov	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40023800 	.word	0x40023800

0800339c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <LL_RCC_PLL_GetMainSource+0x18>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800

080033b8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80033bc:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <LL_RCC_PLL_GetN+0x18>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	099b      	lsrs	r3, r3, #6
 80033c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	40023800 	.word	0x40023800

080033d4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80033d8:	4b04      	ldr	r3, [pc, #16]	; (80033ec <LL_RCC_PLL_GetP+0x18>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800

080033f0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80033f4:	4b04      	ldr	r3, [pc, #16]	; (8003408 <LL_RCC_PLL_GetDivider+0x18>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40023800 	.word	0x40023800

0800340c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003414:	f000 f820 	bl	8003458 <RCC_GetSystemClockFreq>
 8003418:	4602      	mov	r2, r0
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f000 f840 	bl	80034a8 <RCC_GetHCLKClockFreq>
 8003428:	4602      	mov	r2, r0
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	4618      	mov	r0, r3
 8003434:	f000 f84e 	bl	80034d4 <RCC_GetPCLK1ClockFreq>
 8003438:	4602      	mov	r2, r0
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	4618      	mov	r0, r3
 8003444:	f000 f85a 	bl	80034fc <RCC_GetPCLK2ClockFreq>
 8003448:	4602      	mov	r2, r0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	60da      	str	r2, [r3, #12]
}
 800344e:	bf00      	nop
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003462:	f7ff ff63 	bl	800332c <LL_RCC_GetSysClkSource>
 8003466:	4603      	mov	r3, r0
 8003468:	2b08      	cmp	r3, #8
 800346a:	d00c      	beq.n	8003486 <RCC_GetSystemClockFreq+0x2e>
 800346c:	2b08      	cmp	r3, #8
 800346e:	d80f      	bhi.n	8003490 <RCC_GetSystemClockFreq+0x38>
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <RCC_GetSystemClockFreq+0x22>
 8003474:	2b04      	cmp	r3, #4
 8003476:	d003      	beq.n	8003480 <RCC_GetSystemClockFreq+0x28>
 8003478:	e00a      	b.n	8003490 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800347a:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <RCC_GetSystemClockFreq+0x48>)
 800347c:	607b      	str	r3, [r7, #4]
      break;
 800347e:	e00a      	b.n	8003496 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003480:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <RCC_GetSystemClockFreq+0x4c>)
 8003482:	607b      	str	r3, [r7, #4]
      break;
 8003484:	e007      	b.n	8003496 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003486:	2008      	movs	r0, #8
 8003488:	f000 f84c 	bl	8003524 <RCC_PLL_GetFreqDomain_SYS>
 800348c:	6078      	str	r0, [r7, #4]
      break;
 800348e:	e002      	b.n	8003496 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003490:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <RCC_GetSystemClockFreq+0x48>)
 8003492:	607b      	str	r3, [r7, #4]
      break;
 8003494:	bf00      	nop
  }

  return frequency;
 8003496:	687b      	ldr	r3, [r7, #4]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	00f42400 	.word	0x00f42400
 80034a4:	017d7840 	.word	0x017d7840

080034a8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80034b0:	f7ff ff4a 	bl	8003348 <LL_RCC_GetAHBPrescaler>
 80034b4:	4603      	mov	r3, r0
 80034b6:	091b      	lsrs	r3, r3, #4
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	4a04      	ldr	r2, [pc, #16]	; (80034d0 <RCC_GetHCLKClockFreq+0x28>)
 80034be:	5cd3      	ldrb	r3, [r2, r3]
 80034c0:	461a      	mov	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	40d3      	lsrs	r3, r2
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	08006e58 	.word	0x08006e58

080034d4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80034dc:	f7ff ff42 	bl	8003364 <LL_RCC_GetAPB1Prescaler>
 80034e0:	4603      	mov	r3, r0
 80034e2:	0a9b      	lsrs	r3, r3, #10
 80034e4:	4a04      	ldr	r2, [pc, #16]	; (80034f8 <RCC_GetPCLK1ClockFreq+0x24>)
 80034e6:	5cd3      	ldrb	r3, [r2, r3]
 80034e8:	461a      	mov	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	40d3      	lsrs	r3, r2
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	08006e68 	.word	0x08006e68

080034fc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003504:	f7ff ff3c 	bl	8003380 <LL_RCC_GetAPB2Prescaler>
 8003508:	4603      	mov	r3, r0
 800350a:	0b5b      	lsrs	r3, r3, #13
 800350c:	4a04      	ldr	r2, [pc, #16]	; (8003520 <RCC_GetPCLK2ClockFreq+0x24>)
 800350e:	5cd3      	ldrb	r3, [r2, r3]
 8003510:	461a      	mov	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	40d3      	lsrs	r3, r2
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	08006e68 	.word	0x08006e68

08003524 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003524:	b590      	push	{r4, r7, lr}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	2300      	movs	r3, #0
 8003536:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003538:	f7ff ff30 	bl	800339c <LL_RCC_PLL_GetMainSource>
 800353c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d004      	beq.n	800354e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800354a:	d003      	beq.n	8003554 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800354c:	e005      	b.n	800355a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800354e:	4b12      	ldr	r3, [pc, #72]	; (8003598 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003550:	617b      	str	r3, [r7, #20]
      break;
 8003552:	e005      	b.n	8003560 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003554:	4b11      	ldr	r3, [pc, #68]	; (800359c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003556:	617b      	str	r3, [r7, #20]
      break;
 8003558:	e002      	b.n	8003560 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800355a:	4b0f      	ldr	r3, [pc, #60]	; (8003598 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800355c:	617b      	str	r3, [r7, #20]
      break;
 800355e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b08      	cmp	r3, #8
 8003564:	d113      	bne.n	800358e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003566:	f7ff ff43 	bl	80033f0 <LL_RCC_PLL_GetDivider>
 800356a:	4602      	mov	r2, r0
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	fbb3 f4f2 	udiv	r4, r3, r2
 8003572:	f7ff ff21 	bl	80033b8 <LL_RCC_PLL_GetN>
 8003576:	4603      	mov	r3, r0
 8003578:	fb03 f404 	mul.w	r4, r3, r4
 800357c:	f7ff ff2a 	bl	80033d4 <LL_RCC_PLL_GetP>
 8003580:	4603      	mov	r3, r0
 8003582:	0c1b      	lsrs	r3, r3, #16
 8003584:	3301      	adds	r3, #1
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	fbb4 f3f3 	udiv	r3, r4, r3
 800358c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800358e:	693b      	ldr	r3, [r7, #16]
}
 8003590:	4618      	mov	r0, r3
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	bd90      	pop	{r4, r7, pc}
 8003598:	00f42400 	.word	0x00f42400
 800359c:	017d7840 	.word	0x017d7840

080035a0 <LL_SPI_IsEnabled>:
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b0:	2b40      	cmp	r3, #64	; 0x40
 80035b2:	d101      	bne.n	80035b8 <LL_SPI_IsEnabled+0x18>
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <LL_SPI_IsEnabled+0x1a>
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	461a      	mov	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	611a      	str	r2, [r3, #16]
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f7ff ffd3 	bl	80035a0 <LL_SPI_IsEnabled>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d139      	bne.n	8003674 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003608:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	6811      	ldr	r1, [r2, #0]
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	6852      	ldr	r2, [r2, #4]
 8003614:	4311      	orrs	r1, r2
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	6892      	ldr	r2, [r2, #8]
 800361a:	4311      	orrs	r1, r2
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	68d2      	ldr	r2, [r2, #12]
 8003620:	4311      	orrs	r1, r2
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	6912      	ldr	r2, [r2, #16]
 8003626:	4311      	orrs	r1, r2
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	6952      	ldr	r2, [r2, #20]
 800362c:	4311      	orrs	r1, r2
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	6992      	ldr	r2, [r2, #24]
 8003632:	4311      	orrs	r1, r2
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	69d2      	ldr	r2, [r2, #28]
 8003638:	4311      	orrs	r1, r2
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	6a12      	ldr	r2, [r2, #32]
 800363e:	430a      	orrs	r2, r1
 8003640:	431a      	orrs	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f023 0204 	bic.w	r2, r3, #4
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	0c1b      	lsrs	r3, r3, #16
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003662:	d105      	bne.n	8003670 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	4619      	mov	r1, r3
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7ff ffab 	bl	80035c6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003670:	2300      	movs	r3, #0
 8003672:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	61da      	str	r2, [r3, #28]
  return status;
 8003680:	7bfb      	ldrb	r3, [r7, #15]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <LL_TIM_SetPrescaler>:
{
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	629a      	str	r2, [r3, #40]	; 0x28
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <LL_TIM_SetAutoReload>:
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <LL_TIM_SetRepetitionCounter>:
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <LL_TIM_OC_SetCompareCH1>:
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	635a      	str	r2, [r3, #52]	; 0x34
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <LL_TIM_OC_SetCompareCH2>:
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	639a      	str	r2, [r3, #56]	; 0x38
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <LL_TIM_OC_SetCompareCH3>:
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <LL_TIM_OC_SetCompareCH4>:
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f043 0201 	orr.w	r2, r3, #1
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	615a      	str	r2, [r3, #20]
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
	...

08003770 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a3d      	ldr	r2, [pc, #244]	; (8003878 <LL_TIM_Init+0x108>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d013      	beq.n	80037b0 <LL_TIM_Init+0x40>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378e:	d00f      	beq.n	80037b0 <LL_TIM_Init+0x40>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a3a      	ldr	r2, [pc, #232]	; (800387c <LL_TIM_Init+0x10c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00b      	beq.n	80037b0 <LL_TIM_Init+0x40>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a39      	ldr	r2, [pc, #228]	; (8003880 <LL_TIM_Init+0x110>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d007      	beq.n	80037b0 <LL_TIM_Init+0x40>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a38      	ldr	r2, [pc, #224]	; (8003884 <LL_TIM_Init+0x114>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d003      	beq.n	80037b0 <LL_TIM_Init+0x40>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a37      	ldr	r2, [pc, #220]	; (8003888 <LL_TIM_Init+0x118>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d106      	bne.n	80037be <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a2d      	ldr	r2, [pc, #180]	; (8003878 <LL_TIM_Init+0x108>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d02b      	beq.n	800381e <LL_TIM_Init+0xae>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037cc:	d027      	beq.n	800381e <LL_TIM_Init+0xae>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a2a      	ldr	r2, [pc, #168]	; (800387c <LL_TIM_Init+0x10c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d023      	beq.n	800381e <LL_TIM_Init+0xae>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a29      	ldr	r2, [pc, #164]	; (8003880 <LL_TIM_Init+0x110>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d01f      	beq.n	800381e <LL_TIM_Init+0xae>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a28      	ldr	r2, [pc, #160]	; (8003884 <LL_TIM_Init+0x114>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d01b      	beq.n	800381e <LL_TIM_Init+0xae>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a27      	ldr	r2, [pc, #156]	; (8003888 <LL_TIM_Init+0x118>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d017      	beq.n	800381e <LL_TIM_Init+0xae>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a26      	ldr	r2, [pc, #152]	; (800388c <LL_TIM_Init+0x11c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d013      	beq.n	800381e <LL_TIM_Init+0xae>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a25      	ldr	r2, [pc, #148]	; (8003890 <LL_TIM_Init+0x120>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00f      	beq.n	800381e <LL_TIM_Init+0xae>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a24      	ldr	r2, [pc, #144]	; (8003894 <LL_TIM_Init+0x124>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d00b      	beq.n	800381e <LL_TIM_Init+0xae>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a23      	ldr	r2, [pc, #140]	; (8003898 <LL_TIM_Init+0x128>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d007      	beq.n	800381e <LL_TIM_Init+0xae>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a22      	ldr	r2, [pc, #136]	; (800389c <LL_TIM_Init+0x12c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d003      	beq.n	800381e <LL_TIM_Init+0xae>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a21      	ldr	r2, [pc, #132]	; (80038a0 <LL_TIM_Init+0x130>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d106      	bne.n	800382c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	4313      	orrs	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	4619      	mov	r1, r3
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff ff34 	bl	80036a6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	881b      	ldrh	r3, [r3, #0]
 8003842:	4619      	mov	r1, r3
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff ff20 	bl	800368a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a0a      	ldr	r2, [pc, #40]	; (8003878 <LL_TIM_Init+0x108>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d003      	beq.n	800385a <LL_TIM_Init+0xea>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a0c      	ldr	r2, [pc, #48]	; (8003888 <LL_TIM_Init+0x118>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d105      	bne.n	8003866 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	4619      	mov	r1, r3
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff ff2e 	bl	80036c2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7ff ff71 	bl	800374e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40010000 	.word	0x40010000
 800387c:	40000400 	.word	0x40000400
 8003880:	40000800 	.word	0x40000800
 8003884:	40000c00 	.word	0x40000c00
 8003888:	40010400 	.word	0x40010400
 800388c:	40014000 	.word	0x40014000
 8003890:	40014400 	.word	0x40014400
 8003894:	40014800 	.word	0x40014800
 8003898:	40001800 	.word	0x40001800
 800389c:	40001c00 	.word	0x40001c00
 80038a0:	40002000 	.word	0x40002000

080038a4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ba:	d027      	beq.n	800390c <LL_TIM_OC_Init+0x68>
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c2:	d82a      	bhi.n	800391a <LL_TIM_OC_Init+0x76>
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ca:	d018      	beq.n	80038fe <LL_TIM_OC_Init+0x5a>
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038d2:	d822      	bhi.n	800391a <LL_TIM_OC_Init+0x76>
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d003      	beq.n	80038e2 <LL_TIM_OC_Init+0x3e>
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b10      	cmp	r3, #16
 80038de:	d007      	beq.n	80038f0 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80038e0:	e01b      	b.n	800391a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f867 	bl	80039b8 <OC1Config>
 80038ea:	4603      	mov	r3, r0
 80038ec:	75fb      	strb	r3, [r7, #23]
      break;
 80038ee:	e015      	b.n	800391c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 f8cc 	bl	8003a90 <OC2Config>
 80038f8:	4603      	mov	r3, r0
 80038fa:	75fb      	strb	r3, [r7, #23]
      break;
 80038fc:	e00e      	b.n	800391c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 f935 	bl	8003b70 <OC3Config>
 8003906:	4603      	mov	r3, r0
 8003908:	75fb      	strb	r3, [r7, #23]
      break;
 800390a:	e007      	b.n	800391c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 f99e 	bl	8003c50 <OC4Config>
 8003914:	4603      	mov	r3, r0
 8003916:	75fb      	strb	r3, [r7, #23]
      break;
 8003918:	e000      	b.n	800391c <LL_TIM_OC_Init+0x78>
      break;
 800391a:	bf00      	nop
  }

  return result;
 800391c:	7dfb      	ldrb	r3, [r7, #23]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8003926:	b480      	push	{r7}
 8003928:	b085      	sub	sp, #20
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8003930:	2300      	movs	r3, #0
 8003932:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	7b12      	ldrb	r2, [r2, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	4313      	orrs	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4313      	orrs	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	89d2      	ldrh	r2, [r2, #14]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	4313      	orrs	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f023 0201 	bic.w	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0303 	bic.w	r3, r3, #3
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f023 0202 	bic.w	r2, r3, #2
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f023 0201 	bic.w	r2, r3, #1
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a1c      	ldr	r2, [pc, #112]	; (8003a88 <OC1Config+0xd0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d003      	beq.n	8003a22 <OC1Config+0x6a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a1b      	ldr	r2, [pc, #108]	; (8003a8c <OC1Config+0xd4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d11e      	bne.n	8003a60 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f023 0208 	bic.w	r2, r3, #8
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f023 0204 	bic.w	r2, r3, #4
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4619      	mov	r1, r3
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff fe33 	bl	80036de <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40010000 	.word	0x40010000
 8003a8c:	40010400 	.word	0x40010400

08003a90 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	f023 0210 	bic.w	r2, r3, #16
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	021b      	lsls	r3, r3, #8
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f023 0220 	bic.w	r2, r3, #32
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	4313      	orrs	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f023 0210 	bic.w	r2, r3, #16
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	4313      	orrs	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a1d      	ldr	r2, [pc, #116]	; (8003b68 <OC2Config+0xd8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d003      	beq.n	8003b00 <OC2Config+0x70>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a1c      	ldr	r2, [pc, #112]	; (8003b6c <OC2Config+0xdc>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d11f      	bne.n	8003b40 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	019b      	lsls	r3, r3, #6
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	019b      	lsls	r3, r3, #6
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4619      	mov	r1, r3
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff fdd1 	bl	80036fa <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40010000 	.word	0x40010000
 8003b6c:	40010400 	.word	0x40010400

08003b70 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 0303 	bic.w	r3, r3, #3
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	021b      	lsls	r3, r3, #8
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	021b      	lsls	r3, r3, #8
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a1d      	ldr	r2, [pc, #116]	; (8003c48 <OC3Config+0xd8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d003      	beq.n	8003bde <OC3Config+0x6e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a1c      	ldr	r2, [pc, #112]	; (8003c4c <OC3Config+0xdc>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d11f      	bne.n	8003c1e <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	029b      	lsls	r3, r3, #10
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	029b      	lsls	r3, r3, #10
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	015b      	lsls	r3, r3, #5
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	4619      	mov	r1, r3
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff fd70 	bl	8003716 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40010000 	.word	0x40010000
 8003c4c:	40010400 	.word	0x40010400

08003c50 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	021b      	lsls	r3, r3, #8
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	031b      	lsls	r3, r3, #12
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	031b      	lsls	r3, r3, #12
 8003cac:	4313      	orrs	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a11      	ldr	r2, [pc, #68]	; (8003cf8 <OC4Config+0xa8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d003      	beq.n	8003cc0 <OC4Config+0x70>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a10      	ldr	r2, [pc, #64]	; (8003cfc <OC4Config+0xac>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d107      	bne.n	8003cd0 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	019b      	lsls	r3, r3, #6
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff fd25 	bl	8003732 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40010000 	.word	0x40010000
 8003cfc:	40010400 	.word	0x40010400

08003d00 <LL_USART_IsEnabled>:
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d14:	bf0c      	ite	eq
 8003d16:	2301      	moveq	r3, #1
 8003d18:	2300      	movne	r3, #0
 8003d1a:	b2db      	uxtb	r3, r3
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <LL_USART_SetStopBitsLength>:
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	611a      	str	r2, [r3, #16]
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <LL_USART_SetHWFlowCtrl>:
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	615a      	str	r2, [r3, #20]
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <LL_USART_SetBaudRate>:
{
 8003d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d78:	b09f      	sub	sp, #124	; 0x7c
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6778      	str	r0, [r7, #116]	; 0x74
 8003d7e:	6739      	str	r1, [r7, #112]	; 0x70
 8003d80:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d82:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d8a:	f040 80bc 	bne.w	8003f06 <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003d8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d90:	461c      	mov	r4, r3
 8003d92:	f04f 0500 	mov.w	r5, #0
 8003d96:	4622      	mov	r2, r4
 8003d98:	462b      	mov	r3, r5
 8003d9a:	eb12 0a02 	adds.w	sl, r2, r2
 8003d9e:	eb43 0b03 	adc.w	fp, r3, r3
 8003da2:	4652      	mov	r2, sl
 8003da4:	465b      	mov	r3, fp
 8003da6:	1912      	adds	r2, r2, r4
 8003da8:	eb45 0303 	adc.w	r3, r5, r3
 8003dac:	f04f 0000 	mov.w	r0, #0
 8003db0:	f04f 0100 	mov.w	r1, #0
 8003db4:	00d9      	lsls	r1, r3, #3
 8003db6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dba:	00d0      	lsls	r0, r2, #3
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	1911      	adds	r1, r2, r4
 8003dc2:	6639      	str	r1, [r7, #96]	; 0x60
 8003dc4:	416b      	adcs	r3, r5
 8003dc6:	667b      	str	r3, [r7, #100]	; 0x64
 8003dc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dca:	461a      	mov	r2, r3
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	1891      	adds	r1, r2, r2
 8003dd2:	6339      	str	r1, [r7, #48]	; 0x30
 8003dd4:	415b      	adcs	r3, r3
 8003dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8003dd8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003ddc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003de0:	f7fc fee2 	bl	8000ba8 <__aeabi_uldivmod>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4ba9      	ldr	r3, [pc, #676]	; (8004090 <LL_USART_SetBaudRate+0x31c>)
 8003dea:	fba3 2302 	umull	r2, r3, r3, r2
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	b29e      	uxth	r6, r3
 8003df6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003df8:	461c      	mov	r4, r3
 8003dfa:	f04f 0500 	mov.w	r5, #0
 8003dfe:	4622      	mov	r2, r4
 8003e00:	462b      	mov	r3, r5
 8003e02:	1891      	adds	r1, r2, r2
 8003e04:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e06:	415b      	adcs	r3, r3
 8003e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e0e:	1912      	adds	r2, r2, r4
 8003e10:	eb45 0303 	adc.w	r3, r5, r3
 8003e14:	f04f 0000 	mov.w	r0, #0
 8003e18:	f04f 0100 	mov.w	r1, #0
 8003e1c:	00d9      	lsls	r1, r3, #3
 8003e1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e22:	00d0      	lsls	r0, r2, #3
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	1911      	adds	r1, r2, r4
 8003e2a:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e2c:	416b      	adcs	r3, r5
 8003e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e32:	461a      	mov	r2, r3
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	1891      	adds	r1, r2, r2
 8003e3a:	6239      	str	r1, [r7, #32]
 8003e3c:	415b      	adcs	r3, r3
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e40:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e44:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003e48:	f7fc feae 	bl	8000ba8 <__aeabi_uldivmod>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4b8f      	ldr	r3, [pc, #572]	; (8004090 <LL_USART_SetBaudRate+0x31c>)
 8003e52:	fba3 1302 	umull	r1, r3, r3, r2
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	2164      	movs	r1, #100	; 0x64
 8003e5a:	fb01 f303 	mul.w	r3, r1, r3
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	3332      	adds	r3, #50	; 0x32
 8003e64:	4a8a      	ldr	r2, [pc, #552]	; (8004090 <LL_USART_SetBaudRate+0x31c>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	4433      	add	r3, r6
 8003e7a:	b29e      	uxth	r6, r3
 8003e7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f04f 0100 	mov.w	r1, #0
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	1894      	adds	r4, r2, r2
 8003e8a:	61bc      	str	r4, [r7, #24]
 8003e8c:	415b      	adcs	r3, r3
 8003e8e:	61fb      	str	r3, [r7, #28]
 8003e90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e94:	1812      	adds	r2, r2, r0
 8003e96:	eb41 0303 	adc.w	r3, r1, r3
 8003e9a:	f04f 0400 	mov.w	r4, #0
 8003e9e:	f04f 0500 	mov.w	r5, #0
 8003ea2:	00dd      	lsls	r5, r3, #3
 8003ea4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ea8:	00d4      	lsls	r4, r2, #3
 8003eaa:	4622      	mov	r2, r4
 8003eac:	462b      	mov	r3, r5
 8003eae:	1814      	adds	r4, r2, r0
 8003eb0:	653c      	str	r4, [r7, #80]	; 0x50
 8003eb2:	414b      	adcs	r3, r1
 8003eb4:	657b      	str	r3, [r7, #84]	; 0x54
 8003eb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eb8:	461a      	mov	r2, r3
 8003eba:	f04f 0300 	mov.w	r3, #0
 8003ebe:	1891      	adds	r1, r2, r2
 8003ec0:	6139      	str	r1, [r7, #16]
 8003ec2:	415b      	adcs	r3, r3
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003eca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003ece:	f7fc fe6b 	bl	8000ba8 <__aeabi_uldivmod>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4b6e      	ldr	r3, [pc, #440]	; (8004090 <LL_USART_SetBaudRate+0x31c>)
 8003ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8003edc:	095b      	lsrs	r3, r3, #5
 8003ede:	2164      	movs	r1, #100	; 0x64
 8003ee0:	fb01 f303 	mul.w	r3, r1, r3
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	3332      	adds	r3, #50	; 0x32
 8003eea:	4a69      	ldr	r2, [pc, #420]	; (8004090 <LL_USART_SetBaudRate+0x31c>)
 8003eec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef0:	095b      	lsrs	r3, r3, #5
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	4433      	add	r3, r6
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	461a      	mov	r2, r3
 8003f00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f02:	609a      	str	r2, [r3, #8]
}
 8003f04:	e0be      	b.n	8004084 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003f06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f08:	461c      	mov	r4, r3
 8003f0a:	f04f 0500 	mov.w	r5, #0
 8003f0e:	4622      	mov	r2, r4
 8003f10:	462b      	mov	r3, r5
 8003f12:	eb12 0802 	adds.w	r8, r2, r2
 8003f16:	eb43 0903 	adc.w	r9, r3, r3
 8003f1a:	4642      	mov	r2, r8
 8003f1c:	464b      	mov	r3, r9
 8003f1e:	1912      	adds	r2, r2, r4
 8003f20:	eb45 0303 	adc.w	r3, r5, r3
 8003f24:	f04f 0000 	mov.w	r0, #0
 8003f28:	f04f 0100 	mov.w	r1, #0
 8003f2c:	00d9      	lsls	r1, r3, #3
 8003f2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f32:	00d0      	lsls	r0, r2, #3
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	1911      	adds	r1, r2, r4
 8003f3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f3c:	416b      	adcs	r3, r5
 8003f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f42:	4618      	mov	r0, r3
 8003f44:	f04f 0100 	mov.w	r1, #0
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	008b      	lsls	r3, r1, #2
 8003f52:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f56:	0082      	lsls	r2, r0, #2
 8003f58:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003f5c:	f7fc fe24 	bl	8000ba8 <__aeabi_uldivmod>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4b4a      	ldr	r3, [pc, #296]	; (8004090 <LL_USART_SetBaudRate+0x31c>)
 8003f66:	fba3 2302 	umull	r2, r3, r3, r2
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	b29e      	uxth	r6, r3
 8003f72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f74:	4618      	mov	r0, r3
 8003f76:	f04f 0100 	mov.w	r1, #0
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	1894      	adds	r4, r2, r2
 8003f80:	60bc      	str	r4, [r7, #8]
 8003f82:	415b      	adcs	r3, r3
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f8a:	1812      	adds	r2, r2, r0
 8003f8c:	eb41 0303 	adc.w	r3, r1, r3
 8003f90:	f04f 0400 	mov.w	r4, #0
 8003f94:	f04f 0500 	mov.w	r5, #0
 8003f98:	00dd      	lsls	r5, r3, #3
 8003f9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f9e:	00d4      	lsls	r4, r2, #3
 8003fa0:	4622      	mov	r2, r4
 8003fa2:	462b      	mov	r3, r5
 8003fa4:	1814      	adds	r4, r2, r0
 8003fa6:	643c      	str	r4, [r7, #64]	; 0x40
 8003fa8:	414b      	adcs	r3, r1
 8003faa:	647b      	str	r3, [r7, #68]	; 0x44
 8003fac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f04f 0100 	mov.w	r1, #0
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	008b      	lsls	r3, r1, #2
 8003fbe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fc2:	0082      	lsls	r2, r0, #2
 8003fc4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003fc8:	f7fc fdee 	bl	8000ba8 <__aeabi_uldivmod>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4b2f      	ldr	r3, [pc, #188]	; (8004090 <LL_USART_SetBaudRate+0x31c>)
 8003fd2:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	2164      	movs	r1, #100	; 0x64
 8003fda:	fb01 f303 	mul.w	r3, r1, r3
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	3332      	adds	r3, #50	; 0x32
 8003fe4:	4a2a      	ldr	r2, [pc, #168]	; (8004090 <LL_USART_SetBaudRate+0x31c>)
 8003fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	4433      	add	r3, r6
 8003ff6:	b29e      	uxth	r6, r3
 8003ff8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f04f 0100 	mov.w	r1, #0
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	1894      	adds	r4, r2, r2
 8004006:	603c      	str	r4, [r7, #0]
 8004008:	415b      	adcs	r3, r3
 800400a:	607b      	str	r3, [r7, #4]
 800400c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004010:	1812      	adds	r2, r2, r0
 8004012:	eb41 0303 	adc.w	r3, r1, r3
 8004016:	f04f 0400 	mov.w	r4, #0
 800401a:	f04f 0500 	mov.w	r5, #0
 800401e:	00dd      	lsls	r5, r3, #3
 8004020:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004024:	00d4      	lsls	r4, r2, #3
 8004026:	4622      	mov	r2, r4
 8004028:	462b      	mov	r3, r5
 800402a:	1814      	adds	r4, r2, r0
 800402c:	63bc      	str	r4, [r7, #56]	; 0x38
 800402e:	414b      	adcs	r3, r1
 8004030:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004032:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004034:	4618      	mov	r0, r3
 8004036:	f04f 0100 	mov.w	r1, #0
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	f04f 0300 	mov.w	r3, #0
 8004042:	008b      	lsls	r3, r1, #2
 8004044:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004048:	0082      	lsls	r2, r0, #2
 800404a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800404e:	f7fc fdab 	bl	8000ba8 <__aeabi_uldivmod>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <LL_USART_SetBaudRate+0x31c>)
 8004058:	fba3 1302 	umull	r1, r3, r3, r2
 800405c:	095b      	lsrs	r3, r3, #5
 800405e:	2164      	movs	r1, #100	; 0x64
 8004060:	fb01 f303 	mul.w	r3, r1, r3
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	3332      	adds	r3, #50	; 0x32
 800406a:	4a09      	ldr	r2, [pc, #36]	; (8004090 <LL_USART_SetBaudRate+0x31c>)
 800406c:	fba2 2303 	umull	r2, r3, r2, r3
 8004070:	095b      	lsrs	r3, r3, #5
 8004072:	b29b      	uxth	r3, r3
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	b29b      	uxth	r3, r3
 800407a:	4433      	add	r3, r6
 800407c:	b29b      	uxth	r3, r3
 800407e:	461a      	mov	r2, r3
 8004080:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004082:	609a      	str	r2, [r3, #8]
}
 8004084:	bf00      	nop
 8004086:	377c      	adds	r7, #124	; 0x7c
 8004088:	46bd      	mov	sp, r7
 800408a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800408e:	bf00      	nop
 8004090:	51eb851f 	.word	0x51eb851f

08004094 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff fe2a 	bl	8003d00 <LL_USART_IsEnabled>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d15e      	bne.n	8004170 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80040ba:	f023 030c 	bic.w	r3, r3, #12
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	6851      	ldr	r1, [r2, #4]
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	68d2      	ldr	r2, [r2, #12]
 80040c6:	4311      	orrs	r1, r2
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	6912      	ldr	r2, [r2, #16]
 80040cc:	4311      	orrs	r1, r2
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	6992      	ldr	r2, [r2, #24]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	4619      	mov	r1, r3
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7ff fe21 	bl	8003d28 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	4619      	mov	r1, r3
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7ff fe2e 	bl	8003d4e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80040f2:	f107 0308 	add.w	r3, r7, #8
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff f988 	bl	800340c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a1f      	ldr	r2, [pc, #124]	; (800417c <LL_USART_Init+0xe8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d102      	bne.n	800410a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	61bb      	str	r3, [r7, #24]
 8004108:	e021      	b.n	800414e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a1c      	ldr	r2, [pc, #112]	; (8004180 <LL_USART_Init+0xec>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d102      	bne.n	8004118 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	61bb      	str	r3, [r7, #24]
 8004116:	e01a      	b.n	800414e <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a1a      	ldr	r2, [pc, #104]	; (8004184 <LL_USART_Init+0xf0>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d102      	bne.n	8004126 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	61bb      	str	r3, [r7, #24]
 8004124:	e013      	b.n	800414e <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a17      	ldr	r2, [pc, #92]	; (8004188 <LL_USART_Init+0xf4>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d102      	bne.n	8004134 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	61bb      	str	r3, [r7, #24]
 8004132:	e00c      	b.n	800414e <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a15      	ldr	r2, [pc, #84]	; (800418c <LL_USART_Init+0xf8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d102      	bne.n	8004142 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	61bb      	str	r3, [r7, #24]
 8004140:	e005      	b.n	800414e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a12      	ldr	r2, [pc, #72]	; (8004190 <LL_USART_Init+0xfc>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d101      	bne.n	800414e <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00d      	beq.n	8004170 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d009      	beq.n	8004170 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800415c:	2300      	movs	r3, #0
 800415e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	699a      	ldr	r2, [r3, #24]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	69b9      	ldr	r1, [r7, #24]
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff fe02 	bl	8003d74 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004170:	7ffb      	ldrb	r3, [r7, #31]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3720      	adds	r7, #32
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	40011000 	.word	0x40011000
 8004180:	40004400 	.word	0x40004400
 8004184:	40004800 	.word	0x40004800
 8004188:	40011400 	.word	0x40011400
 800418c:	40004c00 	.word	0x40004c00
 8004190:	40005000 	.word	0x40005000

08004194 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a6:	4a07      	ldr	r2, [pc, #28]	; (80041c4 <LL_InitTick+0x30>)
 80041a8:	3b01      	subs	r3, #1
 80041aa:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80041ac:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <LL_InitTick+0x30>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041b2:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <LL_InitTick+0x30>)
 80041b4:	2205      	movs	r2, #5
 80041b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	e000e010 	.word	0xe000e010

080041c8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80041d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff ffdd 	bl	8004194 <LL_InitTick>
}
 80041da:	bf00      	nop
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80041ec:	4b0f      	ldr	r3, [pc, #60]	; (800422c <LL_mDelay+0x48>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80041f2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fa:	d00c      	beq.n	8004216 <LL_mDelay+0x32>
  {
    Delay++;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3301      	adds	r3, #1
 8004200:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8004202:	e008      	b.n	8004216 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004204:	4b09      	ldr	r3, [pc, #36]	; (800422c <LL_mDelay+0x48>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <LL_mDelay+0x32>
    {
      Delay--;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3b01      	subs	r3, #1
 8004214:	607b      	str	r3, [r7, #4]
  while (Delay)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1f3      	bne.n	8004204 <LL_mDelay+0x20>
    }
  }
}
 800421c:	bf00      	nop
 800421e:	bf00      	nop
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	e000e010 	.word	0xe000e010

08004230 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004238:	4a04      	ldr	r2, [pc, #16]	; (800424c <LL_SetSystemCoreClock+0x1c>)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6013      	str	r3, [r2, #0]
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	20000000 	.word	0x20000000

08004250 <__errno>:
 8004250:	4b01      	ldr	r3, [pc, #4]	; (8004258 <__errno+0x8>)
 8004252:	6818      	ldr	r0, [r3, #0]
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	20000004 	.word	0x20000004

0800425c <__libc_init_array>:
 800425c:	b570      	push	{r4, r5, r6, lr}
 800425e:	4d0d      	ldr	r5, [pc, #52]	; (8004294 <__libc_init_array+0x38>)
 8004260:	4c0d      	ldr	r4, [pc, #52]	; (8004298 <__libc_init_array+0x3c>)
 8004262:	1b64      	subs	r4, r4, r5
 8004264:	10a4      	asrs	r4, r4, #2
 8004266:	2600      	movs	r6, #0
 8004268:	42a6      	cmp	r6, r4
 800426a:	d109      	bne.n	8004280 <__libc_init_array+0x24>
 800426c:	4d0b      	ldr	r5, [pc, #44]	; (800429c <__libc_init_array+0x40>)
 800426e:	4c0c      	ldr	r4, [pc, #48]	; (80042a0 <__libc_init_array+0x44>)
 8004270:	f002 fdd8 	bl	8006e24 <_init>
 8004274:	1b64      	subs	r4, r4, r5
 8004276:	10a4      	asrs	r4, r4, #2
 8004278:	2600      	movs	r6, #0
 800427a:	42a6      	cmp	r6, r4
 800427c:	d105      	bne.n	800428a <__libc_init_array+0x2e>
 800427e:	bd70      	pop	{r4, r5, r6, pc}
 8004280:	f855 3b04 	ldr.w	r3, [r5], #4
 8004284:	4798      	blx	r3
 8004286:	3601      	adds	r6, #1
 8004288:	e7ee      	b.n	8004268 <__libc_init_array+0xc>
 800428a:	f855 3b04 	ldr.w	r3, [r5], #4
 800428e:	4798      	blx	r3
 8004290:	3601      	adds	r6, #1
 8004292:	e7f2      	b.n	800427a <__libc_init_array+0x1e>
 8004294:	0800727c 	.word	0x0800727c
 8004298:	0800727c 	.word	0x0800727c
 800429c:	0800727c 	.word	0x0800727c
 80042a0:	08007280 	.word	0x08007280

080042a4 <memset>:
 80042a4:	4402      	add	r2, r0
 80042a6:	4603      	mov	r3, r0
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d100      	bne.n	80042ae <memset+0xa>
 80042ac:	4770      	bx	lr
 80042ae:	f803 1b01 	strb.w	r1, [r3], #1
 80042b2:	e7f9      	b.n	80042a8 <memset+0x4>

080042b4 <__cvt>:
 80042b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042b8:	ec55 4b10 	vmov	r4, r5, d0
 80042bc:	2d00      	cmp	r5, #0
 80042be:	460e      	mov	r6, r1
 80042c0:	4619      	mov	r1, r3
 80042c2:	462b      	mov	r3, r5
 80042c4:	bfbb      	ittet	lt
 80042c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80042ca:	461d      	movlt	r5, r3
 80042cc:	2300      	movge	r3, #0
 80042ce:	232d      	movlt	r3, #45	; 0x2d
 80042d0:	700b      	strb	r3, [r1, #0]
 80042d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80042d8:	4691      	mov	r9, r2
 80042da:	f023 0820 	bic.w	r8, r3, #32
 80042de:	bfbc      	itt	lt
 80042e0:	4622      	movlt	r2, r4
 80042e2:	4614      	movlt	r4, r2
 80042e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042e8:	d005      	beq.n	80042f6 <__cvt+0x42>
 80042ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80042ee:	d100      	bne.n	80042f2 <__cvt+0x3e>
 80042f0:	3601      	adds	r6, #1
 80042f2:	2102      	movs	r1, #2
 80042f4:	e000      	b.n	80042f8 <__cvt+0x44>
 80042f6:	2103      	movs	r1, #3
 80042f8:	ab03      	add	r3, sp, #12
 80042fa:	9301      	str	r3, [sp, #4]
 80042fc:	ab02      	add	r3, sp, #8
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	ec45 4b10 	vmov	d0, r4, r5
 8004304:	4653      	mov	r3, sl
 8004306:	4632      	mov	r2, r6
 8004308:	f000 fdb2 	bl	8004e70 <_dtoa_r>
 800430c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004310:	4607      	mov	r7, r0
 8004312:	d102      	bne.n	800431a <__cvt+0x66>
 8004314:	f019 0f01 	tst.w	r9, #1
 8004318:	d022      	beq.n	8004360 <__cvt+0xac>
 800431a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800431e:	eb07 0906 	add.w	r9, r7, r6
 8004322:	d110      	bne.n	8004346 <__cvt+0x92>
 8004324:	783b      	ldrb	r3, [r7, #0]
 8004326:	2b30      	cmp	r3, #48	; 0x30
 8004328:	d10a      	bne.n	8004340 <__cvt+0x8c>
 800432a:	2200      	movs	r2, #0
 800432c:	2300      	movs	r3, #0
 800432e:	4620      	mov	r0, r4
 8004330:	4629      	mov	r1, r5
 8004332:	f7fc fbc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004336:	b918      	cbnz	r0, 8004340 <__cvt+0x8c>
 8004338:	f1c6 0601 	rsb	r6, r6, #1
 800433c:	f8ca 6000 	str.w	r6, [sl]
 8004340:	f8da 3000 	ldr.w	r3, [sl]
 8004344:	4499      	add	r9, r3
 8004346:	2200      	movs	r2, #0
 8004348:	2300      	movs	r3, #0
 800434a:	4620      	mov	r0, r4
 800434c:	4629      	mov	r1, r5
 800434e:	f7fc fbbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8004352:	b108      	cbz	r0, 8004358 <__cvt+0xa4>
 8004354:	f8cd 900c 	str.w	r9, [sp, #12]
 8004358:	2230      	movs	r2, #48	; 0x30
 800435a:	9b03      	ldr	r3, [sp, #12]
 800435c:	454b      	cmp	r3, r9
 800435e:	d307      	bcc.n	8004370 <__cvt+0xbc>
 8004360:	9b03      	ldr	r3, [sp, #12]
 8004362:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004364:	1bdb      	subs	r3, r3, r7
 8004366:	4638      	mov	r0, r7
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	b004      	add	sp, #16
 800436c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004370:	1c59      	adds	r1, r3, #1
 8004372:	9103      	str	r1, [sp, #12]
 8004374:	701a      	strb	r2, [r3, #0]
 8004376:	e7f0      	b.n	800435a <__cvt+0xa6>

08004378 <__exponent>:
 8004378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800437a:	4603      	mov	r3, r0
 800437c:	2900      	cmp	r1, #0
 800437e:	bfb8      	it	lt
 8004380:	4249      	neglt	r1, r1
 8004382:	f803 2b02 	strb.w	r2, [r3], #2
 8004386:	bfb4      	ite	lt
 8004388:	222d      	movlt	r2, #45	; 0x2d
 800438a:	222b      	movge	r2, #43	; 0x2b
 800438c:	2909      	cmp	r1, #9
 800438e:	7042      	strb	r2, [r0, #1]
 8004390:	dd2a      	ble.n	80043e8 <__exponent+0x70>
 8004392:	f10d 0407 	add.w	r4, sp, #7
 8004396:	46a4      	mov	ip, r4
 8004398:	270a      	movs	r7, #10
 800439a:	46a6      	mov	lr, r4
 800439c:	460a      	mov	r2, r1
 800439e:	fb91 f6f7 	sdiv	r6, r1, r7
 80043a2:	fb07 1516 	mls	r5, r7, r6, r1
 80043a6:	3530      	adds	r5, #48	; 0x30
 80043a8:	2a63      	cmp	r2, #99	; 0x63
 80043aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80043ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80043b2:	4631      	mov	r1, r6
 80043b4:	dcf1      	bgt.n	800439a <__exponent+0x22>
 80043b6:	3130      	adds	r1, #48	; 0x30
 80043b8:	f1ae 0502 	sub.w	r5, lr, #2
 80043bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80043c0:	1c44      	adds	r4, r0, #1
 80043c2:	4629      	mov	r1, r5
 80043c4:	4561      	cmp	r1, ip
 80043c6:	d30a      	bcc.n	80043de <__exponent+0x66>
 80043c8:	f10d 0209 	add.w	r2, sp, #9
 80043cc:	eba2 020e 	sub.w	r2, r2, lr
 80043d0:	4565      	cmp	r5, ip
 80043d2:	bf88      	it	hi
 80043d4:	2200      	movhi	r2, #0
 80043d6:	4413      	add	r3, r2
 80043d8:	1a18      	subs	r0, r3, r0
 80043da:	b003      	add	sp, #12
 80043dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80043e6:	e7ed      	b.n	80043c4 <__exponent+0x4c>
 80043e8:	2330      	movs	r3, #48	; 0x30
 80043ea:	3130      	adds	r1, #48	; 0x30
 80043ec:	7083      	strb	r3, [r0, #2]
 80043ee:	70c1      	strb	r1, [r0, #3]
 80043f0:	1d03      	adds	r3, r0, #4
 80043f2:	e7f1      	b.n	80043d8 <__exponent+0x60>

080043f4 <_printf_float>:
 80043f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f8:	ed2d 8b02 	vpush	{d8}
 80043fc:	b08d      	sub	sp, #52	; 0x34
 80043fe:	460c      	mov	r4, r1
 8004400:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004404:	4616      	mov	r6, r2
 8004406:	461f      	mov	r7, r3
 8004408:	4605      	mov	r5, r0
 800440a:	f001 fcd5 	bl	8005db8 <_localeconv_r>
 800440e:	f8d0 a000 	ldr.w	sl, [r0]
 8004412:	4650      	mov	r0, sl
 8004414:	f7fb fedc 	bl	80001d0 <strlen>
 8004418:	2300      	movs	r3, #0
 800441a:	930a      	str	r3, [sp, #40]	; 0x28
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	9305      	str	r3, [sp, #20]
 8004420:	f8d8 3000 	ldr.w	r3, [r8]
 8004424:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004428:	3307      	adds	r3, #7
 800442a:	f023 0307 	bic.w	r3, r3, #7
 800442e:	f103 0208 	add.w	r2, r3, #8
 8004432:	f8c8 2000 	str.w	r2, [r8]
 8004436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800443e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004442:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004446:	9307      	str	r3, [sp, #28]
 8004448:	f8cd 8018 	str.w	r8, [sp, #24]
 800444c:	ee08 0a10 	vmov	s16, r0
 8004450:	4b9f      	ldr	r3, [pc, #636]	; (80046d0 <_printf_float+0x2dc>)
 8004452:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004456:	f04f 32ff 	mov.w	r2, #4294967295
 800445a:	f7fc fb67 	bl	8000b2c <__aeabi_dcmpun>
 800445e:	bb88      	cbnz	r0, 80044c4 <_printf_float+0xd0>
 8004460:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004464:	4b9a      	ldr	r3, [pc, #616]	; (80046d0 <_printf_float+0x2dc>)
 8004466:	f04f 32ff 	mov.w	r2, #4294967295
 800446a:	f7fc fb41 	bl	8000af0 <__aeabi_dcmple>
 800446e:	bb48      	cbnz	r0, 80044c4 <_printf_float+0xd0>
 8004470:	2200      	movs	r2, #0
 8004472:	2300      	movs	r3, #0
 8004474:	4640      	mov	r0, r8
 8004476:	4649      	mov	r1, r9
 8004478:	f7fc fb30 	bl	8000adc <__aeabi_dcmplt>
 800447c:	b110      	cbz	r0, 8004484 <_printf_float+0x90>
 800447e:	232d      	movs	r3, #45	; 0x2d
 8004480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004484:	4b93      	ldr	r3, [pc, #588]	; (80046d4 <_printf_float+0x2e0>)
 8004486:	4894      	ldr	r0, [pc, #592]	; (80046d8 <_printf_float+0x2e4>)
 8004488:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800448c:	bf94      	ite	ls
 800448e:	4698      	movls	r8, r3
 8004490:	4680      	movhi	r8, r0
 8004492:	2303      	movs	r3, #3
 8004494:	6123      	str	r3, [r4, #16]
 8004496:	9b05      	ldr	r3, [sp, #20]
 8004498:	f023 0204 	bic.w	r2, r3, #4
 800449c:	6022      	str	r2, [r4, #0]
 800449e:	f04f 0900 	mov.w	r9, #0
 80044a2:	9700      	str	r7, [sp, #0]
 80044a4:	4633      	mov	r3, r6
 80044a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80044a8:	4621      	mov	r1, r4
 80044aa:	4628      	mov	r0, r5
 80044ac:	f000 f9d8 	bl	8004860 <_printf_common>
 80044b0:	3001      	adds	r0, #1
 80044b2:	f040 8090 	bne.w	80045d6 <_printf_float+0x1e2>
 80044b6:	f04f 30ff 	mov.w	r0, #4294967295
 80044ba:	b00d      	add	sp, #52	; 0x34
 80044bc:	ecbd 8b02 	vpop	{d8}
 80044c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044c4:	4642      	mov	r2, r8
 80044c6:	464b      	mov	r3, r9
 80044c8:	4640      	mov	r0, r8
 80044ca:	4649      	mov	r1, r9
 80044cc:	f7fc fb2e 	bl	8000b2c <__aeabi_dcmpun>
 80044d0:	b140      	cbz	r0, 80044e4 <_printf_float+0xf0>
 80044d2:	464b      	mov	r3, r9
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	bfbc      	itt	lt
 80044d8:	232d      	movlt	r3, #45	; 0x2d
 80044da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80044de:	487f      	ldr	r0, [pc, #508]	; (80046dc <_printf_float+0x2e8>)
 80044e0:	4b7f      	ldr	r3, [pc, #508]	; (80046e0 <_printf_float+0x2ec>)
 80044e2:	e7d1      	b.n	8004488 <_printf_float+0x94>
 80044e4:	6863      	ldr	r3, [r4, #4]
 80044e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80044ea:	9206      	str	r2, [sp, #24]
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	d13f      	bne.n	8004570 <_printf_float+0x17c>
 80044f0:	2306      	movs	r3, #6
 80044f2:	6063      	str	r3, [r4, #4]
 80044f4:	9b05      	ldr	r3, [sp, #20]
 80044f6:	6861      	ldr	r1, [r4, #4]
 80044f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80044fc:	2300      	movs	r3, #0
 80044fe:	9303      	str	r3, [sp, #12]
 8004500:	ab0a      	add	r3, sp, #40	; 0x28
 8004502:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004506:	ab09      	add	r3, sp, #36	; 0x24
 8004508:	ec49 8b10 	vmov	d0, r8, r9
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	6022      	str	r2, [r4, #0]
 8004510:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004514:	4628      	mov	r0, r5
 8004516:	f7ff fecd 	bl	80042b4 <__cvt>
 800451a:	9b06      	ldr	r3, [sp, #24]
 800451c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800451e:	2b47      	cmp	r3, #71	; 0x47
 8004520:	4680      	mov	r8, r0
 8004522:	d108      	bne.n	8004536 <_printf_float+0x142>
 8004524:	1cc8      	adds	r0, r1, #3
 8004526:	db02      	blt.n	800452e <_printf_float+0x13a>
 8004528:	6863      	ldr	r3, [r4, #4]
 800452a:	4299      	cmp	r1, r3
 800452c:	dd41      	ble.n	80045b2 <_printf_float+0x1be>
 800452e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004532:	fa5f fb8b 	uxtb.w	fp, fp
 8004536:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800453a:	d820      	bhi.n	800457e <_printf_float+0x18a>
 800453c:	3901      	subs	r1, #1
 800453e:	465a      	mov	r2, fp
 8004540:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004544:	9109      	str	r1, [sp, #36]	; 0x24
 8004546:	f7ff ff17 	bl	8004378 <__exponent>
 800454a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800454c:	1813      	adds	r3, r2, r0
 800454e:	2a01      	cmp	r2, #1
 8004550:	4681      	mov	r9, r0
 8004552:	6123      	str	r3, [r4, #16]
 8004554:	dc02      	bgt.n	800455c <_printf_float+0x168>
 8004556:	6822      	ldr	r2, [r4, #0]
 8004558:	07d2      	lsls	r2, r2, #31
 800455a:	d501      	bpl.n	8004560 <_printf_float+0x16c>
 800455c:	3301      	adds	r3, #1
 800455e:	6123      	str	r3, [r4, #16]
 8004560:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004564:	2b00      	cmp	r3, #0
 8004566:	d09c      	beq.n	80044a2 <_printf_float+0xae>
 8004568:	232d      	movs	r3, #45	; 0x2d
 800456a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800456e:	e798      	b.n	80044a2 <_printf_float+0xae>
 8004570:	9a06      	ldr	r2, [sp, #24]
 8004572:	2a47      	cmp	r2, #71	; 0x47
 8004574:	d1be      	bne.n	80044f4 <_printf_float+0x100>
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1bc      	bne.n	80044f4 <_printf_float+0x100>
 800457a:	2301      	movs	r3, #1
 800457c:	e7b9      	b.n	80044f2 <_printf_float+0xfe>
 800457e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004582:	d118      	bne.n	80045b6 <_printf_float+0x1c2>
 8004584:	2900      	cmp	r1, #0
 8004586:	6863      	ldr	r3, [r4, #4]
 8004588:	dd0b      	ble.n	80045a2 <_printf_float+0x1ae>
 800458a:	6121      	str	r1, [r4, #16]
 800458c:	b913      	cbnz	r3, 8004594 <_printf_float+0x1a0>
 800458e:	6822      	ldr	r2, [r4, #0]
 8004590:	07d0      	lsls	r0, r2, #31
 8004592:	d502      	bpl.n	800459a <_printf_float+0x1a6>
 8004594:	3301      	adds	r3, #1
 8004596:	440b      	add	r3, r1
 8004598:	6123      	str	r3, [r4, #16]
 800459a:	65a1      	str	r1, [r4, #88]	; 0x58
 800459c:	f04f 0900 	mov.w	r9, #0
 80045a0:	e7de      	b.n	8004560 <_printf_float+0x16c>
 80045a2:	b913      	cbnz	r3, 80045aa <_printf_float+0x1b6>
 80045a4:	6822      	ldr	r2, [r4, #0]
 80045a6:	07d2      	lsls	r2, r2, #31
 80045a8:	d501      	bpl.n	80045ae <_printf_float+0x1ba>
 80045aa:	3302      	adds	r3, #2
 80045ac:	e7f4      	b.n	8004598 <_printf_float+0x1a4>
 80045ae:	2301      	movs	r3, #1
 80045b0:	e7f2      	b.n	8004598 <_printf_float+0x1a4>
 80045b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80045b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045b8:	4299      	cmp	r1, r3
 80045ba:	db05      	blt.n	80045c8 <_printf_float+0x1d4>
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	6121      	str	r1, [r4, #16]
 80045c0:	07d8      	lsls	r0, r3, #31
 80045c2:	d5ea      	bpl.n	800459a <_printf_float+0x1a6>
 80045c4:	1c4b      	adds	r3, r1, #1
 80045c6:	e7e7      	b.n	8004598 <_printf_float+0x1a4>
 80045c8:	2900      	cmp	r1, #0
 80045ca:	bfd4      	ite	le
 80045cc:	f1c1 0202 	rsble	r2, r1, #2
 80045d0:	2201      	movgt	r2, #1
 80045d2:	4413      	add	r3, r2
 80045d4:	e7e0      	b.n	8004598 <_printf_float+0x1a4>
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	055a      	lsls	r2, r3, #21
 80045da:	d407      	bmi.n	80045ec <_printf_float+0x1f8>
 80045dc:	6923      	ldr	r3, [r4, #16]
 80045de:	4642      	mov	r2, r8
 80045e0:	4631      	mov	r1, r6
 80045e2:	4628      	mov	r0, r5
 80045e4:	47b8      	blx	r7
 80045e6:	3001      	adds	r0, #1
 80045e8:	d12c      	bne.n	8004644 <_printf_float+0x250>
 80045ea:	e764      	b.n	80044b6 <_printf_float+0xc2>
 80045ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80045f0:	f240 80e0 	bls.w	80047b4 <_printf_float+0x3c0>
 80045f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045f8:	2200      	movs	r2, #0
 80045fa:	2300      	movs	r3, #0
 80045fc:	f7fc fa64 	bl	8000ac8 <__aeabi_dcmpeq>
 8004600:	2800      	cmp	r0, #0
 8004602:	d034      	beq.n	800466e <_printf_float+0x27a>
 8004604:	4a37      	ldr	r2, [pc, #220]	; (80046e4 <_printf_float+0x2f0>)
 8004606:	2301      	movs	r3, #1
 8004608:	4631      	mov	r1, r6
 800460a:	4628      	mov	r0, r5
 800460c:	47b8      	blx	r7
 800460e:	3001      	adds	r0, #1
 8004610:	f43f af51 	beq.w	80044b6 <_printf_float+0xc2>
 8004614:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004618:	429a      	cmp	r2, r3
 800461a:	db02      	blt.n	8004622 <_printf_float+0x22e>
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	07d8      	lsls	r0, r3, #31
 8004620:	d510      	bpl.n	8004644 <_printf_float+0x250>
 8004622:	ee18 3a10 	vmov	r3, s16
 8004626:	4652      	mov	r2, sl
 8004628:	4631      	mov	r1, r6
 800462a:	4628      	mov	r0, r5
 800462c:	47b8      	blx	r7
 800462e:	3001      	adds	r0, #1
 8004630:	f43f af41 	beq.w	80044b6 <_printf_float+0xc2>
 8004634:	f04f 0800 	mov.w	r8, #0
 8004638:	f104 091a 	add.w	r9, r4, #26
 800463c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800463e:	3b01      	subs	r3, #1
 8004640:	4543      	cmp	r3, r8
 8004642:	dc09      	bgt.n	8004658 <_printf_float+0x264>
 8004644:	6823      	ldr	r3, [r4, #0]
 8004646:	079b      	lsls	r3, r3, #30
 8004648:	f100 8105 	bmi.w	8004856 <_printf_float+0x462>
 800464c:	68e0      	ldr	r0, [r4, #12]
 800464e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004650:	4298      	cmp	r0, r3
 8004652:	bfb8      	it	lt
 8004654:	4618      	movlt	r0, r3
 8004656:	e730      	b.n	80044ba <_printf_float+0xc6>
 8004658:	2301      	movs	r3, #1
 800465a:	464a      	mov	r2, r9
 800465c:	4631      	mov	r1, r6
 800465e:	4628      	mov	r0, r5
 8004660:	47b8      	blx	r7
 8004662:	3001      	adds	r0, #1
 8004664:	f43f af27 	beq.w	80044b6 <_printf_float+0xc2>
 8004668:	f108 0801 	add.w	r8, r8, #1
 800466c:	e7e6      	b.n	800463c <_printf_float+0x248>
 800466e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004670:	2b00      	cmp	r3, #0
 8004672:	dc39      	bgt.n	80046e8 <_printf_float+0x2f4>
 8004674:	4a1b      	ldr	r2, [pc, #108]	; (80046e4 <_printf_float+0x2f0>)
 8004676:	2301      	movs	r3, #1
 8004678:	4631      	mov	r1, r6
 800467a:	4628      	mov	r0, r5
 800467c:	47b8      	blx	r7
 800467e:	3001      	adds	r0, #1
 8004680:	f43f af19 	beq.w	80044b6 <_printf_float+0xc2>
 8004684:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004688:	4313      	orrs	r3, r2
 800468a:	d102      	bne.n	8004692 <_printf_float+0x29e>
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	07d9      	lsls	r1, r3, #31
 8004690:	d5d8      	bpl.n	8004644 <_printf_float+0x250>
 8004692:	ee18 3a10 	vmov	r3, s16
 8004696:	4652      	mov	r2, sl
 8004698:	4631      	mov	r1, r6
 800469a:	4628      	mov	r0, r5
 800469c:	47b8      	blx	r7
 800469e:	3001      	adds	r0, #1
 80046a0:	f43f af09 	beq.w	80044b6 <_printf_float+0xc2>
 80046a4:	f04f 0900 	mov.w	r9, #0
 80046a8:	f104 0a1a 	add.w	sl, r4, #26
 80046ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046ae:	425b      	negs	r3, r3
 80046b0:	454b      	cmp	r3, r9
 80046b2:	dc01      	bgt.n	80046b8 <_printf_float+0x2c4>
 80046b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046b6:	e792      	b.n	80045de <_printf_float+0x1ea>
 80046b8:	2301      	movs	r3, #1
 80046ba:	4652      	mov	r2, sl
 80046bc:	4631      	mov	r1, r6
 80046be:	4628      	mov	r0, r5
 80046c0:	47b8      	blx	r7
 80046c2:	3001      	adds	r0, #1
 80046c4:	f43f aef7 	beq.w	80044b6 <_printf_float+0xc2>
 80046c8:	f109 0901 	add.w	r9, r9, #1
 80046cc:	e7ee      	b.n	80046ac <_printf_float+0x2b8>
 80046ce:	bf00      	nop
 80046d0:	7fefffff 	.word	0x7fefffff
 80046d4:	08006e94 	.word	0x08006e94
 80046d8:	08006e98 	.word	0x08006e98
 80046dc:	08006ea0 	.word	0x08006ea0
 80046e0:	08006e9c 	.word	0x08006e9c
 80046e4:	08006ea4 	.word	0x08006ea4
 80046e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046ec:	429a      	cmp	r2, r3
 80046ee:	bfa8      	it	ge
 80046f0:	461a      	movge	r2, r3
 80046f2:	2a00      	cmp	r2, #0
 80046f4:	4691      	mov	r9, r2
 80046f6:	dc37      	bgt.n	8004768 <_printf_float+0x374>
 80046f8:	f04f 0b00 	mov.w	fp, #0
 80046fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004700:	f104 021a 	add.w	r2, r4, #26
 8004704:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004706:	9305      	str	r3, [sp, #20]
 8004708:	eba3 0309 	sub.w	r3, r3, r9
 800470c:	455b      	cmp	r3, fp
 800470e:	dc33      	bgt.n	8004778 <_printf_float+0x384>
 8004710:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004714:	429a      	cmp	r2, r3
 8004716:	db3b      	blt.n	8004790 <_printf_float+0x39c>
 8004718:	6823      	ldr	r3, [r4, #0]
 800471a:	07da      	lsls	r2, r3, #31
 800471c:	d438      	bmi.n	8004790 <_printf_float+0x39c>
 800471e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004720:	9b05      	ldr	r3, [sp, #20]
 8004722:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	eba2 0901 	sub.w	r9, r2, r1
 800472a:	4599      	cmp	r9, r3
 800472c:	bfa8      	it	ge
 800472e:	4699      	movge	r9, r3
 8004730:	f1b9 0f00 	cmp.w	r9, #0
 8004734:	dc35      	bgt.n	80047a2 <_printf_float+0x3ae>
 8004736:	f04f 0800 	mov.w	r8, #0
 800473a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800473e:	f104 0a1a 	add.w	sl, r4, #26
 8004742:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004746:	1a9b      	subs	r3, r3, r2
 8004748:	eba3 0309 	sub.w	r3, r3, r9
 800474c:	4543      	cmp	r3, r8
 800474e:	f77f af79 	ble.w	8004644 <_printf_float+0x250>
 8004752:	2301      	movs	r3, #1
 8004754:	4652      	mov	r2, sl
 8004756:	4631      	mov	r1, r6
 8004758:	4628      	mov	r0, r5
 800475a:	47b8      	blx	r7
 800475c:	3001      	adds	r0, #1
 800475e:	f43f aeaa 	beq.w	80044b6 <_printf_float+0xc2>
 8004762:	f108 0801 	add.w	r8, r8, #1
 8004766:	e7ec      	b.n	8004742 <_printf_float+0x34e>
 8004768:	4613      	mov	r3, r2
 800476a:	4631      	mov	r1, r6
 800476c:	4642      	mov	r2, r8
 800476e:	4628      	mov	r0, r5
 8004770:	47b8      	blx	r7
 8004772:	3001      	adds	r0, #1
 8004774:	d1c0      	bne.n	80046f8 <_printf_float+0x304>
 8004776:	e69e      	b.n	80044b6 <_printf_float+0xc2>
 8004778:	2301      	movs	r3, #1
 800477a:	4631      	mov	r1, r6
 800477c:	4628      	mov	r0, r5
 800477e:	9205      	str	r2, [sp, #20]
 8004780:	47b8      	blx	r7
 8004782:	3001      	adds	r0, #1
 8004784:	f43f ae97 	beq.w	80044b6 <_printf_float+0xc2>
 8004788:	9a05      	ldr	r2, [sp, #20]
 800478a:	f10b 0b01 	add.w	fp, fp, #1
 800478e:	e7b9      	b.n	8004704 <_printf_float+0x310>
 8004790:	ee18 3a10 	vmov	r3, s16
 8004794:	4652      	mov	r2, sl
 8004796:	4631      	mov	r1, r6
 8004798:	4628      	mov	r0, r5
 800479a:	47b8      	blx	r7
 800479c:	3001      	adds	r0, #1
 800479e:	d1be      	bne.n	800471e <_printf_float+0x32a>
 80047a0:	e689      	b.n	80044b6 <_printf_float+0xc2>
 80047a2:	9a05      	ldr	r2, [sp, #20]
 80047a4:	464b      	mov	r3, r9
 80047a6:	4442      	add	r2, r8
 80047a8:	4631      	mov	r1, r6
 80047aa:	4628      	mov	r0, r5
 80047ac:	47b8      	blx	r7
 80047ae:	3001      	adds	r0, #1
 80047b0:	d1c1      	bne.n	8004736 <_printf_float+0x342>
 80047b2:	e680      	b.n	80044b6 <_printf_float+0xc2>
 80047b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047b6:	2a01      	cmp	r2, #1
 80047b8:	dc01      	bgt.n	80047be <_printf_float+0x3ca>
 80047ba:	07db      	lsls	r3, r3, #31
 80047bc:	d538      	bpl.n	8004830 <_printf_float+0x43c>
 80047be:	2301      	movs	r3, #1
 80047c0:	4642      	mov	r2, r8
 80047c2:	4631      	mov	r1, r6
 80047c4:	4628      	mov	r0, r5
 80047c6:	47b8      	blx	r7
 80047c8:	3001      	adds	r0, #1
 80047ca:	f43f ae74 	beq.w	80044b6 <_printf_float+0xc2>
 80047ce:	ee18 3a10 	vmov	r3, s16
 80047d2:	4652      	mov	r2, sl
 80047d4:	4631      	mov	r1, r6
 80047d6:	4628      	mov	r0, r5
 80047d8:	47b8      	blx	r7
 80047da:	3001      	adds	r0, #1
 80047dc:	f43f ae6b 	beq.w	80044b6 <_printf_float+0xc2>
 80047e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047e4:	2200      	movs	r2, #0
 80047e6:	2300      	movs	r3, #0
 80047e8:	f7fc f96e 	bl	8000ac8 <__aeabi_dcmpeq>
 80047ec:	b9d8      	cbnz	r0, 8004826 <_printf_float+0x432>
 80047ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047f0:	f108 0201 	add.w	r2, r8, #1
 80047f4:	3b01      	subs	r3, #1
 80047f6:	4631      	mov	r1, r6
 80047f8:	4628      	mov	r0, r5
 80047fa:	47b8      	blx	r7
 80047fc:	3001      	adds	r0, #1
 80047fe:	d10e      	bne.n	800481e <_printf_float+0x42a>
 8004800:	e659      	b.n	80044b6 <_printf_float+0xc2>
 8004802:	2301      	movs	r3, #1
 8004804:	4652      	mov	r2, sl
 8004806:	4631      	mov	r1, r6
 8004808:	4628      	mov	r0, r5
 800480a:	47b8      	blx	r7
 800480c:	3001      	adds	r0, #1
 800480e:	f43f ae52 	beq.w	80044b6 <_printf_float+0xc2>
 8004812:	f108 0801 	add.w	r8, r8, #1
 8004816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004818:	3b01      	subs	r3, #1
 800481a:	4543      	cmp	r3, r8
 800481c:	dcf1      	bgt.n	8004802 <_printf_float+0x40e>
 800481e:	464b      	mov	r3, r9
 8004820:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004824:	e6dc      	b.n	80045e0 <_printf_float+0x1ec>
 8004826:	f04f 0800 	mov.w	r8, #0
 800482a:	f104 0a1a 	add.w	sl, r4, #26
 800482e:	e7f2      	b.n	8004816 <_printf_float+0x422>
 8004830:	2301      	movs	r3, #1
 8004832:	4642      	mov	r2, r8
 8004834:	e7df      	b.n	80047f6 <_printf_float+0x402>
 8004836:	2301      	movs	r3, #1
 8004838:	464a      	mov	r2, r9
 800483a:	4631      	mov	r1, r6
 800483c:	4628      	mov	r0, r5
 800483e:	47b8      	blx	r7
 8004840:	3001      	adds	r0, #1
 8004842:	f43f ae38 	beq.w	80044b6 <_printf_float+0xc2>
 8004846:	f108 0801 	add.w	r8, r8, #1
 800484a:	68e3      	ldr	r3, [r4, #12]
 800484c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800484e:	1a5b      	subs	r3, r3, r1
 8004850:	4543      	cmp	r3, r8
 8004852:	dcf0      	bgt.n	8004836 <_printf_float+0x442>
 8004854:	e6fa      	b.n	800464c <_printf_float+0x258>
 8004856:	f04f 0800 	mov.w	r8, #0
 800485a:	f104 0919 	add.w	r9, r4, #25
 800485e:	e7f4      	b.n	800484a <_printf_float+0x456>

08004860 <_printf_common>:
 8004860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004864:	4616      	mov	r6, r2
 8004866:	4699      	mov	r9, r3
 8004868:	688a      	ldr	r2, [r1, #8]
 800486a:	690b      	ldr	r3, [r1, #16]
 800486c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004870:	4293      	cmp	r3, r2
 8004872:	bfb8      	it	lt
 8004874:	4613      	movlt	r3, r2
 8004876:	6033      	str	r3, [r6, #0]
 8004878:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800487c:	4607      	mov	r7, r0
 800487e:	460c      	mov	r4, r1
 8004880:	b10a      	cbz	r2, 8004886 <_printf_common+0x26>
 8004882:	3301      	adds	r3, #1
 8004884:	6033      	str	r3, [r6, #0]
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	0699      	lsls	r1, r3, #26
 800488a:	bf42      	ittt	mi
 800488c:	6833      	ldrmi	r3, [r6, #0]
 800488e:	3302      	addmi	r3, #2
 8004890:	6033      	strmi	r3, [r6, #0]
 8004892:	6825      	ldr	r5, [r4, #0]
 8004894:	f015 0506 	ands.w	r5, r5, #6
 8004898:	d106      	bne.n	80048a8 <_printf_common+0x48>
 800489a:	f104 0a19 	add.w	sl, r4, #25
 800489e:	68e3      	ldr	r3, [r4, #12]
 80048a0:	6832      	ldr	r2, [r6, #0]
 80048a2:	1a9b      	subs	r3, r3, r2
 80048a4:	42ab      	cmp	r3, r5
 80048a6:	dc26      	bgt.n	80048f6 <_printf_common+0x96>
 80048a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048ac:	1e13      	subs	r3, r2, #0
 80048ae:	6822      	ldr	r2, [r4, #0]
 80048b0:	bf18      	it	ne
 80048b2:	2301      	movne	r3, #1
 80048b4:	0692      	lsls	r2, r2, #26
 80048b6:	d42b      	bmi.n	8004910 <_printf_common+0xb0>
 80048b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048bc:	4649      	mov	r1, r9
 80048be:	4638      	mov	r0, r7
 80048c0:	47c0      	blx	r8
 80048c2:	3001      	adds	r0, #1
 80048c4:	d01e      	beq.n	8004904 <_printf_common+0xa4>
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	68e5      	ldr	r5, [r4, #12]
 80048ca:	6832      	ldr	r2, [r6, #0]
 80048cc:	f003 0306 	and.w	r3, r3, #6
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	bf08      	it	eq
 80048d4:	1aad      	subeq	r5, r5, r2
 80048d6:	68a3      	ldr	r3, [r4, #8]
 80048d8:	6922      	ldr	r2, [r4, #16]
 80048da:	bf0c      	ite	eq
 80048dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048e0:	2500      	movne	r5, #0
 80048e2:	4293      	cmp	r3, r2
 80048e4:	bfc4      	itt	gt
 80048e6:	1a9b      	subgt	r3, r3, r2
 80048e8:	18ed      	addgt	r5, r5, r3
 80048ea:	2600      	movs	r6, #0
 80048ec:	341a      	adds	r4, #26
 80048ee:	42b5      	cmp	r5, r6
 80048f0:	d11a      	bne.n	8004928 <_printf_common+0xc8>
 80048f2:	2000      	movs	r0, #0
 80048f4:	e008      	b.n	8004908 <_printf_common+0xa8>
 80048f6:	2301      	movs	r3, #1
 80048f8:	4652      	mov	r2, sl
 80048fa:	4649      	mov	r1, r9
 80048fc:	4638      	mov	r0, r7
 80048fe:	47c0      	blx	r8
 8004900:	3001      	adds	r0, #1
 8004902:	d103      	bne.n	800490c <_printf_common+0xac>
 8004904:	f04f 30ff 	mov.w	r0, #4294967295
 8004908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800490c:	3501      	adds	r5, #1
 800490e:	e7c6      	b.n	800489e <_printf_common+0x3e>
 8004910:	18e1      	adds	r1, r4, r3
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	2030      	movs	r0, #48	; 0x30
 8004916:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800491a:	4422      	add	r2, r4
 800491c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004920:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004924:	3302      	adds	r3, #2
 8004926:	e7c7      	b.n	80048b8 <_printf_common+0x58>
 8004928:	2301      	movs	r3, #1
 800492a:	4622      	mov	r2, r4
 800492c:	4649      	mov	r1, r9
 800492e:	4638      	mov	r0, r7
 8004930:	47c0      	blx	r8
 8004932:	3001      	adds	r0, #1
 8004934:	d0e6      	beq.n	8004904 <_printf_common+0xa4>
 8004936:	3601      	adds	r6, #1
 8004938:	e7d9      	b.n	80048ee <_printf_common+0x8e>
	...

0800493c <_printf_i>:
 800493c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004940:	460c      	mov	r4, r1
 8004942:	4691      	mov	r9, r2
 8004944:	7e27      	ldrb	r7, [r4, #24]
 8004946:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004948:	2f78      	cmp	r7, #120	; 0x78
 800494a:	4680      	mov	r8, r0
 800494c:	469a      	mov	sl, r3
 800494e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004952:	d807      	bhi.n	8004964 <_printf_i+0x28>
 8004954:	2f62      	cmp	r7, #98	; 0x62
 8004956:	d80a      	bhi.n	800496e <_printf_i+0x32>
 8004958:	2f00      	cmp	r7, #0
 800495a:	f000 80d8 	beq.w	8004b0e <_printf_i+0x1d2>
 800495e:	2f58      	cmp	r7, #88	; 0x58
 8004960:	f000 80a3 	beq.w	8004aaa <_printf_i+0x16e>
 8004964:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004968:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800496c:	e03a      	b.n	80049e4 <_printf_i+0xa8>
 800496e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004972:	2b15      	cmp	r3, #21
 8004974:	d8f6      	bhi.n	8004964 <_printf_i+0x28>
 8004976:	a001      	add	r0, pc, #4	; (adr r0, 800497c <_printf_i+0x40>)
 8004978:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800497c:	080049d5 	.word	0x080049d5
 8004980:	080049e9 	.word	0x080049e9
 8004984:	08004965 	.word	0x08004965
 8004988:	08004965 	.word	0x08004965
 800498c:	08004965 	.word	0x08004965
 8004990:	08004965 	.word	0x08004965
 8004994:	080049e9 	.word	0x080049e9
 8004998:	08004965 	.word	0x08004965
 800499c:	08004965 	.word	0x08004965
 80049a0:	08004965 	.word	0x08004965
 80049a4:	08004965 	.word	0x08004965
 80049a8:	08004af5 	.word	0x08004af5
 80049ac:	08004a19 	.word	0x08004a19
 80049b0:	08004ad7 	.word	0x08004ad7
 80049b4:	08004965 	.word	0x08004965
 80049b8:	08004965 	.word	0x08004965
 80049bc:	08004b17 	.word	0x08004b17
 80049c0:	08004965 	.word	0x08004965
 80049c4:	08004a19 	.word	0x08004a19
 80049c8:	08004965 	.word	0x08004965
 80049cc:	08004965 	.word	0x08004965
 80049d0:	08004adf 	.word	0x08004adf
 80049d4:	680b      	ldr	r3, [r1, #0]
 80049d6:	1d1a      	adds	r2, r3, #4
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	600a      	str	r2, [r1, #0]
 80049dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80049e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049e4:	2301      	movs	r3, #1
 80049e6:	e0a3      	b.n	8004b30 <_printf_i+0x1f4>
 80049e8:	6825      	ldr	r5, [r4, #0]
 80049ea:	6808      	ldr	r0, [r1, #0]
 80049ec:	062e      	lsls	r6, r5, #24
 80049ee:	f100 0304 	add.w	r3, r0, #4
 80049f2:	d50a      	bpl.n	8004a0a <_printf_i+0xce>
 80049f4:	6805      	ldr	r5, [r0, #0]
 80049f6:	600b      	str	r3, [r1, #0]
 80049f8:	2d00      	cmp	r5, #0
 80049fa:	da03      	bge.n	8004a04 <_printf_i+0xc8>
 80049fc:	232d      	movs	r3, #45	; 0x2d
 80049fe:	426d      	negs	r5, r5
 8004a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a04:	485e      	ldr	r0, [pc, #376]	; (8004b80 <_printf_i+0x244>)
 8004a06:	230a      	movs	r3, #10
 8004a08:	e019      	b.n	8004a3e <_printf_i+0x102>
 8004a0a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004a0e:	6805      	ldr	r5, [r0, #0]
 8004a10:	600b      	str	r3, [r1, #0]
 8004a12:	bf18      	it	ne
 8004a14:	b22d      	sxthne	r5, r5
 8004a16:	e7ef      	b.n	80049f8 <_printf_i+0xbc>
 8004a18:	680b      	ldr	r3, [r1, #0]
 8004a1a:	6825      	ldr	r5, [r4, #0]
 8004a1c:	1d18      	adds	r0, r3, #4
 8004a1e:	6008      	str	r0, [r1, #0]
 8004a20:	0628      	lsls	r0, r5, #24
 8004a22:	d501      	bpl.n	8004a28 <_printf_i+0xec>
 8004a24:	681d      	ldr	r5, [r3, #0]
 8004a26:	e002      	b.n	8004a2e <_printf_i+0xf2>
 8004a28:	0669      	lsls	r1, r5, #25
 8004a2a:	d5fb      	bpl.n	8004a24 <_printf_i+0xe8>
 8004a2c:	881d      	ldrh	r5, [r3, #0]
 8004a2e:	4854      	ldr	r0, [pc, #336]	; (8004b80 <_printf_i+0x244>)
 8004a30:	2f6f      	cmp	r7, #111	; 0x6f
 8004a32:	bf0c      	ite	eq
 8004a34:	2308      	moveq	r3, #8
 8004a36:	230a      	movne	r3, #10
 8004a38:	2100      	movs	r1, #0
 8004a3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a3e:	6866      	ldr	r6, [r4, #4]
 8004a40:	60a6      	str	r6, [r4, #8]
 8004a42:	2e00      	cmp	r6, #0
 8004a44:	bfa2      	ittt	ge
 8004a46:	6821      	ldrge	r1, [r4, #0]
 8004a48:	f021 0104 	bicge.w	r1, r1, #4
 8004a4c:	6021      	strge	r1, [r4, #0]
 8004a4e:	b90d      	cbnz	r5, 8004a54 <_printf_i+0x118>
 8004a50:	2e00      	cmp	r6, #0
 8004a52:	d04d      	beq.n	8004af0 <_printf_i+0x1b4>
 8004a54:	4616      	mov	r6, r2
 8004a56:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a5a:	fb03 5711 	mls	r7, r3, r1, r5
 8004a5e:	5dc7      	ldrb	r7, [r0, r7]
 8004a60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a64:	462f      	mov	r7, r5
 8004a66:	42bb      	cmp	r3, r7
 8004a68:	460d      	mov	r5, r1
 8004a6a:	d9f4      	bls.n	8004a56 <_printf_i+0x11a>
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d10b      	bne.n	8004a88 <_printf_i+0x14c>
 8004a70:	6823      	ldr	r3, [r4, #0]
 8004a72:	07df      	lsls	r7, r3, #31
 8004a74:	d508      	bpl.n	8004a88 <_printf_i+0x14c>
 8004a76:	6923      	ldr	r3, [r4, #16]
 8004a78:	6861      	ldr	r1, [r4, #4]
 8004a7a:	4299      	cmp	r1, r3
 8004a7c:	bfde      	ittt	le
 8004a7e:	2330      	movle	r3, #48	; 0x30
 8004a80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a88:	1b92      	subs	r2, r2, r6
 8004a8a:	6122      	str	r2, [r4, #16]
 8004a8c:	f8cd a000 	str.w	sl, [sp]
 8004a90:	464b      	mov	r3, r9
 8004a92:	aa03      	add	r2, sp, #12
 8004a94:	4621      	mov	r1, r4
 8004a96:	4640      	mov	r0, r8
 8004a98:	f7ff fee2 	bl	8004860 <_printf_common>
 8004a9c:	3001      	adds	r0, #1
 8004a9e:	d14c      	bne.n	8004b3a <_printf_i+0x1fe>
 8004aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa4:	b004      	add	sp, #16
 8004aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aaa:	4835      	ldr	r0, [pc, #212]	; (8004b80 <_printf_i+0x244>)
 8004aac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ab0:	6823      	ldr	r3, [r4, #0]
 8004ab2:	680e      	ldr	r6, [r1, #0]
 8004ab4:	061f      	lsls	r7, r3, #24
 8004ab6:	f856 5b04 	ldr.w	r5, [r6], #4
 8004aba:	600e      	str	r6, [r1, #0]
 8004abc:	d514      	bpl.n	8004ae8 <_printf_i+0x1ac>
 8004abe:	07d9      	lsls	r1, r3, #31
 8004ac0:	bf44      	itt	mi
 8004ac2:	f043 0320 	orrmi.w	r3, r3, #32
 8004ac6:	6023      	strmi	r3, [r4, #0]
 8004ac8:	b91d      	cbnz	r5, 8004ad2 <_printf_i+0x196>
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	f023 0320 	bic.w	r3, r3, #32
 8004ad0:	6023      	str	r3, [r4, #0]
 8004ad2:	2310      	movs	r3, #16
 8004ad4:	e7b0      	b.n	8004a38 <_printf_i+0xfc>
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	f043 0320 	orr.w	r3, r3, #32
 8004adc:	6023      	str	r3, [r4, #0]
 8004ade:	2378      	movs	r3, #120	; 0x78
 8004ae0:	4828      	ldr	r0, [pc, #160]	; (8004b84 <_printf_i+0x248>)
 8004ae2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ae6:	e7e3      	b.n	8004ab0 <_printf_i+0x174>
 8004ae8:	065e      	lsls	r6, r3, #25
 8004aea:	bf48      	it	mi
 8004aec:	b2ad      	uxthmi	r5, r5
 8004aee:	e7e6      	b.n	8004abe <_printf_i+0x182>
 8004af0:	4616      	mov	r6, r2
 8004af2:	e7bb      	b.n	8004a6c <_printf_i+0x130>
 8004af4:	680b      	ldr	r3, [r1, #0]
 8004af6:	6826      	ldr	r6, [r4, #0]
 8004af8:	6960      	ldr	r0, [r4, #20]
 8004afa:	1d1d      	adds	r5, r3, #4
 8004afc:	600d      	str	r5, [r1, #0]
 8004afe:	0635      	lsls	r5, r6, #24
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	d501      	bpl.n	8004b08 <_printf_i+0x1cc>
 8004b04:	6018      	str	r0, [r3, #0]
 8004b06:	e002      	b.n	8004b0e <_printf_i+0x1d2>
 8004b08:	0671      	lsls	r1, r6, #25
 8004b0a:	d5fb      	bpl.n	8004b04 <_printf_i+0x1c8>
 8004b0c:	8018      	strh	r0, [r3, #0]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	6123      	str	r3, [r4, #16]
 8004b12:	4616      	mov	r6, r2
 8004b14:	e7ba      	b.n	8004a8c <_printf_i+0x150>
 8004b16:	680b      	ldr	r3, [r1, #0]
 8004b18:	1d1a      	adds	r2, r3, #4
 8004b1a:	600a      	str	r2, [r1, #0]
 8004b1c:	681e      	ldr	r6, [r3, #0]
 8004b1e:	6862      	ldr	r2, [r4, #4]
 8004b20:	2100      	movs	r1, #0
 8004b22:	4630      	mov	r0, r6
 8004b24:	f7fb fb5c 	bl	80001e0 <memchr>
 8004b28:	b108      	cbz	r0, 8004b2e <_printf_i+0x1f2>
 8004b2a:	1b80      	subs	r0, r0, r6
 8004b2c:	6060      	str	r0, [r4, #4]
 8004b2e:	6863      	ldr	r3, [r4, #4]
 8004b30:	6123      	str	r3, [r4, #16]
 8004b32:	2300      	movs	r3, #0
 8004b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b38:	e7a8      	b.n	8004a8c <_printf_i+0x150>
 8004b3a:	6923      	ldr	r3, [r4, #16]
 8004b3c:	4632      	mov	r2, r6
 8004b3e:	4649      	mov	r1, r9
 8004b40:	4640      	mov	r0, r8
 8004b42:	47d0      	blx	sl
 8004b44:	3001      	adds	r0, #1
 8004b46:	d0ab      	beq.n	8004aa0 <_printf_i+0x164>
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	079b      	lsls	r3, r3, #30
 8004b4c:	d413      	bmi.n	8004b76 <_printf_i+0x23a>
 8004b4e:	68e0      	ldr	r0, [r4, #12]
 8004b50:	9b03      	ldr	r3, [sp, #12]
 8004b52:	4298      	cmp	r0, r3
 8004b54:	bfb8      	it	lt
 8004b56:	4618      	movlt	r0, r3
 8004b58:	e7a4      	b.n	8004aa4 <_printf_i+0x168>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	4632      	mov	r2, r6
 8004b5e:	4649      	mov	r1, r9
 8004b60:	4640      	mov	r0, r8
 8004b62:	47d0      	blx	sl
 8004b64:	3001      	adds	r0, #1
 8004b66:	d09b      	beq.n	8004aa0 <_printf_i+0x164>
 8004b68:	3501      	adds	r5, #1
 8004b6a:	68e3      	ldr	r3, [r4, #12]
 8004b6c:	9903      	ldr	r1, [sp, #12]
 8004b6e:	1a5b      	subs	r3, r3, r1
 8004b70:	42ab      	cmp	r3, r5
 8004b72:	dcf2      	bgt.n	8004b5a <_printf_i+0x21e>
 8004b74:	e7eb      	b.n	8004b4e <_printf_i+0x212>
 8004b76:	2500      	movs	r5, #0
 8004b78:	f104 0619 	add.w	r6, r4, #25
 8004b7c:	e7f5      	b.n	8004b6a <_printf_i+0x22e>
 8004b7e:	bf00      	nop
 8004b80:	08006ea6 	.word	0x08006ea6
 8004b84:	08006eb7 	.word	0x08006eb7

08004b88 <iprintf>:
 8004b88:	b40f      	push	{r0, r1, r2, r3}
 8004b8a:	4b0a      	ldr	r3, [pc, #40]	; (8004bb4 <iprintf+0x2c>)
 8004b8c:	b513      	push	{r0, r1, r4, lr}
 8004b8e:	681c      	ldr	r4, [r3, #0]
 8004b90:	b124      	cbz	r4, 8004b9c <iprintf+0x14>
 8004b92:	69a3      	ldr	r3, [r4, #24]
 8004b94:	b913      	cbnz	r3, 8004b9c <iprintf+0x14>
 8004b96:	4620      	mov	r0, r4
 8004b98:	f001 f870 	bl	8005c7c <__sinit>
 8004b9c:	ab05      	add	r3, sp, #20
 8004b9e:	9a04      	ldr	r2, [sp, #16]
 8004ba0:	68a1      	ldr	r1, [r4, #8]
 8004ba2:	9301      	str	r3, [sp, #4]
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	f001 fdeb 	bl	8006780 <_vfiprintf_r>
 8004baa:	b002      	add	sp, #8
 8004bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bb0:	b004      	add	sp, #16
 8004bb2:	4770      	bx	lr
 8004bb4:	20000004 	.word	0x20000004

08004bb8 <setbuf>:
 8004bb8:	2900      	cmp	r1, #0
 8004bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bbe:	bf0c      	ite	eq
 8004bc0:	2202      	moveq	r2, #2
 8004bc2:	2200      	movne	r2, #0
 8004bc4:	f000 b800 	b.w	8004bc8 <setvbuf>

08004bc8 <setvbuf>:
 8004bc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004bcc:	461d      	mov	r5, r3
 8004bce:	4b5d      	ldr	r3, [pc, #372]	; (8004d44 <setvbuf+0x17c>)
 8004bd0:	681f      	ldr	r7, [r3, #0]
 8004bd2:	4604      	mov	r4, r0
 8004bd4:	460e      	mov	r6, r1
 8004bd6:	4690      	mov	r8, r2
 8004bd8:	b127      	cbz	r7, 8004be4 <setvbuf+0x1c>
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	b913      	cbnz	r3, 8004be4 <setvbuf+0x1c>
 8004bde:	4638      	mov	r0, r7
 8004be0:	f001 f84c 	bl	8005c7c <__sinit>
 8004be4:	4b58      	ldr	r3, [pc, #352]	; (8004d48 <setvbuf+0x180>)
 8004be6:	429c      	cmp	r4, r3
 8004be8:	d167      	bne.n	8004cba <setvbuf+0xf2>
 8004bea:	687c      	ldr	r4, [r7, #4]
 8004bec:	f1b8 0f02 	cmp.w	r8, #2
 8004bf0:	d006      	beq.n	8004c00 <setvbuf+0x38>
 8004bf2:	f1b8 0f01 	cmp.w	r8, #1
 8004bf6:	f200 809f 	bhi.w	8004d38 <setvbuf+0x170>
 8004bfa:	2d00      	cmp	r5, #0
 8004bfc:	f2c0 809c 	blt.w	8004d38 <setvbuf+0x170>
 8004c00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c02:	07db      	lsls	r3, r3, #31
 8004c04:	d405      	bmi.n	8004c12 <setvbuf+0x4a>
 8004c06:	89a3      	ldrh	r3, [r4, #12]
 8004c08:	0598      	lsls	r0, r3, #22
 8004c0a:	d402      	bmi.n	8004c12 <setvbuf+0x4a>
 8004c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c0e:	f001 f8d8 	bl	8005dc2 <__retarget_lock_acquire_recursive>
 8004c12:	4621      	mov	r1, r4
 8004c14:	4638      	mov	r0, r7
 8004c16:	f000 ff9d 	bl	8005b54 <_fflush_r>
 8004c1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c1c:	b141      	cbz	r1, 8004c30 <setvbuf+0x68>
 8004c1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c22:	4299      	cmp	r1, r3
 8004c24:	d002      	beq.n	8004c2c <setvbuf+0x64>
 8004c26:	4638      	mov	r0, r7
 8004c28:	f001 fcd6 	bl	80065d8 <_free_r>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	6363      	str	r3, [r4, #52]	; 0x34
 8004c30:	2300      	movs	r3, #0
 8004c32:	61a3      	str	r3, [r4, #24]
 8004c34:	6063      	str	r3, [r4, #4]
 8004c36:	89a3      	ldrh	r3, [r4, #12]
 8004c38:	0619      	lsls	r1, r3, #24
 8004c3a:	d503      	bpl.n	8004c44 <setvbuf+0x7c>
 8004c3c:	6921      	ldr	r1, [r4, #16]
 8004c3e:	4638      	mov	r0, r7
 8004c40:	f001 fcca 	bl	80065d8 <_free_r>
 8004c44:	89a3      	ldrh	r3, [r4, #12]
 8004c46:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004c4a:	f023 0303 	bic.w	r3, r3, #3
 8004c4e:	f1b8 0f02 	cmp.w	r8, #2
 8004c52:	81a3      	strh	r3, [r4, #12]
 8004c54:	d06c      	beq.n	8004d30 <setvbuf+0x168>
 8004c56:	ab01      	add	r3, sp, #4
 8004c58:	466a      	mov	r2, sp
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	4638      	mov	r0, r7
 8004c5e:	f001 f8b2 	bl	8005dc6 <__swhatbuf_r>
 8004c62:	89a3      	ldrh	r3, [r4, #12]
 8004c64:	4318      	orrs	r0, r3
 8004c66:	81a0      	strh	r0, [r4, #12]
 8004c68:	2d00      	cmp	r5, #0
 8004c6a:	d130      	bne.n	8004cce <setvbuf+0x106>
 8004c6c:	9d00      	ldr	r5, [sp, #0]
 8004c6e:	4628      	mov	r0, r5
 8004c70:	f001 f90e 	bl	8005e90 <malloc>
 8004c74:	4606      	mov	r6, r0
 8004c76:	2800      	cmp	r0, #0
 8004c78:	d155      	bne.n	8004d26 <setvbuf+0x15e>
 8004c7a:	f8dd 9000 	ldr.w	r9, [sp]
 8004c7e:	45a9      	cmp	r9, r5
 8004c80:	d14a      	bne.n	8004d18 <setvbuf+0x150>
 8004c82:	f04f 35ff 	mov.w	r5, #4294967295
 8004c86:	2200      	movs	r2, #0
 8004c88:	60a2      	str	r2, [r4, #8]
 8004c8a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004c8e:	6022      	str	r2, [r4, #0]
 8004c90:	6122      	str	r2, [r4, #16]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c98:	6162      	str	r2, [r4, #20]
 8004c9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c9c:	f043 0302 	orr.w	r3, r3, #2
 8004ca0:	07d2      	lsls	r2, r2, #31
 8004ca2:	81a3      	strh	r3, [r4, #12]
 8004ca4:	d405      	bmi.n	8004cb2 <setvbuf+0xea>
 8004ca6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004caa:	d102      	bne.n	8004cb2 <setvbuf+0xea>
 8004cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cae:	f001 f889 	bl	8005dc4 <__retarget_lock_release_recursive>
 8004cb2:	4628      	mov	r0, r5
 8004cb4:	b003      	add	sp, #12
 8004cb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004cba:	4b24      	ldr	r3, [pc, #144]	; (8004d4c <setvbuf+0x184>)
 8004cbc:	429c      	cmp	r4, r3
 8004cbe:	d101      	bne.n	8004cc4 <setvbuf+0xfc>
 8004cc0:	68bc      	ldr	r4, [r7, #8]
 8004cc2:	e793      	b.n	8004bec <setvbuf+0x24>
 8004cc4:	4b22      	ldr	r3, [pc, #136]	; (8004d50 <setvbuf+0x188>)
 8004cc6:	429c      	cmp	r4, r3
 8004cc8:	bf08      	it	eq
 8004cca:	68fc      	ldreq	r4, [r7, #12]
 8004ccc:	e78e      	b.n	8004bec <setvbuf+0x24>
 8004cce:	2e00      	cmp	r6, #0
 8004cd0:	d0cd      	beq.n	8004c6e <setvbuf+0xa6>
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	b913      	cbnz	r3, 8004cdc <setvbuf+0x114>
 8004cd6:	4638      	mov	r0, r7
 8004cd8:	f000 ffd0 	bl	8005c7c <__sinit>
 8004cdc:	f1b8 0f01 	cmp.w	r8, #1
 8004ce0:	bf08      	it	eq
 8004ce2:	89a3      	ldrheq	r3, [r4, #12]
 8004ce4:	6026      	str	r6, [r4, #0]
 8004ce6:	bf04      	itt	eq
 8004ce8:	f043 0301 	orreq.w	r3, r3, #1
 8004cec:	81a3      	strheq	r3, [r4, #12]
 8004cee:	89a2      	ldrh	r2, [r4, #12]
 8004cf0:	f012 0308 	ands.w	r3, r2, #8
 8004cf4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004cf8:	d01c      	beq.n	8004d34 <setvbuf+0x16c>
 8004cfa:	07d3      	lsls	r3, r2, #31
 8004cfc:	bf41      	itttt	mi
 8004cfe:	2300      	movmi	r3, #0
 8004d00:	426d      	negmi	r5, r5
 8004d02:	60a3      	strmi	r3, [r4, #8]
 8004d04:	61a5      	strmi	r5, [r4, #24]
 8004d06:	bf58      	it	pl
 8004d08:	60a5      	strpl	r5, [r4, #8]
 8004d0a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004d0c:	f015 0501 	ands.w	r5, r5, #1
 8004d10:	d115      	bne.n	8004d3e <setvbuf+0x176>
 8004d12:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004d16:	e7c8      	b.n	8004caa <setvbuf+0xe2>
 8004d18:	4648      	mov	r0, r9
 8004d1a:	f001 f8b9 	bl	8005e90 <malloc>
 8004d1e:	4606      	mov	r6, r0
 8004d20:	2800      	cmp	r0, #0
 8004d22:	d0ae      	beq.n	8004c82 <setvbuf+0xba>
 8004d24:	464d      	mov	r5, r9
 8004d26:	89a3      	ldrh	r3, [r4, #12]
 8004d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d2c:	81a3      	strh	r3, [r4, #12]
 8004d2e:	e7d0      	b.n	8004cd2 <setvbuf+0x10a>
 8004d30:	2500      	movs	r5, #0
 8004d32:	e7a8      	b.n	8004c86 <setvbuf+0xbe>
 8004d34:	60a3      	str	r3, [r4, #8]
 8004d36:	e7e8      	b.n	8004d0a <setvbuf+0x142>
 8004d38:	f04f 35ff 	mov.w	r5, #4294967295
 8004d3c:	e7b9      	b.n	8004cb2 <setvbuf+0xea>
 8004d3e:	2500      	movs	r5, #0
 8004d40:	e7b7      	b.n	8004cb2 <setvbuf+0xea>
 8004d42:	bf00      	nop
 8004d44:	20000004 	.word	0x20000004
 8004d48:	08006f7c 	.word	0x08006f7c
 8004d4c:	08006f9c 	.word	0x08006f9c
 8004d50:	08006f5c 	.word	0x08006f5c

08004d54 <quorem>:
 8004d54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d58:	6903      	ldr	r3, [r0, #16]
 8004d5a:	690c      	ldr	r4, [r1, #16]
 8004d5c:	42a3      	cmp	r3, r4
 8004d5e:	4607      	mov	r7, r0
 8004d60:	f2c0 8081 	blt.w	8004e66 <quorem+0x112>
 8004d64:	3c01      	subs	r4, #1
 8004d66:	f101 0814 	add.w	r8, r1, #20
 8004d6a:	f100 0514 	add.w	r5, r0, #20
 8004d6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d72:	9301      	str	r3, [sp, #4]
 8004d74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004d84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d88:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d8c:	d331      	bcc.n	8004df2 <quorem+0x9e>
 8004d8e:	f04f 0e00 	mov.w	lr, #0
 8004d92:	4640      	mov	r0, r8
 8004d94:	46ac      	mov	ip, r5
 8004d96:	46f2      	mov	sl, lr
 8004d98:	f850 2b04 	ldr.w	r2, [r0], #4
 8004d9c:	b293      	uxth	r3, r2
 8004d9e:	fb06 e303 	mla	r3, r6, r3, lr
 8004da2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	ebaa 0303 	sub.w	r3, sl, r3
 8004dac:	0c12      	lsrs	r2, r2, #16
 8004dae:	f8dc a000 	ldr.w	sl, [ip]
 8004db2:	fb06 e202 	mla	r2, r6, r2, lr
 8004db6:	fa13 f38a 	uxtah	r3, r3, sl
 8004dba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004dbe:	fa1f fa82 	uxth.w	sl, r2
 8004dc2:	f8dc 2000 	ldr.w	r2, [ip]
 8004dc6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004dca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dd4:	4581      	cmp	r9, r0
 8004dd6:	f84c 3b04 	str.w	r3, [ip], #4
 8004dda:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004dde:	d2db      	bcs.n	8004d98 <quorem+0x44>
 8004de0:	f855 300b 	ldr.w	r3, [r5, fp]
 8004de4:	b92b      	cbnz	r3, 8004df2 <quorem+0x9e>
 8004de6:	9b01      	ldr	r3, [sp, #4]
 8004de8:	3b04      	subs	r3, #4
 8004dea:	429d      	cmp	r5, r3
 8004dec:	461a      	mov	r2, r3
 8004dee:	d32e      	bcc.n	8004e4e <quorem+0xfa>
 8004df0:	613c      	str	r4, [r7, #16]
 8004df2:	4638      	mov	r0, r7
 8004df4:	f001 fae0 	bl	80063b8 <__mcmp>
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	db24      	blt.n	8004e46 <quorem+0xf2>
 8004dfc:	3601      	adds	r6, #1
 8004dfe:	4628      	mov	r0, r5
 8004e00:	f04f 0c00 	mov.w	ip, #0
 8004e04:	f858 2b04 	ldr.w	r2, [r8], #4
 8004e08:	f8d0 e000 	ldr.w	lr, [r0]
 8004e0c:	b293      	uxth	r3, r2
 8004e0e:	ebac 0303 	sub.w	r3, ip, r3
 8004e12:	0c12      	lsrs	r2, r2, #16
 8004e14:	fa13 f38e 	uxtah	r3, r3, lr
 8004e18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004e1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e26:	45c1      	cmp	r9, r8
 8004e28:	f840 3b04 	str.w	r3, [r0], #4
 8004e2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004e30:	d2e8      	bcs.n	8004e04 <quorem+0xb0>
 8004e32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e3a:	b922      	cbnz	r2, 8004e46 <quorem+0xf2>
 8004e3c:	3b04      	subs	r3, #4
 8004e3e:	429d      	cmp	r5, r3
 8004e40:	461a      	mov	r2, r3
 8004e42:	d30a      	bcc.n	8004e5a <quorem+0x106>
 8004e44:	613c      	str	r4, [r7, #16]
 8004e46:	4630      	mov	r0, r6
 8004e48:	b003      	add	sp, #12
 8004e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e4e:	6812      	ldr	r2, [r2, #0]
 8004e50:	3b04      	subs	r3, #4
 8004e52:	2a00      	cmp	r2, #0
 8004e54:	d1cc      	bne.n	8004df0 <quorem+0x9c>
 8004e56:	3c01      	subs	r4, #1
 8004e58:	e7c7      	b.n	8004dea <quorem+0x96>
 8004e5a:	6812      	ldr	r2, [r2, #0]
 8004e5c:	3b04      	subs	r3, #4
 8004e5e:	2a00      	cmp	r2, #0
 8004e60:	d1f0      	bne.n	8004e44 <quorem+0xf0>
 8004e62:	3c01      	subs	r4, #1
 8004e64:	e7eb      	b.n	8004e3e <quorem+0xea>
 8004e66:	2000      	movs	r0, #0
 8004e68:	e7ee      	b.n	8004e48 <quorem+0xf4>
 8004e6a:	0000      	movs	r0, r0
 8004e6c:	0000      	movs	r0, r0
	...

08004e70 <_dtoa_r>:
 8004e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e74:	ed2d 8b02 	vpush	{d8}
 8004e78:	ec57 6b10 	vmov	r6, r7, d0
 8004e7c:	b095      	sub	sp, #84	; 0x54
 8004e7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004e80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004e84:	9105      	str	r1, [sp, #20]
 8004e86:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	9209      	str	r2, [sp, #36]	; 0x24
 8004e8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e90:	b975      	cbnz	r5, 8004eb0 <_dtoa_r+0x40>
 8004e92:	2010      	movs	r0, #16
 8004e94:	f000 fffc 	bl	8005e90 <malloc>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	6260      	str	r0, [r4, #36]	; 0x24
 8004e9c:	b920      	cbnz	r0, 8004ea8 <_dtoa_r+0x38>
 8004e9e:	4bb2      	ldr	r3, [pc, #712]	; (8005168 <_dtoa_r+0x2f8>)
 8004ea0:	21ea      	movs	r1, #234	; 0xea
 8004ea2:	48b2      	ldr	r0, [pc, #712]	; (800516c <_dtoa_r+0x2fc>)
 8004ea4:	f001 fec2 	bl	8006c2c <__assert_func>
 8004ea8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004eac:	6005      	str	r5, [r0, #0]
 8004eae:	60c5      	str	r5, [r0, #12]
 8004eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004eb2:	6819      	ldr	r1, [r3, #0]
 8004eb4:	b151      	cbz	r1, 8004ecc <_dtoa_r+0x5c>
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	604a      	str	r2, [r1, #4]
 8004eba:	2301      	movs	r3, #1
 8004ebc:	4093      	lsls	r3, r2
 8004ebe:	608b      	str	r3, [r1, #8]
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	f001 f83b 	bl	8005f3c <_Bfree>
 8004ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	1e3b      	subs	r3, r7, #0
 8004ece:	bfb9      	ittee	lt
 8004ed0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ed4:	9303      	strlt	r3, [sp, #12]
 8004ed6:	2300      	movge	r3, #0
 8004ed8:	f8c8 3000 	strge.w	r3, [r8]
 8004edc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004ee0:	4ba3      	ldr	r3, [pc, #652]	; (8005170 <_dtoa_r+0x300>)
 8004ee2:	bfbc      	itt	lt
 8004ee4:	2201      	movlt	r2, #1
 8004ee6:	f8c8 2000 	strlt.w	r2, [r8]
 8004eea:	ea33 0309 	bics.w	r3, r3, r9
 8004eee:	d11b      	bne.n	8004f28 <_dtoa_r+0xb8>
 8004ef0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ef2:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004efc:	4333      	orrs	r3, r6
 8004efe:	f000 857a 	beq.w	80059f6 <_dtoa_r+0xb86>
 8004f02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f04:	b963      	cbnz	r3, 8004f20 <_dtoa_r+0xb0>
 8004f06:	4b9b      	ldr	r3, [pc, #620]	; (8005174 <_dtoa_r+0x304>)
 8004f08:	e024      	b.n	8004f54 <_dtoa_r+0xe4>
 8004f0a:	4b9b      	ldr	r3, [pc, #620]	; (8005178 <_dtoa_r+0x308>)
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	3308      	adds	r3, #8
 8004f10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004f12:	6013      	str	r3, [r2, #0]
 8004f14:	9800      	ldr	r0, [sp, #0]
 8004f16:	b015      	add	sp, #84	; 0x54
 8004f18:	ecbd 8b02 	vpop	{d8}
 8004f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f20:	4b94      	ldr	r3, [pc, #592]	; (8005174 <_dtoa_r+0x304>)
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	3303      	adds	r3, #3
 8004f26:	e7f3      	b.n	8004f10 <_dtoa_r+0xa0>
 8004f28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	ec51 0b17 	vmov	r0, r1, d7
 8004f32:	2300      	movs	r3, #0
 8004f34:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004f38:	f7fb fdc6 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f3c:	4680      	mov	r8, r0
 8004f3e:	b158      	cbz	r0, 8004f58 <_dtoa_r+0xe8>
 8004f40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f42:	2301      	movs	r3, #1
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 8551 	beq.w	80059f0 <_dtoa_r+0xb80>
 8004f4e:	488b      	ldr	r0, [pc, #556]	; (800517c <_dtoa_r+0x30c>)
 8004f50:	6018      	str	r0, [r3, #0]
 8004f52:	1e43      	subs	r3, r0, #1
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	e7dd      	b.n	8004f14 <_dtoa_r+0xa4>
 8004f58:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004f5c:	aa12      	add	r2, sp, #72	; 0x48
 8004f5e:	a913      	add	r1, sp, #76	; 0x4c
 8004f60:	4620      	mov	r0, r4
 8004f62:	f001 facd 	bl	8006500 <__d2b>
 8004f66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004f6a:	4683      	mov	fp, r0
 8004f6c:	2d00      	cmp	r5, #0
 8004f6e:	d07c      	beq.n	800506a <_dtoa_r+0x1fa>
 8004f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f72:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004f76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f7a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004f7e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004f82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004f86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004f8a:	4b7d      	ldr	r3, [pc, #500]	; (8005180 <_dtoa_r+0x310>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	4630      	mov	r0, r6
 8004f90:	4639      	mov	r1, r7
 8004f92:	f7fb f979 	bl	8000288 <__aeabi_dsub>
 8004f96:	a36e      	add	r3, pc, #440	; (adr r3, 8005150 <_dtoa_r+0x2e0>)
 8004f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9c:	f7fb fb2c 	bl	80005f8 <__aeabi_dmul>
 8004fa0:	a36d      	add	r3, pc, #436	; (adr r3, 8005158 <_dtoa_r+0x2e8>)
 8004fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa6:	f7fb f971 	bl	800028c <__adddf3>
 8004faa:	4606      	mov	r6, r0
 8004fac:	4628      	mov	r0, r5
 8004fae:	460f      	mov	r7, r1
 8004fb0:	f7fb fab8 	bl	8000524 <__aeabi_i2d>
 8004fb4:	a36a      	add	r3, pc, #424	; (adr r3, 8005160 <_dtoa_r+0x2f0>)
 8004fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fba:	f7fb fb1d 	bl	80005f8 <__aeabi_dmul>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4630      	mov	r0, r6
 8004fc4:	4639      	mov	r1, r7
 8004fc6:	f7fb f961 	bl	800028c <__adddf3>
 8004fca:	4606      	mov	r6, r0
 8004fcc:	460f      	mov	r7, r1
 8004fce:	f7fb fdc3 	bl	8000b58 <__aeabi_d2iz>
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	4682      	mov	sl, r0
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	4630      	mov	r0, r6
 8004fda:	4639      	mov	r1, r7
 8004fdc:	f7fb fd7e 	bl	8000adc <__aeabi_dcmplt>
 8004fe0:	b148      	cbz	r0, 8004ff6 <_dtoa_r+0x186>
 8004fe2:	4650      	mov	r0, sl
 8004fe4:	f7fb fa9e 	bl	8000524 <__aeabi_i2d>
 8004fe8:	4632      	mov	r2, r6
 8004fea:	463b      	mov	r3, r7
 8004fec:	f7fb fd6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ff0:	b908      	cbnz	r0, 8004ff6 <_dtoa_r+0x186>
 8004ff2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ff6:	f1ba 0f16 	cmp.w	sl, #22
 8004ffa:	d854      	bhi.n	80050a6 <_dtoa_r+0x236>
 8004ffc:	4b61      	ldr	r3, [pc, #388]	; (8005184 <_dtoa_r+0x314>)
 8004ffe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005006:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800500a:	f7fb fd67 	bl	8000adc <__aeabi_dcmplt>
 800500e:	2800      	cmp	r0, #0
 8005010:	d04b      	beq.n	80050aa <_dtoa_r+0x23a>
 8005012:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005016:	2300      	movs	r3, #0
 8005018:	930e      	str	r3, [sp, #56]	; 0x38
 800501a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800501c:	1b5d      	subs	r5, r3, r5
 800501e:	1e6b      	subs	r3, r5, #1
 8005020:	9304      	str	r3, [sp, #16]
 8005022:	bf43      	ittte	mi
 8005024:	2300      	movmi	r3, #0
 8005026:	f1c5 0801 	rsbmi	r8, r5, #1
 800502a:	9304      	strmi	r3, [sp, #16]
 800502c:	f04f 0800 	movpl.w	r8, #0
 8005030:	f1ba 0f00 	cmp.w	sl, #0
 8005034:	db3b      	blt.n	80050ae <_dtoa_r+0x23e>
 8005036:	9b04      	ldr	r3, [sp, #16]
 8005038:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800503c:	4453      	add	r3, sl
 800503e:	9304      	str	r3, [sp, #16]
 8005040:	2300      	movs	r3, #0
 8005042:	9306      	str	r3, [sp, #24]
 8005044:	9b05      	ldr	r3, [sp, #20]
 8005046:	2b09      	cmp	r3, #9
 8005048:	d869      	bhi.n	800511e <_dtoa_r+0x2ae>
 800504a:	2b05      	cmp	r3, #5
 800504c:	bfc4      	itt	gt
 800504e:	3b04      	subgt	r3, #4
 8005050:	9305      	strgt	r3, [sp, #20]
 8005052:	9b05      	ldr	r3, [sp, #20]
 8005054:	f1a3 0302 	sub.w	r3, r3, #2
 8005058:	bfcc      	ite	gt
 800505a:	2500      	movgt	r5, #0
 800505c:	2501      	movle	r5, #1
 800505e:	2b03      	cmp	r3, #3
 8005060:	d869      	bhi.n	8005136 <_dtoa_r+0x2c6>
 8005062:	e8df f003 	tbb	[pc, r3]
 8005066:	4e2c      	.short	0x4e2c
 8005068:	5a4c      	.short	0x5a4c
 800506a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800506e:	441d      	add	r5, r3
 8005070:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005074:	2b20      	cmp	r3, #32
 8005076:	bfc1      	itttt	gt
 8005078:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800507c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005080:	fa09 f303 	lslgt.w	r3, r9, r3
 8005084:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005088:	bfda      	itte	le
 800508a:	f1c3 0320 	rsble	r3, r3, #32
 800508e:	fa06 f003 	lslle.w	r0, r6, r3
 8005092:	4318      	orrgt	r0, r3
 8005094:	f7fb fa36 	bl	8000504 <__aeabi_ui2d>
 8005098:	2301      	movs	r3, #1
 800509a:	4606      	mov	r6, r0
 800509c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80050a0:	3d01      	subs	r5, #1
 80050a2:	9310      	str	r3, [sp, #64]	; 0x40
 80050a4:	e771      	b.n	8004f8a <_dtoa_r+0x11a>
 80050a6:	2301      	movs	r3, #1
 80050a8:	e7b6      	b.n	8005018 <_dtoa_r+0x1a8>
 80050aa:	900e      	str	r0, [sp, #56]	; 0x38
 80050ac:	e7b5      	b.n	800501a <_dtoa_r+0x1aa>
 80050ae:	f1ca 0300 	rsb	r3, sl, #0
 80050b2:	9306      	str	r3, [sp, #24]
 80050b4:	2300      	movs	r3, #0
 80050b6:	eba8 080a 	sub.w	r8, r8, sl
 80050ba:	930d      	str	r3, [sp, #52]	; 0x34
 80050bc:	e7c2      	b.n	8005044 <_dtoa_r+0x1d4>
 80050be:	2300      	movs	r3, #0
 80050c0:	9308      	str	r3, [sp, #32]
 80050c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	dc39      	bgt.n	800513c <_dtoa_r+0x2cc>
 80050c8:	f04f 0901 	mov.w	r9, #1
 80050cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80050d0:	464b      	mov	r3, r9
 80050d2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80050d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80050d8:	2200      	movs	r2, #0
 80050da:	6042      	str	r2, [r0, #4]
 80050dc:	2204      	movs	r2, #4
 80050de:	f102 0614 	add.w	r6, r2, #20
 80050e2:	429e      	cmp	r6, r3
 80050e4:	6841      	ldr	r1, [r0, #4]
 80050e6:	d92f      	bls.n	8005148 <_dtoa_r+0x2d8>
 80050e8:	4620      	mov	r0, r4
 80050ea:	f000 fee7 	bl	8005ebc <_Balloc>
 80050ee:	9000      	str	r0, [sp, #0]
 80050f0:	2800      	cmp	r0, #0
 80050f2:	d14b      	bne.n	800518c <_dtoa_r+0x31c>
 80050f4:	4b24      	ldr	r3, [pc, #144]	; (8005188 <_dtoa_r+0x318>)
 80050f6:	4602      	mov	r2, r0
 80050f8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80050fc:	e6d1      	b.n	8004ea2 <_dtoa_r+0x32>
 80050fe:	2301      	movs	r3, #1
 8005100:	e7de      	b.n	80050c0 <_dtoa_r+0x250>
 8005102:	2300      	movs	r3, #0
 8005104:	9308      	str	r3, [sp, #32]
 8005106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005108:	eb0a 0903 	add.w	r9, sl, r3
 800510c:	f109 0301 	add.w	r3, r9, #1
 8005110:	2b01      	cmp	r3, #1
 8005112:	9301      	str	r3, [sp, #4]
 8005114:	bfb8      	it	lt
 8005116:	2301      	movlt	r3, #1
 8005118:	e7dd      	b.n	80050d6 <_dtoa_r+0x266>
 800511a:	2301      	movs	r3, #1
 800511c:	e7f2      	b.n	8005104 <_dtoa_r+0x294>
 800511e:	2501      	movs	r5, #1
 8005120:	2300      	movs	r3, #0
 8005122:	9305      	str	r3, [sp, #20]
 8005124:	9508      	str	r5, [sp, #32]
 8005126:	f04f 39ff 	mov.w	r9, #4294967295
 800512a:	2200      	movs	r2, #0
 800512c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005130:	2312      	movs	r3, #18
 8005132:	9209      	str	r2, [sp, #36]	; 0x24
 8005134:	e7cf      	b.n	80050d6 <_dtoa_r+0x266>
 8005136:	2301      	movs	r3, #1
 8005138:	9308      	str	r3, [sp, #32]
 800513a:	e7f4      	b.n	8005126 <_dtoa_r+0x2b6>
 800513c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005140:	f8cd 9004 	str.w	r9, [sp, #4]
 8005144:	464b      	mov	r3, r9
 8005146:	e7c6      	b.n	80050d6 <_dtoa_r+0x266>
 8005148:	3101      	adds	r1, #1
 800514a:	6041      	str	r1, [r0, #4]
 800514c:	0052      	lsls	r2, r2, #1
 800514e:	e7c6      	b.n	80050de <_dtoa_r+0x26e>
 8005150:	636f4361 	.word	0x636f4361
 8005154:	3fd287a7 	.word	0x3fd287a7
 8005158:	8b60c8b3 	.word	0x8b60c8b3
 800515c:	3fc68a28 	.word	0x3fc68a28
 8005160:	509f79fb 	.word	0x509f79fb
 8005164:	3fd34413 	.word	0x3fd34413
 8005168:	08006ed5 	.word	0x08006ed5
 800516c:	08006eec 	.word	0x08006eec
 8005170:	7ff00000 	.word	0x7ff00000
 8005174:	08006ed1 	.word	0x08006ed1
 8005178:	08006ec8 	.word	0x08006ec8
 800517c:	08006ea5 	.word	0x08006ea5
 8005180:	3ff80000 	.word	0x3ff80000
 8005184:	08007048 	.word	0x08007048
 8005188:	08006f4b 	.word	0x08006f4b
 800518c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800518e:	9a00      	ldr	r2, [sp, #0]
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	9b01      	ldr	r3, [sp, #4]
 8005194:	2b0e      	cmp	r3, #14
 8005196:	f200 80ad 	bhi.w	80052f4 <_dtoa_r+0x484>
 800519a:	2d00      	cmp	r5, #0
 800519c:	f000 80aa 	beq.w	80052f4 <_dtoa_r+0x484>
 80051a0:	f1ba 0f00 	cmp.w	sl, #0
 80051a4:	dd36      	ble.n	8005214 <_dtoa_r+0x3a4>
 80051a6:	4ac3      	ldr	r2, [pc, #780]	; (80054b4 <_dtoa_r+0x644>)
 80051a8:	f00a 030f 	and.w	r3, sl, #15
 80051ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80051b0:	ed93 7b00 	vldr	d7, [r3]
 80051b4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80051b8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80051bc:	eeb0 8a47 	vmov.f32	s16, s14
 80051c0:	eef0 8a67 	vmov.f32	s17, s15
 80051c4:	d016      	beq.n	80051f4 <_dtoa_r+0x384>
 80051c6:	4bbc      	ldr	r3, [pc, #752]	; (80054b8 <_dtoa_r+0x648>)
 80051c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80051cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051d0:	f7fb fb3c 	bl	800084c <__aeabi_ddiv>
 80051d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051d8:	f007 070f 	and.w	r7, r7, #15
 80051dc:	2503      	movs	r5, #3
 80051de:	4eb6      	ldr	r6, [pc, #728]	; (80054b8 <_dtoa_r+0x648>)
 80051e0:	b957      	cbnz	r7, 80051f8 <_dtoa_r+0x388>
 80051e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051e6:	ec53 2b18 	vmov	r2, r3, d8
 80051ea:	f7fb fb2f 	bl	800084c <__aeabi_ddiv>
 80051ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051f2:	e029      	b.n	8005248 <_dtoa_r+0x3d8>
 80051f4:	2502      	movs	r5, #2
 80051f6:	e7f2      	b.n	80051de <_dtoa_r+0x36e>
 80051f8:	07f9      	lsls	r1, r7, #31
 80051fa:	d508      	bpl.n	800520e <_dtoa_r+0x39e>
 80051fc:	ec51 0b18 	vmov	r0, r1, d8
 8005200:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005204:	f7fb f9f8 	bl	80005f8 <__aeabi_dmul>
 8005208:	ec41 0b18 	vmov	d8, r0, r1
 800520c:	3501      	adds	r5, #1
 800520e:	107f      	asrs	r7, r7, #1
 8005210:	3608      	adds	r6, #8
 8005212:	e7e5      	b.n	80051e0 <_dtoa_r+0x370>
 8005214:	f000 80a6 	beq.w	8005364 <_dtoa_r+0x4f4>
 8005218:	f1ca 0600 	rsb	r6, sl, #0
 800521c:	4ba5      	ldr	r3, [pc, #660]	; (80054b4 <_dtoa_r+0x644>)
 800521e:	4fa6      	ldr	r7, [pc, #664]	; (80054b8 <_dtoa_r+0x648>)
 8005220:	f006 020f 	and.w	r2, r6, #15
 8005224:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005230:	f7fb f9e2 	bl	80005f8 <__aeabi_dmul>
 8005234:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005238:	1136      	asrs	r6, r6, #4
 800523a:	2300      	movs	r3, #0
 800523c:	2502      	movs	r5, #2
 800523e:	2e00      	cmp	r6, #0
 8005240:	f040 8085 	bne.w	800534e <_dtoa_r+0x4de>
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1d2      	bne.n	80051ee <_dtoa_r+0x37e>
 8005248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800524a:	2b00      	cmp	r3, #0
 800524c:	f000 808c 	beq.w	8005368 <_dtoa_r+0x4f8>
 8005250:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005254:	4b99      	ldr	r3, [pc, #612]	; (80054bc <_dtoa_r+0x64c>)
 8005256:	2200      	movs	r2, #0
 8005258:	4630      	mov	r0, r6
 800525a:	4639      	mov	r1, r7
 800525c:	f7fb fc3e 	bl	8000adc <__aeabi_dcmplt>
 8005260:	2800      	cmp	r0, #0
 8005262:	f000 8081 	beq.w	8005368 <_dtoa_r+0x4f8>
 8005266:	9b01      	ldr	r3, [sp, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d07d      	beq.n	8005368 <_dtoa_r+0x4f8>
 800526c:	f1b9 0f00 	cmp.w	r9, #0
 8005270:	dd3c      	ble.n	80052ec <_dtoa_r+0x47c>
 8005272:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005276:	9307      	str	r3, [sp, #28]
 8005278:	2200      	movs	r2, #0
 800527a:	4b91      	ldr	r3, [pc, #580]	; (80054c0 <_dtoa_r+0x650>)
 800527c:	4630      	mov	r0, r6
 800527e:	4639      	mov	r1, r7
 8005280:	f7fb f9ba 	bl	80005f8 <__aeabi_dmul>
 8005284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005288:	3501      	adds	r5, #1
 800528a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800528e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005292:	4628      	mov	r0, r5
 8005294:	f7fb f946 	bl	8000524 <__aeabi_i2d>
 8005298:	4632      	mov	r2, r6
 800529a:	463b      	mov	r3, r7
 800529c:	f7fb f9ac 	bl	80005f8 <__aeabi_dmul>
 80052a0:	4b88      	ldr	r3, [pc, #544]	; (80054c4 <_dtoa_r+0x654>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	f7fa fff2 	bl	800028c <__adddf3>
 80052a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80052ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052b0:	9303      	str	r3, [sp, #12]
 80052b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d15c      	bne.n	8005372 <_dtoa_r+0x502>
 80052b8:	4b83      	ldr	r3, [pc, #524]	; (80054c8 <_dtoa_r+0x658>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	4630      	mov	r0, r6
 80052be:	4639      	mov	r1, r7
 80052c0:	f7fa ffe2 	bl	8000288 <__aeabi_dsub>
 80052c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052c8:	4606      	mov	r6, r0
 80052ca:	460f      	mov	r7, r1
 80052cc:	f7fb fc24 	bl	8000b18 <__aeabi_dcmpgt>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	f040 8296 	bne.w	8005802 <_dtoa_r+0x992>
 80052d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80052da:	4630      	mov	r0, r6
 80052dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80052e0:	4639      	mov	r1, r7
 80052e2:	f7fb fbfb 	bl	8000adc <__aeabi_dcmplt>
 80052e6:	2800      	cmp	r0, #0
 80052e8:	f040 8288 	bne.w	80057fc <_dtoa_r+0x98c>
 80052ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80052f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80052f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f2c0 8158 	blt.w	80055ac <_dtoa_r+0x73c>
 80052fc:	f1ba 0f0e 	cmp.w	sl, #14
 8005300:	f300 8154 	bgt.w	80055ac <_dtoa_r+0x73c>
 8005304:	4b6b      	ldr	r3, [pc, #428]	; (80054b4 <_dtoa_r+0x644>)
 8005306:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800530a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800530e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005310:	2b00      	cmp	r3, #0
 8005312:	f280 80e3 	bge.w	80054dc <_dtoa_r+0x66c>
 8005316:	9b01      	ldr	r3, [sp, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	f300 80df 	bgt.w	80054dc <_dtoa_r+0x66c>
 800531e:	f040 826d 	bne.w	80057fc <_dtoa_r+0x98c>
 8005322:	4b69      	ldr	r3, [pc, #420]	; (80054c8 <_dtoa_r+0x658>)
 8005324:	2200      	movs	r2, #0
 8005326:	4640      	mov	r0, r8
 8005328:	4649      	mov	r1, r9
 800532a:	f7fb f965 	bl	80005f8 <__aeabi_dmul>
 800532e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005332:	f7fb fbe7 	bl	8000b04 <__aeabi_dcmpge>
 8005336:	9e01      	ldr	r6, [sp, #4]
 8005338:	4637      	mov	r7, r6
 800533a:	2800      	cmp	r0, #0
 800533c:	f040 8243 	bne.w	80057c6 <_dtoa_r+0x956>
 8005340:	9d00      	ldr	r5, [sp, #0]
 8005342:	2331      	movs	r3, #49	; 0x31
 8005344:	f805 3b01 	strb.w	r3, [r5], #1
 8005348:	f10a 0a01 	add.w	sl, sl, #1
 800534c:	e23f      	b.n	80057ce <_dtoa_r+0x95e>
 800534e:	07f2      	lsls	r2, r6, #31
 8005350:	d505      	bpl.n	800535e <_dtoa_r+0x4ee>
 8005352:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005356:	f7fb f94f 	bl	80005f8 <__aeabi_dmul>
 800535a:	3501      	adds	r5, #1
 800535c:	2301      	movs	r3, #1
 800535e:	1076      	asrs	r6, r6, #1
 8005360:	3708      	adds	r7, #8
 8005362:	e76c      	b.n	800523e <_dtoa_r+0x3ce>
 8005364:	2502      	movs	r5, #2
 8005366:	e76f      	b.n	8005248 <_dtoa_r+0x3d8>
 8005368:	9b01      	ldr	r3, [sp, #4]
 800536a:	f8cd a01c 	str.w	sl, [sp, #28]
 800536e:	930c      	str	r3, [sp, #48]	; 0x30
 8005370:	e78d      	b.n	800528e <_dtoa_r+0x41e>
 8005372:	9900      	ldr	r1, [sp, #0]
 8005374:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005376:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005378:	4b4e      	ldr	r3, [pc, #312]	; (80054b4 <_dtoa_r+0x644>)
 800537a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800537e:	4401      	add	r1, r0
 8005380:	9102      	str	r1, [sp, #8]
 8005382:	9908      	ldr	r1, [sp, #32]
 8005384:	eeb0 8a47 	vmov.f32	s16, s14
 8005388:	eef0 8a67 	vmov.f32	s17, s15
 800538c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005390:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005394:	2900      	cmp	r1, #0
 8005396:	d045      	beq.n	8005424 <_dtoa_r+0x5b4>
 8005398:	494c      	ldr	r1, [pc, #304]	; (80054cc <_dtoa_r+0x65c>)
 800539a:	2000      	movs	r0, #0
 800539c:	f7fb fa56 	bl	800084c <__aeabi_ddiv>
 80053a0:	ec53 2b18 	vmov	r2, r3, d8
 80053a4:	f7fa ff70 	bl	8000288 <__aeabi_dsub>
 80053a8:	9d00      	ldr	r5, [sp, #0]
 80053aa:	ec41 0b18 	vmov	d8, r0, r1
 80053ae:	4639      	mov	r1, r7
 80053b0:	4630      	mov	r0, r6
 80053b2:	f7fb fbd1 	bl	8000b58 <__aeabi_d2iz>
 80053b6:	900c      	str	r0, [sp, #48]	; 0x30
 80053b8:	f7fb f8b4 	bl	8000524 <__aeabi_i2d>
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	4630      	mov	r0, r6
 80053c2:	4639      	mov	r1, r7
 80053c4:	f7fa ff60 	bl	8000288 <__aeabi_dsub>
 80053c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053ca:	3330      	adds	r3, #48	; 0x30
 80053cc:	f805 3b01 	strb.w	r3, [r5], #1
 80053d0:	ec53 2b18 	vmov	r2, r3, d8
 80053d4:	4606      	mov	r6, r0
 80053d6:	460f      	mov	r7, r1
 80053d8:	f7fb fb80 	bl	8000adc <__aeabi_dcmplt>
 80053dc:	2800      	cmp	r0, #0
 80053de:	d165      	bne.n	80054ac <_dtoa_r+0x63c>
 80053e0:	4632      	mov	r2, r6
 80053e2:	463b      	mov	r3, r7
 80053e4:	4935      	ldr	r1, [pc, #212]	; (80054bc <_dtoa_r+0x64c>)
 80053e6:	2000      	movs	r0, #0
 80053e8:	f7fa ff4e 	bl	8000288 <__aeabi_dsub>
 80053ec:	ec53 2b18 	vmov	r2, r3, d8
 80053f0:	f7fb fb74 	bl	8000adc <__aeabi_dcmplt>
 80053f4:	2800      	cmp	r0, #0
 80053f6:	f040 80b9 	bne.w	800556c <_dtoa_r+0x6fc>
 80053fa:	9b02      	ldr	r3, [sp, #8]
 80053fc:	429d      	cmp	r5, r3
 80053fe:	f43f af75 	beq.w	80052ec <_dtoa_r+0x47c>
 8005402:	4b2f      	ldr	r3, [pc, #188]	; (80054c0 <_dtoa_r+0x650>)
 8005404:	ec51 0b18 	vmov	r0, r1, d8
 8005408:	2200      	movs	r2, #0
 800540a:	f7fb f8f5 	bl	80005f8 <__aeabi_dmul>
 800540e:	4b2c      	ldr	r3, [pc, #176]	; (80054c0 <_dtoa_r+0x650>)
 8005410:	ec41 0b18 	vmov	d8, r0, r1
 8005414:	2200      	movs	r2, #0
 8005416:	4630      	mov	r0, r6
 8005418:	4639      	mov	r1, r7
 800541a:	f7fb f8ed 	bl	80005f8 <__aeabi_dmul>
 800541e:	4606      	mov	r6, r0
 8005420:	460f      	mov	r7, r1
 8005422:	e7c4      	b.n	80053ae <_dtoa_r+0x53e>
 8005424:	ec51 0b17 	vmov	r0, r1, d7
 8005428:	f7fb f8e6 	bl	80005f8 <__aeabi_dmul>
 800542c:	9b02      	ldr	r3, [sp, #8]
 800542e:	9d00      	ldr	r5, [sp, #0]
 8005430:	930c      	str	r3, [sp, #48]	; 0x30
 8005432:	ec41 0b18 	vmov	d8, r0, r1
 8005436:	4639      	mov	r1, r7
 8005438:	4630      	mov	r0, r6
 800543a:	f7fb fb8d 	bl	8000b58 <__aeabi_d2iz>
 800543e:	9011      	str	r0, [sp, #68]	; 0x44
 8005440:	f7fb f870 	bl	8000524 <__aeabi_i2d>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4630      	mov	r0, r6
 800544a:	4639      	mov	r1, r7
 800544c:	f7fa ff1c 	bl	8000288 <__aeabi_dsub>
 8005450:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005452:	3330      	adds	r3, #48	; 0x30
 8005454:	f805 3b01 	strb.w	r3, [r5], #1
 8005458:	9b02      	ldr	r3, [sp, #8]
 800545a:	429d      	cmp	r5, r3
 800545c:	4606      	mov	r6, r0
 800545e:	460f      	mov	r7, r1
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	d134      	bne.n	80054d0 <_dtoa_r+0x660>
 8005466:	4b19      	ldr	r3, [pc, #100]	; (80054cc <_dtoa_r+0x65c>)
 8005468:	ec51 0b18 	vmov	r0, r1, d8
 800546c:	f7fa ff0e 	bl	800028c <__adddf3>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4630      	mov	r0, r6
 8005476:	4639      	mov	r1, r7
 8005478:	f7fb fb4e 	bl	8000b18 <__aeabi_dcmpgt>
 800547c:	2800      	cmp	r0, #0
 800547e:	d175      	bne.n	800556c <_dtoa_r+0x6fc>
 8005480:	ec53 2b18 	vmov	r2, r3, d8
 8005484:	4911      	ldr	r1, [pc, #68]	; (80054cc <_dtoa_r+0x65c>)
 8005486:	2000      	movs	r0, #0
 8005488:	f7fa fefe 	bl	8000288 <__aeabi_dsub>
 800548c:	4602      	mov	r2, r0
 800548e:	460b      	mov	r3, r1
 8005490:	4630      	mov	r0, r6
 8005492:	4639      	mov	r1, r7
 8005494:	f7fb fb22 	bl	8000adc <__aeabi_dcmplt>
 8005498:	2800      	cmp	r0, #0
 800549a:	f43f af27 	beq.w	80052ec <_dtoa_r+0x47c>
 800549e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054a0:	1e6b      	subs	r3, r5, #1
 80054a2:	930c      	str	r3, [sp, #48]	; 0x30
 80054a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80054a8:	2b30      	cmp	r3, #48	; 0x30
 80054aa:	d0f8      	beq.n	800549e <_dtoa_r+0x62e>
 80054ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80054b0:	e04a      	b.n	8005548 <_dtoa_r+0x6d8>
 80054b2:	bf00      	nop
 80054b4:	08007048 	.word	0x08007048
 80054b8:	08007020 	.word	0x08007020
 80054bc:	3ff00000 	.word	0x3ff00000
 80054c0:	40240000 	.word	0x40240000
 80054c4:	401c0000 	.word	0x401c0000
 80054c8:	40140000 	.word	0x40140000
 80054cc:	3fe00000 	.word	0x3fe00000
 80054d0:	4baf      	ldr	r3, [pc, #700]	; (8005790 <_dtoa_r+0x920>)
 80054d2:	f7fb f891 	bl	80005f8 <__aeabi_dmul>
 80054d6:	4606      	mov	r6, r0
 80054d8:	460f      	mov	r7, r1
 80054da:	e7ac      	b.n	8005436 <_dtoa_r+0x5c6>
 80054dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80054e0:	9d00      	ldr	r5, [sp, #0]
 80054e2:	4642      	mov	r2, r8
 80054e4:	464b      	mov	r3, r9
 80054e6:	4630      	mov	r0, r6
 80054e8:	4639      	mov	r1, r7
 80054ea:	f7fb f9af 	bl	800084c <__aeabi_ddiv>
 80054ee:	f7fb fb33 	bl	8000b58 <__aeabi_d2iz>
 80054f2:	9002      	str	r0, [sp, #8]
 80054f4:	f7fb f816 	bl	8000524 <__aeabi_i2d>
 80054f8:	4642      	mov	r2, r8
 80054fa:	464b      	mov	r3, r9
 80054fc:	f7fb f87c 	bl	80005f8 <__aeabi_dmul>
 8005500:	4602      	mov	r2, r0
 8005502:	460b      	mov	r3, r1
 8005504:	4630      	mov	r0, r6
 8005506:	4639      	mov	r1, r7
 8005508:	f7fa febe 	bl	8000288 <__aeabi_dsub>
 800550c:	9e02      	ldr	r6, [sp, #8]
 800550e:	9f01      	ldr	r7, [sp, #4]
 8005510:	3630      	adds	r6, #48	; 0x30
 8005512:	f805 6b01 	strb.w	r6, [r5], #1
 8005516:	9e00      	ldr	r6, [sp, #0]
 8005518:	1bae      	subs	r6, r5, r6
 800551a:	42b7      	cmp	r7, r6
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	d137      	bne.n	8005592 <_dtoa_r+0x722>
 8005522:	f7fa feb3 	bl	800028c <__adddf3>
 8005526:	4642      	mov	r2, r8
 8005528:	464b      	mov	r3, r9
 800552a:	4606      	mov	r6, r0
 800552c:	460f      	mov	r7, r1
 800552e:	f7fb faf3 	bl	8000b18 <__aeabi_dcmpgt>
 8005532:	b9c8      	cbnz	r0, 8005568 <_dtoa_r+0x6f8>
 8005534:	4642      	mov	r2, r8
 8005536:	464b      	mov	r3, r9
 8005538:	4630      	mov	r0, r6
 800553a:	4639      	mov	r1, r7
 800553c:	f7fb fac4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005540:	b110      	cbz	r0, 8005548 <_dtoa_r+0x6d8>
 8005542:	9b02      	ldr	r3, [sp, #8]
 8005544:	07d9      	lsls	r1, r3, #31
 8005546:	d40f      	bmi.n	8005568 <_dtoa_r+0x6f8>
 8005548:	4620      	mov	r0, r4
 800554a:	4659      	mov	r1, fp
 800554c:	f000 fcf6 	bl	8005f3c <_Bfree>
 8005550:	2300      	movs	r3, #0
 8005552:	702b      	strb	r3, [r5, #0]
 8005554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005556:	f10a 0001 	add.w	r0, sl, #1
 800555a:	6018      	str	r0, [r3, #0]
 800555c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800555e:	2b00      	cmp	r3, #0
 8005560:	f43f acd8 	beq.w	8004f14 <_dtoa_r+0xa4>
 8005564:	601d      	str	r5, [r3, #0]
 8005566:	e4d5      	b.n	8004f14 <_dtoa_r+0xa4>
 8005568:	f8cd a01c 	str.w	sl, [sp, #28]
 800556c:	462b      	mov	r3, r5
 800556e:	461d      	mov	r5, r3
 8005570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005574:	2a39      	cmp	r2, #57	; 0x39
 8005576:	d108      	bne.n	800558a <_dtoa_r+0x71a>
 8005578:	9a00      	ldr	r2, [sp, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d1f7      	bne.n	800556e <_dtoa_r+0x6fe>
 800557e:	9a07      	ldr	r2, [sp, #28]
 8005580:	9900      	ldr	r1, [sp, #0]
 8005582:	3201      	adds	r2, #1
 8005584:	9207      	str	r2, [sp, #28]
 8005586:	2230      	movs	r2, #48	; 0x30
 8005588:	700a      	strb	r2, [r1, #0]
 800558a:	781a      	ldrb	r2, [r3, #0]
 800558c:	3201      	adds	r2, #1
 800558e:	701a      	strb	r2, [r3, #0]
 8005590:	e78c      	b.n	80054ac <_dtoa_r+0x63c>
 8005592:	4b7f      	ldr	r3, [pc, #508]	; (8005790 <_dtoa_r+0x920>)
 8005594:	2200      	movs	r2, #0
 8005596:	f7fb f82f 	bl	80005f8 <__aeabi_dmul>
 800559a:	2200      	movs	r2, #0
 800559c:	2300      	movs	r3, #0
 800559e:	4606      	mov	r6, r0
 80055a0:	460f      	mov	r7, r1
 80055a2:	f7fb fa91 	bl	8000ac8 <__aeabi_dcmpeq>
 80055a6:	2800      	cmp	r0, #0
 80055a8:	d09b      	beq.n	80054e2 <_dtoa_r+0x672>
 80055aa:	e7cd      	b.n	8005548 <_dtoa_r+0x6d8>
 80055ac:	9a08      	ldr	r2, [sp, #32]
 80055ae:	2a00      	cmp	r2, #0
 80055b0:	f000 80c4 	beq.w	800573c <_dtoa_r+0x8cc>
 80055b4:	9a05      	ldr	r2, [sp, #20]
 80055b6:	2a01      	cmp	r2, #1
 80055b8:	f300 80a8 	bgt.w	800570c <_dtoa_r+0x89c>
 80055bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80055be:	2a00      	cmp	r2, #0
 80055c0:	f000 80a0 	beq.w	8005704 <_dtoa_r+0x894>
 80055c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80055c8:	9e06      	ldr	r6, [sp, #24]
 80055ca:	4645      	mov	r5, r8
 80055cc:	9a04      	ldr	r2, [sp, #16]
 80055ce:	2101      	movs	r1, #1
 80055d0:	441a      	add	r2, r3
 80055d2:	4620      	mov	r0, r4
 80055d4:	4498      	add	r8, r3
 80055d6:	9204      	str	r2, [sp, #16]
 80055d8:	f000 fd6c 	bl	80060b4 <__i2b>
 80055dc:	4607      	mov	r7, r0
 80055de:	2d00      	cmp	r5, #0
 80055e0:	dd0b      	ble.n	80055fa <_dtoa_r+0x78a>
 80055e2:	9b04      	ldr	r3, [sp, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	dd08      	ble.n	80055fa <_dtoa_r+0x78a>
 80055e8:	42ab      	cmp	r3, r5
 80055ea:	9a04      	ldr	r2, [sp, #16]
 80055ec:	bfa8      	it	ge
 80055ee:	462b      	movge	r3, r5
 80055f0:	eba8 0803 	sub.w	r8, r8, r3
 80055f4:	1aed      	subs	r5, r5, r3
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	9304      	str	r3, [sp, #16]
 80055fa:	9b06      	ldr	r3, [sp, #24]
 80055fc:	b1fb      	cbz	r3, 800563e <_dtoa_r+0x7ce>
 80055fe:	9b08      	ldr	r3, [sp, #32]
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 809f 	beq.w	8005744 <_dtoa_r+0x8d4>
 8005606:	2e00      	cmp	r6, #0
 8005608:	dd11      	ble.n	800562e <_dtoa_r+0x7be>
 800560a:	4639      	mov	r1, r7
 800560c:	4632      	mov	r2, r6
 800560e:	4620      	mov	r0, r4
 8005610:	f000 fe0c 	bl	800622c <__pow5mult>
 8005614:	465a      	mov	r2, fp
 8005616:	4601      	mov	r1, r0
 8005618:	4607      	mov	r7, r0
 800561a:	4620      	mov	r0, r4
 800561c:	f000 fd60 	bl	80060e0 <__multiply>
 8005620:	4659      	mov	r1, fp
 8005622:	9007      	str	r0, [sp, #28]
 8005624:	4620      	mov	r0, r4
 8005626:	f000 fc89 	bl	8005f3c <_Bfree>
 800562a:	9b07      	ldr	r3, [sp, #28]
 800562c:	469b      	mov	fp, r3
 800562e:	9b06      	ldr	r3, [sp, #24]
 8005630:	1b9a      	subs	r2, r3, r6
 8005632:	d004      	beq.n	800563e <_dtoa_r+0x7ce>
 8005634:	4659      	mov	r1, fp
 8005636:	4620      	mov	r0, r4
 8005638:	f000 fdf8 	bl	800622c <__pow5mult>
 800563c:	4683      	mov	fp, r0
 800563e:	2101      	movs	r1, #1
 8005640:	4620      	mov	r0, r4
 8005642:	f000 fd37 	bl	80060b4 <__i2b>
 8005646:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005648:	2b00      	cmp	r3, #0
 800564a:	4606      	mov	r6, r0
 800564c:	dd7c      	ble.n	8005748 <_dtoa_r+0x8d8>
 800564e:	461a      	mov	r2, r3
 8005650:	4601      	mov	r1, r0
 8005652:	4620      	mov	r0, r4
 8005654:	f000 fdea 	bl	800622c <__pow5mult>
 8005658:	9b05      	ldr	r3, [sp, #20]
 800565a:	2b01      	cmp	r3, #1
 800565c:	4606      	mov	r6, r0
 800565e:	dd76      	ble.n	800574e <_dtoa_r+0x8de>
 8005660:	2300      	movs	r3, #0
 8005662:	9306      	str	r3, [sp, #24]
 8005664:	6933      	ldr	r3, [r6, #16]
 8005666:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800566a:	6918      	ldr	r0, [r3, #16]
 800566c:	f000 fcd2 	bl	8006014 <__hi0bits>
 8005670:	f1c0 0020 	rsb	r0, r0, #32
 8005674:	9b04      	ldr	r3, [sp, #16]
 8005676:	4418      	add	r0, r3
 8005678:	f010 001f 	ands.w	r0, r0, #31
 800567c:	f000 8086 	beq.w	800578c <_dtoa_r+0x91c>
 8005680:	f1c0 0320 	rsb	r3, r0, #32
 8005684:	2b04      	cmp	r3, #4
 8005686:	dd7f      	ble.n	8005788 <_dtoa_r+0x918>
 8005688:	f1c0 001c 	rsb	r0, r0, #28
 800568c:	9b04      	ldr	r3, [sp, #16]
 800568e:	4403      	add	r3, r0
 8005690:	4480      	add	r8, r0
 8005692:	4405      	add	r5, r0
 8005694:	9304      	str	r3, [sp, #16]
 8005696:	f1b8 0f00 	cmp.w	r8, #0
 800569a:	dd05      	ble.n	80056a8 <_dtoa_r+0x838>
 800569c:	4659      	mov	r1, fp
 800569e:	4642      	mov	r2, r8
 80056a0:	4620      	mov	r0, r4
 80056a2:	f000 fe1d 	bl	80062e0 <__lshift>
 80056a6:	4683      	mov	fp, r0
 80056a8:	9b04      	ldr	r3, [sp, #16]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	dd05      	ble.n	80056ba <_dtoa_r+0x84a>
 80056ae:	4631      	mov	r1, r6
 80056b0:	461a      	mov	r2, r3
 80056b2:	4620      	mov	r0, r4
 80056b4:	f000 fe14 	bl	80062e0 <__lshift>
 80056b8:	4606      	mov	r6, r0
 80056ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d069      	beq.n	8005794 <_dtoa_r+0x924>
 80056c0:	4631      	mov	r1, r6
 80056c2:	4658      	mov	r0, fp
 80056c4:	f000 fe78 	bl	80063b8 <__mcmp>
 80056c8:	2800      	cmp	r0, #0
 80056ca:	da63      	bge.n	8005794 <_dtoa_r+0x924>
 80056cc:	2300      	movs	r3, #0
 80056ce:	4659      	mov	r1, fp
 80056d0:	220a      	movs	r2, #10
 80056d2:	4620      	mov	r0, r4
 80056d4:	f000 fc54 	bl	8005f80 <__multadd>
 80056d8:	9b08      	ldr	r3, [sp, #32]
 80056da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056de:	4683      	mov	fp, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 818f 	beq.w	8005a04 <_dtoa_r+0xb94>
 80056e6:	4639      	mov	r1, r7
 80056e8:	2300      	movs	r3, #0
 80056ea:	220a      	movs	r2, #10
 80056ec:	4620      	mov	r0, r4
 80056ee:	f000 fc47 	bl	8005f80 <__multadd>
 80056f2:	f1b9 0f00 	cmp.w	r9, #0
 80056f6:	4607      	mov	r7, r0
 80056f8:	f300 808e 	bgt.w	8005818 <_dtoa_r+0x9a8>
 80056fc:	9b05      	ldr	r3, [sp, #20]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	dc50      	bgt.n	80057a4 <_dtoa_r+0x934>
 8005702:	e089      	b.n	8005818 <_dtoa_r+0x9a8>
 8005704:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005706:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800570a:	e75d      	b.n	80055c8 <_dtoa_r+0x758>
 800570c:	9b01      	ldr	r3, [sp, #4]
 800570e:	1e5e      	subs	r6, r3, #1
 8005710:	9b06      	ldr	r3, [sp, #24]
 8005712:	42b3      	cmp	r3, r6
 8005714:	bfbf      	itttt	lt
 8005716:	9b06      	ldrlt	r3, [sp, #24]
 8005718:	9606      	strlt	r6, [sp, #24]
 800571a:	1af2      	sublt	r2, r6, r3
 800571c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800571e:	bfb6      	itet	lt
 8005720:	189b      	addlt	r3, r3, r2
 8005722:	1b9e      	subge	r6, r3, r6
 8005724:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005726:	9b01      	ldr	r3, [sp, #4]
 8005728:	bfb8      	it	lt
 800572a:	2600      	movlt	r6, #0
 800572c:	2b00      	cmp	r3, #0
 800572e:	bfb5      	itete	lt
 8005730:	eba8 0503 	sublt.w	r5, r8, r3
 8005734:	9b01      	ldrge	r3, [sp, #4]
 8005736:	2300      	movlt	r3, #0
 8005738:	4645      	movge	r5, r8
 800573a:	e747      	b.n	80055cc <_dtoa_r+0x75c>
 800573c:	9e06      	ldr	r6, [sp, #24]
 800573e:	9f08      	ldr	r7, [sp, #32]
 8005740:	4645      	mov	r5, r8
 8005742:	e74c      	b.n	80055de <_dtoa_r+0x76e>
 8005744:	9a06      	ldr	r2, [sp, #24]
 8005746:	e775      	b.n	8005634 <_dtoa_r+0x7c4>
 8005748:	9b05      	ldr	r3, [sp, #20]
 800574a:	2b01      	cmp	r3, #1
 800574c:	dc18      	bgt.n	8005780 <_dtoa_r+0x910>
 800574e:	9b02      	ldr	r3, [sp, #8]
 8005750:	b9b3      	cbnz	r3, 8005780 <_dtoa_r+0x910>
 8005752:	9b03      	ldr	r3, [sp, #12]
 8005754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005758:	b9a3      	cbnz	r3, 8005784 <_dtoa_r+0x914>
 800575a:	9b03      	ldr	r3, [sp, #12]
 800575c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005760:	0d1b      	lsrs	r3, r3, #20
 8005762:	051b      	lsls	r3, r3, #20
 8005764:	b12b      	cbz	r3, 8005772 <_dtoa_r+0x902>
 8005766:	9b04      	ldr	r3, [sp, #16]
 8005768:	3301      	adds	r3, #1
 800576a:	9304      	str	r3, [sp, #16]
 800576c:	f108 0801 	add.w	r8, r8, #1
 8005770:	2301      	movs	r3, #1
 8005772:	9306      	str	r3, [sp, #24]
 8005774:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005776:	2b00      	cmp	r3, #0
 8005778:	f47f af74 	bne.w	8005664 <_dtoa_r+0x7f4>
 800577c:	2001      	movs	r0, #1
 800577e:	e779      	b.n	8005674 <_dtoa_r+0x804>
 8005780:	2300      	movs	r3, #0
 8005782:	e7f6      	b.n	8005772 <_dtoa_r+0x902>
 8005784:	9b02      	ldr	r3, [sp, #8]
 8005786:	e7f4      	b.n	8005772 <_dtoa_r+0x902>
 8005788:	d085      	beq.n	8005696 <_dtoa_r+0x826>
 800578a:	4618      	mov	r0, r3
 800578c:	301c      	adds	r0, #28
 800578e:	e77d      	b.n	800568c <_dtoa_r+0x81c>
 8005790:	40240000 	.word	0x40240000
 8005794:	9b01      	ldr	r3, [sp, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	dc38      	bgt.n	800580c <_dtoa_r+0x99c>
 800579a:	9b05      	ldr	r3, [sp, #20]
 800579c:	2b02      	cmp	r3, #2
 800579e:	dd35      	ble.n	800580c <_dtoa_r+0x99c>
 80057a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80057a4:	f1b9 0f00 	cmp.w	r9, #0
 80057a8:	d10d      	bne.n	80057c6 <_dtoa_r+0x956>
 80057aa:	4631      	mov	r1, r6
 80057ac:	464b      	mov	r3, r9
 80057ae:	2205      	movs	r2, #5
 80057b0:	4620      	mov	r0, r4
 80057b2:	f000 fbe5 	bl	8005f80 <__multadd>
 80057b6:	4601      	mov	r1, r0
 80057b8:	4606      	mov	r6, r0
 80057ba:	4658      	mov	r0, fp
 80057bc:	f000 fdfc 	bl	80063b8 <__mcmp>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	f73f adbd 	bgt.w	8005340 <_dtoa_r+0x4d0>
 80057c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057c8:	9d00      	ldr	r5, [sp, #0]
 80057ca:	ea6f 0a03 	mvn.w	sl, r3
 80057ce:	f04f 0800 	mov.w	r8, #0
 80057d2:	4631      	mov	r1, r6
 80057d4:	4620      	mov	r0, r4
 80057d6:	f000 fbb1 	bl	8005f3c <_Bfree>
 80057da:	2f00      	cmp	r7, #0
 80057dc:	f43f aeb4 	beq.w	8005548 <_dtoa_r+0x6d8>
 80057e0:	f1b8 0f00 	cmp.w	r8, #0
 80057e4:	d005      	beq.n	80057f2 <_dtoa_r+0x982>
 80057e6:	45b8      	cmp	r8, r7
 80057e8:	d003      	beq.n	80057f2 <_dtoa_r+0x982>
 80057ea:	4641      	mov	r1, r8
 80057ec:	4620      	mov	r0, r4
 80057ee:	f000 fba5 	bl	8005f3c <_Bfree>
 80057f2:	4639      	mov	r1, r7
 80057f4:	4620      	mov	r0, r4
 80057f6:	f000 fba1 	bl	8005f3c <_Bfree>
 80057fa:	e6a5      	b.n	8005548 <_dtoa_r+0x6d8>
 80057fc:	2600      	movs	r6, #0
 80057fe:	4637      	mov	r7, r6
 8005800:	e7e1      	b.n	80057c6 <_dtoa_r+0x956>
 8005802:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005804:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005808:	4637      	mov	r7, r6
 800580a:	e599      	b.n	8005340 <_dtoa_r+0x4d0>
 800580c:	9b08      	ldr	r3, [sp, #32]
 800580e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 80fd 	beq.w	8005a12 <_dtoa_r+0xba2>
 8005818:	2d00      	cmp	r5, #0
 800581a:	dd05      	ble.n	8005828 <_dtoa_r+0x9b8>
 800581c:	4639      	mov	r1, r7
 800581e:	462a      	mov	r2, r5
 8005820:	4620      	mov	r0, r4
 8005822:	f000 fd5d 	bl	80062e0 <__lshift>
 8005826:	4607      	mov	r7, r0
 8005828:	9b06      	ldr	r3, [sp, #24]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d05c      	beq.n	80058e8 <_dtoa_r+0xa78>
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	4620      	mov	r0, r4
 8005832:	f000 fb43 	bl	8005ebc <_Balloc>
 8005836:	4605      	mov	r5, r0
 8005838:	b928      	cbnz	r0, 8005846 <_dtoa_r+0x9d6>
 800583a:	4b80      	ldr	r3, [pc, #512]	; (8005a3c <_dtoa_r+0xbcc>)
 800583c:	4602      	mov	r2, r0
 800583e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005842:	f7ff bb2e 	b.w	8004ea2 <_dtoa_r+0x32>
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	3202      	adds	r2, #2
 800584a:	0092      	lsls	r2, r2, #2
 800584c:	f107 010c 	add.w	r1, r7, #12
 8005850:	300c      	adds	r0, #12
 8005852:	f000 fb25 	bl	8005ea0 <memcpy>
 8005856:	2201      	movs	r2, #1
 8005858:	4629      	mov	r1, r5
 800585a:	4620      	mov	r0, r4
 800585c:	f000 fd40 	bl	80062e0 <__lshift>
 8005860:	9b00      	ldr	r3, [sp, #0]
 8005862:	3301      	adds	r3, #1
 8005864:	9301      	str	r3, [sp, #4]
 8005866:	9b00      	ldr	r3, [sp, #0]
 8005868:	444b      	add	r3, r9
 800586a:	9307      	str	r3, [sp, #28]
 800586c:	9b02      	ldr	r3, [sp, #8]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	46b8      	mov	r8, r7
 8005874:	9306      	str	r3, [sp, #24]
 8005876:	4607      	mov	r7, r0
 8005878:	9b01      	ldr	r3, [sp, #4]
 800587a:	4631      	mov	r1, r6
 800587c:	3b01      	subs	r3, #1
 800587e:	4658      	mov	r0, fp
 8005880:	9302      	str	r3, [sp, #8]
 8005882:	f7ff fa67 	bl	8004d54 <quorem>
 8005886:	4603      	mov	r3, r0
 8005888:	3330      	adds	r3, #48	; 0x30
 800588a:	9004      	str	r0, [sp, #16]
 800588c:	4641      	mov	r1, r8
 800588e:	4658      	mov	r0, fp
 8005890:	9308      	str	r3, [sp, #32]
 8005892:	f000 fd91 	bl	80063b8 <__mcmp>
 8005896:	463a      	mov	r2, r7
 8005898:	4681      	mov	r9, r0
 800589a:	4631      	mov	r1, r6
 800589c:	4620      	mov	r0, r4
 800589e:	f000 fda7 	bl	80063f0 <__mdiff>
 80058a2:	68c2      	ldr	r2, [r0, #12]
 80058a4:	9b08      	ldr	r3, [sp, #32]
 80058a6:	4605      	mov	r5, r0
 80058a8:	bb02      	cbnz	r2, 80058ec <_dtoa_r+0xa7c>
 80058aa:	4601      	mov	r1, r0
 80058ac:	4658      	mov	r0, fp
 80058ae:	f000 fd83 	bl	80063b8 <__mcmp>
 80058b2:	9b08      	ldr	r3, [sp, #32]
 80058b4:	4602      	mov	r2, r0
 80058b6:	4629      	mov	r1, r5
 80058b8:	4620      	mov	r0, r4
 80058ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80058be:	f000 fb3d 	bl	8005f3c <_Bfree>
 80058c2:	9b05      	ldr	r3, [sp, #20]
 80058c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058c6:	9d01      	ldr	r5, [sp, #4]
 80058c8:	ea43 0102 	orr.w	r1, r3, r2
 80058cc:	9b06      	ldr	r3, [sp, #24]
 80058ce:	430b      	orrs	r3, r1
 80058d0:	9b08      	ldr	r3, [sp, #32]
 80058d2:	d10d      	bne.n	80058f0 <_dtoa_r+0xa80>
 80058d4:	2b39      	cmp	r3, #57	; 0x39
 80058d6:	d029      	beq.n	800592c <_dtoa_r+0xabc>
 80058d8:	f1b9 0f00 	cmp.w	r9, #0
 80058dc:	dd01      	ble.n	80058e2 <_dtoa_r+0xa72>
 80058de:	9b04      	ldr	r3, [sp, #16]
 80058e0:	3331      	adds	r3, #49	; 0x31
 80058e2:	9a02      	ldr	r2, [sp, #8]
 80058e4:	7013      	strb	r3, [r2, #0]
 80058e6:	e774      	b.n	80057d2 <_dtoa_r+0x962>
 80058e8:	4638      	mov	r0, r7
 80058ea:	e7b9      	b.n	8005860 <_dtoa_r+0x9f0>
 80058ec:	2201      	movs	r2, #1
 80058ee:	e7e2      	b.n	80058b6 <_dtoa_r+0xa46>
 80058f0:	f1b9 0f00 	cmp.w	r9, #0
 80058f4:	db06      	blt.n	8005904 <_dtoa_r+0xa94>
 80058f6:	9905      	ldr	r1, [sp, #20]
 80058f8:	ea41 0909 	orr.w	r9, r1, r9
 80058fc:	9906      	ldr	r1, [sp, #24]
 80058fe:	ea59 0101 	orrs.w	r1, r9, r1
 8005902:	d120      	bne.n	8005946 <_dtoa_r+0xad6>
 8005904:	2a00      	cmp	r2, #0
 8005906:	ddec      	ble.n	80058e2 <_dtoa_r+0xa72>
 8005908:	4659      	mov	r1, fp
 800590a:	2201      	movs	r2, #1
 800590c:	4620      	mov	r0, r4
 800590e:	9301      	str	r3, [sp, #4]
 8005910:	f000 fce6 	bl	80062e0 <__lshift>
 8005914:	4631      	mov	r1, r6
 8005916:	4683      	mov	fp, r0
 8005918:	f000 fd4e 	bl	80063b8 <__mcmp>
 800591c:	2800      	cmp	r0, #0
 800591e:	9b01      	ldr	r3, [sp, #4]
 8005920:	dc02      	bgt.n	8005928 <_dtoa_r+0xab8>
 8005922:	d1de      	bne.n	80058e2 <_dtoa_r+0xa72>
 8005924:	07da      	lsls	r2, r3, #31
 8005926:	d5dc      	bpl.n	80058e2 <_dtoa_r+0xa72>
 8005928:	2b39      	cmp	r3, #57	; 0x39
 800592a:	d1d8      	bne.n	80058de <_dtoa_r+0xa6e>
 800592c:	9a02      	ldr	r2, [sp, #8]
 800592e:	2339      	movs	r3, #57	; 0x39
 8005930:	7013      	strb	r3, [r2, #0]
 8005932:	462b      	mov	r3, r5
 8005934:	461d      	mov	r5, r3
 8005936:	3b01      	subs	r3, #1
 8005938:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800593c:	2a39      	cmp	r2, #57	; 0x39
 800593e:	d050      	beq.n	80059e2 <_dtoa_r+0xb72>
 8005940:	3201      	adds	r2, #1
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	e745      	b.n	80057d2 <_dtoa_r+0x962>
 8005946:	2a00      	cmp	r2, #0
 8005948:	dd03      	ble.n	8005952 <_dtoa_r+0xae2>
 800594a:	2b39      	cmp	r3, #57	; 0x39
 800594c:	d0ee      	beq.n	800592c <_dtoa_r+0xabc>
 800594e:	3301      	adds	r3, #1
 8005950:	e7c7      	b.n	80058e2 <_dtoa_r+0xa72>
 8005952:	9a01      	ldr	r2, [sp, #4]
 8005954:	9907      	ldr	r1, [sp, #28]
 8005956:	f802 3c01 	strb.w	r3, [r2, #-1]
 800595a:	428a      	cmp	r2, r1
 800595c:	d02a      	beq.n	80059b4 <_dtoa_r+0xb44>
 800595e:	4659      	mov	r1, fp
 8005960:	2300      	movs	r3, #0
 8005962:	220a      	movs	r2, #10
 8005964:	4620      	mov	r0, r4
 8005966:	f000 fb0b 	bl	8005f80 <__multadd>
 800596a:	45b8      	cmp	r8, r7
 800596c:	4683      	mov	fp, r0
 800596e:	f04f 0300 	mov.w	r3, #0
 8005972:	f04f 020a 	mov.w	r2, #10
 8005976:	4641      	mov	r1, r8
 8005978:	4620      	mov	r0, r4
 800597a:	d107      	bne.n	800598c <_dtoa_r+0xb1c>
 800597c:	f000 fb00 	bl	8005f80 <__multadd>
 8005980:	4680      	mov	r8, r0
 8005982:	4607      	mov	r7, r0
 8005984:	9b01      	ldr	r3, [sp, #4]
 8005986:	3301      	adds	r3, #1
 8005988:	9301      	str	r3, [sp, #4]
 800598a:	e775      	b.n	8005878 <_dtoa_r+0xa08>
 800598c:	f000 faf8 	bl	8005f80 <__multadd>
 8005990:	4639      	mov	r1, r7
 8005992:	4680      	mov	r8, r0
 8005994:	2300      	movs	r3, #0
 8005996:	220a      	movs	r2, #10
 8005998:	4620      	mov	r0, r4
 800599a:	f000 faf1 	bl	8005f80 <__multadd>
 800599e:	4607      	mov	r7, r0
 80059a0:	e7f0      	b.n	8005984 <_dtoa_r+0xb14>
 80059a2:	f1b9 0f00 	cmp.w	r9, #0
 80059a6:	9a00      	ldr	r2, [sp, #0]
 80059a8:	bfcc      	ite	gt
 80059aa:	464d      	movgt	r5, r9
 80059ac:	2501      	movle	r5, #1
 80059ae:	4415      	add	r5, r2
 80059b0:	f04f 0800 	mov.w	r8, #0
 80059b4:	4659      	mov	r1, fp
 80059b6:	2201      	movs	r2, #1
 80059b8:	4620      	mov	r0, r4
 80059ba:	9301      	str	r3, [sp, #4]
 80059bc:	f000 fc90 	bl	80062e0 <__lshift>
 80059c0:	4631      	mov	r1, r6
 80059c2:	4683      	mov	fp, r0
 80059c4:	f000 fcf8 	bl	80063b8 <__mcmp>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	dcb2      	bgt.n	8005932 <_dtoa_r+0xac2>
 80059cc:	d102      	bne.n	80059d4 <_dtoa_r+0xb64>
 80059ce:	9b01      	ldr	r3, [sp, #4]
 80059d0:	07db      	lsls	r3, r3, #31
 80059d2:	d4ae      	bmi.n	8005932 <_dtoa_r+0xac2>
 80059d4:	462b      	mov	r3, r5
 80059d6:	461d      	mov	r5, r3
 80059d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059dc:	2a30      	cmp	r2, #48	; 0x30
 80059de:	d0fa      	beq.n	80059d6 <_dtoa_r+0xb66>
 80059e0:	e6f7      	b.n	80057d2 <_dtoa_r+0x962>
 80059e2:	9a00      	ldr	r2, [sp, #0]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d1a5      	bne.n	8005934 <_dtoa_r+0xac4>
 80059e8:	f10a 0a01 	add.w	sl, sl, #1
 80059ec:	2331      	movs	r3, #49	; 0x31
 80059ee:	e779      	b.n	80058e4 <_dtoa_r+0xa74>
 80059f0:	4b13      	ldr	r3, [pc, #76]	; (8005a40 <_dtoa_r+0xbd0>)
 80059f2:	f7ff baaf 	b.w	8004f54 <_dtoa_r+0xe4>
 80059f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f47f aa86 	bne.w	8004f0a <_dtoa_r+0x9a>
 80059fe:	4b11      	ldr	r3, [pc, #68]	; (8005a44 <_dtoa_r+0xbd4>)
 8005a00:	f7ff baa8 	b.w	8004f54 <_dtoa_r+0xe4>
 8005a04:	f1b9 0f00 	cmp.w	r9, #0
 8005a08:	dc03      	bgt.n	8005a12 <_dtoa_r+0xba2>
 8005a0a:	9b05      	ldr	r3, [sp, #20]
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	f73f aec9 	bgt.w	80057a4 <_dtoa_r+0x934>
 8005a12:	9d00      	ldr	r5, [sp, #0]
 8005a14:	4631      	mov	r1, r6
 8005a16:	4658      	mov	r0, fp
 8005a18:	f7ff f99c 	bl	8004d54 <quorem>
 8005a1c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005a20:	f805 3b01 	strb.w	r3, [r5], #1
 8005a24:	9a00      	ldr	r2, [sp, #0]
 8005a26:	1aaa      	subs	r2, r5, r2
 8005a28:	4591      	cmp	r9, r2
 8005a2a:	ddba      	ble.n	80059a2 <_dtoa_r+0xb32>
 8005a2c:	4659      	mov	r1, fp
 8005a2e:	2300      	movs	r3, #0
 8005a30:	220a      	movs	r2, #10
 8005a32:	4620      	mov	r0, r4
 8005a34:	f000 faa4 	bl	8005f80 <__multadd>
 8005a38:	4683      	mov	fp, r0
 8005a3a:	e7eb      	b.n	8005a14 <_dtoa_r+0xba4>
 8005a3c:	08006f4b 	.word	0x08006f4b
 8005a40:	08006ea4 	.word	0x08006ea4
 8005a44:	08006ec8 	.word	0x08006ec8

08005a48 <__sflush_r>:
 8005a48:	898a      	ldrh	r2, [r1, #12]
 8005a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a4e:	4605      	mov	r5, r0
 8005a50:	0710      	lsls	r0, r2, #28
 8005a52:	460c      	mov	r4, r1
 8005a54:	d458      	bmi.n	8005b08 <__sflush_r+0xc0>
 8005a56:	684b      	ldr	r3, [r1, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	dc05      	bgt.n	8005a68 <__sflush_r+0x20>
 8005a5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	dc02      	bgt.n	8005a68 <__sflush_r+0x20>
 8005a62:	2000      	movs	r0, #0
 8005a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a6a:	2e00      	cmp	r6, #0
 8005a6c:	d0f9      	beq.n	8005a62 <__sflush_r+0x1a>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a74:	682f      	ldr	r7, [r5, #0]
 8005a76:	602b      	str	r3, [r5, #0]
 8005a78:	d032      	beq.n	8005ae0 <__sflush_r+0x98>
 8005a7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a7c:	89a3      	ldrh	r3, [r4, #12]
 8005a7e:	075a      	lsls	r2, r3, #29
 8005a80:	d505      	bpl.n	8005a8e <__sflush_r+0x46>
 8005a82:	6863      	ldr	r3, [r4, #4]
 8005a84:	1ac0      	subs	r0, r0, r3
 8005a86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a88:	b10b      	cbz	r3, 8005a8e <__sflush_r+0x46>
 8005a8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a8c:	1ac0      	subs	r0, r0, r3
 8005a8e:	2300      	movs	r3, #0
 8005a90:	4602      	mov	r2, r0
 8005a92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a94:	6a21      	ldr	r1, [r4, #32]
 8005a96:	4628      	mov	r0, r5
 8005a98:	47b0      	blx	r6
 8005a9a:	1c43      	adds	r3, r0, #1
 8005a9c:	89a3      	ldrh	r3, [r4, #12]
 8005a9e:	d106      	bne.n	8005aae <__sflush_r+0x66>
 8005aa0:	6829      	ldr	r1, [r5, #0]
 8005aa2:	291d      	cmp	r1, #29
 8005aa4:	d82c      	bhi.n	8005b00 <__sflush_r+0xb8>
 8005aa6:	4a2a      	ldr	r2, [pc, #168]	; (8005b50 <__sflush_r+0x108>)
 8005aa8:	40ca      	lsrs	r2, r1
 8005aaa:	07d6      	lsls	r6, r2, #31
 8005aac:	d528      	bpl.n	8005b00 <__sflush_r+0xb8>
 8005aae:	2200      	movs	r2, #0
 8005ab0:	6062      	str	r2, [r4, #4]
 8005ab2:	04d9      	lsls	r1, r3, #19
 8005ab4:	6922      	ldr	r2, [r4, #16]
 8005ab6:	6022      	str	r2, [r4, #0]
 8005ab8:	d504      	bpl.n	8005ac4 <__sflush_r+0x7c>
 8005aba:	1c42      	adds	r2, r0, #1
 8005abc:	d101      	bne.n	8005ac2 <__sflush_r+0x7a>
 8005abe:	682b      	ldr	r3, [r5, #0]
 8005ac0:	b903      	cbnz	r3, 8005ac4 <__sflush_r+0x7c>
 8005ac2:	6560      	str	r0, [r4, #84]	; 0x54
 8005ac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ac6:	602f      	str	r7, [r5, #0]
 8005ac8:	2900      	cmp	r1, #0
 8005aca:	d0ca      	beq.n	8005a62 <__sflush_r+0x1a>
 8005acc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ad0:	4299      	cmp	r1, r3
 8005ad2:	d002      	beq.n	8005ada <__sflush_r+0x92>
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	f000 fd7f 	bl	80065d8 <_free_r>
 8005ada:	2000      	movs	r0, #0
 8005adc:	6360      	str	r0, [r4, #52]	; 0x34
 8005ade:	e7c1      	b.n	8005a64 <__sflush_r+0x1c>
 8005ae0:	6a21      	ldr	r1, [r4, #32]
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	47b0      	blx	r6
 8005ae8:	1c41      	adds	r1, r0, #1
 8005aea:	d1c7      	bne.n	8005a7c <__sflush_r+0x34>
 8005aec:	682b      	ldr	r3, [r5, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d0c4      	beq.n	8005a7c <__sflush_r+0x34>
 8005af2:	2b1d      	cmp	r3, #29
 8005af4:	d001      	beq.n	8005afa <__sflush_r+0xb2>
 8005af6:	2b16      	cmp	r3, #22
 8005af8:	d101      	bne.n	8005afe <__sflush_r+0xb6>
 8005afa:	602f      	str	r7, [r5, #0]
 8005afc:	e7b1      	b.n	8005a62 <__sflush_r+0x1a>
 8005afe:	89a3      	ldrh	r3, [r4, #12]
 8005b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b04:	81a3      	strh	r3, [r4, #12]
 8005b06:	e7ad      	b.n	8005a64 <__sflush_r+0x1c>
 8005b08:	690f      	ldr	r7, [r1, #16]
 8005b0a:	2f00      	cmp	r7, #0
 8005b0c:	d0a9      	beq.n	8005a62 <__sflush_r+0x1a>
 8005b0e:	0793      	lsls	r3, r2, #30
 8005b10:	680e      	ldr	r6, [r1, #0]
 8005b12:	bf08      	it	eq
 8005b14:	694b      	ldreq	r3, [r1, #20]
 8005b16:	600f      	str	r7, [r1, #0]
 8005b18:	bf18      	it	ne
 8005b1a:	2300      	movne	r3, #0
 8005b1c:	eba6 0807 	sub.w	r8, r6, r7
 8005b20:	608b      	str	r3, [r1, #8]
 8005b22:	f1b8 0f00 	cmp.w	r8, #0
 8005b26:	dd9c      	ble.n	8005a62 <__sflush_r+0x1a>
 8005b28:	6a21      	ldr	r1, [r4, #32]
 8005b2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b2c:	4643      	mov	r3, r8
 8005b2e:	463a      	mov	r2, r7
 8005b30:	4628      	mov	r0, r5
 8005b32:	47b0      	blx	r6
 8005b34:	2800      	cmp	r0, #0
 8005b36:	dc06      	bgt.n	8005b46 <__sflush_r+0xfe>
 8005b38:	89a3      	ldrh	r3, [r4, #12]
 8005b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b3e:	81a3      	strh	r3, [r4, #12]
 8005b40:	f04f 30ff 	mov.w	r0, #4294967295
 8005b44:	e78e      	b.n	8005a64 <__sflush_r+0x1c>
 8005b46:	4407      	add	r7, r0
 8005b48:	eba8 0800 	sub.w	r8, r8, r0
 8005b4c:	e7e9      	b.n	8005b22 <__sflush_r+0xda>
 8005b4e:	bf00      	nop
 8005b50:	20400001 	.word	0x20400001

08005b54 <_fflush_r>:
 8005b54:	b538      	push	{r3, r4, r5, lr}
 8005b56:	690b      	ldr	r3, [r1, #16]
 8005b58:	4605      	mov	r5, r0
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	b913      	cbnz	r3, 8005b64 <_fflush_r+0x10>
 8005b5e:	2500      	movs	r5, #0
 8005b60:	4628      	mov	r0, r5
 8005b62:	bd38      	pop	{r3, r4, r5, pc}
 8005b64:	b118      	cbz	r0, 8005b6e <_fflush_r+0x1a>
 8005b66:	6983      	ldr	r3, [r0, #24]
 8005b68:	b90b      	cbnz	r3, 8005b6e <_fflush_r+0x1a>
 8005b6a:	f000 f887 	bl	8005c7c <__sinit>
 8005b6e:	4b14      	ldr	r3, [pc, #80]	; (8005bc0 <_fflush_r+0x6c>)
 8005b70:	429c      	cmp	r4, r3
 8005b72:	d11b      	bne.n	8005bac <_fflush_r+0x58>
 8005b74:	686c      	ldr	r4, [r5, #4]
 8005b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0ef      	beq.n	8005b5e <_fflush_r+0xa>
 8005b7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b80:	07d0      	lsls	r0, r2, #31
 8005b82:	d404      	bmi.n	8005b8e <_fflush_r+0x3a>
 8005b84:	0599      	lsls	r1, r3, #22
 8005b86:	d402      	bmi.n	8005b8e <_fflush_r+0x3a>
 8005b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b8a:	f000 f91a 	bl	8005dc2 <__retarget_lock_acquire_recursive>
 8005b8e:	4628      	mov	r0, r5
 8005b90:	4621      	mov	r1, r4
 8005b92:	f7ff ff59 	bl	8005a48 <__sflush_r>
 8005b96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b98:	07da      	lsls	r2, r3, #31
 8005b9a:	4605      	mov	r5, r0
 8005b9c:	d4e0      	bmi.n	8005b60 <_fflush_r+0xc>
 8005b9e:	89a3      	ldrh	r3, [r4, #12]
 8005ba0:	059b      	lsls	r3, r3, #22
 8005ba2:	d4dd      	bmi.n	8005b60 <_fflush_r+0xc>
 8005ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ba6:	f000 f90d 	bl	8005dc4 <__retarget_lock_release_recursive>
 8005baa:	e7d9      	b.n	8005b60 <_fflush_r+0xc>
 8005bac:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <_fflush_r+0x70>)
 8005bae:	429c      	cmp	r4, r3
 8005bb0:	d101      	bne.n	8005bb6 <_fflush_r+0x62>
 8005bb2:	68ac      	ldr	r4, [r5, #8]
 8005bb4:	e7df      	b.n	8005b76 <_fflush_r+0x22>
 8005bb6:	4b04      	ldr	r3, [pc, #16]	; (8005bc8 <_fflush_r+0x74>)
 8005bb8:	429c      	cmp	r4, r3
 8005bba:	bf08      	it	eq
 8005bbc:	68ec      	ldreq	r4, [r5, #12]
 8005bbe:	e7da      	b.n	8005b76 <_fflush_r+0x22>
 8005bc0:	08006f7c 	.word	0x08006f7c
 8005bc4:	08006f9c 	.word	0x08006f9c
 8005bc8:	08006f5c 	.word	0x08006f5c

08005bcc <std>:
 8005bcc:	2300      	movs	r3, #0
 8005bce:	b510      	push	{r4, lr}
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	e9c0 3300 	strd	r3, r3, [r0]
 8005bd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bda:	6083      	str	r3, [r0, #8]
 8005bdc:	8181      	strh	r1, [r0, #12]
 8005bde:	6643      	str	r3, [r0, #100]	; 0x64
 8005be0:	81c2      	strh	r2, [r0, #14]
 8005be2:	6183      	str	r3, [r0, #24]
 8005be4:	4619      	mov	r1, r3
 8005be6:	2208      	movs	r2, #8
 8005be8:	305c      	adds	r0, #92	; 0x5c
 8005bea:	f7fe fb5b 	bl	80042a4 <memset>
 8005bee:	4b05      	ldr	r3, [pc, #20]	; (8005c04 <std+0x38>)
 8005bf0:	6263      	str	r3, [r4, #36]	; 0x24
 8005bf2:	4b05      	ldr	r3, [pc, #20]	; (8005c08 <std+0x3c>)
 8005bf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005bf6:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <std+0x40>)
 8005bf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005bfa:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <std+0x44>)
 8005bfc:	6224      	str	r4, [r4, #32]
 8005bfe:	6323      	str	r3, [r4, #48]	; 0x30
 8005c00:	bd10      	pop	{r4, pc}
 8005c02:	bf00      	nop
 8005c04:	08006a01 	.word	0x08006a01
 8005c08:	08006a23 	.word	0x08006a23
 8005c0c:	08006a5b 	.word	0x08006a5b
 8005c10:	08006a7f 	.word	0x08006a7f

08005c14 <_cleanup_r>:
 8005c14:	4901      	ldr	r1, [pc, #4]	; (8005c1c <_cleanup_r+0x8>)
 8005c16:	f000 b8af 	b.w	8005d78 <_fwalk_reent>
 8005c1a:	bf00      	nop
 8005c1c:	08005b55 	.word	0x08005b55

08005c20 <__sfmoreglue>:
 8005c20:	b570      	push	{r4, r5, r6, lr}
 8005c22:	1e4a      	subs	r2, r1, #1
 8005c24:	2568      	movs	r5, #104	; 0x68
 8005c26:	4355      	muls	r5, r2
 8005c28:	460e      	mov	r6, r1
 8005c2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c2e:	f000 fd23 	bl	8006678 <_malloc_r>
 8005c32:	4604      	mov	r4, r0
 8005c34:	b140      	cbz	r0, 8005c48 <__sfmoreglue+0x28>
 8005c36:	2100      	movs	r1, #0
 8005c38:	e9c0 1600 	strd	r1, r6, [r0]
 8005c3c:	300c      	adds	r0, #12
 8005c3e:	60a0      	str	r0, [r4, #8]
 8005c40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c44:	f7fe fb2e 	bl	80042a4 <memset>
 8005c48:	4620      	mov	r0, r4
 8005c4a:	bd70      	pop	{r4, r5, r6, pc}

08005c4c <__sfp_lock_acquire>:
 8005c4c:	4801      	ldr	r0, [pc, #4]	; (8005c54 <__sfp_lock_acquire+0x8>)
 8005c4e:	f000 b8b8 	b.w	8005dc2 <__retarget_lock_acquire_recursive>
 8005c52:	bf00      	nop
 8005c54:	2000020a 	.word	0x2000020a

08005c58 <__sfp_lock_release>:
 8005c58:	4801      	ldr	r0, [pc, #4]	; (8005c60 <__sfp_lock_release+0x8>)
 8005c5a:	f000 b8b3 	b.w	8005dc4 <__retarget_lock_release_recursive>
 8005c5e:	bf00      	nop
 8005c60:	2000020a 	.word	0x2000020a

08005c64 <__sinit_lock_acquire>:
 8005c64:	4801      	ldr	r0, [pc, #4]	; (8005c6c <__sinit_lock_acquire+0x8>)
 8005c66:	f000 b8ac 	b.w	8005dc2 <__retarget_lock_acquire_recursive>
 8005c6a:	bf00      	nop
 8005c6c:	20000205 	.word	0x20000205

08005c70 <__sinit_lock_release>:
 8005c70:	4801      	ldr	r0, [pc, #4]	; (8005c78 <__sinit_lock_release+0x8>)
 8005c72:	f000 b8a7 	b.w	8005dc4 <__retarget_lock_release_recursive>
 8005c76:	bf00      	nop
 8005c78:	20000205 	.word	0x20000205

08005c7c <__sinit>:
 8005c7c:	b510      	push	{r4, lr}
 8005c7e:	4604      	mov	r4, r0
 8005c80:	f7ff fff0 	bl	8005c64 <__sinit_lock_acquire>
 8005c84:	69a3      	ldr	r3, [r4, #24]
 8005c86:	b11b      	cbz	r3, 8005c90 <__sinit+0x14>
 8005c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c8c:	f7ff bff0 	b.w	8005c70 <__sinit_lock_release>
 8005c90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c94:	6523      	str	r3, [r4, #80]	; 0x50
 8005c96:	4b13      	ldr	r3, [pc, #76]	; (8005ce4 <__sinit+0x68>)
 8005c98:	4a13      	ldr	r2, [pc, #76]	; (8005ce8 <__sinit+0x6c>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c9e:	42a3      	cmp	r3, r4
 8005ca0:	bf04      	itt	eq
 8005ca2:	2301      	moveq	r3, #1
 8005ca4:	61a3      	streq	r3, [r4, #24]
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	f000 f820 	bl	8005cec <__sfp>
 8005cac:	6060      	str	r0, [r4, #4]
 8005cae:	4620      	mov	r0, r4
 8005cb0:	f000 f81c 	bl	8005cec <__sfp>
 8005cb4:	60a0      	str	r0, [r4, #8]
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	f000 f818 	bl	8005cec <__sfp>
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	60e0      	str	r0, [r4, #12]
 8005cc0:	2104      	movs	r1, #4
 8005cc2:	6860      	ldr	r0, [r4, #4]
 8005cc4:	f7ff ff82 	bl	8005bcc <std>
 8005cc8:	68a0      	ldr	r0, [r4, #8]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	2109      	movs	r1, #9
 8005cce:	f7ff ff7d 	bl	8005bcc <std>
 8005cd2:	68e0      	ldr	r0, [r4, #12]
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	2112      	movs	r1, #18
 8005cd8:	f7ff ff78 	bl	8005bcc <std>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	61a3      	str	r3, [r4, #24]
 8005ce0:	e7d2      	b.n	8005c88 <__sinit+0xc>
 8005ce2:	bf00      	nop
 8005ce4:	08006e90 	.word	0x08006e90
 8005ce8:	08005c15 	.word	0x08005c15

08005cec <__sfp>:
 8005cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cee:	4607      	mov	r7, r0
 8005cf0:	f7ff ffac 	bl	8005c4c <__sfp_lock_acquire>
 8005cf4:	4b1e      	ldr	r3, [pc, #120]	; (8005d70 <__sfp+0x84>)
 8005cf6:	681e      	ldr	r6, [r3, #0]
 8005cf8:	69b3      	ldr	r3, [r6, #24]
 8005cfa:	b913      	cbnz	r3, 8005d02 <__sfp+0x16>
 8005cfc:	4630      	mov	r0, r6
 8005cfe:	f7ff ffbd 	bl	8005c7c <__sinit>
 8005d02:	3648      	adds	r6, #72	; 0x48
 8005d04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	d503      	bpl.n	8005d14 <__sfp+0x28>
 8005d0c:	6833      	ldr	r3, [r6, #0]
 8005d0e:	b30b      	cbz	r3, 8005d54 <__sfp+0x68>
 8005d10:	6836      	ldr	r6, [r6, #0]
 8005d12:	e7f7      	b.n	8005d04 <__sfp+0x18>
 8005d14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d18:	b9d5      	cbnz	r5, 8005d50 <__sfp+0x64>
 8005d1a:	4b16      	ldr	r3, [pc, #88]	; (8005d74 <__sfp+0x88>)
 8005d1c:	60e3      	str	r3, [r4, #12]
 8005d1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d22:	6665      	str	r5, [r4, #100]	; 0x64
 8005d24:	f000 f84c 	bl	8005dc0 <__retarget_lock_init_recursive>
 8005d28:	f7ff ff96 	bl	8005c58 <__sfp_lock_release>
 8005d2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005d30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005d34:	6025      	str	r5, [r4, #0]
 8005d36:	61a5      	str	r5, [r4, #24]
 8005d38:	2208      	movs	r2, #8
 8005d3a:	4629      	mov	r1, r5
 8005d3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d40:	f7fe fab0 	bl	80042a4 <memset>
 8005d44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d50:	3468      	adds	r4, #104	; 0x68
 8005d52:	e7d9      	b.n	8005d08 <__sfp+0x1c>
 8005d54:	2104      	movs	r1, #4
 8005d56:	4638      	mov	r0, r7
 8005d58:	f7ff ff62 	bl	8005c20 <__sfmoreglue>
 8005d5c:	4604      	mov	r4, r0
 8005d5e:	6030      	str	r0, [r6, #0]
 8005d60:	2800      	cmp	r0, #0
 8005d62:	d1d5      	bne.n	8005d10 <__sfp+0x24>
 8005d64:	f7ff ff78 	bl	8005c58 <__sfp_lock_release>
 8005d68:	230c      	movs	r3, #12
 8005d6a:	603b      	str	r3, [r7, #0]
 8005d6c:	e7ee      	b.n	8005d4c <__sfp+0x60>
 8005d6e:	bf00      	nop
 8005d70:	08006e90 	.word	0x08006e90
 8005d74:	ffff0001 	.word	0xffff0001

08005d78 <_fwalk_reent>:
 8005d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d7c:	4606      	mov	r6, r0
 8005d7e:	4688      	mov	r8, r1
 8005d80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d84:	2700      	movs	r7, #0
 8005d86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d8a:	f1b9 0901 	subs.w	r9, r9, #1
 8005d8e:	d505      	bpl.n	8005d9c <_fwalk_reent+0x24>
 8005d90:	6824      	ldr	r4, [r4, #0]
 8005d92:	2c00      	cmp	r4, #0
 8005d94:	d1f7      	bne.n	8005d86 <_fwalk_reent+0xe>
 8005d96:	4638      	mov	r0, r7
 8005d98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d9c:	89ab      	ldrh	r3, [r5, #12]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d907      	bls.n	8005db2 <_fwalk_reent+0x3a>
 8005da2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005da6:	3301      	adds	r3, #1
 8005da8:	d003      	beq.n	8005db2 <_fwalk_reent+0x3a>
 8005daa:	4629      	mov	r1, r5
 8005dac:	4630      	mov	r0, r6
 8005dae:	47c0      	blx	r8
 8005db0:	4307      	orrs	r7, r0
 8005db2:	3568      	adds	r5, #104	; 0x68
 8005db4:	e7e9      	b.n	8005d8a <_fwalk_reent+0x12>
	...

08005db8 <_localeconv_r>:
 8005db8:	4800      	ldr	r0, [pc, #0]	; (8005dbc <_localeconv_r+0x4>)
 8005dba:	4770      	bx	lr
 8005dbc:	20000158 	.word	0x20000158

08005dc0 <__retarget_lock_init_recursive>:
 8005dc0:	4770      	bx	lr

08005dc2 <__retarget_lock_acquire_recursive>:
 8005dc2:	4770      	bx	lr

08005dc4 <__retarget_lock_release_recursive>:
 8005dc4:	4770      	bx	lr

08005dc6 <__swhatbuf_r>:
 8005dc6:	b570      	push	{r4, r5, r6, lr}
 8005dc8:	460e      	mov	r6, r1
 8005dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dce:	2900      	cmp	r1, #0
 8005dd0:	b096      	sub	sp, #88	; 0x58
 8005dd2:	4614      	mov	r4, r2
 8005dd4:	461d      	mov	r5, r3
 8005dd6:	da07      	bge.n	8005de8 <__swhatbuf_r+0x22>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	602b      	str	r3, [r5, #0]
 8005ddc:	89b3      	ldrh	r3, [r6, #12]
 8005dde:	061a      	lsls	r2, r3, #24
 8005de0:	d410      	bmi.n	8005e04 <__swhatbuf_r+0x3e>
 8005de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005de6:	e00e      	b.n	8005e06 <__swhatbuf_r+0x40>
 8005de8:	466a      	mov	r2, sp
 8005dea:	f000 ff5f 	bl	8006cac <_fstat_r>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	dbf2      	blt.n	8005dd8 <__swhatbuf_r+0x12>
 8005df2:	9a01      	ldr	r2, [sp, #4]
 8005df4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005df8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005dfc:	425a      	negs	r2, r3
 8005dfe:	415a      	adcs	r2, r3
 8005e00:	602a      	str	r2, [r5, #0]
 8005e02:	e7ee      	b.n	8005de2 <__swhatbuf_r+0x1c>
 8005e04:	2340      	movs	r3, #64	; 0x40
 8005e06:	2000      	movs	r0, #0
 8005e08:	6023      	str	r3, [r4, #0]
 8005e0a:	b016      	add	sp, #88	; 0x58
 8005e0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005e10 <__smakebuf_r>:
 8005e10:	898b      	ldrh	r3, [r1, #12]
 8005e12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e14:	079d      	lsls	r5, r3, #30
 8005e16:	4606      	mov	r6, r0
 8005e18:	460c      	mov	r4, r1
 8005e1a:	d507      	bpl.n	8005e2c <__smakebuf_r+0x1c>
 8005e1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e20:	6023      	str	r3, [r4, #0]
 8005e22:	6123      	str	r3, [r4, #16]
 8005e24:	2301      	movs	r3, #1
 8005e26:	6163      	str	r3, [r4, #20]
 8005e28:	b002      	add	sp, #8
 8005e2a:	bd70      	pop	{r4, r5, r6, pc}
 8005e2c:	ab01      	add	r3, sp, #4
 8005e2e:	466a      	mov	r2, sp
 8005e30:	f7ff ffc9 	bl	8005dc6 <__swhatbuf_r>
 8005e34:	9900      	ldr	r1, [sp, #0]
 8005e36:	4605      	mov	r5, r0
 8005e38:	4630      	mov	r0, r6
 8005e3a:	f000 fc1d 	bl	8006678 <_malloc_r>
 8005e3e:	b948      	cbnz	r0, 8005e54 <__smakebuf_r+0x44>
 8005e40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e44:	059a      	lsls	r2, r3, #22
 8005e46:	d4ef      	bmi.n	8005e28 <__smakebuf_r+0x18>
 8005e48:	f023 0303 	bic.w	r3, r3, #3
 8005e4c:	f043 0302 	orr.w	r3, r3, #2
 8005e50:	81a3      	strh	r3, [r4, #12]
 8005e52:	e7e3      	b.n	8005e1c <__smakebuf_r+0xc>
 8005e54:	4b0d      	ldr	r3, [pc, #52]	; (8005e8c <__smakebuf_r+0x7c>)
 8005e56:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e58:	89a3      	ldrh	r3, [r4, #12]
 8005e5a:	6020      	str	r0, [r4, #0]
 8005e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e60:	81a3      	strh	r3, [r4, #12]
 8005e62:	9b00      	ldr	r3, [sp, #0]
 8005e64:	6163      	str	r3, [r4, #20]
 8005e66:	9b01      	ldr	r3, [sp, #4]
 8005e68:	6120      	str	r0, [r4, #16]
 8005e6a:	b15b      	cbz	r3, 8005e84 <__smakebuf_r+0x74>
 8005e6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e70:	4630      	mov	r0, r6
 8005e72:	f000 ff2d 	bl	8006cd0 <_isatty_r>
 8005e76:	b128      	cbz	r0, 8005e84 <__smakebuf_r+0x74>
 8005e78:	89a3      	ldrh	r3, [r4, #12]
 8005e7a:	f023 0303 	bic.w	r3, r3, #3
 8005e7e:	f043 0301 	orr.w	r3, r3, #1
 8005e82:	81a3      	strh	r3, [r4, #12]
 8005e84:	89a0      	ldrh	r0, [r4, #12]
 8005e86:	4305      	orrs	r5, r0
 8005e88:	81a5      	strh	r5, [r4, #12]
 8005e8a:	e7cd      	b.n	8005e28 <__smakebuf_r+0x18>
 8005e8c:	08005c15 	.word	0x08005c15

08005e90 <malloc>:
 8005e90:	4b02      	ldr	r3, [pc, #8]	; (8005e9c <malloc+0xc>)
 8005e92:	4601      	mov	r1, r0
 8005e94:	6818      	ldr	r0, [r3, #0]
 8005e96:	f000 bbef 	b.w	8006678 <_malloc_r>
 8005e9a:	bf00      	nop
 8005e9c:	20000004 	.word	0x20000004

08005ea0 <memcpy>:
 8005ea0:	440a      	add	r2, r1
 8005ea2:	4291      	cmp	r1, r2
 8005ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ea8:	d100      	bne.n	8005eac <memcpy+0xc>
 8005eaa:	4770      	bx	lr
 8005eac:	b510      	push	{r4, lr}
 8005eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eb6:	4291      	cmp	r1, r2
 8005eb8:	d1f9      	bne.n	8005eae <memcpy+0xe>
 8005eba:	bd10      	pop	{r4, pc}

08005ebc <_Balloc>:
 8005ebc:	b570      	push	{r4, r5, r6, lr}
 8005ebe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005ec0:	4604      	mov	r4, r0
 8005ec2:	460d      	mov	r5, r1
 8005ec4:	b976      	cbnz	r6, 8005ee4 <_Balloc+0x28>
 8005ec6:	2010      	movs	r0, #16
 8005ec8:	f7ff ffe2 	bl	8005e90 <malloc>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	6260      	str	r0, [r4, #36]	; 0x24
 8005ed0:	b920      	cbnz	r0, 8005edc <_Balloc+0x20>
 8005ed2:	4b18      	ldr	r3, [pc, #96]	; (8005f34 <_Balloc+0x78>)
 8005ed4:	4818      	ldr	r0, [pc, #96]	; (8005f38 <_Balloc+0x7c>)
 8005ed6:	2166      	movs	r1, #102	; 0x66
 8005ed8:	f000 fea8 	bl	8006c2c <__assert_func>
 8005edc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ee0:	6006      	str	r6, [r0, #0]
 8005ee2:	60c6      	str	r6, [r0, #12]
 8005ee4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005ee6:	68f3      	ldr	r3, [r6, #12]
 8005ee8:	b183      	cbz	r3, 8005f0c <_Balloc+0x50>
 8005eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ef2:	b9b8      	cbnz	r0, 8005f24 <_Balloc+0x68>
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	fa01 f605 	lsl.w	r6, r1, r5
 8005efa:	1d72      	adds	r2, r6, #5
 8005efc:	0092      	lsls	r2, r2, #2
 8005efe:	4620      	mov	r0, r4
 8005f00:	f000 fb5a 	bl	80065b8 <_calloc_r>
 8005f04:	b160      	cbz	r0, 8005f20 <_Balloc+0x64>
 8005f06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f0a:	e00e      	b.n	8005f2a <_Balloc+0x6e>
 8005f0c:	2221      	movs	r2, #33	; 0x21
 8005f0e:	2104      	movs	r1, #4
 8005f10:	4620      	mov	r0, r4
 8005f12:	f000 fb51 	bl	80065b8 <_calloc_r>
 8005f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f18:	60f0      	str	r0, [r6, #12]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1e4      	bne.n	8005eea <_Balloc+0x2e>
 8005f20:	2000      	movs	r0, #0
 8005f22:	bd70      	pop	{r4, r5, r6, pc}
 8005f24:	6802      	ldr	r2, [r0, #0]
 8005f26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f30:	e7f7      	b.n	8005f22 <_Balloc+0x66>
 8005f32:	bf00      	nop
 8005f34:	08006ed5 	.word	0x08006ed5
 8005f38:	08006fbc 	.word	0x08006fbc

08005f3c <_Bfree>:
 8005f3c:	b570      	push	{r4, r5, r6, lr}
 8005f3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f40:	4605      	mov	r5, r0
 8005f42:	460c      	mov	r4, r1
 8005f44:	b976      	cbnz	r6, 8005f64 <_Bfree+0x28>
 8005f46:	2010      	movs	r0, #16
 8005f48:	f7ff ffa2 	bl	8005e90 <malloc>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	6268      	str	r0, [r5, #36]	; 0x24
 8005f50:	b920      	cbnz	r0, 8005f5c <_Bfree+0x20>
 8005f52:	4b09      	ldr	r3, [pc, #36]	; (8005f78 <_Bfree+0x3c>)
 8005f54:	4809      	ldr	r0, [pc, #36]	; (8005f7c <_Bfree+0x40>)
 8005f56:	218a      	movs	r1, #138	; 0x8a
 8005f58:	f000 fe68 	bl	8006c2c <__assert_func>
 8005f5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f60:	6006      	str	r6, [r0, #0]
 8005f62:	60c6      	str	r6, [r0, #12]
 8005f64:	b13c      	cbz	r4, 8005f76 <_Bfree+0x3a>
 8005f66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f68:	6862      	ldr	r2, [r4, #4]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f70:	6021      	str	r1, [r4, #0]
 8005f72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f76:	bd70      	pop	{r4, r5, r6, pc}
 8005f78:	08006ed5 	.word	0x08006ed5
 8005f7c:	08006fbc 	.word	0x08006fbc

08005f80 <__multadd>:
 8005f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f84:	690e      	ldr	r6, [r1, #16]
 8005f86:	4607      	mov	r7, r0
 8005f88:	4698      	mov	r8, r3
 8005f8a:	460c      	mov	r4, r1
 8005f8c:	f101 0014 	add.w	r0, r1, #20
 8005f90:	2300      	movs	r3, #0
 8005f92:	6805      	ldr	r5, [r0, #0]
 8005f94:	b2a9      	uxth	r1, r5
 8005f96:	fb02 8101 	mla	r1, r2, r1, r8
 8005f9a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005f9e:	0c2d      	lsrs	r5, r5, #16
 8005fa0:	fb02 c505 	mla	r5, r2, r5, ip
 8005fa4:	b289      	uxth	r1, r1
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005fac:	429e      	cmp	r6, r3
 8005fae:	f840 1b04 	str.w	r1, [r0], #4
 8005fb2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005fb6:	dcec      	bgt.n	8005f92 <__multadd+0x12>
 8005fb8:	f1b8 0f00 	cmp.w	r8, #0
 8005fbc:	d022      	beq.n	8006004 <__multadd+0x84>
 8005fbe:	68a3      	ldr	r3, [r4, #8]
 8005fc0:	42b3      	cmp	r3, r6
 8005fc2:	dc19      	bgt.n	8005ff8 <__multadd+0x78>
 8005fc4:	6861      	ldr	r1, [r4, #4]
 8005fc6:	4638      	mov	r0, r7
 8005fc8:	3101      	adds	r1, #1
 8005fca:	f7ff ff77 	bl	8005ebc <_Balloc>
 8005fce:	4605      	mov	r5, r0
 8005fd0:	b928      	cbnz	r0, 8005fde <__multadd+0x5e>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	4b0d      	ldr	r3, [pc, #52]	; (800600c <__multadd+0x8c>)
 8005fd6:	480e      	ldr	r0, [pc, #56]	; (8006010 <__multadd+0x90>)
 8005fd8:	21b5      	movs	r1, #181	; 0xb5
 8005fda:	f000 fe27 	bl	8006c2c <__assert_func>
 8005fde:	6922      	ldr	r2, [r4, #16]
 8005fe0:	3202      	adds	r2, #2
 8005fe2:	f104 010c 	add.w	r1, r4, #12
 8005fe6:	0092      	lsls	r2, r2, #2
 8005fe8:	300c      	adds	r0, #12
 8005fea:	f7ff ff59 	bl	8005ea0 <memcpy>
 8005fee:	4621      	mov	r1, r4
 8005ff0:	4638      	mov	r0, r7
 8005ff2:	f7ff ffa3 	bl	8005f3c <_Bfree>
 8005ff6:	462c      	mov	r4, r5
 8005ff8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005ffc:	3601      	adds	r6, #1
 8005ffe:	f8c3 8014 	str.w	r8, [r3, #20]
 8006002:	6126      	str	r6, [r4, #16]
 8006004:	4620      	mov	r0, r4
 8006006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800600a:	bf00      	nop
 800600c:	08006f4b 	.word	0x08006f4b
 8006010:	08006fbc 	.word	0x08006fbc

08006014 <__hi0bits>:
 8006014:	0c03      	lsrs	r3, r0, #16
 8006016:	041b      	lsls	r3, r3, #16
 8006018:	b9d3      	cbnz	r3, 8006050 <__hi0bits+0x3c>
 800601a:	0400      	lsls	r0, r0, #16
 800601c:	2310      	movs	r3, #16
 800601e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006022:	bf04      	itt	eq
 8006024:	0200      	lsleq	r0, r0, #8
 8006026:	3308      	addeq	r3, #8
 8006028:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800602c:	bf04      	itt	eq
 800602e:	0100      	lsleq	r0, r0, #4
 8006030:	3304      	addeq	r3, #4
 8006032:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006036:	bf04      	itt	eq
 8006038:	0080      	lsleq	r0, r0, #2
 800603a:	3302      	addeq	r3, #2
 800603c:	2800      	cmp	r0, #0
 800603e:	db05      	blt.n	800604c <__hi0bits+0x38>
 8006040:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006044:	f103 0301 	add.w	r3, r3, #1
 8006048:	bf08      	it	eq
 800604a:	2320      	moveq	r3, #32
 800604c:	4618      	mov	r0, r3
 800604e:	4770      	bx	lr
 8006050:	2300      	movs	r3, #0
 8006052:	e7e4      	b.n	800601e <__hi0bits+0xa>

08006054 <__lo0bits>:
 8006054:	6803      	ldr	r3, [r0, #0]
 8006056:	f013 0207 	ands.w	r2, r3, #7
 800605a:	4601      	mov	r1, r0
 800605c:	d00b      	beq.n	8006076 <__lo0bits+0x22>
 800605e:	07da      	lsls	r2, r3, #31
 8006060:	d424      	bmi.n	80060ac <__lo0bits+0x58>
 8006062:	0798      	lsls	r0, r3, #30
 8006064:	bf49      	itett	mi
 8006066:	085b      	lsrmi	r3, r3, #1
 8006068:	089b      	lsrpl	r3, r3, #2
 800606a:	2001      	movmi	r0, #1
 800606c:	600b      	strmi	r3, [r1, #0]
 800606e:	bf5c      	itt	pl
 8006070:	600b      	strpl	r3, [r1, #0]
 8006072:	2002      	movpl	r0, #2
 8006074:	4770      	bx	lr
 8006076:	b298      	uxth	r0, r3
 8006078:	b9b0      	cbnz	r0, 80060a8 <__lo0bits+0x54>
 800607a:	0c1b      	lsrs	r3, r3, #16
 800607c:	2010      	movs	r0, #16
 800607e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006082:	bf04      	itt	eq
 8006084:	0a1b      	lsreq	r3, r3, #8
 8006086:	3008      	addeq	r0, #8
 8006088:	071a      	lsls	r2, r3, #28
 800608a:	bf04      	itt	eq
 800608c:	091b      	lsreq	r3, r3, #4
 800608e:	3004      	addeq	r0, #4
 8006090:	079a      	lsls	r2, r3, #30
 8006092:	bf04      	itt	eq
 8006094:	089b      	lsreq	r3, r3, #2
 8006096:	3002      	addeq	r0, #2
 8006098:	07da      	lsls	r2, r3, #31
 800609a:	d403      	bmi.n	80060a4 <__lo0bits+0x50>
 800609c:	085b      	lsrs	r3, r3, #1
 800609e:	f100 0001 	add.w	r0, r0, #1
 80060a2:	d005      	beq.n	80060b0 <__lo0bits+0x5c>
 80060a4:	600b      	str	r3, [r1, #0]
 80060a6:	4770      	bx	lr
 80060a8:	4610      	mov	r0, r2
 80060aa:	e7e8      	b.n	800607e <__lo0bits+0x2a>
 80060ac:	2000      	movs	r0, #0
 80060ae:	4770      	bx	lr
 80060b0:	2020      	movs	r0, #32
 80060b2:	4770      	bx	lr

080060b4 <__i2b>:
 80060b4:	b510      	push	{r4, lr}
 80060b6:	460c      	mov	r4, r1
 80060b8:	2101      	movs	r1, #1
 80060ba:	f7ff feff 	bl	8005ebc <_Balloc>
 80060be:	4602      	mov	r2, r0
 80060c0:	b928      	cbnz	r0, 80060ce <__i2b+0x1a>
 80060c2:	4b05      	ldr	r3, [pc, #20]	; (80060d8 <__i2b+0x24>)
 80060c4:	4805      	ldr	r0, [pc, #20]	; (80060dc <__i2b+0x28>)
 80060c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80060ca:	f000 fdaf 	bl	8006c2c <__assert_func>
 80060ce:	2301      	movs	r3, #1
 80060d0:	6144      	str	r4, [r0, #20]
 80060d2:	6103      	str	r3, [r0, #16]
 80060d4:	bd10      	pop	{r4, pc}
 80060d6:	bf00      	nop
 80060d8:	08006f4b 	.word	0x08006f4b
 80060dc:	08006fbc 	.word	0x08006fbc

080060e0 <__multiply>:
 80060e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e4:	4614      	mov	r4, r2
 80060e6:	690a      	ldr	r2, [r1, #16]
 80060e8:	6923      	ldr	r3, [r4, #16]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	bfb8      	it	lt
 80060ee:	460b      	movlt	r3, r1
 80060f0:	460d      	mov	r5, r1
 80060f2:	bfbc      	itt	lt
 80060f4:	4625      	movlt	r5, r4
 80060f6:	461c      	movlt	r4, r3
 80060f8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80060fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006100:	68ab      	ldr	r3, [r5, #8]
 8006102:	6869      	ldr	r1, [r5, #4]
 8006104:	eb0a 0709 	add.w	r7, sl, r9
 8006108:	42bb      	cmp	r3, r7
 800610a:	b085      	sub	sp, #20
 800610c:	bfb8      	it	lt
 800610e:	3101      	addlt	r1, #1
 8006110:	f7ff fed4 	bl	8005ebc <_Balloc>
 8006114:	b930      	cbnz	r0, 8006124 <__multiply+0x44>
 8006116:	4602      	mov	r2, r0
 8006118:	4b42      	ldr	r3, [pc, #264]	; (8006224 <__multiply+0x144>)
 800611a:	4843      	ldr	r0, [pc, #268]	; (8006228 <__multiply+0x148>)
 800611c:	f240 115d 	movw	r1, #349	; 0x15d
 8006120:	f000 fd84 	bl	8006c2c <__assert_func>
 8006124:	f100 0614 	add.w	r6, r0, #20
 8006128:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800612c:	4633      	mov	r3, r6
 800612e:	2200      	movs	r2, #0
 8006130:	4543      	cmp	r3, r8
 8006132:	d31e      	bcc.n	8006172 <__multiply+0x92>
 8006134:	f105 0c14 	add.w	ip, r5, #20
 8006138:	f104 0314 	add.w	r3, r4, #20
 800613c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006140:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006144:	9202      	str	r2, [sp, #8]
 8006146:	ebac 0205 	sub.w	r2, ip, r5
 800614a:	3a15      	subs	r2, #21
 800614c:	f022 0203 	bic.w	r2, r2, #3
 8006150:	3204      	adds	r2, #4
 8006152:	f105 0115 	add.w	r1, r5, #21
 8006156:	458c      	cmp	ip, r1
 8006158:	bf38      	it	cc
 800615a:	2204      	movcc	r2, #4
 800615c:	9201      	str	r2, [sp, #4]
 800615e:	9a02      	ldr	r2, [sp, #8]
 8006160:	9303      	str	r3, [sp, #12]
 8006162:	429a      	cmp	r2, r3
 8006164:	d808      	bhi.n	8006178 <__multiply+0x98>
 8006166:	2f00      	cmp	r7, #0
 8006168:	dc55      	bgt.n	8006216 <__multiply+0x136>
 800616a:	6107      	str	r7, [r0, #16]
 800616c:	b005      	add	sp, #20
 800616e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006172:	f843 2b04 	str.w	r2, [r3], #4
 8006176:	e7db      	b.n	8006130 <__multiply+0x50>
 8006178:	f8b3 a000 	ldrh.w	sl, [r3]
 800617c:	f1ba 0f00 	cmp.w	sl, #0
 8006180:	d020      	beq.n	80061c4 <__multiply+0xe4>
 8006182:	f105 0e14 	add.w	lr, r5, #20
 8006186:	46b1      	mov	r9, r6
 8006188:	2200      	movs	r2, #0
 800618a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800618e:	f8d9 b000 	ldr.w	fp, [r9]
 8006192:	b2a1      	uxth	r1, r4
 8006194:	fa1f fb8b 	uxth.w	fp, fp
 8006198:	fb0a b101 	mla	r1, sl, r1, fp
 800619c:	4411      	add	r1, r2
 800619e:	f8d9 2000 	ldr.w	r2, [r9]
 80061a2:	0c24      	lsrs	r4, r4, #16
 80061a4:	0c12      	lsrs	r2, r2, #16
 80061a6:	fb0a 2404 	mla	r4, sl, r4, r2
 80061aa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80061ae:	b289      	uxth	r1, r1
 80061b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80061b4:	45f4      	cmp	ip, lr
 80061b6:	f849 1b04 	str.w	r1, [r9], #4
 80061ba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80061be:	d8e4      	bhi.n	800618a <__multiply+0xaa>
 80061c0:	9901      	ldr	r1, [sp, #4]
 80061c2:	5072      	str	r2, [r6, r1]
 80061c4:	9a03      	ldr	r2, [sp, #12]
 80061c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80061ca:	3304      	adds	r3, #4
 80061cc:	f1b9 0f00 	cmp.w	r9, #0
 80061d0:	d01f      	beq.n	8006212 <__multiply+0x132>
 80061d2:	6834      	ldr	r4, [r6, #0]
 80061d4:	f105 0114 	add.w	r1, r5, #20
 80061d8:	46b6      	mov	lr, r6
 80061da:	f04f 0a00 	mov.w	sl, #0
 80061de:	880a      	ldrh	r2, [r1, #0]
 80061e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80061e4:	fb09 b202 	mla	r2, r9, r2, fp
 80061e8:	4492      	add	sl, r2
 80061ea:	b2a4      	uxth	r4, r4
 80061ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80061f0:	f84e 4b04 	str.w	r4, [lr], #4
 80061f4:	f851 4b04 	ldr.w	r4, [r1], #4
 80061f8:	f8be 2000 	ldrh.w	r2, [lr]
 80061fc:	0c24      	lsrs	r4, r4, #16
 80061fe:	fb09 2404 	mla	r4, r9, r4, r2
 8006202:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006206:	458c      	cmp	ip, r1
 8006208:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800620c:	d8e7      	bhi.n	80061de <__multiply+0xfe>
 800620e:	9a01      	ldr	r2, [sp, #4]
 8006210:	50b4      	str	r4, [r6, r2]
 8006212:	3604      	adds	r6, #4
 8006214:	e7a3      	b.n	800615e <__multiply+0x7e>
 8006216:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1a5      	bne.n	800616a <__multiply+0x8a>
 800621e:	3f01      	subs	r7, #1
 8006220:	e7a1      	b.n	8006166 <__multiply+0x86>
 8006222:	bf00      	nop
 8006224:	08006f4b 	.word	0x08006f4b
 8006228:	08006fbc 	.word	0x08006fbc

0800622c <__pow5mult>:
 800622c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006230:	4615      	mov	r5, r2
 8006232:	f012 0203 	ands.w	r2, r2, #3
 8006236:	4606      	mov	r6, r0
 8006238:	460f      	mov	r7, r1
 800623a:	d007      	beq.n	800624c <__pow5mult+0x20>
 800623c:	4c25      	ldr	r4, [pc, #148]	; (80062d4 <__pow5mult+0xa8>)
 800623e:	3a01      	subs	r2, #1
 8006240:	2300      	movs	r3, #0
 8006242:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006246:	f7ff fe9b 	bl	8005f80 <__multadd>
 800624a:	4607      	mov	r7, r0
 800624c:	10ad      	asrs	r5, r5, #2
 800624e:	d03d      	beq.n	80062cc <__pow5mult+0xa0>
 8006250:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006252:	b97c      	cbnz	r4, 8006274 <__pow5mult+0x48>
 8006254:	2010      	movs	r0, #16
 8006256:	f7ff fe1b 	bl	8005e90 <malloc>
 800625a:	4602      	mov	r2, r0
 800625c:	6270      	str	r0, [r6, #36]	; 0x24
 800625e:	b928      	cbnz	r0, 800626c <__pow5mult+0x40>
 8006260:	4b1d      	ldr	r3, [pc, #116]	; (80062d8 <__pow5mult+0xac>)
 8006262:	481e      	ldr	r0, [pc, #120]	; (80062dc <__pow5mult+0xb0>)
 8006264:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006268:	f000 fce0 	bl	8006c2c <__assert_func>
 800626c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006270:	6004      	str	r4, [r0, #0]
 8006272:	60c4      	str	r4, [r0, #12]
 8006274:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006278:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800627c:	b94c      	cbnz	r4, 8006292 <__pow5mult+0x66>
 800627e:	f240 2171 	movw	r1, #625	; 0x271
 8006282:	4630      	mov	r0, r6
 8006284:	f7ff ff16 	bl	80060b4 <__i2b>
 8006288:	2300      	movs	r3, #0
 800628a:	f8c8 0008 	str.w	r0, [r8, #8]
 800628e:	4604      	mov	r4, r0
 8006290:	6003      	str	r3, [r0, #0]
 8006292:	f04f 0900 	mov.w	r9, #0
 8006296:	07eb      	lsls	r3, r5, #31
 8006298:	d50a      	bpl.n	80062b0 <__pow5mult+0x84>
 800629a:	4639      	mov	r1, r7
 800629c:	4622      	mov	r2, r4
 800629e:	4630      	mov	r0, r6
 80062a0:	f7ff ff1e 	bl	80060e0 <__multiply>
 80062a4:	4639      	mov	r1, r7
 80062a6:	4680      	mov	r8, r0
 80062a8:	4630      	mov	r0, r6
 80062aa:	f7ff fe47 	bl	8005f3c <_Bfree>
 80062ae:	4647      	mov	r7, r8
 80062b0:	106d      	asrs	r5, r5, #1
 80062b2:	d00b      	beq.n	80062cc <__pow5mult+0xa0>
 80062b4:	6820      	ldr	r0, [r4, #0]
 80062b6:	b938      	cbnz	r0, 80062c8 <__pow5mult+0x9c>
 80062b8:	4622      	mov	r2, r4
 80062ba:	4621      	mov	r1, r4
 80062bc:	4630      	mov	r0, r6
 80062be:	f7ff ff0f 	bl	80060e0 <__multiply>
 80062c2:	6020      	str	r0, [r4, #0]
 80062c4:	f8c0 9000 	str.w	r9, [r0]
 80062c8:	4604      	mov	r4, r0
 80062ca:	e7e4      	b.n	8006296 <__pow5mult+0x6a>
 80062cc:	4638      	mov	r0, r7
 80062ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062d2:	bf00      	nop
 80062d4:	08007110 	.word	0x08007110
 80062d8:	08006ed5 	.word	0x08006ed5
 80062dc:	08006fbc 	.word	0x08006fbc

080062e0 <__lshift>:
 80062e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062e4:	460c      	mov	r4, r1
 80062e6:	6849      	ldr	r1, [r1, #4]
 80062e8:	6923      	ldr	r3, [r4, #16]
 80062ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80062ee:	68a3      	ldr	r3, [r4, #8]
 80062f0:	4607      	mov	r7, r0
 80062f2:	4691      	mov	r9, r2
 80062f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80062f8:	f108 0601 	add.w	r6, r8, #1
 80062fc:	42b3      	cmp	r3, r6
 80062fe:	db0b      	blt.n	8006318 <__lshift+0x38>
 8006300:	4638      	mov	r0, r7
 8006302:	f7ff fddb 	bl	8005ebc <_Balloc>
 8006306:	4605      	mov	r5, r0
 8006308:	b948      	cbnz	r0, 800631e <__lshift+0x3e>
 800630a:	4602      	mov	r2, r0
 800630c:	4b28      	ldr	r3, [pc, #160]	; (80063b0 <__lshift+0xd0>)
 800630e:	4829      	ldr	r0, [pc, #164]	; (80063b4 <__lshift+0xd4>)
 8006310:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006314:	f000 fc8a 	bl	8006c2c <__assert_func>
 8006318:	3101      	adds	r1, #1
 800631a:	005b      	lsls	r3, r3, #1
 800631c:	e7ee      	b.n	80062fc <__lshift+0x1c>
 800631e:	2300      	movs	r3, #0
 8006320:	f100 0114 	add.w	r1, r0, #20
 8006324:	f100 0210 	add.w	r2, r0, #16
 8006328:	4618      	mov	r0, r3
 800632a:	4553      	cmp	r3, sl
 800632c:	db33      	blt.n	8006396 <__lshift+0xb6>
 800632e:	6920      	ldr	r0, [r4, #16]
 8006330:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006334:	f104 0314 	add.w	r3, r4, #20
 8006338:	f019 091f 	ands.w	r9, r9, #31
 800633c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006340:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006344:	d02b      	beq.n	800639e <__lshift+0xbe>
 8006346:	f1c9 0e20 	rsb	lr, r9, #32
 800634a:	468a      	mov	sl, r1
 800634c:	2200      	movs	r2, #0
 800634e:	6818      	ldr	r0, [r3, #0]
 8006350:	fa00 f009 	lsl.w	r0, r0, r9
 8006354:	4302      	orrs	r2, r0
 8006356:	f84a 2b04 	str.w	r2, [sl], #4
 800635a:	f853 2b04 	ldr.w	r2, [r3], #4
 800635e:	459c      	cmp	ip, r3
 8006360:	fa22 f20e 	lsr.w	r2, r2, lr
 8006364:	d8f3      	bhi.n	800634e <__lshift+0x6e>
 8006366:	ebac 0304 	sub.w	r3, ip, r4
 800636a:	3b15      	subs	r3, #21
 800636c:	f023 0303 	bic.w	r3, r3, #3
 8006370:	3304      	adds	r3, #4
 8006372:	f104 0015 	add.w	r0, r4, #21
 8006376:	4584      	cmp	ip, r0
 8006378:	bf38      	it	cc
 800637a:	2304      	movcc	r3, #4
 800637c:	50ca      	str	r2, [r1, r3]
 800637e:	b10a      	cbz	r2, 8006384 <__lshift+0xa4>
 8006380:	f108 0602 	add.w	r6, r8, #2
 8006384:	3e01      	subs	r6, #1
 8006386:	4638      	mov	r0, r7
 8006388:	612e      	str	r6, [r5, #16]
 800638a:	4621      	mov	r1, r4
 800638c:	f7ff fdd6 	bl	8005f3c <_Bfree>
 8006390:	4628      	mov	r0, r5
 8006392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006396:	f842 0f04 	str.w	r0, [r2, #4]!
 800639a:	3301      	adds	r3, #1
 800639c:	e7c5      	b.n	800632a <__lshift+0x4a>
 800639e:	3904      	subs	r1, #4
 80063a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80063a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80063a8:	459c      	cmp	ip, r3
 80063aa:	d8f9      	bhi.n	80063a0 <__lshift+0xc0>
 80063ac:	e7ea      	b.n	8006384 <__lshift+0xa4>
 80063ae:	bf00      	nop
 80063b0:	08006f4b 	.word	0x08006f4b
 80063b4:	08006fbc 	.word	0x08006fbc

080063b8 <__mcmp>:
 80063b8:	b530      	push	{r4, r5, lr}
 80063ba:	6902      	ldr	r2, [r0, #16]
 80063bc:	690c      	ldr	r4, [r1, #16]
 80063be:	1b12      	subs	r2, r2, r4
 80063c0:	d10e      	bne.n	80063e0 <__mcmp+0x28>
 80063c2:	f100 0314 	add.w	r3, r0, #20
 80063c6:	3114      	adds	r1, #20
 80063c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80063cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80063d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80063d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80063d8:	42a5      	cmp	r5, r4
 80063da:	d003      	beq.n	80063e4 <__mcmp+0x2c>
 80063dc:	d305      	bcc.n	80063ea <__mcmp+0x32>
 80063de:	2201      	movs	r2, #1
 80063e0:	4610      	mov	r0, r2
 80063e2:	bd30      	pop	{r4, r5, pc}
 80063e4:	4283      	cmp	r3, r0
 80063e6:	d3f3      	bcc.n	80063d0 <__mcmp+0x18>
 80063e8:	e7fa      	b.n	80063e0 <__mcmp+0x28>
 80063ea:	f04f 32ff 	mov.w	r2, #4294967295
 80063ee:	e7f7      	b.n	80063e0 <__mcmp+0x28>

080063f0 <__mdiff>:
 80063f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f4:	460c      	mov	r4, r1
 80063f6:	4606      	mov	r6, r0
 80063f8:	4611      	mov	r1, r2
 80063fa:	4620      	mov	r0, r4
 80063fc:	4617      	mov	r7, r2
 80063fe:	f7ff ffdb 	bl	80063b8 <__mcmp>
 8006402:	1e05      	subs	r5, r0, #0
 8006404:	d110      	bne.n	8006428 <__mdiff+0x38>
 8006406:	4629      	mov	r1, r5
 8006408:	4630      	mov	r0, r6
 800640a:	f7ff fd57 	bl	8005ebc <_Balloc>
 800640e:	b930      	cbnz	r0, 800641e <__mdiff+0x2e>
 8006410:	4b39      	ldr	r3, [pc, #228]	; (80064f8 <__mdiff+0x108>)
 8006412:	4602      	mov	r2, r0
 8006414:	f240 2132 	movw	r1, #562	; 0x232
 8006418:	4838      	ldr	r0, [pc, #224]	; (80064fc <__mdiff+0x10c>)
 800641a:	f000 fc07 	bl	8006c2c <__assert_func>
 800641e:	2301      	movs	r3, #1
 8006420:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006424:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006428:	bfa4      	itt	ge
 800642a:	463b      	movge	r3, r7
 800642c:	4627      	movge	r7, r4
 800642e:	4630      	mov	r0, r6
 8006430:	6879      	ldr	r1, [r7, #4]
 8006432:	bfa6      	itte	ge
 8006434:	461c      	movge	r4, r3
 8006436:	2500      	movge	r5, #0
 8006438:	2501      	movlt	r5, #1
 800643a:	f7ff fd3f 	bl	8005ebc <_Balloc>
 800643e:	b920      	cbnz	r0, 800644a <__mdiff+0x5a>
 8006440:	4b2d      	ldr	r3, [pc, #180]	; (80064f8 <__mdiff+0x108>)
 8006442:	4602      	mov	r2, r0
 8006444:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006448:	e7e6      	b.n	8006418 <__mdiff+0x28>
 800644a:	693e      	ldr	r6, [r7, #16]
 800644c:	60c5      	str	r5, [r0, #12]
 800644e:	6925      	ldr	r5, [r4, #16]
 8006450:	f107 0114 	add.w	r1, r7, #20
 8006454:	f104 0914 	add.w	r9, r4, #20
 8006458:	f100 0e14 	add.w	lr, r0, #20
 800645c:	f107 0210 	add.w	r2, r7, #16
 8006460:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006464:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006468:	46f2      	mov	sl, lr
 800646a:	2700      	movs	r7, #0
 800646c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006470:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006474:	fa1f f883 	uxth.w	r8, r3
 8006478:	fa17 f78b 	uxtah	r7, r7, fp
 800647c:	0c1b      	lsrs	r3, r3, #16
 800647e:	eba7 0808 	sub.w	r8, r7, r8
 8006482:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006486:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800648a:	fa1f f888 	uxth.w	r8, r8
 800648e:	141f      	asrs	r7, r3, #16
 8006490:	454d      	cmp	r5, r9
 8006492:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006496:	f84a 3b04 	str.w	r3, [sl], #4
 800649a:	d8e7      	bhi.n	800646c <__mdiff+0x7c>
 800649c:	1b2b      	subs	r3, r5, r4
 800649e:	3b15      	subs	r3, #21
 80064a0:	f023 0303 	bic.w	r3, r3, #3
 80064a4:	3304      	adds	r3, #4
 80064a6:	3415      	adds	r4, #21
 80064a8:	42a5      	cmp	r5, r4
 80064aa:	bf38      	it	cc
 80064ac:	2304      	movcc	r3, #4
 80064ae:	4419      	add	r1, r3
 80064b0:	4473      	add	r3, lr
 80064b2:	469e      	mov	lr, r3
 80064b4:	460d      	mov	r5, r1
 80064b6:	4565      	cmp	r5, ip
 80064b8:	d30e      	bcc.n	80064d8 <__mdiff+0xe8>
 80064ba:	f10c 0203 	add.w	r2, ip, #3
 80064be:	1a52      	subs	r2, r2, r1
 80064c0:	f022 0203 	bic.w	r2, r2, #3
 80064c4:	3903      	subs	r1, #3
 80064c6:	458c      	cmp	ip, r1
 80064c8:	bf38      	it	cc
 80064ca:	2200      	movcc	r2, #0
 80064cc:	441a      	add	r2, r3
 80064ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80064d2:	b17b      	cbz	r3, 80064f4 <__mdiff+0x104>
 80064d4:	6106      	str	r6, [r0, #16]
 80064d6:	e7a5      	b.n	8006424 <__mdiff+0x34>
 80064d8:	f855 8b04 	ldr.w	r8, [r5], #4
 80064dc:	fa17 f488 	uxtah	r4, r7, r8
 80064e0:	1422      	asrs	r2, r4, #16
 80064e2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80064e6:	b2a4      	uxth	r4, r4
 80064e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80064ec:	f84e 4b04 	str.w	r4, [lr], #4
 80064f0:	1417      	asrs	r7, r2, #16
 80064f2:	e7e0      	b.n	80064b6 <__mdiff+0xc6>
 80064f4:	3e01      	subs	r6, #1
 80064f6:	e7ea      	b.n	80064ce <__mdiff+0xde>
 80064f8:	08006f4b 	.word	0x08006f4b
 80064fc:	08006fbc 	.word	0x08006fbc

08006500 <__d2b>:
 8006500:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006504:	4689      	mov	r9, r1
 8006506:	2101      	movs	r1, #1
 8006508:	ec57 6b10 	vmov	r6, r7, d0
 800650c:	4690      	mov	r8, r2
 800650e:	f7ff fcd5 	bl	8005ebc <_Balloc>
 8006512:	4604      	mov	r4, r0
 8006514:	b930      	cbnz	r0, 8006524 <__d2b+0x24>
 8006516:	4602      	mov	r2, r0
 8006518:	4b25      	ldr	r3, [pc, #148]	; (80065b0 <__d2b+0xb0>)
 800651a:	4826      	ldr	r0, [pc, #152]	; (80065b4 <__d2b+0xb4>)
 800651c:	f240 310a 	movw	r1, #778	; 0x30a
 8006520:	f000 fb84 	bl	8006c2c <__assert_func>
 8006524:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006528:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800652c:	bb35      	cbnz	r5, 800657c <__d2b+0x7c>
 800652e:	2e00      	cmp	r6, #0
 8006530:	9301      	str	r3, [sp, #4]
 8006532:	d028      	beq.n	8006586 <__d2b+0x86>
 8006534:	4668      	mov	r0, sp
 8006536:	9600      	str	r6, [sp, #0]
 8006538:	f7ff fd8c 	bl	8006054 <__lo0bits>
 800653c:	9900      	ldr	r1, [sp, #0]
 800653e:	b300      	cbz	r0, 8006582 <__d2b+0x82>
 8006540:	9a01      	ldr	r2, [sp, #4]
 8006542:	f1c0 0320 	rsb	r3, r0, #32
 8006546:	fa02 f303 	lsl.w	r3, r2, r3
 800654a:	430b      	orrs	r3, r1
 800654c:	40c2      	lsrs	r2, r0
 800654e:	6163      	str	r3, [r4, #20]
 8006550:	9201      	str	r2, [sp, #4]
 8006552:	9b01      	ldr	r3, [sp, #4]
 8006554:	61a3      	str	r3, [r4, #24]
 8006556:	2b00      	cmp	r3, #0
 8006558:	bf14      	ite	ne
 800655a:	2202      	movne	r2, #2
 800655c:	2201      	moveq	r2, #1
 800655e:	6122      	str	r2, [r4, #16]
 8006560:	b1d5      	cbz	r5, 8006598 <__d2b+0x98>
 8006562:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006566:	4405      	add	r5, r0
 8006568:	f8c9 5000 	str.w	r5, [r9]
 800656c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006570:	f8c8 0000 	str.w	r0, [r8]
 8006574:	4620      	mov	r0, r4
 8006576:	b003      	add	sp, #12
 8006578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800657c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006580:	e7d5      	b.n	800652e <__d2b+0x2e>
 8006582:	6161      	str	r1, [r4, #20]
 8006584:	e7e5      	b.n	8006552 <__d2b+0x52>
 8006586:	a801      	add	r0, sp, #4
 8006588:	f7ff fd64 	bl	8006054 <__lo0bits>
 800658c:	9b01      	ldr	r3, [sp, #4]
 800658e:	6163      	str	r3, [r4, #20]
 8006590:	2201      	movs	r2, #1
 8006592:	6122      	str	r2, [r4, #16]
 8006594:	3020      	adds	r0, #32
 8006596:	e7e3      	b.n	8006560 <__d2b+0x60>
 8006598:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800659c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80065a0:	f8c9 0000 	str.w	r0, [r9]
 80065a4:	6918      	ldr	r0, [r3, #16]
 80065a6:	f7ff fd35 	bl	8006014 <__hi0bits>
 80065aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80065ae:	e7df      	b.n	8006570 <__d2b+0x70>
 80065b0:	08006f4b 	.word	0x08006f4b
 80065b4:	08006fbc 	.word	0x08006fbc

080065b8 <_calloc_r>:
 80065b8:	b513      	push	{r0, r1, r4, lr}
 80065ba:	434a      	muls	r2, r1
 80065bc:	4611      	mov	r1, r2
 80065be:	9201      	str	r2, [sp, #4]
 80065c0:	f000 f85a 	bl	8006678 <_malloc_r>
 80065c4:	4604      	mov	r4, r0
 80065c6:	b118      	cbz	r0, 80065d0 <_calloc_r+0x18>
 80065c8:	9a01      	ldr	r2, [sp, #4]
 80065ca:	2100      	movs	r1, #0
 80065cc:	f7fd fe6a 	bl	80042a4 <memset>
 80065d0:	4620      	mov	r0, r4
 80065d2:	b002      	add	sp, #8
 80065d4:	bd10      	pop	{r4, pc}
	...

080065d8 <_free_r>:
 80065d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065da:	2900      	cmp	r1, #0
 80065dc:	d048      	beq.n	8006670 <_free_r+0x98>
 80065de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065e2:	9001      	str	r0, [sp, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f1a1 0404 	sub.w	r4, r1, #4
 80065ea:	bfb8      	it	lt
 80065ec:	18e4      	addlt	r4, r4, r3
 80065ee:	f000 fba3 	bl	8006d38 <__malloc_lock>
 80065f2:	4a20      	ldr	r2, [pc, #128]	; (8006674 <_free_r+0x9c>)
 80065f4:	9801      	ldr	r0, [sp, #4]
 80065f6:	6813      	ldr	r3, [r2, #0]
 80065f8:	4615      	mov	r5, r2
 80065fa:	b933      	cbnz	r3, 800660a <_free_r+0x32>
 80065fc:	6063      	str	r3, [r4, #4]
 80065fe:	6014      	str	r4, [r2, #0]
 8006600:	b003      	add	sp, #12
 8006602:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006606:	f000 bb9d 	b.w	8006d44 <__malloc_unlock>
 800660a:	42a3      	cmp	r3, r4
 800660c:	d90b      	bls.n	8006626 <_free_r+0x4e>
 800660e:	6821      	ldr	r1, [r4, #0]
 8006610:	1862      	adds	r2, r4, r1
 8006612:	4293      	cmp	r3, r2
 8006614:	bf04      	itt	eq
 8006616:	681a      	ldreq	r2, [r3, #0]
 8006618:	685b      	ldreq	r3, [r3, #4]
 800661a:	6063      	str	r3, [r4, #4]
 800661c:	bf04      	itt	eq
 800661e:	1852      	addeq	r2, r2, r1
 8006620:	6022      	streq	r2, [r4, #0]
 8006622:	602c      	str	r4, [r5, #0]
 8006624:	e7ec      	b.n	8006600 <_free_r+0x28>
 8006626:	461a      	mov	r2, r3
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	b10b      	cbz	r3, 8006630 <_free_r+0x58>
 800662c:	42a3      	cmp	r3, r4
 800662e:	d9fa      	bls.n	8006626 <_free_r+0x4e>
 8006630:	6811      	ldr	r1, [r2, #0]
 8006632:	1855      	adds	r5, r2, r1
 8006634:	42a5      	cmp	r5, r4
 8006636:	d10b      	bne.n	8006650 <_free_r+0x78>
 8006638:	6824      	ldr	r4, [r4, #0]
 800663a:	4421      	add	r1, r4
 800663c:	1854      	adds	r4, r2, r1
 800663e:	42a3      	cmp	r3, r4
 8006640:	6011      	str	r1, [r2, #0]
 8006642:	d1dd      	bne.n	8006600 <_free_r+0x28>
 8006644:	681c      	ldr	r4, [r3, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	6053      	str	r3, [r2, #4]
 800664a:	4421      	add	r1, r4
 800664c:	6011      	str	r1, [r2, #0]
 800664e:	e7d7      	b.n	8006600 <_free_r+0x28>
 8006650:	d902      	bls.n	8006658 <_free_r+0x80>
 8006652:	230c      	movs	r3, #12
 8006654:	6003      	str	r3, [r0, #0]
 8006656:	e7d3      	b.n	8006600 <_free_r+0x28>
 8006658:	6825      	ldr	r5, [r4, #0]
 800665a:	1961      	adds	r1, r4, r5
 800665c:	428b      	cmp	r3, r1
 800665e:	bf04      	itt	eq
 8006660:	6819      	ldreq	r1, [r3, #0]
 8006662:	685b      	ldreq	r3, [r3, #4]
 8006664:	6063      	str	r3, [r4, #4]
 8006666:	bf04      	itt	eq
 8006668:	1949      	addeq	r1, r1, r5
 800666a:	6021      	streq	r1, [r4, #0]
 800666c:	6054      	str	r4, [r2, #4]
 800666e:	e7c7      	b.n	8006600 <_free_r+0x28>
 8006670:	b003      	add	sp, #12
 8006672:	bd30      	pop	{r4, r5, pc}
 8006674:	200001f8 	.word	0x200001f8

08006678 <_malloc_r>:
 8006678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667a:	1ccd      	adds	r5, r1, #3
 800667c:	f025 0503 	bic.w	r5, r5, #3
 8006680:	3508      	adds	r5, #8
 8006682:	2d0c      	cmp	r5, #12
 8006684:	bf38      	it	cc
 8006686:	250c      	movcc	r5, #12
 8006688:	2d00      	cmp	r5, #0
 800668a:	4606      	mov	r6, r0
 800668c:	db01      	blt.n	8006692 <_malloc_r+0x1a>
 800668e:	42a9      	cmp	r1, r5
 8006690:	d903      	bls.n	800669a <_malloc_r+0x22>
 8006692:	230c      	movs	r3, #12
 8006694:	6033      	str	r3, [r6, #0]
 8006696:	2000      	movs	r0, #0
 8006698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800669a:	f000 fb4d 	bl	8006d38 <__malloc_lock>
 800669e:	4921      	ldr	r1, [pc, #132]	; (8006724 <_malloc_r+0xac>)
 80066a0:	680a      	ldr	r2, [r1, #0]
 80066a2:	4614      	mov	r4, r2
 80066a4:	b99c      	cbnz	r4, 80066ce <_malloc_r+0x56>
 80066a6:	4f20      	ldr	r7, [pc, #128]	; (8006728 <_malloc_r+0xb0>)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	b923      	cbnz	r3, 80066b6 <_malloc_r+0x3e>
 80066ac:	4621      	mov	r1, r4
 80066ae:	4630      	mov	r0, r6
 80066b0:	f000 f996 	bl	80069e0 <_sbrk_r>
 80066b4:	6038      	str	r0, [r7, #0]
 80066b6:	4629      	mov	r1, r5
 80066b8:	4630      	mov	r0, r6
 80066ba:	f000 f991 	bl	80069e0 <_sbrk_r>
 80066be:	1c43      	adds	r3, r0, #1
 80066c0:	d123      	bne.n	800670a <_malloc_r+0x92>
 80066c2:	230c      	movs	r3, #12
 80066c4:	6033      	str	r3, [r6, #0]
 80066c6:	4630      	mov	r0, r6
 80066c8:	f000 fb3c 	bl	8006d44 <__malloc_unlock>
 80066cc:	e7e3      	b.n	8006696 <_malloc_r+0x1e>
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	1b5b      	subs	r3, r3, r5
 80066d2:	d417      	bmi.n	8006704 <_malloc_r+0x8c>
 80066d4:	2b0b      	cmp	r3, #11
 80066d6:	d903      	bls.n	80066e0 <_malloc_r+0x68>
 80066d8:	6023      	str	r3, [r4, #0]
 80066da:	441c      	add	r4, r3
 80066dc:	6025      	str	r5, [r4, #0]
 80066de:	e004      	b.n	80066ea <_malloc_r+0x72>
 80066e0:	6863      	ldr	r3, [r4, #4]
 80066e2:	42a2      	cmp	r2, r4
 80066e4:	bf0c      	ite	eq
 80066e6:	600b      	streq	r3, [r1, #0]
 80066e8:	6053      	strne	r3, [r2, #4]
 80066ea:	4630      	mov	r0, r6
 80066ec:	f000 fb2a 	bl	8006d44 <__malloc_unlock>
 80066f0:	f104 000b 	add.w	r0, r4, #11
 80066f4:	1d23      	adds	r3, r4, #4
 80066f6:	f020 0007 	bic.w	r0, r0, #7
 80066fa:	1ac2      	subs	r2, r0, r3
 80066fc:	d0cc      	beq.n	8006698 <_malloc_r+0x20>
 80066fe:	1a1b      	subs	r3, r3, r0
 8006700:	50a3      	str	r3, [r4, r2]
 8006702:	e7c9      	b.n	8006698 <_malloc_r+0x20>
 8006704:	4622      	mov	r2, r4
 8006706:	6864      	ldr	r4, [r4, #4]
 8006708:	e7cc      	b.n	80066a4 <_malloc_r+0x2c>
 800670a:	1cc4      	adds	r4, r0, #3
 800670c:	f024 0403 	bic.w	r4, r4, #3
 8006710:	42a0      	cmp	r0, r4
 8006712:	d0e3      	beq.n	80066dc <_malloc_r+0x64>
 8006714:	1a21      	subs	r1, r4, r0
 8006716:	4630      	mov	r0, r6
 8006718:	f000 f962 	bl	80069e0 <_sbrk_r>
 800671c:	3001      	adds	r0, #1
 800671e:	d1dd      	bne.n	80066dc <_malloc_r+0x64>
 8006720:	e7cf      	b.n	80066c2 <_malloc_r+0x4a>
 8006722:	bf00      	nop
 8006724:	200001f8 	.word	0x200001f8
 8006728:	200001fc 	.word	0x200001fc

0800672c <__sfputc_r>:
 800672c:	6893      	ldr	r3, [r2, #8]
 800672e:	3b01      	subs	r3, #1
 8006730:	2b00      	cmp	r3, #0
 8006732:	b410      	push	{r4}
 8006734:	6093      	str	r3, [r2, #8]
 8006736:	da08      	bge.n	800674a <__sfputc_r+0x1e>
 8006738:	6994      	ldr	r4, [r2, #24]
 800673a:	42a3      	cmp	r3, r4
 800673c:	db01      	blt.n	8006742 <__sfputc_r+0x16>
 800673e:	290a      	cmp	r1, #10
 8006740:	d103      	bne.n	800674a <__sfputc_r+0x1e>
 8006742:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006746:	f000 b99f 	b.w	8006a88 <__swbuf_r>
 800674a:	6813      	ldr	r3, [r2, #0]
 800674c:	1c58      	adds	r0, r3, #1
 800674e:	6010      	str	r0, [r2, #0]
 8006750:	7019      	strb	r1, [r3, #0]
 8006752:	4608      	mov	r0, r1
 8006754:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006758:	4770      	bx	lr

0800675a <__sfputs_r>:
 800675a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675c:	4606      	mov	r6, r0
 800675e:	460f      	mov	r7, r1
 8006760:	4614      	mov	r4, r2
 8006762:	18d5      	adds	r5, r2, r3
 8006764:	42ac      	cmp	r4, r5
 8006766:	d101      	bne.n	800676c <__sfputs_r+0x12>
 8006768:	2000      	movs	r0, #0
 800676a:	e007      	b.n	800677c <__sfputs_r+0x22>
 800676c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006770:	463a      	mov	r2, r7
 8006772:	4630      	mov	r0, r6
 8006774:	f7ff ffda 	bl	800672c <__sfputc_r>
 8006778:	1c43      	adds	r3, r0, #1
 800677a:	d1f3      	bne.n	8006764 <__sfputs_r+0xa>
 800677c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006780 <_vfiprintf_r>:
 8006780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006784:	460d      	mov	r5, r1
 8006786:	b09d      	sub	sp, #116	; 0x74
 8006788:	4614      	mov	r4, r2
 800678a:	4698      	mov	r8, r3
 800678c:	4606      	mov	r6, r0
 800678e:	b118      	cbz	r0, 8006798 <_vfiprintf_r+0x18>
 8006790:	6983      	ldr	r3, [r0, #24]
 8006792:	b90b      	cbnz	r3, 8006798 <_vfiprintf_r+0x18>
 8006794:	f7ff fa72 	bl	8005c7c <__sinit>
 8006798:	4b89      	ldr	r3, [pc, #548]	; (80069c0 <_vfiprintf_r+0x240>)
 800679a:	429d      	cmp	r5, r3
 800679c:	d11b      	bne.n	80067d6 <_vfiprintf_r+0x56>
 800679e:	6875      	ldr	r5, [r6, #4]
 80067a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067a2:	07d9      	lsls	r1, r3, #31
 80067a4:	d405      	bmi.n	80067b2 <_vfiprintf_r+0x32>
 80067a6:	89ab      	ldrh	r3, [r5, #12]
 80067a8:	059a      	lsls	r2, r3, #22
 80067aa:	d402      	bmi.n	80067b2 <_vfiprintf_r+0x32>
 80067ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067ae:	f7ff fb08 	bl	8005dc2 <__retarget_lock_acquire_recursive>
 80067b2:	89ab      	ldrh	r3, [r5, #12]
 80067b4:	071b      	lsls	r3, r3, #28
 80067b6:	d501      	bpl.n	80067bc <_vfiprintf_r+0x3c>
 80067b8:	692b      	ldr	r3, [r5, #16]
 80067ba:	b9eb      	cbnz	r3, 80067f8 <_vfiprintf_r+0x78>
 80067bc:	4629      	mov	r1, r5
 80067be:	4630      	mov	r0, r6
 80067c0:	f000 f9c6 	bl	8006b50 <__swsetup_r>
 80067c4:	b1c0      	cbz	r0, 80067f8 <_vfiprintf_r+0x78>
 80067c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067c8:	07dc      	lsls	r4, r3, #31
 80067ca:	d50e      	bpl.n	80067ea <_vfiprintf_r+0x6a>
 80067cc:	f04f 30ff 	mov.w	r0, #4294967295
 80067d0:	b01d      	add	sp, #116	; 0x74
 80067d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d6:	4b7b      	ldr	r3, [pc, #492]	; (80069c4 <_vfiprintf_r+0x244>)
 80067d8:	429d      	cmp	r5, r3
 80067da:	d101      	bne.n	80067e0 <_vfiprintf_r+0x60>
 80067dc:	68b5      	ldr	r5, [r6, #8]
 80067de:	e7df      	b.n	80067a0 <_vfiprintf_r+0x20>
 80067e0:	4b79      	ldr	r3, [pc, #484]	; (80069c8 <_vfiprintf_r+0x248>)
 80067e2:	429d      	cmp	r5, r3
 80067e4:	bf08      	it	eq
 80067e6:	68f5      	ldreq	r5, [r6, #12]
 80067e8:	e7da      	b.n	80067a0 <_vfiprintf_r+0x20>
 80067ea:	89ab      	ldrh	r3, [r5, #12]
 80067ec:	0598      	lsls	r0, r3, #22
 80067ee:	d4ed      	bmi.n	80067cc <_vfiprintf_r+0x4c>
 80067f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067f2:	f7ff fae7 	bl	8005dc4 <__retarget_lock_release_recursive>
 80067f6:	e7e9      	b.n	80067cc <_vfiprintf_r+0x4c>
 80067f8:	2300      	movs	r3, #0
 80067fa:	9309      	str	r3, [sp, #36]	; 0x24
 80067fc:	2320      	movs	r3, #32
 80067fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006802:	f8cd 800c 	str.w	r8, [sp, #12]
 8006806:	2330      	movs	r3, #48	; 0x30
 8006808:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80069cc <_vfiprintf_r+0x24c>
 800680c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006810:	f04f 0901 	mov.w	r9, #1
 8006814:	4623      	mov	r3, r4
 8006816:	469a      	mov	sl, r3
 8006818:	f813 2b01 	ldrb.w	r2, [r3], #1
 800681c:	b10a      	cbz	r2, 8006822 <_vfiprintf_r+0xa2>
 800681e:	2a25      	cmp	r2, #37	; 0x25
 8006820:	d1f9      	bne.n	8006816 <_vfiprintf_r+0x96>
 8006822:	ebba 0b04 	subs.w	fp, sl, r4
 8006826:	d00b      	beq.n	8006840 <_vfiprintf_r+0xc0>
 8006828:	465b      	mov	r3, fp
 800682a:	4622      	mov	r2, r4
 800682c:	4629      	mov	r1, r5
 800682e:	4630      	mov	r0, r6
 8006830:	f7ff ff93 	bl	800675a <__sfputs_r>
 8006834:	3001      	adds	r0, #1
 8006836:	f000 80aa 	beq.w	800698e <_vfiprintf_r+0x20e>
 800683a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800683c:	445a      	add	r2, fp
 800683e:	9209      	str	r2, [sp, #36]	; 0x24
 8006840:	f89a 3000 	ldrb.w	r3, [sl]
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 80a2 	beq.w	800698e <_vfiprintf_r+0x20e>
 800684a:	2300      	movs	r3, #0
 800684c:	f04f 32ff 	mov.w	r2, #4294967295
 8006850:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006854:	f10a 0a01 	add.w	sl, sl, #1
 8006858:	9304      	str	r3, [sp, #16]
 800685a:	9307      	str	r3, [sp, #28]
 800685c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006860:	931a      	str	r3, [sp, #104]	; 0x68
 8006862:	4654      	mov	r4, sl
 8006864:	2205      	movs	r2, #5
 8006866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800686a:	4858      	ldr	r0, [pc, #352]	; (80069cc <_vfiprintf_r+0x24c>)
 800686c:	f7f9 fcb8 	bl	80001e0 <memchr>
 8006870:	9a04      	ldr	r2, [sp, #16]
 8006872:	b9d8      	cbnz	r0, 80068ac <_vfiprintf_r+0x12c>
 8006874:	06d1      	lsls	r1, r2, #27
 8006876:	bf44      	itt	mi
 8006878:	2320      	movmi	r3, #32
 800687a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800687e:	0713      	lsls	r3, r2, #28
 8006880:	bf44      	itt	mi
 8006882:	232b      	movmi	r3, #43	; 0x2b
 8006884:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006888:	f89a 3000 	ldrb.w	r3, [sl]
 800688c:	2b2a      	cmp	r3, #42	; 0x2a
 800688e:	d015      	beq.n	80068bc <_vfiprintf_r+0x13c>
 8006890:	9a07      	ldr	r2, [sp, #28]
 8006892:	4654      	mov	r4, sl
 8006894:	2000      	movs	r0, #0
 8006896:	f04f 0c0a 	mov.w	ip, #10
 800689a:	4621      	mov	r1, r4
 800689c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068a0:	3b30      	subs	r3, #48	; 0x30
 80068a2:	2b09      	cmp	r3, #9
 80068a4:	d94e      	bls.n	8006944 <_vfiprintf_r+0x1c4>
 80068a6:	b1b0      	cbz	r0, 80068d6 <_vfiprintf_r+0x156>
 80068a8:	9207      	str	r2, [sp, #28]
 80068aa:	e014      	b.n	80068d6 <_vfiprintf_r+0x156>
 80068ac:	eba0 0308 	sub.w	r3, r0, r8
 80068b0:	fa09 f303 	lsl.w	r3, r9, r3
 80068b4:	4313      	orrs	r3, r2
 80068b6:	9304      	str	r3, [sp, #16]
 80068b8:	46a2      	mov	sl, r4
 80068ba:	e7d2      	b.n	8006862 <_vfiprintf_r+0xe2>
 80068bc:	9b03      	ldr	r3, [sp, #12]
 80068be:	1d19      	adds	r1, r3, #4
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	9103      	str	r1, [sp, #12]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	bfbb      	ittet	lt
 80068c8:	425b      	neglt	r3, r3
 80068ca:	f042 0202 	orrlt.w	r2, r2, #2
 80068ce:	9307      	strge	r3, [sp, #28]
 80068d0:	9307      	strlt	r3, [sp, #28]
 80068d2:	bfb8      	it	lt
 80068d4:	9204      	strlt	r2, [sp, #16]
 80068d6:	7823      	ldrb	r3, [r4, #0]
 80068d8:	2b2e      	cmp	r3, #46	; 0x2e
 80068da:	d10c      	bne.n	80068f6 <_vfiprintf_r+0x176>
 80068dc:	7863      	ldrb	r3, [r4, #1]
 80068de:	2b2a      	cmp	r3, #42	; 0x2a
 80068e0:	d135      	bne.n	800694e <_vfiprintf_r+0x1ce>
 80068e2:	9b03      	ldr	r3, [sp, #12]
 80068e4:	1d1a      	adds	r2, r3, #4
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	9203      	str	r2, [sp, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	bfb8      	it	lt
 80068ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80068f2:	3402      	adds	r4, #2
 80068f4:	9305      	str	r3, [sp, #20]
 80068f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80069dc <_vfiprintf_r+0x25c>
 80068fa:	7821      	ldrb	r1, [r4, #0]
 80068fc:	2203      	movs	r2, #3
 80068fe:	4650      	mov	r0, sl
 8006900:	f7f9 fc6e 	bl	80001e0 <memchr>
 8006904:	b140      	cbz	r0, 8006918 <_vfiprintf_r+0x198>
 8006906:	2340      	movs	r3, #64	; 0x40
 8006908:	eba0 000a 	sub.w	r0, r0, sl
 800690c:	fa03 f000 	lsl.w	r0, r3, r0
 8006910:	9b04      	ldr	r3, [sp, #16]
 8006912:	4303      	orrs	r3, r0
 8006914:	3401      	adds	r4, #1
 8006916:	9304      	str	r3, [sp, #16]
 8006918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800691c:	482c      	ldr	r0, [pc, #176]	; (80069d0 <_vfiprintf_r+0x250>)
 800691e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006922:	2206      	movs	r2, #6
 8006924:	f7f9 fc5c 	bl	80001e0 <memchr>
 8006928:	2800      	cmp	r0, #0
 800692a:	d03f      	beq.n	80069ac <_vfiprintf_r+0x22c>
 800692c:	4b29      	ldr	r3, [pc, #164]	; (80069d4 <_vfiprintf_r+0x254>)
 800692e:	bb1b      	cbnz	r3, 8006978 <_vfiprintf_r+0x1f8>
 8006930:	9b03      	ldr	r3, [sp, #12]
 8006932:	3307      	adds	r3, #7
 8006934:	f023 0307 	bic.w	r3, r3, #7
 8006938:	3308      	adds	r3, #8
 800693a:	9303      	str	r3, [sp, #12]
 800693c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800693e:	443b      	add	r3, r7
 8006940:	9309      	str	r3, [sp, #36]	; 0x24
 8006942:	e767      	b.n	8006814 <_vfiprintf_r+0x94>
 8006944:	fb0c 3202 	mla	r2, ip, r2, r3
 8006948:	460c      	mov	r4, r1
 800694a:	2001      	movs	r0, #1
 800694c:	e7a5      	b.n	800689a <_vfiprintf_r+0x11a>
 800694e:	2300      	movs	r3, #0
 8006950:	3401      	adds	r4, #1
 8006952:	9305      	str	r3, [sp, #20]
 8006954:	4619      	mov	r1, r3
 8006956:	f04f 0c0a 	mov.w	ip, #10
 800695a:	4620      	mov	r0, r4
 800695c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006960:	3a30      	subs	r2, #48	; 0x30
 8006962:	2a09      	cmp	r2, #9
 8006964:	d903      	bls.n	800696e <_vfiprintf_r+0x1ee>
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0c5      	beq.n	80068f6 <_vfiprintf_r+0x176>
 800696a:	9105      	str	r1, [sp, #20]
 800696c:	e7c3      	b.n	80068f6 <_vfiprintf_r+0x176>
 800696e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006972:	4604      	mov	r4, r0
 8006974:	2301      	movs	r3, #1
 8006976:	e7f0      	b.n	800695a <_vfiprintf_r+0x1da>
 8006978:	ab03      	add	r3, sp, #12
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	462a      	mov	r2, r5
 800697e:	4b16      	ldr	r3, [pc, #88]	; (80069d8 <_vfiprintf_r+0x258>)
 8006980:	a904      	add	r1, sp, #16
 8006982:	4630      	mov	r0, r6
 8006984:	f7fd fd36 	bl	80043f4 <_printf_float>
 8006988:	4607      	mov	r7, r0
 800698a:	1c78      	adds	r0, r7, #1
 800698c:	d1d6      	bne.n	800693c <_vfiprintf_r+0x1bc>
 800698e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006990:	07d9      	lsls	r1, r3, #31
 8006992:	d405      	bmi.n	80069a0 <_vfiprintf_r+0x220>
 8006994:	89ab      	ldrh	r3, [r5, #12]
 8006996:	059a      	lsls	r2, r3, #22
 8006998:	d402      	bmi.n	80069a0 <_vfiprintf_r+0x220>
 800699a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800699c:	f7ff fa12 	bl	8005dc4 <__retarget_lock_release_recursive>
 80069a0:	89ab      	ldrh	r3, [r5, #12]
 80069a2:	065b      	lsls	r3, r3, #25
 80069a4:	f53f af12 	bmi.w	80067cc <_vfiprintf_r+0x4c>
 80069a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069aa:	e711      	b.n	80067d0 <_vfiprintf_r+0x50>
 80069ac:	ab03      	add	r3, sp, #12
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	462a      	mov	r2, r5
 80069b2:	4b09      	ldr	r3, [pc, #36]	; (80069d8 <_vfiprintf_r+0x258>)
 80069b4:	a904      	add	r1, sp, #16
 80069b6:	4630      	mov	r0, r6
 80069b8:	f7fd ffc0 	bl	800493c <_printf_i>
 80069bc:	e7e4      	b.n	8006988 <_vfiprintf_r+0x208>
 80069be:	bf00      	nop
 80069c0:	08006f7c 	.word	0x08006f7c
 80069c4:	08006f9c 	.word	0x08006f9c
 80069c8:	08006f5c 	.word	0x08006f5c
 80069cc:	0800711c 	.word	0x0800711c
 80069d0:	08007126 	.word	0x08007126
 80069d4:	080043f5 	.word	0x080043f5
 80069d8:	0800675b 	.word	0x0800675b
 80069dc:	08007122 	.word	0x08007122

080069e0 <_sbrk_r>:
 80069e0:	b538      	push	{r3, r4, r5, lr}
 80069e2:	4d06      	ldr	r5, [pc, #24]	; (80069fc <_sbrk_r+0x1c>)
 80069e4:	2300      	movs	r3, #0
 80069e6:	4604      	mov	r4, r0
 80069e8:	4608      	mov	r0, r1
 80069ea:	602b      	str	r3, [r5, #0]
 80069ec:	f7fb fb04 	bl	8001ff8 <_sbrk>
 80069f0:	1c43      	adds	r3, r0, #1
 80069f2:	d102      	bne.n	80069fa <_sbrk_r+0x1a>
 80069f4:	682b      	ldr	r3, [r5, #0]
 80069f6:	b103      	cbz	r3, 80069fa <_sbrk_r+0x1a>
 80069f8:	6023      	str	r3, [r4, #0]
 80069fa:	bd38      	pop	{r3, r4, r5, pc}
 80069fc:	2000020c 	.word	0x2000020c

08006a00 <__sread>:
 8006a00:	b510      	push	{r4, lr}
 8006a02:	460c      	mov	r4, r1
 8006a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a08:	f000 f9a2 	bl	8006d50 <_read_r>
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	bfab      	itete	ge
 8006a10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a12:	89a3      	ldrhlt	r3, [r4, #12]
 8006a14:	181b      	addge	r3, r3, r0
 8006a16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a1a:	bfac      	ite	ge
 8006a1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a1e:	81a3      	strhlt	r3, [r4, #12]
 8006a20:	bd10      	pop	{r4, pc}

08006a22 <__swrite>:
 8006a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a26:	461f      	mov	r7, r3
 8006a28:	898b      	ldrh	r3, [r1, #12]
 8006a2a:	05db      	lsls	r3, r3, #23
 8006a2c:	4605      	mov	r5, r0
 8006a2e:	460c      	mov	r4, r1
 8006a30:	4616      	mov	r6, r2
 8006a32:	d505      	bpl.n	8006a40 <__swrite+0x1e>
 8006a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a38:	2302      	movs	r3, #2
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f000 f958 	bl	8006cf0 <_lseek_r>
 8006a40:	89a3      	ldrh	r3, [r4, #12]
 8006a42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a4a:	81a3      	strh	r3, [r4, #12]
 8006a4c:	4632      	mov	r2, r6
 8006a4e:	463b      	mov	r3, r7
 8006a50:	4628      	mov	r0, r5
 8006a52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a56:	f000 b869 	b.w	8006b2c <_write_r>

08006a5a <__sseek>:
 8006a5a:	b510      	push	{r4, lr}
 8006a5c:	460c      	mov	r4, r1
 8006a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a62:	f000 f945 	bl	8006cf0 <_lseek_r>
 8006a66:	1c43      	adds	r3, r0, #1
 8006a68:	89a3      	ldrh	r3, [r4, #12]
 8006a6a:	bf15      	itete	ne
 8006a6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a76:	81a3      	strheq	r3, [r4, #12]
 8006a78:	bf18      	it	ne
 8006a7a:	81a3      	strhne	r3, [r4, #12]
 8006a7c:	bd10      	pop	{r4, pc}

08006a7e <__sclose>:
 8006a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a82:	f000 b8f1 	b.w	8006c68 <_close_r>
	...

08006a88 <__swbuf_r>:
 8006a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8a:	460e      	mov	r6, r1
 8006a8c:	4614      	mov	r4, r2
 8006a8e:	4605      	mov	r5, r0
 8006a90:	b118      	cbz	r0, 8006a9a <__swbuf_r+0x12>
 8006a92:	6983      	ldr	r3, [r0, #24]
 8006a94:	b90b      	cbnz	r3, 8006a9a <__swbuf_r+0x12>
 8006a96:	f7ff f8f1 	bl	8005c7c <__sinit>
 8006a9a:	4b21      	ldr	r3, [pc, #132]	; (8006b20 <__swbuf_r+0x98>)
 8006a9c:	429c      	cmp	r4, r3
 8006a9e:	d12b      	bne.n	8006af8 <__swbuf_r+0x70>
 8006aa0:	686c      	ldr	r4, [r5, #4]
 8006aa2:	69a3      	ldr	r3, [r4, #24]
 8006aa4:	60a3      	str	r3, [r4, #8]
 8006aa6:	89a3      	ldrh	r3, [r4, #12]
 8006aa8:	071a      	lsls	r2, r3, #28
 8006aaa:	d52f      	bpl.n	8006b0c <__swbuf_r+0x84>
 8006aac:	6923      	ldr	r3, [r4, #16]
 8006aae:	b36b      	cbz	r3, 8006b0c <__swbuf_r+0x84>
 8006ab0:	6923      	ldr	r3, [r4, #16]
 8006ab2:	6820      	ldr	r0, [r4, #0]
 8006ab4:	1ac0      	subs	r0, r0, r3
 8006ab6:	6963      	ldr	r3, [r4, #20]
 8006ab8:	b2f6      	uxtb	r6, r6
 8006aba:	4283      	cmp	r3, r0
 8006abc:	4637      	mov	r7, r6
 8006abe:	dc04      	bgt.n	8006aca <__swbuf_r+0x42>
 8006ac0:	4621      	mov	r1, r4
 8006ac2:	4628      	mov	r0, r5
 8006ac4:	f7ff f846 	bl	8005b54 <_fflush_r>
 8006ac8:	bb30      	cbnz	r0, 8006b18 <__swbuf_r+0x90>
 8006aca:	68a3      	ldr	r3, [r4, #8]
 8006acc:	3b01      	subs	r3, #1
 8006ace:	60a3      	str	r3, [r4, #8]
 8006ad0:	6823      	ldr	r3, [r4, #0]
 8006ad2:	1c5a      	adds	r2, r3, #1
 8006ad4:	6022      	str	r2, [r4, #0]
 8006ad6:	701e      	strb	r6, [r3, #0]
 8006ad8:	6963      	ldr	r3, [r4, #20]
 8006ada:	3001      	adds	r0, #1
 8006adc:	4283      	cmp	r3, r0
 8006ade:	d004      	beq.n	8006aea <__swbuf_r+0x62>
 8006ae0:	89a3      	ldrh	r3, [r4, #12]
 8006ae2:	07db      	lsls	r3, r3, #31
 8006ae4:	d506      	bpl.n	8006af4 <__swbuf_r+0x6c>
 8006ae6:	2e0a      	cmp	r6, #10
 8006ae8:	d104      	bne.n	8006af4 <__swbuf_r+0x6c>
 8006aea:	4621      	mov	r1, r4
 8006aec:	4628      	mov	r0, r5
 8006aee:	f7ff f831 	bl	8005b54 <_fflush_r>
 8006af2:	b988      	cbnz	r0, 8006b18 <__swbuf_r+0x90>
 8006af4:	4638      	mov	r0, r7
 8006af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006af8:	4b0a      	ldr	r3, [pc, #40]	; (8006b24 <__swbuf_r+0x9c>)
 8006afa:	429c      	cmp	r4, r3
 8006afc:	d101      	bne.n	8006b02 <__swbuf_r+0x7a>
 8006afe:	68ac      	ldr	r4, [r5, #8]
 8006b00:	e7cf      	b.n	8006aa2 <__swbuf_r+0x1a>
 8006b02:	4b09      	ldr	r3, [pc, #36]	; (8006b28 <__swbuf_r+0xa0>)
 8006b04:	429c      	cmp	r4, r3
 8006b06:	bf08      	it	eq
 8006b08:	68ec      	ldreq	r4, [r5, #12]
 8006b0a:	e7ca      	b.n	8006aa2 <__swbuf_r+0x1a>
 8006b0c:	4621      	mov	r1, r4
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f000 f81e 	bl	8006b50 <__swsetup_r>
 8006b14:	2800      	cmp	r0, #0
 8006b16:	d0cb      	beq.n	8006ab0 <__swbuf_r+0x28>
 8006b18:	f04f 37ff 	mov.w	r7, #4294967295
 8006b1c:	e7ea      	b.n	8006af4 <__swbuf_r+0x6c>
 8006b1e:	bf00      	nop
 8006b20:	08006f7c 	.word	0x08006f7c
 8006b24:	08006f9c 	.word	0x08006f9c
 8006b28:	08006f5c 	.word	0x08006f5c

08006b2c <_write_r>:
 8006b2c:	b538      	push	{r3, r4, r5, lr}
 8006b2e:	4d07      	ldr	r5, [pc, #28]	; (8006b4c <_write_r+0x20>)
 8006b30:	4604      	mov	r4, r0
 8006b32:	4608      	mov	r0, r1
 8006b34:	4611      	mov	r1, r2
 8006b36:	2200      	movs	r2, #0
 8006b38:	602a      	str	r2, [r5, #0]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	f7fb fa0b 	bl	8001f56 <_write>
 8006b40:	1c43      	adds	r3, r0, #1
 8006b42:	d102      	bne.n	8006b4a <_write_r+0x1e>
 8006b44:	682b      	ldr	r3, [r5, #0]
 8006b46:	b103      	cbz	r3, 8006b4a <_write_r+0x1e>
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	bd38      	pop	{r3, r4, r5, pc}
 8006b4c:	2000020c 	.word	0x2000020c

08006b50 <__swsetup_r>:
 8006b50:	4b32      	ldr	r3, [pc, #200]	; (8006c1c <__swsetup_r+0xcc>)
 8006b52:	b570      	push	{r4, r5, r6, lr}
 8006b54:	681d      	ldr	r5, [r3, #0]
 8006b56:	4606      	mov	r6, r0
 8006b58:	460c      	mov	r4, r1
 8006b5a:	b125      	cbz	r5, 8006b66 <__swsetup_r+0x16>
 8006b5c:	69ab      	ldr	r3, [r5, #24]
 8006b5e:	b913      	cbnz	r3, 8006b66 <__swsetup_r+0x16>
 8006b60:	4628      	mov	r0, r5
 8006b62:	f7ff f88b 	bl	8005c7c <__sinit>
 8006b66:	4b2e      	ldr	r3, [pc, #184]	; (8006c20 <__swsetup_r+0xd0>)
 8006b68:	429c      	cmp	r4, r3
 8006b6a:	d10f      	bne.n	8006b8c <__swsetup_r+0x3c>
 8006b6c:	686c      	ldr	r4, [r5, #4]
 8006b6e:	89a3      	ldrh	r3, [r4, #12]
 8006b70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b74:	0719      	lsls	r1, r3, #28
 8006b76:	d42c      	bmi.n	8006bd2 <__swsetup_r+0x82>
 8006b78:	06dd      	lsls	r5, r3, #27
 8006b7a:	d411      	bmi.n	8006ba0 <__swsetup_r+0x50>
 8006b7c:	2309      	movs	r3, #9
 8006b7e:	6033      	str	r3, [r6, #0]
 8006b80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b84:	81a3      	strh	r3, [r4, #12]
 8006b86:	f04f 30ff 	mov.w	r0, #4294967295
 8006b8a:	e03e      	b.n	8006c0a <__swsetup_r+0xba>
 8006b8c:	4b25      	ldr	r3, [pc, #148]	; (8006c24 <__swsetup_r+0xd4>)
 8006b8e:	429c      	cmp	r4, r3
 8006b90:	d101      	bne.n	8006b96 <__swsetup_r+0x46>
 8006b92:	68ac      	ldr	r4, [r5, #8]
 8006b94:	e7eb      	b.n	8006b6e <__swsetup_r+0x1e>
 8006b96:	4b24      	ldr	r3, [pc, #144]	; (8006c28 <__swsetup_r+0xd8>)
 8006b98:	429c      	cmp	r4, r3
 8006b9a:	bf08      	it	eq
 8006b9c:	68ec      	ldreq	r4, [r5, #12]
 8006b9e:	e7e6      	b.n	8006b6e <__swsetup_r+0x1e>
 8006ba0:	0758      	lsls	r0, r3, #29
 8006ba2:	d512      	bpl.n	8006bca <__swsetup_r+0x7a>
 8006ba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ba6:	b141      	cbz	r1, 8006bba <__swsetup_r+0x6a>
 8006ba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bac:	4299      	cmp	r1, r3
 8006bae:	d002      	beq.n	8006bb6 <__swsetup_r+0x66>
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	f7ff fd11 	bl	80065d8 <_free_r>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	6363      	str	r3, [r4, #52]	; 0x34
 8006bba:	89a3      	ldrh	r3, [r4, #12]
 8006bbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006bc0:	81a3      	strh	r3, [r4, #12]
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	6063      	str	r3, [r4, #4]
 8006bc6:	6923      	ldr	r3, [r4, #16]
 8006bc8:	6023      	str	r3, [r4, #0]
 8006bca:	89a3      	ldrh	r3, [r4, #12]
 8006bcc:	f043 0308 	orr.w	r3, r3, #8
 8006bd0:	81a3      	strh	r3, [r4, #12]
 8006bd2:	6923      	ldr	r3, [r4, #16]
 8006bd4:	b94b      	cbnz	r3, 8006bea <__swsetup_r+0x9a>
 8006bd6:	89a3      	ldrh	r3, [r4, #12]
 8006bd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006be0:	d003      	beq.n	8006bea <__swsetup_r+0x9a>
 8006be2:	4621      	mov	r1, r4
 8006be4:	4630      	mov	r0, r6
 8006be6:	f7ff f913 	bl	8005e10 <__smakebuf_r>
 8006bea:	89a0      	ldrh	r0, [r4, #12]
 8006bec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bf0:	f010 0301 	ands.w	r3, r0, #1
 8006bf4:	d00a      	beq.n	8006c0c <__swsetup_r+0xbc>
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	60a3      	str	r3, [r4, #8]
 8006bfa:	6963      	ldr	r3, [r4, #20]
 8006bfc:	425b      	negs	r3, r3
 8006bfe:	61a3      	str	r3, [r4, #24]
 8006c00:	6923      	ldr	r3, [r4, #16]
 8006c02:	b943      	cbnz	r3, 8006c16 <__swsetup_r+0xc6>
 8006c04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c08:	d1ba      	bne.n	8006b80 <__swsetup_r+0x30>
 8006c0a:	bd70      	pop	{r4, r5, r6, pc}
 8006c0c:	0781      	lsls	r1, r0, #30
 8006c0e:	bf58      	it	pl
 8006c10:	6963      	ldrpl	r3, [r4, #20]
 8006c12:	60a3      	str	r3, [r4, #8]
 8006c14:	e7f4      	b.n	8006c00 <__swsetup_r+0xb0>
 8006c16:	2000      	movs	r0, #0
 8006c18:	e7f7      	b.n	8006c0a <__swsetup_r+0xba>
 8006c1a:	bf00      	nop
 8006c1c:	20000004 	.word	0x20000004
 8006c20:	08006f7c 	.word	0x08006f7c
 8006c24:	08006f9c 	.word	0x08006f9c
 8006c28:	08006f5c 	.word	0x08006f5c

08006c2c <__assert_func>:
 8006c2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c2e:	4614      	mov	r4, r2
 8006c30:	461a      	mov	r2, r3
 8006c32:	4b09      	ldr	r3, [pc, #36]	; (8006c58 <__assert_func+0x2c>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4605      	mov	r5, r0
 8006c38:	68d8      	ldr	r0, [r3, #12]
 8006c3a:	b14c      	cbz	r4, 8006c50 <__assert_func+0x24>
 8006c3c:	4b07      	ldr	r3, [pc, #28]	; (8006c5c <__assert_func+0x30>)
 8006c3e:	9100      	str	r1, [sp, #0]
 8006c40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c44:	4906      	ldr	r1, [pc, #24]	; (8006c60 <__assert_func+0x34>)
 8006c46:	462b      	mov	r3, r5
 8006c48:	f000 f81e 	bl	8006c88 <fiprintf>
 8006c4c:	f000 f89f 	bl	8006d8e <abort>
 8006c50:	4b04      	ldr	r3, [pc, #16]	; (8006c64 <__assert_func+0x38>)
 8006c52:	461c      	mov	r4, r3
 8006c54:	e7f3      	b.n	8006c3e <__assert_func+0x12>
 8006c56:	bf00      	nop
 8006c58:	20000004 	.word	0x20000004
 8006c5c:	0800712d 	.word	0x0800712d
 8006c60:	0800713a 	.word	0x0800713a
 8006c64:	08007168 	.word	0x08007168

08006c68 <_close_r>:
 8006c68:	b538      	push	{r3, r4, r5, lr}
 8006c6a:	4d06      	ldr	r5, [pc, #24]	; (8006c84 <_close_r+0x1c>)
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	4604      	mov	r4, r0
 8006c70:	4608      	mov	r0, r1
 8006c72:	602b      	str	r3, [r5, #0]
 8006c74:	f7fb f98b 	bl	8001f8e <_close>
 8006c78:	1c43      	adds	r3, r0, #1
 8006c7a:	d102      	bne.n	8006c82 <_close_r+0x1a>
 8006c7c:	682b      	ldr	r3, [r5, #0]
 8006c7e:	b103      	cbz	r3, 8006c82 <_close_r+0x1a>
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	bd38      	pop	{r3, r4, r5, pc}
 8006c84:	2000020c 	.word	0x2000020c

08006c88 <fiprintf>:
 8006c88:	b40e      	push	{r1, r2, r3}
 8006c8a:	b503      	push	{r0, r1, lr}
 8006c8c:	4601      	mov	r1, r0
 8006c8e:	ab03      	add	r3, sp, #12
 8006c90:	4805      	ldr	r0, [pc, #20]	; (8006ca8 <fiprintf+0x20>)
 8006c92:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c96:	6800      	ldr	r0, [r0, #0]
 8006c98:	9301      	str	r3, [sp, #4]
 8006c9a:	f7ff fd71 	bl	8006780 <_vfiprintf_r>
 8006c9e:	b002      	add	sp, #8
 8006ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ca4:	b003      	add	sp, #12
 8006ca6:	4770      	bx	lr
 8006ca8:	20000004 	.word	0x20000004

08006cac <_fstat_r>:
 8006cac:	b538      	push	{r3, r4, r5, lr}
 8006cae:	4d07      	ldr	r5, [pc, #28]	; (8006ccc <_fstat_r+0x20>)
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	4608      	mov	r0, r1
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	602b      	str	r3, [r5, #0]
 8006cba:	f7fb f974 	bl	8001fa6 <_fstat>
 8006cbe:	1c43      	adds	r3, r0, #1
 8006cc0:	d102      	bne.n	8006cc8 <_fstat_r+0x1c>
 8006cc2:	682b      	ldr	r3, [r5, #0]
 8006cc4:	b103      	cbz	r3, 8006cc8 <_fstat_r+0x1c>
 8006cc6:	6023      	str	r3, [r4, #0]
 8006cc8:	bd38      	pop	{r3, r4, r5, pc}
 8006cca:	bf00      	nop
 8006ccc:	2000020c 	.word	0x2000020c

08006cd0 <_isatty_r>:
 8006cd0:	b538      	push	{r3, r4, r5, lr}
 8006cd2:	4d06      	ldr	r5, [pc, #24]	; (8006cec <_isatty_r+0x1c>)
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	4608      	mov	r0, r1
 8006cda:	602b      	str	r3, [r5, #0]
 8006cdc:	f7fb f973 	bl	8001fc6 <_isatty>
 8006ce0:	1c43      	adds	r3, r0, #1
 8006ce2:	d102      	bne.n	8006cea <_isatty_r+0x1a>
 8006ce4:	682b      	ldr	r3, [r5, #0]
 8006ce6:	b103      	cbz	r3, 8006cea <_isatty_r+0x1a>
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	bd38      	pop	{r3, r4, r5, pc}
 8006cec:	2000020c 	.word	0x2000020c

08006cf0 <_lseek_r>:
 8006cf0:	b538      	push	{r3, r4, r5, lr}
 8006cf2:	4d07      	ldr	r5, [pc, #28]	; (8006d10 <_lseek_r+0x20>)
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	4608      	mov	r0, r1
 8006cf8:	4611      	mov	r1, r2
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	602a      	str	r2, [r5, #0]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	f7fb f96c 	bl	8001fdc <_lseek>
 8006d04:	1c43      	adds	r3, r0, #1
 8006d06:	d102      	bne.n	8006d0e <_lseek_r+0x1e>
 8006d08:	682b      	ldr	r3, [r5, #0]
 8006d0a:	b103      	cbz	r3, 8006d0e <_lseek_r+0x1e>
 8006d0c:	6023      	str	r3, [r4, #0]
 8006d0e:	bd38      	pop	{r3, r4, r5, pc}
 8006d10:	2000020c 	.word	0x2000020c

08006d14 <__ascii_mbtowc>:
 8006d14:	b082      	sub	sp, #8
 8006d16:	b901      	cbnz	r1, 8006d1a <__ascii_mbtowc+0x6>
 8006d18:	a901      	add	r1, sp, #4
 8006d1a:	b142      	cbz	r2, 8006d2e <__ascii_mbtowc+0x1a>
 8006d1c:	b14b      	cbz	r3, 8006d32 <__ascii_mbtowc+0x1e>
 8006d1e:	7813      	ldrb	r3, [r2, #0]
 8006d20:	600b      	str	r3, [r1, #0]
 8006d22:	7812      	ldrb	r2, [r2, #0]
 8006d24:	1e10      	subs	r0, r2, #0
 8006d26:	bf18      	it	ne
 8006d28:	2001      	movne	r0, #1
 8006d2a:	b002      	add	sp, #8
 8006d2c:	4770      	bx	lr
 8006d2e:	4610      	mov	r0, r2
 8006d30:	e7fb      	b.n	8006d2a <__ascii_mbtowc+0x16>
 8006d32:	f06f 0001 	mvn.w	r0, #1
 8006d36:	e7f8      	b.n	8006d2a <__ascii_mbtowc+0x16>

08006d38 <__malloc_lock>:
 8006d38:	4801      	ldr	r0, [pc, #4]	; (8006d40 <__malloc_lock+0x8>)
 8006d3a:	f7ff b842 	b.w	8005dc2 <__retarget_lock_acquire_recursive>
 8006d3e:	bf00      	nop
 8006d40:	20000206 	.word	0x20000206

08006d44 <__malloc_unlock>:
 8006d44:	4801      	ldr	r0, [pc, #4]	; (8006d4c <__malloc_unlock+0x8>)
 8006d46:	f7ff b83d 	b.w	8005dc4 <__retarget_lock_release_recursive>
 8006d4a:	bf00      	nop
 8006d4c:	20000206 	.word	0x20000206

08006d50 <_read_r>:
 8006d50:	b538      	push	{r3, r4, r5, lr}
 8006d52:	4d07      	ldr	r5, [pc, #28]	; (8006d70 <_read_r+0x20>)
 8006d54:	4604      	mov	r4, r0
 8006d56:	4608      	mov	r0, r1
 8006d58:	4611      	mov	r1, r2
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	602a      	str	r2, [r5, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f7fb f8dc 	bl	8001f1c <_read>
 8006d64:	1c43      	adds	r3, r0, #1
 8006d66:	d102      	bne.n	8006d6e <_read_r+0x1e>
 8006d68:	682b      	ldr	r3, [r5, #0]
 8006d6a:	b103      	cbz	r3, 8006d6e <_read_r+0x1e>
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	bd38      	pop	{r3, r4, r5, pc}
 8006d70:	2000020c 	.word	0x2000020c

08006d74 <__ascii_wctomb>:
 8006d74:	b149      	cbz	r1, 8006d8a <__ascii_wctomb+0x16>
 8006d76:	2aff      	cmp	r2, #255	; 0xff
 8006d78:	bf85      	ittet	hi
 8006d7a:	238a      	movhi	r3, #138	; 0x8a
 8006d7c:	6003      	strhi	r3, [r0, #0]
 8006d7e:	700a      	strbls	r2, [r1, #0]
 8006d80:	f04f 30ff 	movhi.w	r0, #4294967295
 8006d84:	bf98      	it	ls
 8006d86:	2001      	movls	r0, #1
 8006d88:	4770      	bx	lr
 8006d8a:	4608      	mov	r0, r1
 8006d8c:	4770      	bx	lr

08006d8e <abort>:
 8006d8e:	b508      	push	{r3, lr}
 8006d90:	2006      	movs	r0, #6
 8006d92:	f000 f82b 	bl	8006dec <raise>
 8006d96:	2001      	movs	r0, #1
 8006d98:	f7fb f8b6 	bl	8001f08 <_exit>

08006d9c <_raise_r>:
 8006d9c:	291f      	cmp	r1, #31
 8006d9e:	b538      	push	{r3, r4, r5, lr}
 8006da0:	4604      	mov	r4, r0
 8006da2:	460d      	mov	r5, r1
 8006da4:	d904      	bls.n	8006db0 <_raise_r+0x14>
 8006da6:	2316      	movs	r3, #22
 8006da8:	6003      	str	r3, [r0, #0]
 8006daa:	f04f 30ff 	mov.w	r0, #4294967295
 8006dae:	bd38      	pop	{r3, r4, r5, pc}
 8006db0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006db2:	b112      	cbz	r2, 8006dba <_raise_r+0x1e>
 8006db4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006db8:	b94b      	cbnz	r3, 8006dce <_raise_r+0x32>
 8006dba:	4620      	mov	r0, r4
 8006dbc:	f000 f830 	bl	8006e20 <_getpid_r>
 8006dc0:	462a      	mov	r2, r5
 8006dc2:	4601      	mov	r1, r0
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dca:	f000 b817 	b.w	8006dfc <_kill_r>
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d00a      	beq.n	8006de8 <_raise_r+0x4c>
 8006dd2:	1c59      	adds	r1, r3, #1
 8006dd4:	d103      	bne.n	8006dde <_raise_r+0x42>
 8006dd6:	2316      	movs	r3, #22
 8006dd8:	6003      	str	r3, [r0, #0]
 8006dda:	2001      	movs	r0, #1
 8006ddc:	e7e7      	b.n	8006dae <_raise_r+0x12>
 8006dde:	2400      	movs	r4, #0
 8006de0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006de4:	4628      	mov	r0, r5
 8006de6:	4798      	blx	r3
 8006de8:	2000      	movs	r0, #0
 8006dea:	e7e0      	b.n	8006dae <_raise_r+0x12>

08006dec <raise>:
 8006dec:	4b02      	ldr	r3, [pc, #8]	; (8006df8 <raise+0xc>)
 8006dee:	4601      	mov	r1, r0
 8006df0:	6818      	ldr	r0, [r3, #0]
 8006df2:	f7ff bfd3 	b.w	8006d9c <_raise_r>
 8006df6:	bf00      	nop
 8006df8:	20000004 	.word	0x20000004

08006dfc <_kill_r>:
 8006dfc:	b538      	push	{r3, r4, r5, lr}
 8006dfe:	4d07      	ldr	r5, [pc, #28]	; (8006e1c <_kill_r+0x20>)
 8006e00:	2300      	movs	r3, #0
 8006e02:	4604      	mov	r4, r0
 8006e04:	4608      	mov	r0, r1
 8006e06:	4611      	mov	r1, r2
 8006e08:	602b      	str	r3, [r5, #0]
 8006e0a:	f7fb f86d 	bl	8001ee8 <_kill>
 8006e0e:	1c43      	adds	r3, r0, #1
 8006e10:	d102      	bne.n	8006e18 <_kill_r+0x1c>
 8006e12:	682b      	ldr	r3, [r5, #0]
 8006e14:	b103      	cbz	r3, 8006e18 <_kill_r+0x1c>
 8006e16:	6023      	str	r3, [r4, #0]
 8006e18:	bd38      	pop	{r3, r4, r5, pc}
 8006e1a:	bf00      	nop
 8006e1c:	2000020c 	.word	0x2000020c

08006e20 <_getpid_r>:
 8006e20:	f7fb b85a 	b.w	8001ed8 <_getpid>

08006e24 <_init>:
 8006e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e26:	bf00      	nop
 8006e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e2a:	bc08      	pop	{r3}
 8006e2c:	469e      	mov	lr, r3
 8006e2e:	4770      	bx	lr

08006e30 <_fini>:
 8006e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e32:	bf00      	nop
 8006e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e36:	bc08      	pop	{r3}
 8006e38:	469e      	mov	lr, r3
 8006e3a:	4770      	bx	lr
