
utsutsu_LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08006b98  08006b98  00016b98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fcc  08006fcc  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006fcc  08006fcc  00016fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fd4  08006fd4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fd4  08006fd4  00016fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fd8  08006fd8  00016fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08006fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  200001d4  080071b0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  080071b0  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000019d1  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007bc  00000000  00000000  00021bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00022398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  00022ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00003caa  00000000  00000000  00023890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000160c  00000000  00000000  0002753a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00028b46  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003c58  00000000  00000000  00028b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b7c 	.word	0x08006b7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08006b7c 	.word	0x08006b7c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <waitMs>:

/**
* @brief　	特定時間待機する関数
* @param	ms	待機する時間 [msec]
*/
void waitMs(uint16_t ms){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	80fb      	strh	r3, [r7, #6]
	LL_mDelay(ms);
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f003 f845 	bl	8003f3c <LL_mDelay>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f043 0201 	orr.w	r2, r3, #1
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	601a      	str	r2, [r3, #0]
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	683a      	ldr	r2, [r7, #0]
 8000ee8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	683a      	ldr	r2, [r7, #0]
 8000f04:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
 8000f1a:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a1a      	ldr	r2, [r3, #32]
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	431a      	orrs	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	621a      	str	r2, [r3, #32]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	683a      	ldr	r2, [r7, #0]
 8000f42:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <enableMelody>:
* @return
* (@sa Functions to should refer to)
* @details
*/

void enableMelody(void){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM8, LL_TIM_CHANNEL_CH4);
 8000f74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f78:	4805      	ldr	r0, [pc, #20]	; (8000f90 <enableMelody+0x20>)
 8000f7a:	f7ff ffca 	bl	8000f12 <LL_TIM_CC_EnableChannel>
	LL_TIM_EnableCounter(TIM8);
 8000f7e:	4804      	ldr	r0, [pc, #16]	; (8000f90 <enableMelody+0x20>)
 8000f80:	f7ff ff9b 	bl	8000eba <LL_TIM_EnableCounter>

	LL_TIM_EnableAllOutputs(TIM8);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <enableMelody+0x20>)
 8000f86:	f7ff ffe3 	bl	8000f50 <LL_TIM_EnableAllOutputs>

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40010400 	.word	0x40010400

08000f94 <stopMelody>:
void disableMelody(void){
	LL_TIM_CC_DisableChannel(TIM8, LL_TIM_CHANNEL_CH4);
	LL_TIM_DisableCounter(TIM8);
}

void stopMelody(void){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	LL_TIM_OC_SetCompareCH4(TIM8, 0);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <stopMelody+0x10>)
 8000f9c:	f7ff ffca 	bl	8000f34 <LL_TIM_OC_SetCompareCH4>
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40010400 	.word	0x40010400

08000fa8 <Melody>:

void Melody(uint16_t hz, uint16_t ms)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	460a      	mov	r2, r1
 8000fb2:	80fb      	strh	r3, [r7, #6]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	80bb      	strh	r3, [r7, #4]
	LL_TIM_SetAutoReload(TIM8,100000/hz);
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <Melody+0x4c>)
 8000fbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <Melody+0x50>)
 8000fc4:	f7ff ff97 	bl	8000ef6 <LL_TIM_SetAutoReload>
	LL_TIM_OC_SetCompareCH4(TIM8, 95000 / hz );
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <Melody+0x54>)
 8000fcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <Melody+0x50>)
 8000fd4:	f7ff ffae 	bl	8000f34 <LL_TIM_OC_SetCompareCH4>
	LL_TIM_SetCounter(TIM8, 0);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4807      	ldr	r0, [pc, #28]	; (8000ff8 <Melody+0x50>)
 8000fdc:	f7ff ff7d 	bl	8000eda <LL_TIM_SetCounter>
	waitMs(ms);
 8000fe0:	88bb      	ldrh	r3, [r7, #4]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff5c 	bl	8000ea0 <waitMs>
	stopMelody();
 8000fe8:	f7ff ffd4 	bl	8000f94 <stopMelody>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	000186a0 	.word	0x000186a0
 8000ff8:	40010400 	.word	0x40010400
 8000ffc:	00017318 	.word	0x00017318

08001000 <setLED1State>:
* @return
* (@sa Functions to should refer to)
* @details
*/

void setLED1State(uint8_t state)	{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	if (state == 0) LED1_GPIO_Port->BSRR = LED1_Pin;
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d104      	bne.n	800101a <setLED1State+0x1a>
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <setLED1State+0x30>)
 8001012:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001016:	619a      	str	r2, [r3, #24]
	else			LED1_GPIO_Port->BSRR = (LED1_Pin << 16);
}
 8001018:	e003      	b.n	8001022 <setLED1State+0x22>
	else			LED1_GPIO_Port->BSRR = (LED1_Pin << 16);
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <setLED1State+0x30>)
 800101c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001020:	619a      	str	r2, [r3, #24]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40020400 	.word	0x40020400

08001034 <setLED2State>:
void setLED2State(uint8_t state)	{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
	if (state == 0) LED2_GPIO_Port->BSRR = LED2_Pin;
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d104      	bne.n	800104e <setLED2State+0x1a>
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <setLED2State+0x30>)
 8001046:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800104a:	619a      	str	r2, [r3, #24]
	else			LED2_GPIO_Port->BSRR = (LED2_Pin << 16);
}
 800104c:	e003      	b.n	8001056 <setLED2State+0x22>
	else			LED2_GPIO_Port->BSRR = (LED2_Pin << 16);
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <setLED2State+0x30>)
 8001050:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001054:	619a      	str	r2, [r3, #24]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40020400 	.word	0x40020400

08001068 <setLED3State>:
void setLED3State(uint8_t state)	{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	if (state == 0) LED3_GPIO_Port->BSRR = LED3_Pin;
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d104      	bne.n	8001082 <setLED3State+0x1a>
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <setLED3State+0x30>)
 800107a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800107e:	619a      	str	r2, [r3, #24]
	else			LED3_GPIO_Port->BSRR = (LED3_Pin << 16);
}
 8001080:	e003      	b.n	800108a <setLED3State+0x22>
	else			LED3_GPIO_Port->BSRR = (LED3_Pin << 16);
 8001082:	4b05      	ldr	r3, [pc, #20]	; (8001098 <setLED3State+0x30>)
 8001084:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001088:	619a      	str	r2, [r3, #24]
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40020800 	.word	0x40020800

0800109c <setLED4State>:
void setLED4State(uint8_t state)	{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
	if (state == 0) LED4_GPIO_Port->BSRR = LED4_Pin;
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d103      	bne.n	80010b4 <setLED4State+0x18>
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <setLED4State+0x2c>)
 80010ae:	2210      	movs	r2, #16
 80010b0:	619a      	str	r2, [r3, #24]
	else			LED4_GPIO_Port->BSRR = (LED4_Pin << 16);
}
 80010b2:	e003      	b.n	80010bc <setLED4State+0x20>
	else			LED4_GPIO_Port->BSRR = (LED4_Pin << 16);
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <setLED4State+0x2c>)
 80010b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010ba:	619a      	str	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	40020400 	.word	0x40020400

080010cc <setLED5State>:
void setLED5State(uint8_t state)	{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
	if (state == 0) LED5_GPIO_Port->BSRR = LED5_Pin;
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d103      	bne.n	80010e4 <setLED5State+0x18>
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <setLED5State+0x2c>)
 80010de:	2220      	movs	r2, #32
 80010e0:	619a      	str	r2, [r3, #24]
	else			LED5_GPIO_Port->BSRR = (LED5_Pin << 16);
}
 80010e2:	e003      	b.n	80010ec <setLED5State+0x20>
	else			LED5_GPIO_Port->BSRR = (LED5_Pin << 16);
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <setLED5State+0x2c>)
 80010e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010ea:	619a      	str	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	40020400 	.word	0x40020400

080010fc <callbackTIM>:
#include "System/callback.h"
#include"Hardware/interface_LED.h"

extern uint16_t tim_counter;

void callbackTIM(void){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	static uint16_t l_state;

	tim_counter++;
 8001100:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <callbackTIM+0x3c>)
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	3301      	adds	r3, #1
 8001106:	b29a      	uxth	r2, r3
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <callbackTIM+0x3c>)
 800110a:	801a      	strh	r2, [r3, #0]

	if(tim_counter > 3000) 	l_state = 0;
 800110c:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <callbackTIM+0x3c>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001114:	4293      	cmp	r3, r2
 8001116:	d903      	bls.n	8001120 <callbackTIM+0x24>
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <callbackTIM+0x40>)
 800111a:	2200      	movs	r2, #0
 800111c:	801a      	strh	r2, [r3, #0]
 800111e:	e002      	b.n	8001126 <callbackTIM+0x2a>
	else					l_state = 1;
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <callbackTIM+0x40>)
 8001122:	2201      	movs	r2, #1
 8001124:	801a      	strh	r2, [r3, #0]

	setLED5State(l_state);
 8001126:	4b05      	ldr	r3, [pc, #20]	; (800113c <callbackTIM+0x40>)
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ffcd 	bl	80010cc <setLED5State>

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000200 	.word	0x20000200
 800113c:	200001f0 	.word	0x200001f0

08001140 <MelodySummer>:
#include"Hardware/basic_timer.h"

#include"System/music.h"

void MelodySummer(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	Melody(g6,100);
 8001144:	2164      	movs	r1, #100	; 0x64
 8001146:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 800114a:	f7ff ff2d 	bl	8000fa8 <Melody>
	Melody(c7,100);
 800114e:	2164      	movs	r1, #100	; 0x64
 8001150:	f640 002d 	movw	r0, #2093	; 0x82d
 8001154:	f7ff ff28 	bl	8000fa8 <Melody>
	Melody(d7,100);
 8001158:	2164      	movs	r1, #100	; 0x64
 800115a:	f640 102d 	movw	r0, #2349	; 0x92d
 800115e:	f7ff ff23 	bl	8000fa8 <Melody>
	Melody(e7,100);
 8001162:	2164      	movs	r1, #100	; 0x64
 8001164:	f640 204d 	movw	r0, #2637	; 0xa4d
 8001168:	f7ff ff1e 	bl	8000fa8 <Melody>
	Melody(d7,100);
 800116c:	2164      	movs	r1, #100	; 0x64
 800116e:	f640 102d 	movw	r0, #2349	; 0x92d
 8001172:	f7ff ff19 	bl	8000fa8 <Melody>
	waitMs(50);
 8001176:	2032      	movs	r0, #50	; 0x32
 8001178:	f7ff fe92 	bl	8000ea0 <waitMs>
	Melody(c7,50);
 800117c:	2132      	movs	r1, #50	; 0x32
 800117e:	f640 002d 	movw	r0, #2093	; 0x82d
 8001182:	f7ff ff11 	bl	8000fa8 <Melody>
	waitMs(50);
 8001186:	2032      	movs	r0, #50	; 0x32
 8001188:	f7ff fe8a 	bl	8000ea0 <waitMs>
	Melody(c7,200);
 800118c:	21c8      	movs	r1, #200	; 0xc8
 800118e:	f640 002d 	movw	r0, #2093	; 0x82d
 8001192:	f7ff ff09 	bl	8000fa8 <Melody>
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}

0800119a <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800119a:	b480      	push	{r7}
 800119c:	b089      	sub	sp, #36	; 0x24
 800119e:	af00      	add	r7, sp, #0
 80011a0:	60f8      	str	r0, [r7, #12]
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	332c      	adds	r3, #44	; 0x2c
 80011aa:	4619      	mov	r1, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80011b2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80011b6:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	fa92 f2a2 	rbit	r2, r2
 80011be:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	fab2 f282 	clz	r2, r2
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	40d3      	lsrs	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	f003 031f 	and.w	r3, r3, #31
 80011da:	211f      	movs	r1, #31
 80011dc:	fa01 f303 	lsl.w	r3, r1, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	401a      	ands	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f003 011f 	and.w	r1, r3, #31
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	f003 031f 	and.w	r3, r3, #31
 80011f0:	fa01 f303 	lsl.w	r3, r1, r3
 80011f4:	431a      	orrs	r2, r3
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011fa:	bf00      	nop
 80011fc:	3724      	adds	r7, #36	; 0x24
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	609a      	str	r2, [r3, #8]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800122c:	b480      	push	{r7}
 800122e:	b08d      	sub	sp, #52	; 0x34
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	330c      	adds	r3, #12
 800123c:	4619      	mov	r1, r3
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001244:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001248:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	fa92 f2a2 	rbit	r2, r2
 8001250:	617a      	str	r2, [r7, #20]
  return result;
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	fab2 f282 	clz	r2, r2
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	40d3      	lsrs	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	440b      	add	r3, r1
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 8001262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800126c:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001270:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001272:	6a39      	ldr	r1, [r7, #32]
 8001274:	fa91 f1a1 	rbit	r1, r1
 8001278:	61f9      	str	r1, [r7, #28]
  return result;
 800127a:	69f9      	ldr	r1, [r7, #28]
 800127c:	fab1 f181 	clz	r1, r1
 8001280:	b2c9      	uxtb	r1, r1
 8001282:	40cb      	lsrs	r3, r1
 8001284:	2107      	movs	r1, #7
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	401a      	ands	r2, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001294:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001298:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800129c:	fa91 f1a1 	rbit	r1, r1
 80012a0:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 80012a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012a4:	fab1 f181 	clz	r1, r1
 80012a8:	b2c9      	uxtb	r1, r1
 80012aa:	40cb      	lsrs	r3, r1
 80012ac:	6879      	ldr	r1, [r7, #4]
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	431a      	orrs	r2, r3
 80012b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b6:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80012b8:	bf00      	nop
 80012ba:	3734      	adds	r7, #52	; 0x34
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012d0:	4907      	ldr	r1, [pc, #28]	; (80012f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4013      	ands	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012e2:	68fb      	ldr	r3, [r7, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	40023800 	.word	0x40023800

080012f4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <LL_APB2_GRP1_EnableClock+0x2c>)
 80012fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001300:	4907      	ldr	r1, [pc, #28]	; (8001320 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4313      	orrs	r3, r2
 8001306:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <LL_APB2_GRP1_EnableClock+0x2c>)
 800130a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4013      	ands	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	40023800 	.word	0x40023800

08001324 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b092      	sub	sp, #72	; 0x48
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800132a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001336:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001346:	f107 0318 	add.w	r3, r7, #24
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	463b      	mov	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]
 8001362:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001364:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001368:	f7ff ffc4 	bl	80012f4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800136c:	2001      	movs	r0, #1
 800136e:	f7ff ffa9 	bl	80012c4 <LL_AHB1_GRP1_EnableClock>
  PA1   ------> ADC1_IN1
  PA2   ------> ADC1_IN2
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  */
  GPIO_InitStruct.Pin = AD_FR_Pin|AD_R_Pin|AD_FF_Pin|AD_L_Pin
 8001372:	2337      	movs	r3, #55	; 0x37
 8001374:	603b      	str	r3, [r7, #0]
                          |AD_FL_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001376:	2303      	movs	r3, #3
 8001378:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	463b      	mov	r3, r7
 8001380:	4619      	mov	r1, r3
 8001382:	481f      	ldr	r0, [pc, #124]	; (8001400 <MX_ADC1_Init+0xdc>)
 8001384:	f001 fe0b 	bl	8002f9e <LL_GPIO_Init>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001388:	2300      	movs	r3, #0
 800138a:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800138c:	2300      	movs	r3, #0
 800138e:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001394:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001398:	4619      	mov	r1, r3
 800139a:	481a      	ldr	r0, [pc, #104]	; (8001404 <MX_ADC1_Init+0xe0>)
 800139c:	f001 fc8c 	bl	8002cb8 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80013b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013b8:	4619      	mov	r1, r3
 80013ba:	4812      	ldr	r0, [pc, #72]	; (8001404 <MX_ADC1_Init+0xe0>)
 80013bc:	f001 fca8 	bl	8002d10 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 80013c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013c4:	480f      	ldr	r0, [pc, #60]	; (8001404 <MX_ADC1_Init+0xe0>)
 80013c6:	f7ff ff1e 	bl	8001206 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80013d2:	f107 0318 	add.w	r3, r7, #24
 80013d6:	4619      	mov	r1, r3
 80013d8:	480b      	ldr	r0, [pc, #44]	; (8001408 <MX_ADC1_Init+0xe4>)
 80013da:	f001 fc25 	bl	8002c28 <LL_ADC_CommonInit>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 80013de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e6:	4807      	ldr	r0, [pc, #28]	; (8001404 <MX_ADC1_Init+0xe0>)
 80013e8:	f7ff fed7 	bl	800119a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 80013ec:	2200      	movs	r2, #0
 80013ee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80013f2:	4804      	ldr	r0, [pc, #16]	; (8001404 <MX_ADC1_Init+0xe0>)
 80013f4:	f7ff ff1a 	bl	800122c <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	3748      	adds	r7, #72	; 0x48
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40020000 	.word	0x40020000
 8001404:	40012000 	.word	0x40012000
 8001408:	40012300 	.word	0x40012300

0800140c <LL_AHB1_GRP1_EnableClock>:
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001418:	4907      	ldr	r1, [pc, #28]	; (8001438 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4313      	orrs	r3, r2
 800141e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4013      	ands	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	40023800 	.word	0x40023800

0800143c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	041a      	lsls	r2, r3, #16
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	619a      	str	r2, [r3, #24]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	463b      	mov	r3, r7
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
 8001470:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001472:	2004      	movs	r0, #4
 8001474:	f7ff ffca 	bl	800140c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001478:	2001      	movs	r0, #1
 800147a:	f7ff ffc7 	bl	800140c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800147e:	2002      	movs	r0, #2
 8001480:	f7ff ffc4 	bl	800140c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001484:	2008      	movs	r0, #8
 8001486:	f7ff ffc1 	bl	800140c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, FrontRight_Pin|Right_Pin|STBY_Pin|LED3_Pin);
 800148a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800148e:	4830      	ldr	r0, [pc, #192]	; (8001550 <MX_GPIO_Init+0xf4>)
 8001490:	f7ff ffd4 	bl	800143c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, FrontCenter_Pin|Left_Pin|FrontLeft_Pin|RIGHT_DIR1_Pin
 8001494:	f24c 01c8 	movw	r1, #49352	; 0xc0c8
 8001498:	482e      	ldr	r0, [pc, #184]	; (8001554 <MX_GPIO_Init+0xf8>)
 800149a:	f7ff ffcf 	bl	800143c <LL_GPIO_ResetOutputPin>
                          |RIGHT_DIR2_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LEFT_DIR1_Pin|LEFT_DIR2_Pin|LED1_Pin|LED2_Pin
 800149e:	f24c 0133 	movw	r1, #49203	; 0xc033
 80014a2:	482d      	ldr	r0, [pc, #180]	; (8001558 <MX_GPIO_Init+0xfc>)
 80014a4:	f7ff ffca 	bl	800143c <LL_GPIO_ResetOutputPin>
                          |LED4_Pin|LED5_Pin);

  /**/
  LL_GPIO_ResetOutputPin(SPI_CS_GPIO_Port, SPI_CS_Pin);
 80014a8:	2104      	movs	r1, #4
 80014aa:	482c      	ldr	r0, [pc, #176]	; (800155c <MX_GPIO_Init+0x100>)
 80014ac:	f7ff ffc6 	bl	800143c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = FrontRight_Pin|Right_Pin|STBY_Pin|LED3_Pin;
 80014b0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80014b4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014b6:	2301      	movs	r3, #1
 80014b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c6:	463b      	mov	r3, r7
 80014c8:	4619      	mov	r1, r3
 80014ca:	4821      	ldr	r0, [pc, #132]	; (8001550 <MX_GPIO_Init+0xf4>)
 80014cc:	f001 fd67 	bl	8002f9e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FrontCenter_Pin|Left_Pin|FrontLeft_Pin|RIGHT_DIR1_Pin
 80014d0:	f24c 03c8 	movw	r3, #49352	; 0xc0c8
 80014d4:	603b      	str	r3, [r7, #0]
                          |RIGHT_DIR2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014d6:	2301      	movs	r3, #1
 80014d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	463b      	mov	r3, r7
 80014e8:	4619      	mov	r1, r3
 80014ea:	481a      	ldr	r0, [pc, #104]	; (8001554 <MX_GPIO_Init+0xf8>)
 80014ec:	f001 fd57 	bl	8002f9e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LEFT_DIR1_Pin|LEFT_DIR2_Pin|LED1_Pin|LED2_Pin
 80014f0:	f24c 0333 	movw	r3, #49203	; 0xc033
 80014f4:	603b      	str	r3, [r7, #0]
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014f6:	2301      	movs	r3, #1
 80014f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001506:	463b      	mov	r3, r7
 8001508:	4619      	mov	r1, r3
 800150a:	4813      	ldr	r0, [pc, #76]	; (8001558 <MX_GPIO_Init+0xfc>)
 800150c:	f001 fd47 	bl	8002f9e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001510:	2304      	movs	r3, #4
 8001512:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001514:	2301      	movs	r3, #1
 8001516:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001520:	2300      	movs	r3, #0
 8001522:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001524:	463b      	mov	r3, r7
 8001526:	4619      	mov	r1, r3
 8001528:	480c      	ldr	r0, [pc, #48]	; (800155c <MX_GPIO_Init+0x100>)
 800152a:	f001 fd38 	bl	8002f9e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800152e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001532:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001534:	2300      	movs	r3, #0
 8001536:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001538:	2300      	movs	r3, #0
 800153a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	463b      	mov	r3, r7
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <MX_GPIO_Init+0xfc>)
 8001542:	f001 fd2c 	bl	8002f9e <LL_GPIO_Init>

}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40020800 	.word	0x40020800
 8001554:	40020000 	.word	0x40020000
 8001558:	40020400 	.word	0x40020400
 800155c:	40020c00 	.word	0x40020c00

08001560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800157c:	4013      	ands	r3, r2
 800157e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800158c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001592:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	60d3      	str	r3, [r2, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <LL_RCC_HSI_Enable+0x1c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <LL_RCC_HSI_Enable+0x1c>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6013      	str	r3, [r2, #0]
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800

080015c8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <LL_RCC_HSI_IsReady+0x20>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	bf0c      	ite	eq
 80015d8:	2301      	moveq	r3, #1
 80015da:	2300      	movne	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	40023800 	.word	0x40023800

080015ec <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80015f4:	4b07      	ldr	r3, [pc, #28]	; (8001614 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	4904      	ldr	r1, [pc, #16]	; (8001614 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001602:	4313      	orrs	r3, r2
 8001604:	600b      	str	r3, [r1, #0]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800

08001618 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <LL_RCC_SetSysClkSource+0x24>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f023 0203 	bic.w	r2, r3, #3
 8001628:	4904      	ldr	r1, [pc, #16]	; (800163c <LL_RCC_SetSysClkSource+0x24>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4313      	orrs	r3, r2
 800162e:	608b      	str	r3, [r1, #8]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	40023800 	.word	0x40023800

08001640 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <LL_RCC_GetSysClkSource+0x18>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 030c 	and.w	r3, r3, #12
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800

0800165c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <LL_RCC_SetAHBPrescaler+0x24>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800166c:	4904      	ldr	r1, [pc, #16]	; (8001680 <LL_RCC_SetAHBPrescaler+0x24>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4313      	orrs	r3, r2
 8001672:	608b      	str	r3, [r1, #8]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	40023800 	.word	0x40023800

08001684 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <LL_RCC_SetAPB1Prescaler+0x24>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001694:	4904      	ldr	r1, [pc, #16]	; (80016a8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4313      	orrs	r3, r2
 800169a:	608b      	str	r3, [r1, #8]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	40023800 	.word	0x40023800

080016ac <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016bc:	4904      	ldr	r1, [pc, #16]	; (80016d0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	608b      	str	r3, [r1, #8]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	40023800 	.word	0x40023800

080016d4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <LL_RCC_PLL_Enable+0x1c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <LL_RCC_PLL_Enable+0x1c>)
 80016de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800

080016f4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80016f8:	4b07      	ldr	r3, [pc, #28]	; (8001718 <LL_RCC_PLL_IsReady+0x24>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001700:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001704:	bf0c      	ite	eq
 8001706:	2301      	moveq	r3, #1
 8001708:	2300      	movne	r3, #0
 800170a:	b2db      	uxtb	r3, r3
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800

0800171c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
 8001728:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800172a:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8001730:	4013      	ands	r3, r2
 8001732:	68f9      	ldr	r1, [r7, #12]
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	4311      	orrs	r1, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	0192      	lsls	r2, r2, #6
 800173c:	430a      	orrs	r2, r1
 800173e:	4908      	ldr	r1, [pc, #32]	; (8001760 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800174c:	4904      	ldr	r1, [pc, #16]	; (8001760 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8001754:	bf00      	nop
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	40023800 	.word	0x40023800
 8001764:	ffbf8000 	.word	0xffbf8000

08001768 <LL_APB1_GRP1_EnableClock>:
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001772:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001774:	4907      	ldr	r1, [pc, #28]	; (8001794 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4313      	orrs	r3, r2
 800177a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <LL_APB1_GRP1_EnableClock+0x2c>)
 800177e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4013      	ands	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001786:	68fb      	ldr	r3, [r7, #12]
}
 8001788:	bf00      	nop
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	40023800 	.word	0x40023800

08001798 <LL_APB2_GRP1_EnableClock>:
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80017a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017a4:	4907      	ldr	r1, [pc, #28]	; (80017c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80017ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4013      	ands	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017b6:	68fb      	ldr	r3, [r7, #12]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	40023800 	.word	0x40023800

080017c8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <LL_FLASH_SetLatency+0x24>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f023 0207 	bic.w	r2, r3, #7
 80017d8:	4904      	ldr	r1, [pc, #16]	; (80017ec <LL_FLASH_SetLatency+0x24>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4313      	orrs	r3, r2
 80017de:	600b      	str	r3, [r1, #0]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	40023c00 	.word	0x40023c00

080017f0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <LL_FLASH_GetLatency+0x18>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0307 	and.w	r3, r3, #7
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40023c00 	.word	0x40023c00

0800180c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800181c:	4904      	ldr	r1, [pc, #16]	; (8001830 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4313      	orrs	r3, r2
 8001822:	600b      	str	r3, [r1, #0]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	40007000 	.word	0x40007000

08001834 <LL_TIM_EnableCounter>:
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f043 0201 	orr.w	r2, r3, #1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	601a      	str	r2, [r3, #0]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f043 0201 	orr.w	r2, r3, #1
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	60da      	str	r2, [r3, #12]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001884:	2b80      	cmp	r3, #128	; 0x80
 8001886:	bf0c      	ite	eq
 8001888:	2301      	moveq	r3, #1
 800188a:	2300      	movne	r3, #0
 800188c:	b2db      	uxtb	r3, r3
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	460b      	mov	r3, r1
 80018a4:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80018a6:	78fa      	ldrb	r2, [r7, #3]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	605a      	str	r2, [r3, #4]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int c)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

int __io_putchar(int c) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  LL_USART_TransmitData8(USART1, (uint8_t)c);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	4619      	mov	r1, r3
 80018c6:	4807      	ldr	r0, [pc, #28]	; (80018e4 <__io_putchar+0x2c>)
 80018c8:	f7ff ffe7 	bl	800189a <LL_USART_TransmitData8>
  while(LL_USART_IsActiveFlag_TXE(USART1) == 0);
 80018cc:	bf00      	nop
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <__io_putchar+0x2c>)
 80018d0:	f7ff ffd0 	bl	8001874 <LL_USART_IsActiveFlag_TXE>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f9      	beq.n	80018ce <__io_putchar+0x16>
  return 0;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40011000 	.word	0x40011000

080018e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80018ec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80018f0:	f7ff ff52 	bl	8001798 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80018f4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80018f8:	f7ff ff36 	bl	8001768 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018fc:	2003      	movs	r0, #3
 80018fe:	f7ff fe2f 	bl	8001560 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* USER CODE BEGIN Init */
  setbuf(stdout,NULL);
 8001902:	4b29      	ldr	r3, [pc, #164]	; (80019a8 <main+0xc0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f003 f800 	bl	8004910 <setbuf>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001910:	f000 f852 	bl	80019b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001914:	f7ff fda2 	bl	800145c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001918:	f7ff fd04 	bl	8001324 <MX_ADC1_Init>
  MX_TIM1_Init();
 800191c:	f000 fd4a 	bl	80023b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001920:	f000 fde2 	bl	80024e8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001924:	f000 fe56 	bl	80025d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001928:	f000 fece 	bl	80026c8 <MX_TIM4_Init>
  MX_TIM8_Init();
 800192c:	f000 ff86 	bl	800283c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001930:	f001 f8da 	bl	8002ae8 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8001934:	f000 f8ca 	bl	8001acc <MX_SPI3_Init>
  MX_TIM11_Init();
 8001938:	f001 f81a 	bl	8002970 <MX_TIM11_Init>
  MX_TIM5_Init();
 800193c:	f000 ff3e 	bl	80027bc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  enableMelody();
 8001940:	f7ff fb16 	bl	8000f70 <enableMelody>
  waitMs(1);
 8001944:	2001      	movs	r0, #1
 8001946:	f7ff faab 	bl	8000ea0 <waitMs>
  MelodySummer();
 800194a:	f7ff fbf9 	bl	8001140 <MelodySummer>

  LL_TIM_EnableIT_UPDATE(TIM5);
 800194e:	4817      	ldr	r0, [pc, #92]	; (80019ac <main+0xc4>)
 8001950:	f7ff ff80 	bl	8001854 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM5);
 8001954:	4815      	ldr	r0, [pc, #84]	; (80019ac <main+0xc4>)
 8001956:	f7ff ff6d 	bl	8001834 <LL_TIM_EnableCounter>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  setLED1State(ON);
 800195a:	2001      	movs	r0, #1
 800195c:	f7ff fb50 	bl	8001000 <setLED1State>
	  setLED2State(ON);
 8001960:	2001      	movs	r0, #1
 8001962:	f7ff fb67 	bl	8001034 <setLED2State>
	  setLED3State(ON);
 8001966:	2001      	movs	r0, #1
 8001968:	f7ff fb7e 	bl	8001068 <setLED3State>
	  setLED4State(ON);
 800196c:	2001      	movs	r0, #1
 800196e:	f7ff fb95 	bl	800109c <setLED4State>

	  printf("Hello,World tim = %d\r\n", tim_counter);
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <main+0xc8>)
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	4619      	mov	r1, r3
 8001978:	480e      	ldr	r0, [pc, #56]	; (80019b4 <main+0xcc>)
 800197a:	f002 ffb1 	bl	80048e0 <iprintf>

	  LL_mDelay(500);
 800197e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001982:	f002 fadb 	bl	8003f3c <LL_mDelay>

	  setLED1State(OFF);
 8001986:	2000      	movs	r0, #0
 8001988:	f7ff fb3a 	bl	8001000 <setLED1State>
	  setLED2State(OFF);
 800198c:	2000      	movs	r0, #0
 800198e:	f7ff fb51 	bl	8001034 <setLED2State>
	  setLED3State(OFF);
 8001992:	2000      	movs	r0, #0
 8001994:	f7ff fb68 	bl	8001068 <setLED3State>
	  setLED4State(OFF);
 8001998:	2000      	movs	r0, #0
 800199a:	f7ff fb7f 	bl	800109c <setLED4State>

	  LL_mDelay(500);
 800199e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019a2:	f002 facb 	bl	8003f3c <LL_mDelay>
	  setLED1State(ON);
 80019a6:	e7d8      	b.n	800195a <main+0x72>
 80019a8:	20000004 	.word	0x20000004
 80019ac:	40000c00 	.word	0x40000c00
 80019b0:	20000200 	.word	0x20000200
 80019b4:	08006b98 	.word	0x08006b98

080019b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 80019bc:	2005      	movs	r0, #5
 80019be:	f7ff ff03 	bl	80017c8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 80019c2:	bf00      	nop
 80019c4:	f7ff ff14 	bl	80017f0 <LL_FLASH_GetLatency>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b05      	cmp	r3, #5
 80019cc:	d1fa      	bne.n	80019c4 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80019ce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80019d2:	f7ff ff1b 	bl	800180c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 80019d6:	2010      	movs	r0, #16
 80019d8:	f7ff fe08 	bl	80015ec <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 80019dc:	f7ff fde4 	bl	80015a8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80019e0:	bf00      	nop
 80019e2:	f7ff fdf1 	bl	80015c8 <LL_RCC_HSI_IsReady>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d1fa      	bne.n	80019e2 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 168, LL_RCC_PLLP_DIV_2);
 80019ec:	2300      	movs	r3, #0
 80019ee:	22a8      	movs	r2, #168	; 0xa8
 80019f0:	2108      	movs	r1, #8
 80019f2:	2000      	movs	r0, #0
 80019f4:	f7ff fe92 	bl	800171c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80019f8:	f7ff fe6c 	bl	80016d4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80019fc:	bf00      	nop
 80019fe:	f7ff fe79 	bl	80016f4 <LL_RCC_PLL_IsReady>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d1fa      	bne.n	80019fe <SystemClock_Config+0x46>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f7ff fe27 	bl	800165c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8001a0e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001a12:	f7ff fe37 	bl	8001684 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_4);
 8001a16:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 8001a1a:	f7ff fe47 	bl	80016ac <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001a1e:	2002      	movs	r0, #2
 8001a20:	f7ff fdfa 	bl	8001618 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001a24:	bf00      	nop
 8001a26:	f7ff fe0b 	bl	8001640 <LL_RCC_GetSysClkSource>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d1fa      	bne.n	8001a26 <SystemClock_Config+0x6e>
  {

  }
  LL_Init1msTick(168000000);
 8001a30:	4803      	ldr	r0, [pc, #12]	; (8001a40 <SystemClock_Config+0x88>)
 8001a32:	f002 fa75 	bl	8003f20 <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 8001a36:	4802      	ldr	r0, [pc, #8]	; (8001a40 <SystemClock_Config+0x88>)
 8001a38:	f002 faa6 	bl	8003f88 <LL_SetSystemCoreClock>
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	0a037a00 	.word	0x0a037a00

08001a44 <LL_AHB1_GRP1_EnableClock>:
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a50:	4907      	ldr	r1, [pc, #28]	; (8001a70 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a62:	68fb      	ldr	r3, [r7, #12]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	40023800 	.word	0x40023800

08001a74 <LL_APB1_GRP1_EnableClock>:
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a80:	4907      	ldr	r1, [pc, #28]	; (8001aa0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a92:	68fb      	ldr	r3, [r7, #12]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	40023800 	.word	0x40023800

08001aa4 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f023 0210 	bic.w	r2, r3, #16
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	605a      	str	r2, [r3, #4]
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <MX_SPI3_Init>:

/* USER CODE END 0 */

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b090      	sub	sp, #64	; 0x40
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001ad2:	f107 0318 	add.w	r3, r7, #24
 8001ad6:	2228      	movs	r2, #40	; 0x28
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f002 fa8e 	bl	8003ffc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	463b      	mov	r3, r7
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
 8001aec:	611a      	str	r2, [r3, #16]
 8001aee:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001af0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001af4:	f7ff ffbe 	bl	8001a74 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001af8:	2004      	movs	r0, #4
 8001afa:	f7ff ffa3 	bl	8001a44 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8001afe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b02:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b04:	2302      	movs	r3, #2
 8001b06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b10:	2300      	movs	r3, #0
 8001b12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001b14:	2306      	movs	r3, #6
 8001b16:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b18:	463b      	mov	r3, r7
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4813      	ldr	r0, [pc, #76]	; (8001b6c <MX_SPI3_Init+0xa0>)
 8001b1e:	f001 fa3e 	bl	8002f9e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001b26:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001b2a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001b30:	2302      	movs	r3, #2
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001b34:	2301      	movs	r3, #1
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001b38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001b42:	2300      	movs	r3, #0
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001b4a:	230a      	movs	r3, #10
 8001b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8001b4e:	f107 0318 	add.w	r3, r7, #24
 8001b52:	4619      	mov	r1, r3
 8001b54:	4806      	ldr	r0, [pc, #24]	; (8001b70 <MX_SPI3_Init+0xa4>)
 8001b56:	f001 fbf2 	bl	800333e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4804      	ldr	r0, [pc, #16]	; (8001b70 <MX_SPI3_Init+0xa4>)
 8001b5e:	f7ff ffa1 	bl	8001aa4 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001b62:	bf00      	nop
 8001b64:	3740      	adds	r7, #64	; 0x40
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40020800 	.word	0x40020800
 8001b70:	40003c00 	.word	0x40003c00

08001b74 <LL_TIM_ClearFlag_UPDATE>:
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f06f 0201 	mvn.w	r2, #1
 8001b82:	611a      	str	r2, [r3, #16]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <NMI_Handler+0x4>

08001bbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <HardFault_Handler+0x4>

08001bc2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <MemManage_Handler+0x4>

08001bc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <BusFault_Handler+0x4>

08001bce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <UsageFault_Handler+0x4>

08001bd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	callbackTIM();
 8001c10:	f7ff fa74 	bl	80010fc <callbackTIM>

	if(LL_TIM_IsActiveFlag_UPDATE(TIM5) == 1) {
 8001c14:	4805      	ldr	r0, [pc, #20]	; (8001c2c <TIM5_IRQHandler+0x20>)
 8001c16:	f7ff ffbb 	bl	8001b90 <LL_TIM_IsActiveFlag_UPDATE>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d102      	bne.n	8001c26 <TIM5_IRQHandler+0x1a>
		LL_TIM_ClearFlag_UPDATE(TIM5);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <TIM5_IRQHandler+0x20>)
 8001c22:	f7ff ffa7 	bl	8001b74 <LL_TIM_ClearFlag_UPDATE>

  /* USER CODE END TIM5_IRQn 0 */
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40000c00 	.word	0x40000c00

08001c30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
	return 1;
 8001c34:	2301      	movs	r3, #1
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <_kill>:

int _kill(int pid, int sig)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c4a:	f002 f9ad 	bl	8003fa8 <__errno>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2216      	movs	r2, #22
 8001c52:	601a      	str	r2, [r3, #0]
	return -1;
 8001c54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <_exit>:

void _exit (int status)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c68:	f04f 31ff 	mov.w	r1, #4294967295
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ffe7 	bl	8001c40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c72:	e7fe      	b.n	8001c72 <_exit+0x12>

08001c74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	e00a      	b.n	8001c9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c86:	f3af 8000 	nop.w
 8001c8a:	4601      	mov	r1, r0
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	60ba      	str	r2, [r7, #8]
 8001c92:	b2ca      	uxtb	r2, r1
 8001c94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	dbf0      	blt.n	8001c86 <_read+0x12>
	}

return len;
 8001ca4:	687b      	ldr	r3, [r7, #4]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	60f8      	str	r0, [r7, #12]
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	e009      	b.n	8001cd4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	1c5a      	adds	r2, r3, #1
 8001cc4:	60ba      	str	r2, [r7, #8]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fdf5 	bl	80018b8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	dbf1      	blt.n	8001cc0 <_write+0x12>
	}
	return len;
 8001cdc:	687b      	ldr	r3, [r7, #4]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <_close>:

int _close(int file)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
	return -1;
 8001cee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d0e:	605a      	str	r2, [r3, #4]
	return 0;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <_isatty>:

int _isatty(int file)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
	return 1;
 8001d26:	2301      	movs	r3, #1
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
	return 0;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
	...

08001d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d58:	4a14      	ldr	r2, [pc, #80]	; (8001dac <_sbrk+0x5c>)
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <_sbrk+0x60>)
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d64:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <_sbrk+0x64>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d102      	bne.n	8001d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <_sbrk+0x64>)
 8001d6e:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <_sbrk+0x68>)
 8001d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d72:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <_sbrk+0x64>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d207      	bcs.n	8001d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d80:	f002 f912 	bl	8003fa8 <__errno>
 8001d84:	4603      	mov	r3, r0
 8001d86:	220c      	movs	r2, #12
 8001d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8e:	e009      	b.n	8001da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <_sbrk+0x64>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d96:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <_sbrk+0x64>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	4a05      	ldr	r2, [pc, #20]	; (8001db4 <_sbrk+0x64>)
 8001da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001da2:	68fb      	ldr	r3, [r7, #12]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20020000 	.word	0x20020000
 8001db0:	00000400 	.word	0x00000400
 8001db4:	200001f4 	.word	0x200001f4
 8001db8:	20000210 	.word	0x20000210

08001dbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc0:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <SystemInit+0x28>)
 8001dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc6:	4a07      	ldr	r2, [pc, #28]	; (8001de4 <SystemInit+0x28>)
 8001dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dd0:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <SystemInit+0x28>)
 8001dd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dd6:	609a      	str	r2, [r3, #8]
#endif
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <__NVIC_GetPriorityGrouping+0x18>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	f003 0307 	and.w	r3, r3, #7
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	db0b      	blt.n	8001e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	f003 021f 	and.w	r2, r3, #31
 8001e1c:	4907      	ldr	r1, [pc, #28]	; (8001e3c <__NVIC_EnableIRQ+0x38>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	2001      	movs	r0, #1
 8001e26:	fa00 f202 	lsl.w	r2, r0, r2
 8001e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000e100 	.word	0xe000e100

08001e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	6039      	str	r1, [r7, #0]
 8001e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	db0a      	blt.n	8001e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	490c      	ldr	r1, [pc, #48]	; (8001e8c <__NVIC_SetPriority+0x4c>)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	0112      	lsls	r2, r2, #4
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	440b      	add	r3, r1
 8001e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e68:	e00a      	b.n	8001e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4908      	ldr	r1, [pc, #32]	; (8001e90 <__NVIC_SetPriority+0x50>)
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	3b04      	subs	r3, #4
 8001e78:	0112      	lsls	r2, r2, #4
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	761a      	strb	r2, [r3, #24]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000e100 	.word	0xe000e100
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	; 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f1c3 0307 	rsb	r3, r3, #7
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	bf28      	it	cs
 8001eb2:	2304      	movcs	r3, #4
 8001eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	2b06      	cmp	r3, #6
 8001ebc:	d902      	bls.n	8001ec4 <NVIC_EncodePriority+0x30>
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3b03      	subs	r3, #3
 8001ec2:	e000      	b.n	8001ec6 <NVIC_EncodePriority+0x32>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43da      	mvns	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001edc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee6:	43d9      	mvns	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	4313      	orrs	r3, r2
         );
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3724      	adds	r7, #36	; 0x24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <LL_AHB1_GRP1_EnableClock>:
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001f04:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f08:	4907      	ldr	r1, [pc, #28]	; (8001f28 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4013      	ands	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	40023800 	.word	0x40023800

08001f2c <LL_APB1_GRP1_EnableClock>:
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f38:	4907      	ldr	r1, [pc, #28]	; (8001f58 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4013      	ands	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	40023800 	.word	0x40023800

08001f5c <LL_APB2_GRP1_EnableClock>:
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f64:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f68:	4907      	ldr	r1, [pc, #28]	; (8001f88 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f70:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4013      	ands	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
}
 8001f7c:	bf00      	nop
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	40023800 	.word	0x40023800

08001f8c <LL_TIM_DisableARRPreload>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	601a      	str	r2, [r3, #0]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_TIM_OC_DisableFast>:
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d01c      	beq.n	8001ff6 <LL_TIM_OC_DisableFast+0x4a>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d017      	beq.n	8001ff2 <LL_TIM_OC_DisableFast+0x46>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	2b10      	cmp	r3, #16
 8001fc6:	d012      	beq.n	8001fee <LL_TIM_OC_DisableFast+0x42>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	2b40      	cmp	r3, #64	; 0x40
 8001fcc:	d00d      	beq.n	8001fea <LL_TIM_OC_DisableFast+0x3e>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fd4:	d007      	beq.n	8001fe6 <LL_TIM_OC_DisableFast+0x3a>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fdc:	d101      	bne.n	8001fe2 <LL_TIM_OC_DisableFast+0x36>
 8001fde:	2305      	movs	r3, #5
 8001fe0:	e00a      	b.n	8001ff8 <LL_TIM_OC_DisableFast+0x4c>
 8001fe2:	2306      	movs	r3, #6
 8001fe4:	e008      	b.n	8001ff8 <LL_TIM_OC_DisableFast+0x4c>
 8001fe6:	2304      	movs	r3, #4
 8001fe8:	e006      	b.n	8001ff8 <LL_TIM_OC_DisableFast+0x4c>
 8001fea:	2303      	movs	r3, #3
 8001fec:	e004      	b.n	8001ff8 <LL_TIM_OC_DisableFast+0x4c>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e002      	b.n	8001ff8 <LL_TIM_OC_DisableFast+0x4c>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <LL_TIM_OC_DisableFast+0x4c>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3318      	adds	r3, #24
 8001ffe:	4619      	mov	r1, r3
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	4a0b      	ldr	r2, [pc, #44]	; (8002030 <LL_TIM_OC_DisableFast+0x84>)
 8002004:	5cd3      	ldrb	r3, [r2, r3]
 8002006:	440b      	add	r3, r1
 8002008:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	4908      	ldr	r1, [pc, #32]	; (8002034 <LL_TIM_OC_DisableFast+0x88>)
 8002012:	5ccb      	ldrb	r3, [r1, r3]
 8002014:	4619      	mov	r1, r3
 8002016:	2304      	movs	r3, #4
 8002018:	408b      	lsls	r3, r1
 800201a:	43db      	mvns	r3, r3
 800201c:	401a      	ands	r2, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	601a      	str	r2, [r3, #0]
}
 8002022:	bf00      	nop
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	08006bc8 	.word	0x08006bc8
 8002034:	08006bd0 	.word	0x08006bd0

08002038 <LL_TIM_OC_EnablePreload>:
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d01c      	beq.n	8002082 <LL_TIM_OC_EnablePreload+0x4a>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	2b04      	cmp	r3, #4
 800204c:	d017      	beq.n	800207e <LL_TIM_OC_EnablePreload+0x46>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2b10      	cmp	r3, #16
 8002052:	d012      	beq.n	800207a <LL_TIM_OC_EnablePreload+0x42>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	2b40      	cmp	r3, #64	; 0x40
 8002058:	d00d      	beq.n	8002076 <LL_TIM_OC_EnablePreload+0x3e>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002060:	d007      	beq.n	8002072 <LL_TIM_OC_EnablePreload+0x3a>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002068:	d101      	bne.n	800206e <LL_TIM_OC_EnablePreload+0x36>
 800206a:	2305      	movs	r3, #5
 800206c:	e00a      	b.n	8002084 <LL_TIM_OC_EnablePreload+0x4c>
 800206e:	2306      	movs	r3, #6
 8002070:	e008      	b.n	8002084 <LL_TIM_OC_EnablePreload+0x4c>
 8002072:	2304      	movs	r3, #4
 8002074:	e006      	b.n	8002084 <LL_TIM_OC_EnablePreload+0x4c>
 8002076:	2303      	movs	r3, #3
 8002078:	e004      	b.n	8002084 <LL_TIM_OC_EnablePreload+0x4c>
 800207a:	2302      	movs	r3, #2
 800207c:	e002      	b.n	8002084 <LL_TIM_OC_EnablePreload+0x4c>
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <LL_TIM_OC_EnablePreload+0x4c>
 8002082:	2300      	movs	r3, #0
 8002084:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3318      	adds	r3, #24
 800208a:	4619      	mov	r1, r3
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <LL_TIM_OC_EnablePreload+0x80>)
 8002090:	5cd3      	ldrb	r3, [r2, r3]
 8002092:	440b      	add	r3, r1
 8002094:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	4907      	ldr	r1, [pc, #28]	; (80020bc <LL_TIM_OC_EnablePreload+0x84>)
 800209e:	5ccb      	ldrb	r3, [r1, r3]
 80020a0:	4619      	mov	r1, r3
 80020a2:	2308      	movs	r3, #8
 80020a4:	408b      	lsls	r3, r1
 80020a6:	431a      	orrs	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	601a      	str	r2, [r3, #0]
}
 80020ac:	bf00      	nop
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	08006bc8 	.word	0x08006bc8
 80020bc:	08006bd0 	.word	0x08006bd0

080020c0 <LL_TIM_IC_SetActiveInput>:
{
 80020c0:	b480      	push	{r7}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d01c      	beq.n	800210c <LL_TIM_IC_SetActiveInput+0x4c>
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d017      	beq.n	8002108 <LL_TIM_IC_SetActiveInput+0x48>
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2b10      	cmp	r3, #16
 80020dc:	d012      	beq.n	8002104 <LL_TIM_IC_SetActiveInput+0x44>
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b40      	cmp	r3, #64	; 0x40
 80020e2:	d00d      	beq.n	8002100 <LL_TIM_IC_SetActiveInput+0x40>
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020ea:	d007      	beq.n	80020fc <LL_TIM_IC_SetActiveInput+0x3c>
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020f2:	d101      	bne.n	80020f8 <LL_TIM_IC_SetActiveInput+0x38>
 80020f4:	2305      	movs	r3, #5
 80020f6:	e00a      	b.n	800210e <LL_TIM_IC_SetActiveInput+0x4e>
 80020f8:	2306      	movs	r3, #6
 80020fa:	e008      	b.n	800210e <LL_TIM_IC_SetActiveInput+0x4e>
 80020fc:	2304      	movs	r3, #4
 80020fe:	e006      	b.n	800210e <LL_TIM_IC_SetActiveInput+0x4e>
 8002100:	2303      	movs	r3, #3
 8002102:	e004      	b.n	800210e <LL_TIM_IC_SetActiveInput+0x4e>
 8002104:	2302      	movs	r3, #2
 8002106:	e002      	b.n	800210e <LL_TIM_IC_SetActiveInput+0x4e>
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <LL_TIM_IC_SetActiveInput+0x4e>
 800210c:	2300      	movs	r3, #0
 800210e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	3318      	adds	r3, #24
 8002114:	4619      	mov	r1, r3
 8002116:	7dfb      	ldrb	r3, [r7, #23]
 8002118:	4a0e      	ldr	r2, [pc, #56]	; (8002154 <LL_TIM_IC_SetActiveInput+0x94>)
 800211a:	5cd3      	ldrb	r3, [r2, r3]
 800211c:	440b      	add	r3, r1
 800211e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	7dfb      	ldrb	r3, [r7, #23]
 8002126:	490c      	ldr	r1, [pc, #48]	; (8002158 <LL_TIM_IC_SetActiveInput+0x98>)
 8002128:	5ccb      	ldrb	r3, [r1, r3]
 800212a:	4619      	mov	r1, r3
 800212c:	2303      	movs	r3, #3
 800212e:	408b      	lsls	r3, r1
 8002130:	43db      	mvns	r3, r3
 8002132:	401a      	ands	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	0c1b      	lsrs	r3, r3, #16
 8002138:	7df9      	ldrb	r1, [r7, #23]
 800213a:	4807      	ldr	r0, [pc, #28]	; (8002158 <LL_TIM_IC_SetActiveInput+0x98>)
 800213c:	5c41      	ldrb	r1, [r0, r1]
 800213e:	408b      	lsls	r3, r1
 8002140:	431a      	orrs	r2, r3
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	601a      	str	r2, [r3, #0]
}
 8002146:	bf00      	nop
 8002148:	371c      	adds	r7, #28
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	08006bc8 	.word	0x08006bc8
 8002158:	08006bd8 	.word	0x08006bd8

0800215c <LL_TIM_IC_SetPrescaler>:
{
 800215c:	b480      	push	{r7}
 800215e:	b087      	sub	sp, #28
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d01c      	beq.n	80021a8 <LL_TIM_IC_SetPrescaler+0x4c>
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b04      	cmp	r3, #4
 8002172:	d017      	beq.n	80021a4 <LL_TIM_IC_SetPrescaler+0x48>
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b10      	cmp	r3, #16
 8002178:	d012      	beq.n	80021a0 <LL_TIM_IC_SetPrescaler+0x44>
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2b40      	cmp	r3, #64	; 0x40
 800217e:	d00d      	beq.n	800219c <LL_TIM_IC_SetPrescaler+0x40>
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002186:	d007      	beq.n	8002198 <LL_TIM_IC_SetPrescaler+0x3c>
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800218e:	d101      	bne.n	8002194 <LL_TIM_IC_SetPrescaler+0x38>
 8002190:	2305      	movs	r3, #5
 8002192:	e00a      	b.n	80021aa <LL_TIM_IC_SetPrescaler+0x4e>
 8002194:	2306      	movs	r3, #6
 8002196:	e008      	b.n	80021aa <LL_TIM_IC_SetPrescaler+0x4e>
 8002198:	2304      	movs	r3, #4
 800219a:	e006      	b.n	80021aa <LL_TIM_IC_SetPrescaler+0x4e>
 800219c:	2303      	movs	r3, #3
 800219e:	e004      	b.n	80021aa <LL_TIM_IC_SetPrescaler+0x4e>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e002      	b.n	80021aa <LL_TIM_IC_SetPrescaler+0x4e>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <LL_TIM_IC_SetPrescaler+0x4e>
 80021a8:	2300      	movs	r3, #0
 80021aa:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	3318      	adds	r3, #24
 80021b0:	4619      	mov	r1, r3
 80021b2:	7dfb      	ldrb	r3, [r7, #23]
 80021b4:	4a0e      	ldr	r2, [pc, #56]	; (80021f0 <LL_TIM_IC_SetPrescaler+0x94>)
 80021b6:	5cd3      	ldrb	r3, [r2, r3]
 80021b8:	440b      	add	r3, r1
 80021ba:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	7dfb      	ldrb	r3, [r7, #23]
 80021c2:	490c      	ldr	r1, [pc, #48]	; (80021f4 <LL_TIM_IC_SetPrescaler+0x98>)
 80021c4:	5ccb      	ldrb	r3, [r1, r3]
 80021c6:	4619      	mov	r1, r3
 80021c8:	230c      	movs	r3, #12
 80021ca:	408b      	lsls	r3, r1
 80021cc:	43db      	mvns	r3, r3
 80021ce:	401a      	ands	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	0c1b      	lsrs	r3, r3, #16
 80021d4:	7df9      	ldrb	r1, [r7, #23]
 80021d6:	4807      	ldr	r0, [pc, #28]	; (80021f4 <LL_TIM_IC_SetPrescaler+0x98>)
 80021d8:	5c41      	ldrb	r1, [r0, r1]
 80021da:	408b      	lsls	r3, r1
 80021dc:	431a      	orrs	r2, r3
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	601a      	str	r2, [r3, #0]
}
 80021e2:	bf00      	nop
 80021e4:	371c      	adds	r7, #28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	08006bc8 	.word	0x08006bc8
 80021f4:	08006bd8 	.word	0x08006bd8

080021f8 <LL_TIM_IC_SetFilter>:
{
 80021f8:	b480      	push	{r7}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d01c      	beq.n	8002244 <LL_TIM_IC_SetFilter+0x4c>
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b04      	cmp	r3, #4
 800220e:	d017      	beq.n	8002240 <LL_TIM_IC_SetFilter+0x48>
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b10      	cmp	r3, #16
 8002214:	d012      	beq.n	800223c <LL_TIM_IC_SetFilter+0x44>
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2b40      	cmp	r3, #64	; 0x40
 800221a:	d00d      	beq.n	8002238 <LL_TIM_IC_SetFilter+0x40>
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002222:	d007      	beq.n	8002234 <LL_TIM_IC_SetFilter+0x3c>
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800222a:	d101      	bne.n	8002230 <LL_TIM_IC_SetFilter+0x38>
 800222c:	2305      	movs	r3, #5
 800222e:	e00a      	b.n	8002246 <LL_TIM_IC_SetFilter+0x4e>
 8002230:	2306      	movs	r3, #6
 8002232:	e008      	b.n	8002246 <LL_TIM_IC_SetFilter+0x4e>
 8002234:	2304      	movs	r3, #4
 8002236:	e006      	b.n	8002246 <LL_TIM_IC_SetFilter+0x4e>
 8002238:	2303      	movs	r3, #3
 800223a:	e004      	b.n	8002246 <LL_TIM_IC_SetFilter+0x4e>
 800223c:	2302      	movs	r3, #2
 800223e:	e002      	b.n	8002246 <LL_TIM_IC_SetFilter+0x4e>
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <LL_TIM_IC_SetFilter+0x4e>
 8002244:	2300      	movs	r3, #0
 8002246:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	3318      	adds	r3, #24
 800224c:	4619      	mov	r1, r3
 800224e:	7dfb      	ldrb	r3, [r7, #23]
 8002250:	4a0e      	ldr	r2, [pc, #56]	; (800228c <LL_TIM_IC_SetFilter+0x94>)
 8002252:	5cd3      	ldrb	r3, [r2, r3]
 8002254:	440b      	add	r3, r1
 8002256:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	7dfb      	ldrb	r3, [r7, #23]
 800225e:	490c      	ldr	r1, [pc, #48]	; (8002290 <LL_TIM_IC_SetFilter+0x98>)
 8002260:	5ccb      	ldrb	r3, [r1, r3]
 8002262:	4619      	mov	r1, r3
 8002264:	23f0      	movs	r3, #240	; 0xf0
 8002266:	408b      	lsls	r3, r1
 8002268:	43db      	mvns	r3, r3
 800226a:	401a      	ands	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	0c1b      	lsrs	r3, r3, #16
 8002270:	7df9      	ldrb	r1, [r7, #23]
 8002272:	4807      	ldr	r0, [pc, #28]	; (8002290 <LL_TIM_IC_SetFilter+0x98>)
 8002274:	5c41      	ldrb	r1, [r0, r1]
 8002276:	408b      	lsls	r3, r1
 8002278:	431a      	orrs	r2, r3
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	601a      	str	r2, [r3, #0]
}
 800227e:	bf00      	nop
 8002280:	371c      	adds	r7, #28
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	08006bc8 	.word	0x08006bc8
 8002290:	08006bd8 	.word	0x08006bd8

08002294 <LL_TIM_IC_SetPolarity>:
{
 8002294:	b480      	push	{r7}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d01c      	beq.n	80022e0 <LL_TIM_IC_SetPolarity+0x4c>
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d017      	beq.n	80022dc <LL_TIM_IC_SetPolarity+0x48>
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2b10      	cmp	r3, #16
 80022b0:	d012      	beq.n	80022d8 <LL_TIM_IC_SetPolarity+0x44>
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2b40      	cmp	r3, #64	; 0x40
 80022b6:	d00d      	beq.n	80022d4 <LL_TIM_IC_SetPolarity+0x40>
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022be:	d007      	beq.n	80022d0 <LL_TIM_IC_SetPolarity+0x3c>
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022c6:	d101      	bne.n	80022cc <LL_TIM_IC_SetPolarity+0x38>
 80022c8:	2305      	movs	r3, #5
 80022ca:	e00a      	b.n	80022e2 <LL_TIM_IC_SetPolarity+0x4e>
 80022cc:	2306      	movs	r3, #6
 80022ce:	e008      	b.n	80022e2 <LL_TIM_IC_SetPolarity+0x4e>
 80022d0:	2304      	movs	r3, #4
 80022d2:	e006      	b.n	80022e2 <LL_TIM_IC_SetPolarity+0x4e>
 80022d4:	2303      	movs	r3, #3
 80022d6:	e004      	b.n	80022e2 <LL_TIM_IC_SetPolarity+0x4e>
 80022d8:	2302      	movs	r3, #2
 80022da:	e002      	b.n	80022e2 <LL_TIM_IC_SetPolarity+0x4e>
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <LL_TIM_IC_SetPolarity+0x4e>
 80022e0:	2300      	movs	r3, #0
 80022e2:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a1a      	ldr	r2, [r3, #32]
 80022e8:	7dfb      	ldrb	r3, [r7, #23]
 80022ea:	490b      	ldr	r1, [pc, #44]	; (8002318 <LL_TIM_IC_SetPolarity+0x84>)
 80022ec:	5ccb      	ldrb	r3, [r1, r3]
 80022ee:	4619      	mov	r1, r3
 80022f0:	230a      	movs	r3, #10
 80022f2:	408b      	lsls	r3, r1
 80022f4:	43db      	mvns	r3, r3
 80022f6:	401a      	ands	r2, r3
 80022f8:	7dfb      	ldrb	r3, [r7, #23]
 80022fa:	4907      	ldr	r1, [pc, #28]	; (8002318 <LL_TIM_IC_SetPolarity+0x84>)
 80022fc:	5ccb      	ldrb	r3, [r1, r3]
 80022fe:	4619      	mov	r1, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	408b      	lsls	r3, r1
 8002304:	431a      	orrs	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	621a      	str	r2, [r3, #32]
}
 800230a:	bf00      	nop
 800230c:	371c      	adds	r7, #28
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	08006be0 	.word	0x08006be0

0800231c <LL_TIM_SetClockSource>:
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800232e:	f023 0307 	bic.w	r3, r3, #7
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	609a      	str	r2, [r3, #8]
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <LL_TIM_SetEncoderMode>:
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f023 0207 	bic.w	r2, r3, #7
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	609a      	str	r2, [r3, #8]
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <LL_TIM_SetTriggerOutput>:
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	605a      	str	r2, [r3, #4]
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <LL_TIM_DisableMasterSlaveMode>:
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	609a      	str	r2, [r3, #8]
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
	...

080023b4 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b09a      	sub	sp, #104	; 0x68
 80023b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80023ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]
 80023c4:	609a      	str	r2, [r3, #8]
 80023c6:	60da      	str	r2, [r3, #12]
 80023c8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80023ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023ce:	2220      	movs	r2, #32
 80023d0:	2100      	movs	r1, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f001 fe12 	bl	8003ffc <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80023d8:	f107 031c 	add.w	r3, r7, #28
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]
 80023e8:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ea:	1d3b      	adds	r3, r7, #4
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	611a      	str	r2, [r3, #16]
 80023f8:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80023fa:	2001      	movs	r0, #1
 80023fc:	f7ff fdae 	bl	8001f5c <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002406:	2300      	movs	r3, #0
 8002408:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 800240a:	4b34      	ldr	r3, [pc, #208]	; (80024dc <MX_TIM1_Init+0x128>)
 800240c:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800240e:	2300      	movs	r3, #0
 8002410:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	667b      	str	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8002416:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800241a:	4619      	mov	r1, r3
 800241c:	4830      	ldr	r0, [pc, #192]	; (80024e0 <MX_TIM1_Init+0x12c>)
 800241e:	f001 f853 	bl	80034c8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8002422:	482f      	ldr	r0, [pc, #188]	; (80024e0 <MX_TIM1_Init+0x12c>)
 8002424:	f7ff fdb2 	bl	8001f8c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002428:	2100      	movs	r1, #0
 800242a:	482d      	ldr	r0, [pc, #180]	; (80024e0 <MX_TIM1_Init+0x12c>)
 800242c:	f7ff ff76 	bl	800231c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8002430:	2101      	movs	r1, #1
 8002432:	482b      	ldr	r0, [pc, #172]	; (80024e0 <MX_TIM1_Init+0x12c>)
 8002434:	f7ff fe00 	bl	8002038 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002438:	2360      	movs	r3, #96	; 0x60
 800243a:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800243c:	2300      	movs	r3, #0
 800243e:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002440:	2300      	movs	r3, #0
 8002442:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002448:	2300      	movs	r3, #0
 800244a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 800244c:	2300      	movs	r3, #0
 800244e:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002450:	2300      	movs	r3, #0
 8002452:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002454:	2300      	movs	r3, #0
 8002456:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002458:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800245c:	461a      	mov	r2, r3
 800245e:	2101      	movs	r1, #1
 8002460:	481f      	ldr	r0, [pc, #124]	; (80024e0 <MX_TIM1_Init+0x12c>)
 8002462:	f001 f8cb 	bl	80035fc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8002466:	2101      	movs	r1, #1
 8002468:	481d      	ldr	r0, [pc, #116]	; (80024e0 <MX_TIM1_Init+0x12c>)
 800246a:	f7ff fd9f 	bl	8001fac <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800246e:	2100      	movs	r1, #0
 8002470:	481b      	ldr	r0, [pc, #108]	; (80024e0 <MX_TIM1_Init+0x12c>)
 8002472:	f7ff ff7b 	bl	800236c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8002476:	481a      	ldr	r0, [pc, #104]	; (80024e0 <MX_TIM1_Init+0x12c>)
 8002478:	f7ff ff8b 	bl	8002392 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 800247c:	2300      	movs	r3, #0
 800247e:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8002480:	2300      	movs	r3, #0
 8002482:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8002484:	2300      	movs	r3, #0
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 800248e:	2300      	movs	r3, #0
 8002490:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8002492:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8002498:	2300      	movs	r3, #0
 800249a:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 800249c:	f107 031c 	add.w	r3, r7, #28
 80024a0:	4619      	mov	r1, r3
 80024a2:	480f      	ldr	r0, [pc, #60]	; (80024e0 <MX_TIM1_Init+0x12c>)
 80024a4:	f001 f8eb 	bl	800367e <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80024a8:	2001      	movs	r0, #1
 80024aa:	f7ff fd27 	bl	8001efc <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
  GPIO_InitStruct.Pin = LEFT_PWM_Pin;
 80024ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80024b4:	2302      	movs	r3, #2
 80024b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80024c4:	2301      	movs	r3, #1
 80024c6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(LEFT_PWM_GPIO_Port, &GPIO_InitStruct);
 80024c8:	1d3b      	adds	r3, r7, #4
 80024ca:	4619      	mov	r1, r3
 80024cc:	4805      	ldr	r0, [pc, #20]	; (80024e4 <MX_TIM1_Init+0x130>)
 80024ce:	f000 fd66 	bl	8002f9e <LL_GPIO_Init>

}
 80024d2:	bf00      	nop
 80024d4:	3768      	adds	r7, #104	; 0x68
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	fff003e8 	.word	0xfff003e8
 80024e0:	40010000 	.word	0x40010000
 80024e4:	40020000 	.word	0x40020000

080024e8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b094      	sub	sp, #80	; 0x50
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80024ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	609a      	str	r2, [r3, #8]
 80024fa:	60da      	str	r2, [r3, #12]
 80024fc:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80024fe:	f107 031c 	add.w	r3, r7, #28
 8002502:	2220      	movs	r2, #32
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f001 fd78 	bl	8003ffc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]
 8002514:	609a      	str	r2, [r3, #8]
 8002516:	60da      	str	r2, [r3, #12]
 8002518:	611a      	str	r2, [r3, #16]
 800251a:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 800251c:	2001      	movs	r0, #1
 800251e:	f7ff fd05 	bl	8001f2c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002526:	2300      	movs	r3, #0
 8002528:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 800252a:	4b28      	ldr	r3, [pc, #160]	; (80025cc <MX_TIM2_Init+0xe4>)
 800252c:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800252e:	2300      	movs	r3, #0
 8002530:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002532:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002536:	4619      	mov	r1, r3
 8002538:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800253c:	f000 ffc4 	bl	80034c8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8002540:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002544:	f7ff fd22 	bl	8001f8c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002548:	2100      	movs	r1, #0
 800254a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800254e:	f7ff fee5 	bl	800231c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 8002552:	2110      	movs	r1, #16
 8002554:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002558:	f7ff fd6e 	bl	8002038 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800255c:	2360      	movs	r3, #96	; 0x60
 800255e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002560:	2300      	movs	r3, #0
 8002562:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002564:	2300      	movs	r3, #0
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800256c:	2300      	movs	r3, #0
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002570:	f107 031c 	add.w	r3, r7, #28
 8002574:	461a      	mov	r2, r3
 8002576:	2110      	movs	r1, #16
 8002578:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800257c:	f001 f83e 	bl	80035fc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8002580:	2110      	movs	r1, #16
 8002582:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002586:	f7ff fd11 	bl	8001fac <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800258a:	2100      	movs	r1, #0
 800258c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002590:	f7ff feec 	bl	800236c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002594:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002598:	f7ff fefb 	bl	8002392 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800259c:	2002      	movs	r0, #2
 800259e:	f7ff fcad 	bl	8001efc <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
  GPIO_InitStruct.Pin = RIGHT_PWM_Pin;
 80025a2:	2308      	movs	r3, #8
 80025a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80025a6:	2302      	movs	r3, #2
 80025a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80025b6:	2301      	movs	r3, #1
 80025b8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(RIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 80025ba:	1d3b      	adds	r3, r7, #4
 80025bc:	4619      	mov	r1, r3
 80025be:	4804      	ldr	r0, [pc, #16]	; (80025d0 <MX_TIM2_Init+0xe8>)
 80025c0:	f000 fced 	bl	8002f9e <LL_GPIO_Init>

}
 80025c4:	bf00      	nop
 80025c6:	3750      	adds	r7, #80	; 0x50
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	fff003e8 	.word	0xfff003e8
 80025d0:	40020400 	.word	0x40020400

080025d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08c      	sub	sp, #48	; 0x30
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80025da:	f107 031c 	add.w	r3, r7, #28
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	60da      	str	r2, [r3, #12]
 80025e8:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ea:	1d3b      	adds	r3, r7, #4
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	611a      	str	r2, [r3, #16]
 80025f8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80025fa:	2002      	movs	r0, #2
 80025fc:	f7ff fc96 	bl	8001f2c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002600:	2004      	movs	r0, #4
 8002602:	f7ff fc7b 	bl	8001efc <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PC6   ------> TIM3_CH1
  PC7   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = ENCODER_L_CH1_Pin|ENCODER_L_CH2_Pin;
 8002606:	23c0      	movs	r3, #192	; 0xc0
 8002608:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800260a:	2302      	movs	r3, #2
 800260c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800261a:	2302      	movs	r3, #2
 800261c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	4619      	mov	r1, r3
 8002622:	4827      	ldr	r0, [pc, #156]	; (80026c0 <MX_TIM3_Init+0xec>)
 8002624:	f000 fcbb 	bl	8002f9e <LL_GPIO_Init>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X2_TI1);
 8002628:	2101      	movs	r1, #1
 800262a:	4826      	ldr	r0, [pc, #152]	; (80026c4 <MX_TIM3_Init+0xf0>)
 800262c:	f7ff fe8b 	bl	8002346 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002630:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002634:	2101      	movs	r1, #1
 8002636:	4823      	ldr	r0, [pc, #140]	; (80026c4 <MX_TIM3_Init+0xf0>)
 8002638:	f7ff fd42 	bl	80020c0 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 800263c:	2200      	movs	r2, #0
 800263e:	2101      	movs	r1, #1
 8002640:	4820      	ldr	r0, [pc, #128]	; (80026c4 <MX_TIM3_Init+0xf0>)
 8002642:	f7ff fd8b 	bl	800215c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8002646:	2200      	movs	r2, #0
 8002648:	2101      	movs	r1, #1
 800264a:	481e      	ldr	r0, [pc, #120]	; (80026c4 <MX_TIM3_Init+0xf0>)
 800264c:	f7ff fdd4 	bl	80021f8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8002650:	2200      	movs	r2, #0
 8002652:	2101      	movs	r1, #1
 8002654:	481b      	ldr	r0, [pc, #108]	; (80026c4 <MX_TIM3_Init+0xf0>)
 8002656:	f7ff fe1d 	bl	8002294 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 800265a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800265e:	2110      	movs	r1, #16
 8002660:	4818      	ldr	r0, [pc, #96]	; (80026c4 <MX_TIM3_Init+0xf0>)
 8002662:	f7ff fd2d 	bl	80020c0 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8002666:	2200      	movs	r2, #0
 8002668:	2110      	movs	r1, #16
 800266a:	4816      	ldr	r0, [pc, #88]	; (80026c4 <MX_TIM3_Init+0xf0>)
 800266c:	f7ff fd76 	bl	800215c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8002670:	2200      	movs	r2, #0
 8002672:	2110      	movs	r1, #16
 8002674:	4813      	ldr	r0, [pc, #76]	; (80026c4 <MX_TIM3_Init+0xf0>)
 8002676:	f7ff fdbf 	bl	80021f8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 800267a:	2200      	movs	r2, #0
 800267c:	2110      	movs	r1, #16
 800267e:	4811      	ldr	r0, [pc, #68]	; (80026c4 <MX_TIM3_Init+0xf0>)
 8002680:	f7ff fe08 	bl	8002294 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002688:	2300      	movs	r3, #0
 800268a:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 800268c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002692:	2300      	movs	r3, #0
 8002694:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002696:	f107 031c 	add.w	r3, r7, #28
 800269a:	4619      	mov	r1, r3
 800269c:	4809      	ldr	r0, [pc, #36]	; (80026c4 <MX_TIM3_Init+0xf0>)
 800269e:	f000 ff13 	bl	80034c8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80026a2:	4808      	ldr	r0, [pc, #32]	; (80026c4 <MX_TIM3_Init+0xf0>)
 80026a4:	f7ff fc72 	bl	8001f8c <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80026a8:	2100      	movs	r1, #0
 80026aa:	4806      	ldr	r0, [pc, #24]	; (80026c4 <MX_TIM3_Init+0xf0>)
 80026ac:	f7ff fe5e 	bl	800236c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80026b0:	4804      	ldr	r0, [pc, #16]	; (80026c4 <MX_TIM3_Init+0xf0>)
 80026b2:	f7ff fe6e 	bl	8002392 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026b6:	bf00      	nop
 80026b8:	3730      	adds	r7, #48	; 0x30
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40020800 	.word	0x40020800
 80026c4:	40000400 	.word	0x40000400

080026c8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08c      	sub	sp, #48	; 0x30
 80026cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80026ce:	f107 031c 	add.w	r3, r7, #28
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	609a      	str	r2, [r3, #8]
 80026da:	60da      	str	r2, [r3, #12]
 80026dc:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026de:	1d3b      	adds	r3, r7, #4
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
 80026ec:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 80026ee:	2004      	movs	r0, #4
 80026f0:	f7ff fc1c 	bl	8001f2c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80026f4:	2002      	movs	r0, #2
 80026f6:	f7ff fc01 	bl	8001efc <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PB6   ------> TIM4_CH1
  PB7   ------> TIM4_CH2
  */
  GPIO_InitStruct.Pin = ENCODER_R_CH1_Pin|ENCODER_R_CH2_Pin;
 80026fa:	23c0      	movs	r3, #192	; 0xc0
 80026fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80026fe:	2302      	movs	r3, #2
 8002700:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800270e:	2302      	movs	r3, #2
 8002710:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002712:	1d3b      	adds	r3, r7, #4
 8002714:	4619      	mov	r1, r3
 8002716:	4827      	ldr	r0, [pc, #156]	; (80027b4 <MX_TIM4_Init+0xec>)
 8002718:	f000 fc41 	bl	8002f9e <LL_GPIO_Init>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  LL_TIM_SetEncoderMode(TIM4, LL_TIM_ENCODERMODE_X2_TI1);
 800271c:	2101      	movs	r1, #1
 800271e:	4826      	ldr	r0, [pc, #152]	; (80027b8 <MX_TIM4_Init+0xf0>)
 8002720:	f7ff fe11 	bl	8002346 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002724:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002728:	2101      	movs	r1, #1
 800272a:	4823      	ldr	r0, [pc, #140]	; (80027b8 <MX_TIM4_Init+0xf0>)
 800272c:	f7ff fcc8 	bl	80020c0 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8002730:	2200      	movs	r2, #0
 8002732:	2101      	movs	r1, #1
 8002734:	4820      	ldr	r0, [pc, #128]	; (80027b8 <MX_TIM4_Init+0xf0>)
 8002736:	f7ff fd11 	bl	800215c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 800273a:	2200      	movs	r2, #0
 800273c:	2101      	movs	r1, #1
 800273e:	481e      	ldr	r0, [pc, #120]	; (80027b8 <MX_TIM4_Init+0xf0>)
 8002740:	f7ff fd5a 	bl	80021f8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8002744:	2200      	movs	r2, #0
 8002746:	2101      	movs	r1, #1
 8002748:	481b      	ldr	r0, [pc, #108]	; (80027b8 <MX_TIM4_Init+0xf0>)
 800274a:	f7ff fda3 	bl	8002294 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 800274e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002752:	2110      	movs	r1, #16
 8002754:	4818      	ldr	r0, [pc, #96]	; (80027b8 <MX_TIM4_Init+0xf0>)
 8002756:	f7ff fcb3 	bl	80020c0 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 800275a:	2200      	movs	r2, #0
 800275c:	2110      	movs	r1, #16
 800275e:	4816      	ldr	r0, [pc, #88]	; (80027b8 <MX_TIM4_Init+0xf0>)
 8002760:	f7ff fcfc 	bl	800215c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8002764:	2200      	movs	r2, #0
 8002766:	2110      	movs	r1, #16
 8002768:	4813      	ldr	r0, [pc, #76]	; (80027b8 <MX_TIM4_Init+0xf0>)
 800276a:	f7ff fd45 	bl	80021f8 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 800276e:	2200      	movs	r2, #0
 8002770:	2110      	movs	r1, #16
 8002772:	4811      	ldr	r0, [pc, #68]	; (80027b8 <MX_TIM4_Init+0xf0>)
 8002774:	f7ff fd8e 	bl	8002294 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800277c:	2300      	movs	r3, #0
 800277e:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8002780:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002786:	2300      	movs	r3, #0
 8002788:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 800278a:	f107 031c 	add.w	r3, r7, #28
 800278e:	4619      	mov	r1, r3
 8002790:	4809      	ldr	r0, [pc, #36]	; (80027b8 <MX_TIM4_Init+0xf0>)
 8002792:	f000 fe99 	bl	80034c8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8002796:	4808      	ldr	r0, [pc, #32]	; (80027b8 <MX_TIM4_Init+0xf0>)
 8002798:	f7ff fbf8 	bl	8001f8c <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 800279c:	2100      	movs	r1, #0
 800279e:	4806      	ldr	r0, [pc, #24]	; (80027b8 <MX_TIM4_Init+0xf0>)
 80027a0:	f7ff fde4 	bl	800236c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 80027a4:	4804      	ldr	r0, [pc, #16]	; (80027b8 <MX_TIM4_Init+0xf0>)
 80027a6:	f7ff fdf4 	bl	8002392 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80027aa:	bf00      	nop
 80027ac:	3730      	adds	r7, #48	; 0x30
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40020400 	.word	0x40020400
 80027b8:	40000800 	.word	0x40000800

080027bc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
 80027ce:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 80027d0:	2008      	movs	r0, #8
 80027d2:	f7ff fbab 	bl	8001f2c <LL_APB1_GRP1_EnableClock>

  /* TIM5 interrupt Init */
  NVIC_SetPriority(TIM5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80027d6:	f7ff fb07 	bl	8001de8 <__NVIC_GetPriorityGrouping>
 80027da:	4603      	mov	r3, r0
 80027dc:	2200      	movs	r2, #0
 80027de:	2100      	movs	r1, #0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fb57 	bl	8001e94 <NVIC_EncodePriority>
 80027e6:	4603      	mov	r3, r0
 80027e8:	4619      	mov	r1, r3
 80027ea:	2032      	movs	r0, #50	; 0x32
 80027ec:	f7ff fb28 	bl	8001e40 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 80027f0:	2032      	movs	r0, #50	; 0x32
 80027f2:	f7ff fb07 	bl	8001e04 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 83;
 80027f6:	2353      	movs	r3, #83	; 0x53
 80027f8:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 80027fe:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002802:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002804:	2300      	movs	r3, #0
 8002806:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8002808:	1d3b      	adds	r3, r7, #4
 800280a:	4619      	mov	r1, r3
 800280c:	480a      	ldr	r0, [pc, #40]	; (8002838 <MX_TIM5_Init+0x7c>)
 800280e:	f000 fe5b 	bl	80034c8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 8002812:	4809      	ldr	r0, [pc, #36]	; (8002838 <MX_TIM5_Init+0x7c>)
 8002814:	f7ff fbba 	bl	8001f8c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002818:	2100      	movs	r1, #0
 800281a:	4807      	ldr	r0, [pc, #28]	; (8002838 <MX_TIM5_Init+0x7c>)
 800281c:	f7ff fd7e 	bl	800231c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8002820:	2100      	movs	r1, #0
 8002822:	4805      	ldr	r0, [pc, #20]	; (8002838 <MX_TIM5_Init+0x7c>)
 8002824:	f7ff fda2 	bl	800236c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8002828:	4803      	ldr	r0, [pc, #12]	; (8002838 <MX_TIM5_Init+0x7c>)
 800282a:	f7ff fdb2 	bl	8002392 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800282e:	bf00      	nop
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40000c00 	.word	0x40000c00

0800283c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b09a      	sub	sp, #104	; 0x68
 8002840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002842:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	60da      	str	r2, [r3, #12]
 8002850:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002852:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002856:	2220      	movs	r2, #32
 8002858:	2100      	movs	r1, #0
 800285a:	4618      	mov	r0, r3
 800285c:	f001 fbce 	bl	8003ffc <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8002860:	f107 031c 	add.w	r3, r7, #28
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	60da      	str	r2, [r3, #12]
 800286e:	611a      	str	r2, [r3, #16]
 8002870:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002872:	1d3b      	adds	r3, r7, #4
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
 8002880:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 8002882:	2002      	movs	r0, #2
 8002884:	f7ff fb6a 	bl	8001f5c <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  TIM_InitStruct.Prescaler = 840-1;
 8002888:	f240 3347 	movw	r3, #839	; 0x347
 800288c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002890:	2300      	movs	r3, #0
 8002892:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.Autoreload = 10000;
 8002894:	f242 7310 	movw	r3, #10000	; 0x2710
 8002898:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800289a:	2300      	movs	r3, #0
 800289c:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_InitStruct.RepetitionCounter = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	667b      	str	r3, [r7, #100]	; 0x64
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 80028a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028a6:	4619      	mov	r1, r3
 80028a8:	482f      	ldr	r0, [pc, #188]	; (8002968 <MX_TIM8_Init+0x12c>)
 80028aa:	f000 fe0d 	bl	80034c8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM8);
 80028ae:	482e      	ldr	r0, [pc, #184]	; (8002968 <MX_TIM8_Init+0x12c>)
 80028b0:	f7ff fb6c 	bl	8001f8c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM8, LL_TIM_CLOCKSOURCE_INTERNAL);
 80028b4:	2100      	movs	r1, #0
 80028b6:	482c      	ldr	r0, [pc, #176]	; (8002968 <MX_TIM8_Init+0x12c>)
 80028b8:	f7ff fd30 	bl	800231c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM8, LL_TIM_CHANNEL_CH4);
 80028bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028c0:	4829      	ldr	r0, [pc, #164]	; (8002968 <MX_TIM8_Init+0x12c>)
 80028c2:	f7ff fbb9 	bl	8002038 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80028c6:	2360      	movs	r3, #96	; 0x60
 80028c8:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80028ca:	2300      	movs	r3, #0
 80028cc:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.CompareValue = 100;
 80028d2:	2364      	movs	r3, #100	; 0x64
 80028d4:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80028d6:	2300      	movs	r3, #0
 80028d8:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80028da:	2300      	movs	r3, #0
 80028dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80028de:	2300      	movs	r3, #0
 80028e0:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80028e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028e6:	461a      	mov	r2, r3
 80028e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028ec:	481e      	ldr	r0, [pc, #120]	; (8002968 <MX_TIM8_Init+0x12c>)
 80028ee:	f000 fe85 	bl	80035fc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM8, LL_TIM_CHANNEL_CH4);
 80028f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028f6:	481c      	ldr	r0, [pc, #112]	; (8002968 <MX_TIM8_Init+0x12c>)
 80028f8:	f7ff fb58 	bl	8001fac <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM8, LL_TIM_TRGO_RESET);
 80028fc:	2100      	movs	r1, #0
 80028fe:	481a      	ldr	r0, [pc, #104]	; (8002968 <MX_TIM8_Init+0x12c>)
 8002900:	f7ff fd34 	bl	800236c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM8);
 8002904:	4818      	ldr	r0, [pc, #96]	; (8002968 <MX_TIM8_Init+0x12c>)
 8002906:	f7ff fd44 	bl	8002392 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 800290e:	2300      	movs	r3, #0
 8002910:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 800291c:	2300      	movs	r3, #0
 800291e:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8002920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002924:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8002926:	2300      	movs	r3, #0
 8002928:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_BDTR_Init(TIM8, &TIM_BDTRInitStruct);
 800292a:	f107 031c 	add.w	r3, r7, #28
 800292e:	4619      	mov	r1, r3
 8002930:	480d      	ldr	r0, [pc, #52]	; (8002968 <MX_TIM8_Init+0x12c>)
 8002932:	f000 fea4 	bl	800367e <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002936:	2004      	movs	r0, #4
 8002938:	f7ff fae0 	bl	8001efc <LL_AHB1_GRP1_EnableClock>
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 800293c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002940:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002942:	2302      	movs	r3, #2
 8002944:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8002952:	2303      	movs	r3, #3
 8002954:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002956:	1d3b      	adds	r3, r7, #4
 8002958:	4619      	mov	r1, r3
 800295a:	4804      	ldr	r0, [pc, #16]	; (800296c <MX_TIM8_Init+0x130>)
 800295c:	f000 fb1f 	bl	8002f9e <LL_GPIO_Init>

}
 8002960:	bf00      	nop
 8002962:	3768      	adds	r7, #104	; 0x68
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40010400 	.word	0x40010400
 800296c:	40020800 	.word	0x40020800

08002970 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b094      	sub	sp, #80	; 0x50
 8002974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002976:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	609a      	str	r2, [r3, #8]
 8002982:	60da      	str	r2, [r3, #12]
 8002984:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002986:	f107 031c 	add.w	r3, r7, #28
 800298a:	2220      	movs	r2, #32
 800298c:	2100      	movs	r1, #0
 800298e:	4618      	mov	r0, r3
 8002990:	f001 fb34 	bl	8003ffc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002994:	1d3b      	adds	r3, r7, #4
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	605a      	str	r2, [r3, #4]
 800299c:	609a      	str	r2, [r3, #8]
 800299e:	60da      	str	r2, [r3, #12]
 80029a0:	611a      	str	r2, [r3, #16]
 80029a2:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM11);
 80029a4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80029a8:	f7ff fad8 	bl	8001f5c <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80029b0:	2300      	movs	r3, #0
 80029b2:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 65535;
 80029b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029b8:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80029ba:	2300      	movs	r3, #0
 80029bc:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM11, &TIM_InitStruct);
 80029be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029c2:	4619      	mov	r1, r3
 80029c4:	481b      	ldr	r0, [pc, #108]	; (8002a34 <MX_TIM11_Init+0xc4>)
 80029c6:	f000 fd7f 	bl	80034c8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM11);
 80029ca:	481a      	ldr	r0, [pc, #104]	; (8002a34 <MX_TIM11_Init+0xc4>)
 80029cc:	f7ff fade 	bl	8001f8c <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM11, LL_TIM_CHANNEL_CH1);
 80029d0:	2101      	movs	r1, #1
 80029d2:	4818      	ldr	r0, [pc, #96]	; (8002a34 <MX_TIM11_Init+0xc4>)
 80029d4:	f7ff fb30 	bl	8002038 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80029d8:	2360      	movs	r3, #96	; 0x60
 80029da:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80029dc:	2300      	movs	r3, #0
 80029de:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80029e0:	2300      	movs	r3, #0
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80029e8:	2300      	movs	r3, #0
 80029ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM11, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80029ec:	f107 031c 	add.w	r3, r7, #28
 80029f0:	461a      	mov	r2, r3
 80029f2:	2101      	movs	r1, #1
 80029f4:	480f      	ldr	r0, [pc, #60]	; (8002a34 <MX_TIM11_Init+0xc4>)
 80029f6:	f000 fe01 	bl	80035fc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM11, LL_TIM_CHANNEL_CH1);
 80029fa:	2101      	movs	r1, #1
 80029fc:	480d      	ldr	r0, [pc, #52]	; (8002a34 <MX_TIM11_Init+0xc4>)
 80029fe:	f7ff fad5 	bl	8001fac <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002a02:	2002      	movs	r0, #2
 8002a04:	f7ff fa7a 	bl	8001efc <LL_AHB1_GRP1_EnableClock>
    /**TIM11 GPIO Configuration
    PB9     ------> TIM11_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8002a08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a22:	1d3b      	adds	r3, r7, #4
 8002a24:	4619      	mov	r1, r3
 8002a26:	4804      	ldr	r0, [pc, #16]	; (8002a38 <MX_TIM11_Init+0xc8>)
 8002a28:	f000 fab9 	bl	8002f9e <LL_GPIO_Init>

}
 8002a2c:	bf00      	nop
 8002a2e:	3750      	adds	r7, #80	; 0x50
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40014800 	.word	0x40014800
 8002a38:	40020400 	.word	0x40020400

08002a3c <LL_AHB1_GRP1_EnableClock>:
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002a44:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a48:	4907      	ldr	r1, [pc, #28]	; (8002a68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4013      	ands	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
}
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	40023800 	.word	0x40023800

08002a6c <LL_APB2_GRP1_EnableClock>:
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a78:	4907      	ldr	r1, [pc, #28]	; (8002a98 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4013      	ands	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
}
 8002a8c:	bf00      	nop
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	40023800 	.word	0x40023800

08002a9c <LL_USART_Enable>:
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	60da      	str	r2, [r3, #12]
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <LL_USART_ConfigAsyncMode>:
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	615a      	str	r2, [r3, #20]
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08e      	sub	sp, #56	; 0x38
 8002aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002aee:	f107 031c 	add.w	r3, r7, #28
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	605a      	str	r2, [r3, #4]
 8002af8:	609a      	str	r2, [r3, #8]
 8002afa:	60da      	str	r2, [r3, #12]
 8002afc:	611a      	str	r2, [r3, #16]
 8002afe:	615a      	str	r2, [r3, #20]
 8002b00:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b02:	1d3b      	adds	r3, r7, #4
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	611a      	str	r2, [r3, #16]
 8002b10:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002b12:	2010      	movs	r0, #16
 8002b14:	f7ff ffaa 	bl	8002a6c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002b18:	2001      	movs	r0, #1
 8002b1a:	f7ff ff8f 	bl	8002a3c <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8002b1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002b24:	2302      	movs	r3, #2
 8002b26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002b34:	2307      	movs	r3, #7
 8002b36:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b38:	1d3b      	adds	r3, r7, #4
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4810      	ldr	r0, [pc, #64]	; (8002b80 <MX_USART1_UART_Init+0x98>)
 8002b3e:	f000 fa2e 	bl	8002f9e <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8002b42:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002b46:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002b50:	2300      	movs	r3, #0
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002b54:	230c      	movs	r3, #12
 8002b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8002b60:	f107 031c 	add.w	r3, r7, #28
 8002b64:	4619      	mov	r1, r3
 8002b66:	4807      	ldr	r0, [pc, #28]	; (8002b84 <MX_USART1_UART_Init+0x9c>)
 8002b68:	f001 f940 	bl	8003dec <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8002b6c:	4805      	ldr	r0, [pc, #20]	; (8002b84 <MX_USART1_UART_Init+0x9c>)
 8002b6e:	f7ff ffa5 	bl	8002abc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8002b72:	4804      	ldr	r0, [pc, #16]	; (8002b84 <MX_USART1_UART_Init+0x9c>)
 8002b74:	f7ff ff92 	bl	8002a9c <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b78:	bf00      	nop
 8002b7a:	3738      	adds	r7, #56	; 0x38
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40020000 	.word	0x40020000
 8002b84:	40011000 	.word	0x40011000

08002b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bc0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b8e:	e003      	b.n	8002b98 <LoopCopyDataInit>

08002b90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b96:	3104      	adds	r1, #4

08002b98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b98:	480b      	ldr	r0, [pc, #44]	; (8002bc8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b9a:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ba0:	d3f6      	bcc.n	8002b90 <CopyDataInit>
  ldr  r2, =_sbss
 8002ba2:	4a0b      	ldr	r2, [pc, #44]	; (8002bd0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ba4:	e002      	b.n	8002bac <LoopFillZerobss>

08002ba6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ba6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ba8:	f842 3b04 	str.w	r3, [r2], #4

08002bac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002bac:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002bae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002bb0:	d3f9      	bcc.n	8002ba6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002bb2:	f7ff f903 	bl	8001dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bb6:	f001 f9fd 	bl	8003fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bba:	f7fe fe95 	bl	80018e8 <main>
  bx  lr    
 8002bbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002bc0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002bc4:	08006fdc 	.word	0x08006fdc
  ldr  r0, =_sdata
 8002bc8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002bcc:	200001d4 	.word	0x200001d4
  ldr  r2, =_sbss
 8002bd0:	200001d4 	.word	0x200001d4
  ldr  r3, = _ebss
 8002bd4:	20000210 	.word	0x20000210

08002bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bd8:	e7fe      	b.n	8002bd8 <ADC_IRQHandler>

08002bda <LL_ADC_REG_SetSequencerLength>:
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	bf0c      	ite	eq
 8002c14:	2301      	moveq	r3, #1
 8002c16:	2300      	movne	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002c28:	b590      	push	{r4, r7, lr}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002c32:	2300      	movs	r3, #0
 8002c34:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8002c36:	481c      	ldr	r0, [pc, #112]	; (8002ca8 <LL_ADC_CommonInit+0x80>)
 8002c38:	f7ff ffe2 	bl	8002c00 <LL_ADC_IsEnabled>
 8002c3c:	4604      	mov	r4, r0
 8002c3e:	481b      	ldr	r0, [pc, #108]	; (8002cac <LL_ADC_CommonInit+0x84>)
 8002c40:	f7ff ffde 	bl	8002c00 <LL_ADC_IsEnabled>
 8002c44:	4603      	mov	r3, r0
 8002c46:	431c      	orrs	r4, r3
 8002c48:	4819      	ldr	r0, [pc, #100]	; (8002cb0 <LL_ADC_CommonInit+0x88>)
 8002c4a:	f7ff ffd9 	bl	8002c00 <LL_ADC_IsEnabled>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	4323      	orrs	r3, r4
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d120      	bne.n	8002c98 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d012      	beq.n	8002c84 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	4b14      	ldr	r3, [pc, #80]	; (8002cb4 <LL_ADC_CommonInit+0x8c>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	6811      	ldr	r1, [r2, #0]
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	6852      	ldr	r2, [r2, #4]
 8002c6e:	4311      	orrs	r1, r2
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	6892      	ldr	r2, [r2, #8]
 8002c74:	4311      	orrs	r1, r2
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	68d2      	ldr	r2, [r2, #12]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	e00b      	b.n	8002c9c <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <LL_ADC_CommonInit+0x8c>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	e001      	b.n	8002c9c <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd90      	pop	{r4, r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40012000 	.word	0x40012000
 8002cac:	40012100 	.word	0x40012100
 8002cb0:	40012200 	.word	0x40012200
 8002cb4:	fffc10e0 	.word	0xfffc10e0

08002cb8 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff ff9a 	bl	8002c00 <LL_ADC_IsEnabled>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d117      	bne.n	8002d02 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002cda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	6811      	ldr	r1, [r2, #0]
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	6892      	ldr	r2, [r2, #8]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	e001      	b.n	8002d06 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff ff6e 	bl	8002c00 <LL_ADC_IsEnabled>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d12b      	bne.n	8002d82 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d009      	beq.n	8002d46 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	605a      	str	r2, [r3, #4]
 8002d44:	e005      	b.n	8002d52 <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	4b0e      	ldr	r3, [pc, #56]	; (8002d90 <LL_ADC_REG_Init+0x80>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	6812      	ldr	r2, [r2, #0]
 8002d5e:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	68d2      	ldr	r2, [r2, #12]
 8002d66:	4311      	orrs	r1, r2
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	6912      	ldr	r2, [r2, #16]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4619      	mov	r1, r3
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff ff2d 	bl	8002bda <LL_ADC_REG_SetSequencerLength>
 8002d80:	e001      	b.n	8002d86 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	c0fffcfd 	.word	0xc0fffcfd

08002d94 <LL_GPIO_SetPinMode>:
{
 8002d94:	b480      	push	{r7}
 8002d96:	b089      	sub	sp, #36	; 0x24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	fa93 f3a3 	rbit	r3, r3
 8002dae:	613b      	str	r3, [r7, #16]
  return result;
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	2103      	movs	r1, #3
 8002dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	fa93 f3a3 	rbit	r3, r3
 8002dce:	61bb      	str	r3, [r7, #24]
  return result;
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	fab3 f383 	clz	r3, r3
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8002de0:	431a      	orrs	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	601a      	str	r2, [r3, #0]
}
 8002de6:	bf00      	nop
 8002de8:	3724      	adds	r7, #36	; 0x24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <LL_GPIO_SetPinOutputType>:
{
 8002df2:	b480      	push	{r7}
 8002df4:	b085      	sub	sp, #20
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	401a      	ands	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	431a      	orrs	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	605a      	str	r2, [r3, #4]
}
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <LL_GPIO_SetPinSpeed>:
{
 8002e22:	b480      	push	{r7}
 8002e24:	b089      	sub	sp, #36	; 0x24
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	fa93 f3a3 	rbit	r3, r3
 8002e3c:	613b      	str	r3, [r7, #16]
  return result;
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	fab3 f383 	clz	r3, r3
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	2103      	movs	r1, #3
 8002e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	401a      	ands	r2, r3
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	fa93 f3a3 	rbit	r3, r3
 8002e5c:	61bb      	str	r3, [r7, #24]
  return result;
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	fab3 f383 	clz	r3, r3
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	609a      	str	r2, [r3, #8]
}
 8002e74:	bf00      	nop
 8002e76:	3724      	adds	r7, #36	; 0x24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_GPIO_SetPinPull>:
{
 8002e80:	b480      	push	{r7}
 8002e82:	b089      	sub	sp, #36	; 0x24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	613b      	str	r3, [r7, #16]
  return result;
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	fab3 f383 	clz	r3, r3
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	2103      	movs	r1, #3
 8002ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	401a      	ands	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	fa93 f3a3 	rbit	r3, r3
 8002eba:	61bb      	str	r3, [r7, #24]
  return result;
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	fab3 f383 	clz	r3, r3
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	60da      	str	r2, [r3, #12]
}
 8002ed2:	bf00      	nop
 8002ed4:	3724      	adds	r7, #36	; 0x24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <LL_GPIO_SetAFPin_0_7>:
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b089      	sub	sp, #36	; 0x24
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a1a      	ldr	r2, [r3, #32]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	fa93 f3a3 	rbit	r3, r3
 8002ef8:	613b      	str	r3, [r7, #16]
  return result;
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	fab3 f383 	clz	r3, r3
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	210f      	movs	r1, #15
 8002f06:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	401a      	ands	r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	fa93 f3a3 	rbit	r3, r3
 8002f18:	61bb      	str	r3, [r7, #24]
  return result;
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	fab3 f383 	clz	r3, r3
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	621a      	str	r2, [r3, #32]
}
 8002f30:	bf00      	nop
 8002f32:	3724      	adds	r7, #36	; 0x24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <LL_GPIO_SetAFPin_8_15>:
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b089      	sub	sp, #36	; 0x24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	0a1b      	lsrs	r3, r3, #8
 8002f50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	fa93 f3a3 	rbit	r3, r3
 8002f58:	613b      	str	r3, [r7, #16]
  return result;
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	fab3 f383 	clz	r3, r3
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	210f      	movs	r1, #15
 8002f66:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	401a      	ands	r2, r3
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	0a1b      	lsrs	r3, r3, #8
 8002f72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	fa93 f3a3 	rbit	r3, r3
 8002f7a:	61bb      	str	r3, [r7, #24]
  return result;
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	fab3 f383 	clz	r3, r3
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002f92:	bf00      	nop
 8002f94:	3724      	adds	r7, #36	; 0x24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b088      	sub	sp, #32
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	fa93 f3a3 	rbit	r3, r3
 8002fbc:	613b      	str	r3, [r7, #16]
  return result;
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	fab3 f383 	clz	r3, r3
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002fc8:	e050      	b.n	800306c <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	2101      	movs	r1, #1
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d042      	beq.n	8003066 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d003      	beq.n	8002ff0 <LL_GPIO_Init+0x52>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d10d      	bne.n	800300c <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	69b9      	ldr	r1, [r7, #24]
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff ff12 	bl	8002e22 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	461a      	mov	r2, r3
 8003004:	69b9      	ldr	r1, [r7, #24]
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff fef3 	bl	8002df2 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	461a      	mov	r2, r3
 8003012:	69b9      	ldr	r1, [r7, #24]
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff ff33 	bl	8002e80 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d11a      	bne.n	8003058 <LL_GPIO_Init+0xba>
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	60bb      	str	r3, [r7, #8]
  return result;
 800302e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b07      	cmp	r3, #7
 8003038:	d807      	bhi.n	800304a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	461a      	mov	r2, r3
 8003040:	69b9      	ldr	r1, [r7, #24]
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff ff4b 	bl	8002ede <LL_GPIO_SetAFPin_0_7>
 8003048:	e006      	b.n	8003058 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	461a      	mov	r2, r3
 8003050:	69b9      	ldr	r1, [r7, #24]
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff ff72 	bl	8002f3c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	461a      	mov	r2, r3
 800305e:	69b9      	ldr	r1, [r7, #24]
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7ff fe97 	bl	8002d94 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	3301      	adds	r3, #1
 800306a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	fa22 f303 	lsr.w	r3, r2, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1a7      	bne.n	8002fca <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3720      	adds	r7, #32
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <LL_RCC_GetSysClkSource>:
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003088:	4b04      	ldr	r3, [pc, #16]	; (800309c <LL_RCC_GetSysClkSource+0x18>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 030c 	and.w	r3, r3, #12
}
 8003090:	4618      	mov	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40023800 	.word	0x40023800

080030a0 <LL_RCC_GetAHBPrescaler>:
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80030a4:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <LL_RCC_GetAHBPrescaler+0x18>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40023800 	.word	0x40023800

080030bc <LL_RCC_GetAPB1Prescaler>:
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80030c0:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <LL_RCC_GetAPB1Prescaler+0x18>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800

080030d8 <LL_RCC_GetAPB2Prescaler>:
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80030dc:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <LL_RCC_GetAPB2Prescaler+0x18>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	40023800 	.word	0x40023800

080030f4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80030f8:	4b04      	ldr	r3, [pc, #16]	; (800310c <LL_RCC_PLL_GetMainSource+0x18>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003100:	4618      	mov	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40023800 	.word	0x40023800

08003110 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003114:	4b04      	ldr	r3, [pc, #16]	; (8003128 <LL_RCC_PLL_GetN+0x18>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	099b      	lsrs	r3, r3, #6
 800311a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800311e:	4618      	mov	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	40023800 	.word	0x40023800

0800312c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003130:	4b04      	ldr	r3, [pc, #16]	; (8003144 <LL_RCC_PLL_GetP+0x18>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003138:	4618      	mov	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40023800 	.word	0x40023800

08003148 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800314c:	4b04      	ldr	r3, [pc, #16]	; (8003160 <LL_RCC_PLL_GetDivider+0x18>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003154:	4618      	mov	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40023800 	.word	0x40023800

08003164 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800316c:	f000 f820 	bl	80031b0 <RCC_GetSystemClockFreq>
 8003170:	4602      	mov	r2, r0
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f000 f840 	bl	8003200 <RCC_GetHCLKClockFreq>
 8003180:	4602      	mov	r2, r0
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4618      	mov	r0, r3
 800318c:	f000 f84e 	bl	800322c <RCC_GetPCLK1ClockFreq>
 8003190:	4602      	mov	r2, r0
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	4618      	mov	r0, r3
 800319c:	f000 f85a 	bl	8003254 <RCC_GetPCLK2ClockFreq>
 80031a0:	4602      	mov	r2, r0
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	60da      	str	r2, [r3, #12]
}
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80031ba:	f7ff ff63 	bl	8003084 <LL_RCC_GetSysClkSource>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d00c      	beq.n	80031de <RCC_GetSystemClockFreq+0x2e>
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d80f      	bhi.n	80031e8 <RCC_GetSystemClockFreq+0x38>
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <RCC_GetSystemClockFreq+0x22>
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d003      	beq.n	80031d8 <RCC_GetSystemClockFreq+0x28>
 80031d0:	e00a      	b.n	80031e8 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80031d2:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <RCC_GetSystemClockFreq+0x48>)
 80031d4:	607b      	str	r3, [r7, #4]
      break;
 80031d6:	e00a      	b.n	80031ee <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80031d8:	4b08      	ldr	r3, [pc, #32]	; (80031fc <RCC_GetSystemClockFreq+0x4c>)
 80031da:	607b      	str	r3, [r7, #4]
      break;
 80031dc:	e007      	b.n	80031ee <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80031de:	2008      	movs	r0, #8
 80031e0:	f000 f84c 	bl	800327c <RCC_PLL_GetFreqDomain_SYS>
 80031e4:	6078      	str	r0, [r7, #4]
      break;
 80031e6:	e002      	b.n	80031ee <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80031e8:	4b03      	ldr	r3, [pc, #12]	; (80031f8 <RCC_GetSystemClockFreq+0x48>)
 80031ea:	607b      	str	r3, [r7, #4]
      break;
 80031ec:	bf00      	nop
  }

  return frequency;
 80031ee:	687b      	ldr	r3, [r7, #4]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	00f42400 	.word	0x00f42400
 80031fc:	017d7840 	.word	0x017d7840

08003200 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003208:	f7ff ff4a 	bl	80030a0 <LL_RCC_GetAHBPrescaler>
 800320c:	4603      	mov	r3, r0
 800320e:	091b      	lsrs	r3, r3, #4
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	4a04      	ldr	r2, [pc, #16]	; (8003228 <RCC_GetHCLKClockFreq+0x28>)
 8003216:	5cd3      	ldrb	r3, [r2, r3]
 8003218:	461a      	mov	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	40d3      	lsrs	r3, r2
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	08006bb0 	.word	0x08006bb0

0800322c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003234:	f7ff ff42 	bl	80030bc <LL_RCC_GetAPB1Prescaler>
 8003238:	4603      	mov	r3, r0
 800323a:	0a9b      	lsrs	r3, r3, #10
 800323c:	4a04      	ldr	r2, [pc, #16]	; (8003250 <RCC_GetPCLK1ClockFreq+0x24>)
 800323e:	5cd3      	ldrb	r3, [r2, r3]
 8003240:	461a      	mov	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	40d3      	lsrs	r3, r2
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	08006bc0 	.word	0x08006bc0

08003254 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800325c:	f7ff ff3c 	bl	80030d8 <LL_RCC_GetAPB2Prescaler>
 8003260:	4603      	mov	r3, r0
 8003262:	0b5b      	lsrs	r3, r3, #13
 8003264:	4a04      	ldr	r2, [pc, #16]	; (8003278 <RCC_GetPCLK2ClockFreq+0x24>)
 8003266:	5cd3      	ldrb	r3, [r2, r3]
 8003268:	461a      	mov	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	40d3      	lsrs	r3, r2
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	08006bc0 	.word	0x08006bc0

0800327c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800327c:	b590      	push	{r4, r7, lr}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	2300      	movs	r3, #0
 800328e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003290:	f7ff ff30 	bl	80030f4 <LL_RCC_PLL_GetMainSource>
 8003294:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d004      	beq.n	80032a6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032a2:	d003      	beq.n	80032ac <RCC_PLL_GetFreqDomain_SYS+0x30>
 80032a4:	e005      	b.n	80032b2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80032a6:	4b12      	ldr	r3, [pc, #72]	; (80032f0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80032a8:	617b      	str	r3, [r7, #20]
      break;
 80032aa:	e005      	b.n	80032b8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80032ac:	4b11      	ldr	r3, [pc, #68]	; (80032f4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80032ae:	617b      	str	r3, [r7, #20]
      break;
 80032b0:	e002      	b.n	80032b8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80032b2:	4b0f      	ldr	r3, [pc, #60]	; (80032f0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80032b4:	617b      	str	r3, [r7, #20]
      break;
 80032b6:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d113      	bne.n	80032e6 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80032be:	f7ff ff43 	bl	8003148 <LL_RCC_PLL_GetDivider>
 80032c2:	4602      	mov	r2, r0
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	fbb3 f4f2 	udiv	r4, r3, r2
 80032ca:	f7ff ff21 	bl	8003110 <LL_RCC_PLL_GetN>
 80032ce:	4603      	mov	r3, r0
 80032d0:	fb03 f404 	mul.w	r4, r3, r4
 80032d4:	f7ff ff2a 	bl	800312c <LL_RCC_PLL_GetP>
 80032d8:	4603      	mov	r3, r0
 80032da:	0c1b      	lsrs	r3, r3, #16
 80032dc:	3301      	adds	r3, #1
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	fbb4 f3f3 	udiv	r3, r4, r3
 80032e4:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80032e6:	693b      	ldr	r3, [r7, #16]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	371c      	adds	r7, #28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd90      	pop	{r4, r7, pc}
 80032f0:	00f42400 	.word	0x00f42400
 80032f4:	017d7840 	.word	0x017d7840

080032f8 <LL_SPI_IsEnabled>:
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003308:	2b40      	cmp	r3, #64	; 0x40
 800330a:	d101      	bne.n	8003310 <LL_SPI_IsEnabled+0x18>
 800330c:	2301      	movs	r3, #1
 800330e:	e000      	b.n	8003312 <LL_SPI_IsEnabled+0x1a>
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	611a      	str	r2, [r3, #16]
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
 8003346:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff ffd3 	bl	80032f8 <LL_SPI_IsEnabled>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d139      	bne.n	80033cc <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003360:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	6811      	ldr	r1, [r2, #0]
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	6852      	ldr	r2, [r2, #4]
 800336c:	4311      	orrs	r1, r2
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	6892      	ldr	r2, [r2, #8]
 8003372:	4311      	orrs	r1, r2
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	68d2      	ldr	r2, [r2, #12]
 8003378:	4311      	orrs	r1, r2
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	6912      	ldr	r2, [r2, #16]
 800337e:	4311      	orrs	r1, r2
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	6952      	ldr	r2, [r2, #20]
 8003384:	4311      	orrs	r1, r2
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	6992      	ldr	r2, [r2, #24]
 800338a:	4311      	orrs	r1, r2
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	69d2      	ldr	r2, [r2, #28]
 8003390:	4311      	orrs	r1, r2
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	6a12      	ldr	r2, [r2, #32]
 8003396:	430a      	orrs	r2, r1
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f023 0204 	bic.w	r2, r3, #4
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	0c1b      	lsrs	r3, r3, #16
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ba:	d105      	bne.n	80033c8 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	4619      	mov	r1, r3
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff ffab 	bl	800331e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80033c8:	2300      	movs	r3, #0
 80033ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	61da      	str	r2, [r3, #28]
  return status;
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <LL_TIM_SetPrescaler>:
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <LL_TIM_SetAutoReload>:
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
 8003406:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <LL_TIM_SetRepetitionCounter>:
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	631a      	str	r2, [r3, #48]	; 0x30
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <LL_TIM_OC_SetCompareCH1>:
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <LL_TIM_OC_SetCompareCH2>:
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <LL_TIM_OC_SetCompareCH3>:
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <LL_TIM_OC_SetCompareCH4>:
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
 8003492:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	641a      	str	r2, [r3, #64]	; 0x40
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f043 0201 	orr.w	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	615a      	str	r2, [r3, #20]
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
	...

080034c8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a3d      	ldr	r2, [pc, #244]	; (80035d0 <LL_TIM_Init+0x108>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d013      	beq.n	8003508 <LL_TIM_Init+0x40>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e6:	d00f      	beq.n	8003508 <LL_TIM_Init+0x40>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a3a      	ldr	r2, [pc, #232]	; (80035d4 <LL_TIM_Init+0x10c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00b      	beq.n	8003508 <LL_TIM_Init+0x40>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a39      	ldr	r2, [pc, #228]	; (80035d8 <LL_TIM_Init+0x110>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d007      	beq.n	8003508 <LL_TIM_Init+0x40>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a38      	ldr	r2, [pc, #224]	; (80035dc <LL_TIM_Init+0x114>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d003      	beq.n	8003508 <LL_TIM_Init+0x40>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a37      	ldr	r2, [pc, #220]	; (80035e0 <LL_TIM_Init+0x118>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d106      	bne.n	8003516 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	4313      	orrs	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a2d      	ldr	r2, [pc, #180]	; (80035d0 <LL_TIM_Init+0x108>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d02b      	beq.n	8003576 <LL_TIM_Init+0xae>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003524:	d027      	beq.n	8003576 <LL_TIM_Init+0xae>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a2a      	ldr	r2, [pc, #168]	; (80035d4 <LL_TIM_Init+0x10c>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d023      	beq.n	8003576 <LL_TIM_Init+0xae>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a29      	ldr	r2, [pc, #164]	; (80035d8 <LL_TIM_Init+0x110>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d01f      	beq.n	8003576 <LL_TIM_Init+0xae>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a28      	ldr	r2, [pc, #160]	; (80035dc <LL_TIM_Init+0x114>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d01b      	beq.n	8003576 <LL_TIM_Init+0xae>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a27      	ldr	r2, [pc, #156]	; (80035e0 <LL_TIM_Init+0x118>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d017      	beq.n	8003576 <LL_TIM_Init+0xae>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a26      	ldr	r2, [pc, #152]	; (80035e4 <LL_TIM_Init+0x11c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d013      	beq.n	8003576 <LL_TIM_Init+0xae>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a25      	ldr	r2, [pc, #148]	; (80035e8 <LL_TIM_Init+0x120>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00f      	beq.n	8003576 <LL_TIM_Init+0xae>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a24      	ldr	r2, [pc, #144]	; (80035ec <LL_TIM_Init+0x124>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00b      	beq.n	8003576 <LL_TIM_Init+0xae>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a23      	ldr	r2, [pc, #140]	; (80035f0 <LL_TIM_Init+0x128>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d007      	beq.n	8003576 <LL_TIM_Init+0xae>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a22      	ldr	r2, [pc, #136]	; (80035f4 <LL_TIM_Init+0x12c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d003      	beq.n	8003576 <LL_TIM_Init+0xae>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a21      	ldr	r2, [pc, #132]	; (80035f8 <LL_TIM_Init+0x130>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d106      	bne.n	8003584 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	4619      	mov	r1, r3
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7ff ff34 	bl	80033fe <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	4619      	mov	r1, r3
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff ff20 	bl	80033e2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a0a      	ldr	r2, [pc, #40]	; (80035d0 <LL_TIM_Init+0x108>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d003      	beq.n	80035b2 <LL_TIM_Init+0xea>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a0c      	ldr	r2, [pc, #48]	; (80035e0 <LL_TIM_Init+0x118>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d105      	bne.n	80035be <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	4619      	mov	r1, r3
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff ff2e 	bl	800341a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff ff71 	bl	80034a6 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40010000 	.word	0x40010000
 80035d4:	40000400 	.word	0x40000400
 80035d8:	40000800 	.word	0x40000800
 80035dc:	40000c00 	.word	0x40000c00
 80035e0:	40010400 	.word	0x40010400
 80035e4:	40014000 	.word	0x40014000
 80035e8:	40014400 	.word	0x40014400
 80035ec:	40014800 	.word	0x40014800
 80035f0:	40001800 	.word	0x40001800
 80035f4:	40001c00 	.word	0x40001c00
 80035f8:	40002000 	.word	0x40002000

080035fc <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003612:	d027      	beq.n	8003664 <LL_TIM_OC_Init+0x68>
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800361a:	d82a      	bhi.n	8003672 <LL_TIM_OC_Init+0x76>
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003622:	d018      	beq.n	8003656 <LL_TIM_OC_Init+0x5a>
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800362a:	d822      	bhi.n	8003672 <LL_TIM_OC_Init+0x76>
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d003      	beq.n	800363a <LL_TIM_OC_Init+0x3e>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b10      	cmp	r3, #16
 8003636:	d007      	beq.n	8003648 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003638:	e01b      	b.n	8003672 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f867 	bl	8003710 <OC1Config>
 8003642:	4603      	mov	r3, r0
 8003644:	75fb      	strb	r3, [r7, #23]
      break;
 8003646:	e015      	b.n	8003674 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f8cc 	bl	80037e8 <OC2Config>
 8003650:	4603      	mov	r3, r0
 8003652:	75fb      	strb	r3, [r7, #23]
      break;
 8003654:	e00e      	b.n	8003674 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 f935 	bl	80038c8 <OC3Config>
 800365e:	4603      	mov	r3, r0
 8003660:	75fb      	strb	r3, [r7, #23]
      break;
 8003662:	e007      	b.n	8003674 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 f99e 	bl	80039a8 <OC4Config>
 800366c:	4603      	mov	r3, r0
 800366e:	75fb      	strb	r3, [r7, #23]
      break;
 8003670:	e000      	b.n	8003674 <LL_TIM_OC_Init+0x78>
      break;
 8003672:	bf00      	nop
  }

  return result;
 8003674:	7dfb      	ldrb	r3, [r7, #23]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 800367e:	b480      	push	{r7}
 8003680:	b085      	sub	sp, #20
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8003688:	2300      	movs	r3, #0
 800368a:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	7b12      	ldrb	r2, [r2, #12]
 8003696:	4313      	orrs	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	89d2      	ldrh	r2, [r2, #14]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	f023 0201 	bic.w	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0303 	bic.w	r3, r3, #3
 800373e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4313      	orrs	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f023 0202 	bic.w	r2, r3, #2
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f023 0201 	bic.w	r2, r3, #1
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	4313      	orrs	r3, r2
 8003768:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a1c      	ldr	r2, [pc, #112]	; (80037e0 <OC1Config+0xd0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d003      	beq.n	800377a <OC1Config+0x6a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a1b      	ldr	r2, [pc, #108]	; (80037e4 <OC1Config+0xd4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d11e      	bne.n	80037b8 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f023 0208 	bic.w	r2, r3, #8
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4313      	orrs	r3, r2
 8003788:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f023 0204 	bic.w	r2, r3, #4
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4313      	orrs	r3, r2
 8003798:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	4619      	mov	r1, r3
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7ff fe33 	bl	8003436 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40010000 	.word	0x40010000
 80037e4:	40010400 	.word	0x40010400

080037e8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	f023 0210 	bic.w	r2, r3, #16
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	021b      	lsls	r3, r3, #8
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f023 0220 	bic.w	r2, r3, #32
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	4313      	orrs	r3, r2
 8003836:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f023 0210 	bic.w	r2, r3, #16
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	4313      	orrs	r3, r2
 8003846:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a1d      	ldr	r2, [pc, #116]	; (80038c0 <OC2Config+0xd8>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d003      	beq.n	8003858 <OC2Config+0x70>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a1c      	ldr	r2, [pc, #112]	; (80038c4 <OC2Config+0xdc>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d11f      	bne.n	8003898 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	019b      	lsls	r3, r3, #6
 8003864:	4313      	orrs	r3, r2
 8003866:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	019b      	lsls	r3, r3, #6
 8003874:	4313      	orrs	r3, r2
 8003876:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	4619      	mov	r1, r3
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7ff fdd1 	bl	8003452 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40010000 	.word	0x40010000
 80038c4:	40010400 	.word	0x40010400

080038c8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0303 	bic.w	r3, r3, #3
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4313      	orrs	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	021b      	lsls	r3, r3, #8
 8003912:	4313      	orrs	r3, r2
 8003914:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	021b      	lsls	r3, r3, #8
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a1d      	ldr	r2, [pc, #116]	; (80039a0 <OC3Config+0xd8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d003      	beq.n	8003936 <OC3Config+0x6e>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a1c      	ldr	r2, [pc, #112]	; (80039a4 <OC3Config+0xdc>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d11f      	bne.n	8003976 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	029b      	lsls	r3, r3, #10
 8003942:	4313      	orrs	r3, r2
 8003944:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	029b      	lsls	r3, r3, #10
 8003952:	4313      	orrs	r3, r2
 8003954:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	015b      	lsls	r3, r3, #5
 8003972:	4313      	orrs	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	4619      	mov	r1, r3
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff fd70 	bl	800346e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40010000 	.word	0x40010000
 80039a4:	40010400 	.word	0x40010400

080039a8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	021b      	lsls	r3, r3, #8
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	031b      	lsls	r3, r3, #12
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	031b      	lsls	r3, r3, #12
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a11      	ldr	r2, [pc, #68]	; (8003a50 <OC4Config+0xa8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d003      	beq.n	8003a18 <OC4Config+0x70>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a10      	ldr	r2, [pc, #64]	; (8003a54 <OC4Config+0xac>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d107      	bne.n	8003a28 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	019b      	lsls	r3, r3, #6
 8003a24:	4313      	orrs	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4619      	mov	r1, r3
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff fd25 	bl	800348a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40010000 	.word	0x40010000
 8003a54:	40010400 	.word	0x40010400

08003a58 <LL_USART_IsEnabled>:
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a6c:	bf0c      	ite	eq
 8003a6e:	2301      	moveq	r3, #1
 8003a70:	2300      	movne	r3, #0
 8003a72:	b2db      	uxtb	r3, r3
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <LL_USART_SetStopBitsLength>:
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	611a      	str	r2, [r3, #16]
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <LL_USART_SetHWFlowCtrl>:
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	615a      	str	r2, [r3, #20]
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <LL_USART_SetBaudRate>:
{
 8003acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ad0:	b09f      	sub	sp, #124	; 0x7c
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6778      	str	r0, [r7, #116]	; 0x74
 8003ad6:	6739      	str	r1, [r7, #112]	; 0x70
 8003ad8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ada:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae2:	f040 80bc 	bne.w	8003c5e <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003ae6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ae8:	461c      	mov	r4, r3
 8003aea:	f04f 0500 	mov.w	r5, #0
 8003aee:	4622      	mov	r2, r4
 8003af0:	462b      	mov	r3, r5
 8003af2:	eb12 0a02 	adds.w	sl, r2, r2
 8003af6:	eb43 0b03 	adc.w	fp, r3, r3
 8003afa:	4652      	mov	r2, sl
 8003afc:	465b      	mov	r3, fp
 8003afe:	1912      	adds	r2, r2, r4
 8003b00:	eb45 0303 	adc.w	r3, r5, r3
 8003b04:	f04f 0000 	mov.w	r0, #0
 8003b08:	f04f 0100 	mov.w	r1, #0
 8003b0c:	00d9      	lsls	r1, r3, #3
 8003b0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b12:	00d0      	lsls	r0, r2, #3
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	1911      	adds	r1, r2, r4
 8003b1a:	6639      	str	r1, [r7, #96]	; 0x60
 8003b1c:	416b      	adcs	r3, r5
 8003b1e:	667b      	str	r3, [r7, #100]	; 0x64
 8003b20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b22:	461a      	mov	r2, r3
 8003b24:	f04f 0300 	mov.w	r3, #0
 8003b28:	1891      	adds	r1, r2, r2
 8003b2a:	6339      	str	r1, [r7, #48]	; 0x30
 8003b2c:	415b      	adcs	r3, r3
 8003b2e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b30:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003b34:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003b38:	f7fd f836 	bl	8000ba8 <__aeabi_uldivmod>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4ba9      	ldr	r3, [pc, #676]	; (8003de8 <LL_USART_SetBaudRate+0x31c>)
 8003b42:	fba3 2302 	umull	r2, r3, r3, r2
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	011b      	lsls	r3, r3, #4
 8003b4c:	b29e      	uxth	r6, r3
 8003b4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b50:	461c      	mov	r4, r3
 8003b52:	f04f 0500 	mov.w	r5, #0
 8003b56:	4622      	mov	r2, r4
 8003b58:	462b      	mov	r3, r5
 8003b5a:	1891      	adds	r1, r2, r2
 8003b5c:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b5e:	415b      	adcs	r3, r3
 8003b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b66:	1912      	adds	r2, r2, r4
 8003b68:	eb45 0303 	adc.w	r3, r5, r3
 8003b6c:	f04f 0000 	mov.w	r0, #0
 8003b70:	f04f 0100 	mov.w	r1, #0
 8003b74:	00d9      	lsls	r1, r3, #3
 8003b76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b7a:	00d0      	lsls	r0, r2, #3
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	1911      	adds	r1, r2, r4
 8003b82:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b84:	416b      	adcs	r3, r5
 8003b86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	f04f 0300 	mov.w	r3, #0
 8003b90:	1891      	adds	r1, r2, r2
 8003b92:	6239      	str	r1, [r7, #32]
 8003b94:	415b      	adcs	r3, r3
 8003b96:	627b      	str	r3, [r7, #36]	; 0x24
 8003b98:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b9c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003ba0:	f7fd f802 	bl	8000ba8 <__aeabi_uldivmod>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4b8f      	ldr	r3, [pc, #572]	; (8003de8 <LL_USART_SetBaudRate+0x31c>)
 8003baa:	fba3 1302 	umull	r1, r3, r3, r2
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	2164      	movs	r1, #100	; 0x64
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	3332      	adds	r3, #50	; 0x32
 8003bbc:	4a8a      	ldr	r2, [pc, #552]	; (8003de8 <LL_USART_SetBaudRate+0x31c>)
 8003bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc2:	095b      	lsrs	r3, r3, #5
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	4433      	add	r3, r6
 8003bd2:	b29e      	uxth	r6, r3
 8003bd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f04f 0100 	mov.w	r1, #0
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	1894      	adds	r4, r2, r2
 8003be2:	61bc      	str	r4, [r7, #24]
 8003be4:	415b      	adcs	r3, r3
 8003be6:	61fb      	str	r3, [r7, #28]
 8003be8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bec:	1812      	adds	r2, r2, r0
 8003bee:	eb41 0303 	adc.w	r3, r1, r3
 8003bf2:	f04f 0400 	mov.w	r4, #0
 8003bf6:	f04f 0500 	mov.w	r5, #0
 8003bfa:	00dd      	lsls	r5, r3, #3
 8003bfc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c00:	00d4      	lsls	r4, r2, #3
 8003c02:	4622      	mov	r2, r4
 8003c04:	462b      	mov	r3, r5
 8003c06:	1814      	adds	r4, r2, r0
 8003c08:	653c      	str	r4, [r7, #80]	; 0x50
 8003c0a:	414b      	adcs	r3, r1
 8003c0c:	657b      	str	r3, [r7, #84]	; 0x54
 8003c0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c10:	461a      	mov	r2, r3
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	1891      	adds	r1, r2, r2
 8003c18:	6139      	str	r1, [r7, #16]
 8003c1a:	415b      	adcs	r3, r3
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c22:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003c26:	f7fc ffbf 	bl	8000ba8 <__aeabi_uldivmod>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4b6e      	ldr	r3, [pc, #440]	; (8003de8 <LL_USART_SetBaudRate+0x31c>)
 8003c30:	fba3 1302 	umull	r1, r3, r3, r2
 8003c34:	095b      	lsrs	r3, r3, #5
 8003c36:	2164      	movs	r1, #100	; 0x64
 8003c38:	fb01 f303 	mul.w	r3, r1, r3
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	3332      	adds	r3, #50	; 0x32
 8003c42:	4a69      	ldr	r2, [pc, #420]	; (8003de8 <LL_USART_SetBaudRate+0x31c>)
 8003c44:	fba2 2303 	umull	r2, r3, r2, r3
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	4433      	add	r3, r6
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	461a      	mov	r2, r3
 8003c58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c5a:	609a      	str	r2, [r3, #8]
}
 8003c5c:	e0be      	b.n	8003ddc <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003c5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c60:	461c      	mov	r4, r3
 8003c62:	f04f 0500 	mov.w	r5, #0
 8003c66:	4622      	mov	r2, r4
 8003c68:	462b      	mov	r3, r5
 8003c6a:	eb12 0802 	adds.w	r8, r2, r2
 8003c6e:	eb43 0903 	adc.w	r9, r3, r3
 8003c72:	4642      	mov	r2, r8
 8003c74:	464b      	mov	r3, r9
 8003c76:	1912      	adds	r2, r2, r4
 8003c78:	eb45 0303 	adc.w	r3, r5, r3
 8003c7c:	f04f 0000 	mov.w	r0, #0
 8003c80:	f04f 0100 	mov.w	r1, #0
 8003c84:	00d9      	lsls	r1, r3, #3
 8003c86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c8a:	00d0      	lsls	r0, r2, #3
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	1911      	adds	r1, r2, r4
 8003c92:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c94:	416b      	adcs	r3, r5
 8003c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f04f 0100 	mov.w	r1, #0
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	008b      	lsls	r3, r1, #2
 8003caa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003cae:	0082      	lsls	r2, r0, #2
 8003cb0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003cb4:	f7fc ff78 	bl	8000ba8 <__aeabi_uldivmod>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4b4a      	ldr	r3, [pc, #296]	; (8003de8 <LL_USART_SetBaudRate+0x31c>)
 8003cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	b29e      	uxth	r6, r3
 8003cca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f04f 0100 	mov.w	r1, #0
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	1894      	adds	r4, r2, r2
 8003cd8:	60bc      	str	r4, [r7, #8]
 8003cda:	415b      	adcs	r3, r3
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ce2:	1812      	adds	r2, r2, r0
 8003ce4:	eb41 0303 	adc.w	r3, r1, r3
 8003ce8:	f04f 0400 	mov.w	r4, #0
 8003cec:	f04f 0500 	mov.w	r5, #0
 8003cf0:	00dd      	lsls	r5, r3, #3
 8003cf2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cf6:	00d4      	lsls	r4, r2, #3
 8003cf8:	4622      	mov	r2, r4
 8003cfa:	462b      	mov	r3, r5
 8003cfc:	1814      	adds	r4, r2, r0
 8003cfe:	643c      	str	r4, [r7, #64]	; 0x40
 8003d00:	414b      	adcs	r3, r1
 8003d02:	647b      	str	r3, [r7, #68]	; 0x44
 8003d04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d06:	4618      	mov	r0, r3
 8003d08:	f04f 0100 	mov.w	r1, #0
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	008b      	lsls	r3, r1, #2
 8003d16:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d1a:	0082      	lsls	r2, r0, #2
 8003d1c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003d20:	f7fc ff42 	bl	8000ba8 <__aeabi_uldivmod>
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	4b2f      	ldr	r3, [pc, #188]	; (8003de8 <LL_USART_SetBaudRate+0x31c>)
 8003d2a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d2e:	095b      	lsrs	r3, r3, #5
 8003d30:	2164      	movs	r1, #100	; 0x64
 8003d32:	fb01 f303 	mul.w	r3, r1, r3
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	3332      	adds	r3, #50	; 0x32
 8003d3c:	4a2a      	ldr	r2, [pc, #168]	; (8003de8 <LL_USART_SetBaudRate+0x31c>)
 8003d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d42:	095b      	lsrs	r3, r3, #5
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	4433      	add	r3, r6
 8003d4e:	b29e      	uxth	r6, r3
 8003d50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d52:	4618      	mov	r0, r3
 8003d54:	f04f 0100 	mov.w	r1, #0
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	1894      	adds	r4, r2, r2
 8003d5e:	603c      	str	r4, [r7, #0]
 8003d60:	415b      	adcs	r3, r3
 8003d62:	607b      	str	r3, [r7, #4]
 8003d64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d68:	1812      	adds	r2, r2, r0
 8003d6a:	eb41 0303 	adc.w	r3, r1, r3
 8003d6e:	f04f 0400 	mov.w	r4, #0
 8003d72:	f04f 0500 	mov.w	r5, #0
 8003d76:	00dd      	lsls	r5, r3, #3
 8003d78:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d7c:	00d4      	lsls	r4, r2, #3
 8003d7e:	4622      	mov	r2, r4
 8003d80:	462b      	mov	r3, r5
 8003d82:	1814      	adds	r4, r2, r0
 8003d84:	63bc      	str	r4, [r7, #56]	; 0x38
 8003d86:	414b      	adcs	r3, r1
 8003d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f04f 0100 	mov.w	r1, #0
 8003d92:	f04f 0200 	mov.w	r2, #0
 8003d96:	f04f 0300 	mov.w	r3, #0
 8003d9a:	008b      	lsls	r3, r1, #2
 8003d9c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003da0:	0082      	lsls	r2, r0, #2
 8003da2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003da6:	f7fc feff 	bl	8000ba8 <__aeabi_uldivmod>
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <LL_USART_SetBaudRate+0x31c>)
 8003db0:	fba3 1302 	umull	r1, r3, r3, r2
 8003db4:	095b      	lsrs	r3, r3, #5
 8003db6:	2164      	movs	r1, #100	; 0x64
 8003db8:	fb01 f303 	mul.w	r3, r1, r3
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	3332      	adds	r3, #50	; 0x32
 8003dc2:	4a09      	ldr	r2, [pc, #36]	; (8003de8 <LL_USART_SetBaudRate+0x31c>)
 8003dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc8:	095b      	lsrs	r3, r3, #5
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	f003 030f 	and.w	r3, r3, #15
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	4433      	add	r3, r6
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dda:	609a      	str	r2, [r3, #8]
}
 8003ddc:	bf00      	nop
 8003dde:	377c      	adds	r7, #124	; 0x7c
 8003de0:	46bd      	mov	sp, r7
 8003de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003de6:	bf00      	nop
 8003de8:	51eb851f 	.word	0x51eb851f

08003dec <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7ff fe2a 	bl	8003a58 <LL_USART_IsEnabled>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d15e      	bne.n	8003ec8 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003e12:	f023 030c 	bic.w	r3, r3, #12
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	6851      	ldr	r1, [r2, #4]
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	68d2      	ldr	r2, [r2, #12]
 8003e1e:	4311      	orrs	r1, r2
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	6912      	ldr	r2, [r2, #16]
 8003e24:	4311      	orrs	r1, r2
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	6992      	ldr	r2, [r2, #24]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	4619      	mov	r1, r3
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff fe21 	bl	8003a80 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	4619      	mov	r1, r3
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff fe2e 	bl	8003aa6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003e4a:	f107 0308 	add.w	r3, r7, #8
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff f988 	bl	8003164 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a1f      	ldr	r2, [pc, #124]	; (8003ed4 <LL_USART_Init+0xe8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d102      	bne.n	8003e62 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	61bb      	str	r3, [r7, #24]
 8003e60:	e021      	b.n	8003ea6 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a1c      	ldr	r2, [pc, #112]	; (8003ed8 <LL_USART_Init+0xec>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d102      	bne.n	8003e70 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	61bb      	str	r3, [r7, #24]
 8003e6e:	e01a      	b.n	8003ea6 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a1a      	ldr	r2, [pc, #104]	; (8003edc <LL_USART_Init+0xf0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d102      	bne.n	8003e7e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	61bb      	str	r3, [r7, #24]
 8003e7c:	e013      	b.n	8003ea6 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a17      	ldr	r2, [pc, #92]	; (8003ee0 <LL_USART_Init+0xf4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d102      	bne.n	8003e8c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	61bb      	str	r3, [r7, #24]
 8003e8a:	e00c      	b.n	8003ea6 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a15      	ldr	r2, [pc, #84]	; (8003ee4 <LL_USART_Init+0xf8>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d102      	bne.n	8003e9a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	61bb      	str	r3, [r7, #24]
 8003e98:	e005      	b.n	8003ea6 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a12      	ldr	r2, [pc, #72]	; (8003ee8 <LL_USART_Init+0xfc>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d101      	bne.n	8003ea6 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00d      	beq.n	8003ec8 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d009      	beq.n	8003ec8 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	699a      	ldr	r2, [r3, #24]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	69b9      	ldr	r1, [r7, #24]
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff fe02 	bl	8003acc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003ec8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3720      	adds	r7, #32
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40011000 	.word	0x40011000
 8003ed8:	40004400 	.word	0x40004400
 8003edc:	40004800 	.word	0x40004800
 8003ee0:	40011400 	.word	0x40011400
 8003ee4:	40004c00 	.word	0x40004c00
 8003ee8:	40005000 	.word	0x40005000

08003eec <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efe:	4a07      	ldr	r2, [pc, #28]	; (8003f1c <LL_InitTick+0x30>)
 8003f00:	3b01      	subs	r3, #1
 8003f02:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <LL_InitTick+0x30>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f0a:	4b04      	ldr	r3, [pc, #16]	; (8003f1c <LL_InitTick+0x30>)
 8003f0c:	2205      	movs	r2, #5
 8003f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	e000e010 	.word	0xe000e010

08003f20 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003f28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff ffdd 	bl	8003eec <LL_InitTick>
}
 8003f32:	bf00      	nop
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003f44:	4b0f      	ldr	r3, [pc, #60]	; (8003f84 <LL_mDelay+0x48>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003f4a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f52:	d00c      	beq.n	8003f6e <LL_mDelay+0x32>
  {
    Delay++;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3301      	adds	r3, #1
 8003f58:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003f5a:	e008      	b.n	8003f6e <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003f5c:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <LL_mDelay+0x48>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <LL_mDelay+0x32>
    {
      Delay--;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1f3      	bne.n	8003f5c <LL_mDelay+0x20>
    }
  }
}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	e000e010 	.word	0xe000e010

08003f88 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003f90:	4a04      	ldr	r2, [pc, #16]	; (8003fa4 <LL_SetSystemCoreClock+0x1c>)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6013      	str	r3, [r2, #0]
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	20000000 	.word	0x20000000

08003fa8 <__errno>:
 8003fa8:	4b01      	ldr	r3, [pc, #4]	; (8003fb0 <__errno+0x8>)
 8003faa:	6818      	ldr	r0, [r3, #0]
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	20000004 	.word	0x20000004

08003fb4 <__libc_init_array>:
 8003fb4:	b570      	push	{r4, r5, r6, lr}
 8003fb6:	4d0d      	ldr	r5, [pc, #52]	; (8003fec <__libc_init_array+0x38>)
 8003fb8:	4c0d      	ldr	r4, [pc, #52]	; (8003ff0 <__libc_init_array+0x3c>)
 8003fba:	1b64      	subs	r4, r4, r5
 8003fbc:	10a4      	asrs	r4, r4, #2
 8003fbe:	2600      	movs	r6, #0
 8003fc0:	42a6      	cmp	r6, r4
 8003fc2:	d109      	bne.n	8003fd8 <__libc_init_array+0x24>
 8003fc4:	4d0b      	ldr	r5, [pc, #44]	; (8003ff4 <__libc_init_array+0x40>)
 8003fc6:	4c0c      	ldr	r4, [pc, #48]	; (8003ff8 <__libc_init_array+0x44>)
 8003fc8:	f002 fdd8 	bl	8006b7c <_init>
 8003fcc:	1b64      	subs	r4, r4, r5
 8003fce:	10a4      	asrs	r4, r4, #2
 8003fd0:	2600      	movs	r6, #0
 8003fd2:	42a6      	cmp	r6, r4
 8003fd4:	d105      	bne.n	8003fe2 <__libc_init_array+0x2e>
 8003fd6:	bd70      	pop	{r4, r5, r6, pc}
 8003fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fdc:	4798      	blx	r3
 8003fde:	3601      	adds	r6, #1
 8003fe0:	e7ee      	b.n	8003fc0 <__libc_init_array+0xc>
 8003fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fe6:	4798      	blx	r3
 8003fe8:	3601      	adds	r6, #1
 8003fea:	e7f2      	b.n	8003fd2 <__libc_init_array+0x1e>
 8003fec:	08006fd4 	.word	0x08006fd4
 8003ff0:	08006fd4 	.word	0x08006fd4
 8003ff4:	08006fd4 	.word	0x08006fd4
 8003ff8:	08006fd8 	.word	0x08006fd8

08003ffc <memset>:
 8003ffc:	4402      	add	r2, r0
 8003ffe:	4603      	mov	r3, r0
 8004000:	4293      	cmp	r3, r2
 8004002:	d100      	bne.n	8004006 <memset+0xa>
 8004004:	4770      	bx	lr
 8004006:	f803 1b01 	strb.w	r1, [r3], #1
 800400a:	e7f9      	b.n	8004000 <memset+0x4>

0800400c <__cvt>:
 800400c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004010:	ec55 4b10 	vmov	r4, r5, d0
 8004014:	2d00      	cmp	r5, #0
 8004016:	460e      	mov	r6, r1
 8004018:	4619      	mov	r1, r3
 800401a:	462b      	mov	r3, r5
 800401c:	bfbb      	ittet	lt
 800401e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004022:	461d      	movlt	r5, r3
 8004024:	2300      	movge	r3, #0
 8004026:	232d      	movlt	r3, #45	; 0x2d
 8004028:	700b      	strb	r3, [r1, #0]
 800402a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800402c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004030:	4691      	mov	r9, r2
 8004032:	f023 0820 	bic.w	r8, r3, #32
 8004036:	bfbc      	itt	lt
 8004038:	4622      	movlt	r2, r4
 800403a:	4614      	movlt	r4, r2
 800403c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004040:	d005      	beq.n	800404e <__cvt+0x42>
 8004042:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004046:	d100      	bne.n	800404a <__cvt+0x3e>
 8004048:	3601      	adds	r6, #1
 800404a:	2102      	movs	r1, #2
 800404c:	e000      	b.n	8004050 <__cvt+0x44>
 800404e:	2103      	movs	r1, #3
 8004050:	ab03      	add	r3, sp, #12
 8004052:	9301      	str	r3, [sp, #4]
 8004054:	ab02      	add	r3, sp, #8
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	ec45 4b10 	vmov	d0, r4, r5
 800405c:	4653      	mov	r3, sl
 800405e:	4632      	mov	r2, r6
 8004060:	f000 fdb2 	bl	8004bc8 <_dtoa_r>
 8004064:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004068:	4607      	mov	r7, r0
 800406a:	d102      	bne.n	8004072 <__cvt+0x66>
 800406c:	f019 0f01 	tst.w	r9, #1
 8004070:	d022      	beq.n	80040b8 <__cvt+0xac>
 8004072:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004076:	eb07 0906 	add.w	r9, r7, r6
 800407a:	d110      	bne.n	800409e <__cvt+0x92>
 800407c:	783b      	ldrb	r3, [r7, #0]
 800407e:	2b30      	cmp	r3, #48	; 0x30
 8004080:	d10a      	bne.n	8004098 <__cvt+0x8c>
 8004082:	2200      	movs	r2, #0
 8004084:	2300      	movs	r3, #0
 8004086:	4620      	mov	r0, r4
 8004088:	4629      	mov	r1, r5
 800408a:	f7fc fd1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800408e:	b918      	cbnz	r0, 8004098 <__cvt+0x8c>
 8004090:	f1c6 0601 	rsb	r6, r6, #1
 8004094:	f8ca 6000 	str.w	r6, [sl]
 8004098:	f8da 3000 	ldr.w	r3, [sl]
 800409c:	4499      	add	r9, r3
 800409e:	2200      	movs	r2, #0
 80040a0:	2300      	movs	r3, #0
 80040a2:	4620      	mov	r0, r4
 80040a4:	4629      	mov	r1, r5
 80040a6:	f7fc fd0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80040aa:	b108      	cbz	r0, 80040b0 <__cvt+0xa4>
 80040ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80040b0:	2230      	movs	r2, #48	; 0x30
 80040b2:	9b03      	ldr	r3, [sp, #12]
 80040b4:	454b      	cmp	r3, r9
 80040b6:	d307      	bcc.n	80040c8 <__cvt+0xbc>
 80040b8:	9b03      	ldr	r3, [sp, #12]
 80040ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040bc:	1bdb      	subs	r3, r3, r7
 80040be:	4638      	mov	r0, r7
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	b004      	add	sp, #16
 80040c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040c8:	1c59      	adds	r1, r3, #1
 80040ca:	9103      	str	r1, [sp, #12]
 80040cc:	701a      	strb	r2, [r3, #0]
 80040ce:	e7f0      	b.n	80040b2 <__cvt+0xa6>

080040d0 <__exponent>:
 80040d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040d2:	4603      	mov	r3, r0
 80040d4:	2900      	cmp	r1, #0
 80040d6:	bfb8      	it	lt
 80040d8:	4249      	neglt	r1, r1
 80040da:	f803 2b02 	strb.w	r2, [r3], #2
 80040de:	bfb4      	ite	lt
 80040e0:	222d      	movlt	r2, #45	; 0x2d
 80040e2:	222b      	movge	r2, #43	; 0x2b
 80040e4:	2909      	cmp	r1, #9
 80040e6:	7042      	strb	r2, [r0, #1]
 80040e8:	dd2a      	ble.n	8004140 <__exponent+0x70>
 80040ea:	f10d 0407 	add.w	r4, sp, #7
 80040ee:	46a4      	mov	ip, r4
 80040f0:	270a      	movs	r7, #10
 80040f2:	46a6      	mov	lr, r4
 80040f4:	460a      	mov	r2, r1
 80040f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80040fa:	fb07 1516 	mls	r5, r7, r6, r1
 80040fe:	3530      	adds	r5, #48	; 0x30
 8004100:	2a63      	cmp	r2, #99	; 0x63
 8004102:	f104 34ff 	add.w	r4, r4, #4294967295
 8004106:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800410a:	4631      	mov	r1, r6
 800410c:	dcf1      	bgt.n	80040f2 <__exponent+0x22>
 800410e:	3130      	adds	r1, #48	; 0x30
 8004110:	f1ae 0502 	sub.w	r5, lr, #2
 8004114:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004118:	1c44      	adds	r4, r0, #1
 800411a:	4629      	mov	r1, r5
 800411c:	4561      	cmp	r1, ip
 800411e:	d30a      	bcc.n	8004136 <__exponent+0x66>
 8004120:	f10d 0209 	add.w	r2, sp, #9
 8004124:	eba2 020e 	sub.w	r2, r2, lr
 8004128:	4565      	cmp	r5, ip
 800412a:	bf88      	it	hi
 800412c:	2200      	movhi	r2, #0
 800412e:	4413      	add	r3, r2
 8004130:	1a18      	subs	r0, r3, r0
 8004132:	b003      	add	sp, #12
 8004134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004136:	f811 2b01 	ldrb.w	r2, [r1], #1
 800413a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800413e:	e7ed      	b.n	800411c <__exponent+0x4c>
 8004140:	2330      	movs	r3, #48	; 0x30
 8004142:	3130      	adds	r1, #48	; 0x30
 8004144:	7083      	strb	r3, [r0, #2]
 8004146:	70c1      	strb	r1, [r0, #3]
 8004148:	1d03      	adds	r3, r0, #4
 800414a:	e7f1      	b.n	8004130 <__exponent+0x60>

0800414c <_printf_float>:
 800414c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004150:	ed2d 8b02 	vpush	{d8}
 8004154:	b08d      	sub	sp, #52	; 0x34
 8004156:	460c      	mov	r4, r1
 8004158:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800415c:	4616      	mov	r6, r2
 800415e:	461f      	mov	r7, r3
 8004160:	4605      	mov	r5, r0
 8004162:	f001 fcd5 	bl	8005b10 <_localeconv_r>
 8004166:	f8d0 a000 	ldr.w	sl, [r0]
 800416a:	4650      	mov	r0, sl
 800416c:	f7fc f830 	bl	80001d0 <strlen>
 8004170:	2300      	movs	r3, #0
 8004172:	930a      	str	r3, [sp, #40]	; 0x28
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	9305      	str	r3, [sp, #20]
 8004178:	f8d8 3000 	ldr.w	r3, [r8]
 800417c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004180:	3307      	adds	r3, #7
 8004182:	f023 0307 	bic.w	r3, r3, #7
 8004186:	f103 0208 	add.w	r2, r3, #8
 800418a:	f8c8 2000 	str.w	r2, [r8]
 800418e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004192:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004196:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800419a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800419e:	9307      	str	r3, [sp, #28]
 80041a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80041a4:	ee08 0a10 	vmov	s16, r0
 80041a8:	4b9f      	ldr	r3, [pc, #636]	; (8004428 <_printf_float+0x2dc>)
 80041aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041ae:	f04f 32ff 	mov.w	r2, #4294967295
 80041b2:	f7fc fcbb 	bl	8000b2c <__aeabi_dcmpun>
 80041b6:	bb88      	cbnz	r0, 800421c <_printf_float+0xd0>
 80041b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041bc:	4b9a      	ldr	r3, [pc, #616]	; (8004428 <_printf_float+0x2dc>)
 80041be:	f04f 32ff 	mov.w	r2, #4294967295
 80041c2:	f7fc fc95 	bl	8000af0 <__aeabi_dcmple>
 80041c6:	bb48      	cbnz	r0, 800421c <_printf_float+0xd0>
 80041c8:	2200      	movs	r2, #0
 80041ca:	2300      	movs	r3, #0
 80041cc:	4640      	mov	r0, r8
 80041ce:	4649      	mov	r1, r9
 80041d0:	f7fc fc84 	bl	8000adc <__aeabi_dcmplt>
 80041d4:	b110      	cbz	r0, 80041dc <_printf_float+0x90>
 80041d6:	232d      	movs	r3, #45	; 0x2d
 80041d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041dc:	4b93      	ldr	r3, [pc, #588]	; (800442c <_printf_float+0x2e0>)
 80041de:	4894      	ldr	r0, [pc, #592]	; (8004430 <_printf_float+0x2e4>)
 80041e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80041e4:	bf94      	ite	ls
 80041e6:	4698      	movls	r8, r3
 80041e8:	4680      	movhi	r8, r0
 80041ea:	2303      	movs	r3, #3
 80041ec:	6123      	str	r3, [r4, #16]
 80041ee:	9b05      	ldr	r3, [sp, #20]
 80041f0:	f023 0204 	bic.w	r2, r3, #4
 80041f4:	6022      	str	r2, [r4, #0]
 80041f6:	f04f 0900 	mov.w	r9, #0
 80041fa:	9700      	str	r7, [sp, #0]
 80041fc:	4633      	mov	r3, r6
 80041fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8004200:	4621      	mov	r1, r4
 8004202:	4628      	mov	r0, r5
 8004204:	f000 f9d8 	bl	80045b8 <_printf_common>
 8004208:	3001      	adds	r0, #1
 800420a:	f040 8090 	bne.w	800432e <_printf_float+0x1e2>
 800420e:	f04f 30ff 	mov.w	r0, #4294967295
 8004212:	b00d      	add	sp, #52	; 0x34
 8004214:	ecbd 8b02 	vpop	{d8}
 8004218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800421c:	4642      	mov	r2, r8
 800421e:	464b      	mov	r3, r9
 8004220:	4640      	mov	r0, r8
 8004222:	4649      	mov	r1, r9
 8004224:	f7fc fc82 	bl	8000b2c <__aeabi_dcmpun>
 8004228:	b140      	cbz	r0, 800423c <_printf_float+0xf0>
 800422a:	464b      	mov	r3, r9
 800422c:	2b00      	cmp	r3, #0
 800422e:	bfbc      	itt	lt
 8004230:	232d      	movlt	r3, #45	; 0x2d
 8004232:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004236:	487f      	ldr	r0, [pc, #508]	; (8004434 <_printf_float+0x2e8>)
 8004238:	4b7f      	ldr	r3, [pc, #508]	; (8004438 <_printf_float+0x2ec>)
 800423a:	e7d1      	b.n	80041e0 <_printf_float+0x94>
 800423c:	6863      	ldr	r3, [r4, #4]
 800423e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004242:	9206      	str	r2, [sp, #24]
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	d13f      	bne.n	80042c8 <_printf_float+0x17c>
 8004248:	2306      	movs	r3, #6
 800424a:	6063      	str	r3, [r4, #4]
 800424c:	9b05      	ldr	r3, [sp, #20]
 800424e:	6861      	ldr	r1, [r4, #4]
 8004250:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004254:	2300      	movs	r3, #0
 8004256:	9303      	str	r3, [sp, #12]
 8004258:	ab0a      	add	r3, sp, #40	; 0x28
 800425a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800425e:	ab09      	add	r3, sp, #36	; 0x24
 8004260:	ec49 8b10 	vmov	d0, r8, r9
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	6022      	str	r2, [r4, #0]
 8004268:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800426c:	4628      	mov	r0, r5
 800426e:	f7ff fecd 	bl	800400c <__cvt>
 8004272:	9b06      	ldr	r3, [sp, #24]
 8004274:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004276:	2b47      	cmp	r3, #71	; 0x47
 8004278:	4680      	mov	r8, r0
 800427a:	d108      	bne.n	800428e <_printf_float+0x142>
 800427c:	1cc8      	adds	r0, r1, #3
 800427e:	db02      	blt.n	8004286 <_printf_float+0x13a>
 8004280:	6863      	ldr	r3, [r4, #4]
 8004282:	4299      	cmp	r1, r3
 8004284:	dd41      	ble.n	800430a <_printf_float+0x1be>
 8004286:	f1ab 0b02 	sub.w	fp, fp, #2
 800428a:	fa5f fb8b 	uxtb.w	fp, fp
 800428e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004292:	d820      	bhi.n	80042d6 <_printf_float+0x18a>
 8004294:	3901      	subs	r1, #1
 8004296:	465a      	mov	r2, fp
 8004298:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800429c:	9109      	str	r1, [sp, #36]	; 0x24
 800429e:	f7ff ff17 	bl	80040d0 <__exponent>
 80042a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042a4:	1813      	adds	r3, r2, r0
 80042a6:	2a01      	cmp	r2, #1
 80042a8:	4681      	mov	r9, r0
 80042aa:	6123      	str	r3, [r4, #16]
 80042ac:	dc02      	bgt.n	80042b4 <_printf_float+0x168>
 80042ae:	6822      	ldr	r2, [r4, #0]
 80042b0:	07d2      	lsls	r2, r2, #31
 80042b2:	d501      	bpl.n	80042b8 <_printf_float+0x16c>
 80042b4:	3301      	adds	r3, #1
 80042b6:	6123      	str	r3, [r4, #16]
 80042b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d09c      	beq.n	80041fa <_printf_float+0xae>
 80042c0:	232d      	movs	r3, #45	; 0x2d
 80042c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042c6:	e798      	b.n	80041fa <_printf_float+0xae>
 80042c8:	9a06      	ldr	r2, [sp, #24]
 80042ca:	2a47      	cmp	r2, #71	; 0x47
 80042cc:	d1be      	bne.n	800424c <_printf_float+0x100>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1bc      	bne.n	800424c <_printf_float+0x100>
 80042d2:	2301      	movs	r3, #1
 80042d4:	e7b9      	b.n	800424a <_printf_float+0xfe>
 80042d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80042da:	d118      	bne.n	800430e <_printf_float+0x1c2>
 80042dc:	2900      	cmp	r1, #0
 80042de:	6863      	ldr	r3, [r4, #4]
 80042e0:	dd0b      	ble.n	80042fa <_printf_float+0x1ae>
 80042e2:	6121      	str	r1, [r4, #16]
 80042e4:	b913      	cbnz	r3, 80042ec <_printf_float+0x1a0>
 80042e6:	6822      	ldr	r2, [r4, #0]
 80042e8:	07d0      	lsls	r0, r2, #31
 80042ea:	d502      	bpl.n	80042f2 <_printf_float+0x1a6>
 80042ec:	3301      	adds	r3, #1
 80042ee:	440b      	add	r3, r1
 80042f0:	6123      	str	r3, [r4, #16]
 80042f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80042f4:	f04f 0900 	mov.w	r9, #0
 80042f8:	e7de      	b.n	80042b8 <_printf_float+0x16c>
 80042fa:	b913      	cbnz	r3, 8004302 <_printf_float+0x1b6>
 80042fc:	6822      	ldr	r2, [r4, #0]
 80042fe:	07d2      	lsls	r2, r2, #31
 8004300:	d501      	bpl.n	8004306 <_printf_float+0x1ba>
 8004302:	3302      	adds	r3, #2
 8004304:	e7f4      	b.n	80042f0 <_printf_float+0x1a4>
 8004306:	2301      	movs	r3, #1
 8004308:	e7f2      	b.n	80042f0 <_printf_float+0x1a4>
 800430a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800430e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004310:	4299      	cmp	r1, r3
 8004312:	db05      	blt.n	8004320 <_printf_float+0x1d4>
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	6121      	str	r1, [r4, #16]
 8004318:	07d8      	lsls	r0, r3, #31
 800431a:	d5ea      	bpl.n	80042f2 <_printf_float+0x1a6>
 800431c:	1c4b      	adds	r3, r1, #1
 800431e:	e7e7      	b.n	80042f0 <_printf_float+0x1a4>
 8004320:	2900      	cmp	r1, #0
 8004322:	bfd4      	ite	le
 8004324:	f1c1 0202 	rsble	r2, r1, #2
 8004328:	2201      	movgt	r2, #1
 800432a:	4413      	add	r3, r2
 800432c:	e7e0      	b.n	80042f0 <_printf_float+0x1a4>
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	055a      	lsls	r2, r3, #21
 8004332:	d407      	bmi.n	8004344 <_printf_float+0x1f8>
 8004334:	6923      	ldr	r3, [r4, #16]
 8004336:	4642      	mov	r2, r8
 8004338:	4631      	mov	r1, r6
 800433a:	4628      	mov	r0, r5
 800433c:	47b8      	blx	r7
 800433e:	3001      	adds	r0, #1
 8004340:	d12c      	bne.n	800439c <_printf_float+0x250>
 8004342:	e764      	b.n	800420e <_printf_float+0xc2>
 8004344:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004348:	f240 80e0 	bls.w	800450c <_printf_float+0x3c0>
 800434c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004350:	2200      	movs	r2, #0
 8004352:	2300      	movs	r3, #0
 8004354:	f7fc fbb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004358:	2800      	cmp	r0, #0
 800435a:	d034      	beq.n	80043c6 <_printf_float+0x27a>
 800435c:	4a37      	ldr	r2, [pc, #220]	; (800443c <_printf_float+0x2f0>)
 800435e:	2301      	movs	r3, #1
 8004360:	4631      	mov	r1, r6
 8004362:	4628      	mov	r0, r5
 8004364:	47b8      	blx	r7
 8004366:	3001      	adds	r0, #1
 8004368:	f43f af51 	beq.w	800420e <_printf_float+0xc2>
 800436c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004370:	429a      	cmp	r2, r3
 8004372:	db02      	blt.n	800437a <_printf_float+0x22e>
 8004374:	6823      	ldr	r3, [r4, #0]
 8004376:	07d8      	lsls	r0, r3, #31
 8004378:	d510      	bpl.n	800439c <_printf_float+0x250>
 800437a:	ee18 3a10 	vmov	r3, s16
 800437e:	4652      	mov	r2, sl
 8004380:	4631      	mov	r1, r6
 8004382:	4628      	mov	r0, r5
 8004384:	47b8      	blx	r7
 8004386:	3001      	adds	r0, #1
 8004388:	f43f af41 	beq.w	800420e <_printf_float+0xc2>
 800438c:	f04f 0800 	mov.w	r8, #0
 8004390:	f104 091a 	add.w	r9, r4, #26
 8004394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004396:	3b01      	subs	r3, #1
 8004398:	4543      	cmp	r3, r8
 800439a:	dc09      	bgt.n	80043b0 <_printf_float+0x264>
 800439c:	6823      	ldr	r3, [r4, #0]
 800439e:	079b      	lsls	r3, r3, #30
 80043a0:	f100 8105 	bmi.w	80045ae <_printf_float+0x462>
 80043a4:	68e0      	ldr	r0, [r4, #12]
 80043a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043a8:	4298      	cmp	r0, r3
 80043aa:	bfb8      	it	lt
 80043ac:	4618      	movlt	r0, r3
 80043ae:	e730      	b.n	8004212 <_printf_float+0xc6>
 80043b0:	2301      	movs	r3, #1
 80043b2:	464a      	mov	r2, r9
 80043b4:	4631      	mov	r1, r6
 80043b6:	4628      	mov	r0, r5
 80043b8:	47b8      	blx	r7
 80043ba:	3001      	adds	r0, #1
 80043bc:	f43f af27 	beq.w	800420e <_printf_float+0xc2>
 80043c0:	f108 0801 	add.w	r8, r8, #1
 80043c4:	e7e6      	b.n	8004394 <_printf_float+0x248>
 80043c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	dc39      	bgt.n	8004440 <_printf_float+0x2f4>
 80043cc:	4a1b      	ldr	r2, [pc, #108]	; (800443c <_printf_float+0x2f0>)
 80043ce:	2301      	movs	r3, #1
 80043d0:	4631      	mov	r1, r6
 80043d2:	4628      	mov	r0, r5
 80043d4:	47b8      	blx	r7
 80043d6:	3001      	adds	r0, #1
 80043d8:	f43f af19 	beq.w	800420e <_printf_float+0xc2>
 80043dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043e0:	4313      	orrs	r3, r2
 80043e2:	d102      	bne.n	80043ea <_printf_float+0x29e>
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	07d9      	lsls	r1, r3, #31
 80043e8:	d5d8      	bpl.n	800439c <_printf_float+0x250>
 80043ea:	ee18 3a10 	vmov	r3, s16
 80043ee:	4652      	mov	r2, sl
 80043f0:	4631      	mov	r1, r6
 80043f2:	4628      	mov	r0, r5
 80043f4:	47b8      	blx	r7
 80043f6:	3001      	adds	r0, #1
 80043f8:	f43f af09 	beq.w	800420e <_printf_float+0xc2>
 80043fc:	f04f 0900 	mov.w	r9, #0
 8004400:	f104 0a1a 	add.w	sl, r4, #26
 8004404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004406:	425b      	negs	r3, r3
 8004408:	454b      	cmp	r3, r9
 800440a:	dc01      	bgt.n	8004410 <_printf_float+0x2c4>
 800440c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800440e:	e792      	b.n	8004336 <_printf_float+0x1ea>
 8004410:	2301      	movs	r3, #1
 8004412:	4652      	mov	r2, sl
 8004414:	4631      	mov	r1, r6
 8004416:	4628      	mov	r0, r5
 8004418:	47b8      	blx	r7
 800441a:	3001      	adds	r0, #1
 800441c:	f43f aef7 	beq.w	800420e <_printf_float+0xc2>
 8004420:	f109 0901 	add.w	r9, r9, #1
 8004424:	e7ee      	b.n	8004404 <_printf_float+0x2b8>
 8004426:	bf00      	nop
 8004428:	7fefffff 	.word	0x7fefffff
 800442c:	08006bec 	.word	0x08006bec
 8004430:	08006bf0 	.word	0x08006bf0
 8004434:	08006bf8 	.word	0x08006bf8
 8004438:	08006bf4 	.word	0x08006bf4
 800443c:	08006bfc 	.word	0x08006bfc
 8004440:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004442:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004444:	429a      	cmp	r2, r3
 8004446:	bfa8      	it	ge
 8004448:	461a      	movge	r2, r3
 800444a:	2a00      	cmp	r2, #0
 800444c:	4691      	mov	r9, r2
 800444e:	dc37      	bgt.n	80044c0 <_printf_float+0x374>
 8004450:	f04f 0b00 	mov.w	fp, #0
 8004454:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004458:	f104 021a 	add.w	r2, r4, #26
 800445c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800445e:	9305      	str	r3, [sp, #20]
 8004460:	eba3 0309 	sub.w	r3, r3, r9
 8004464:	455b      	cmp	r3, fp
 8004466:	dc33      	bgt.n	80044d0 <_printf_float+0x384>
 8004468:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800446c:	429a      	cmp	r2, r3
 800446e:	db3b      	blt.n	80044e8 <_printf_float+0x39c>
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	07da      	lsls	r2, r3, #31
 8004474:	d438      	bmi.n	80044e8 <_printf_float+0x39c>
 8004476:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004478:	9b05      	ldr	r3, [sp, #20]
 800447a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	eba2 0901 	sub.w	r9, r2, r1
 8004482:	4599      	cmp	r9, r3
 8004484:	bfa8      	it	ge
 8004486:	4699      	movge	r9, r3
 8004488:	f1b9 0f00 	cmp.w	r9, #0
 800448c:	dc35      	bgt.n	80044fa <_printf_float+0x3ae>
 800448e:	f04f 0800 	mov.w	r8, #0
 8004492:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004496:	f104 0a1a 	add.w	sl, r4, #26
 800449a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800449e:	1a9b      	subs	r3, r3, r2
 80044a0:	eba3 0309 	sub.w	r3, r3, r9
 80044a4:	4543      	cmp	r3, r8
 80044a6:	f77f af79 	ble.w	800439c <_printf_float+0x250>
 80044aa:	2301      	movs	r3, #1
 80044ac:	4652      	mov	r2, sl
 80044ae:	4631      	mov	r1, r6
 80044b0:	4628      	mov	r0, r5
 80044b2:	47b8      	blx	r7
 80044b4:	3001      	adds	r0, #1
 80044b6:	f43f aeaa 	beq.w	800420e <_printf_float+0xc2>
 80044ba:	f108 0801 	add.w	r8, r8, #1
 80044be:	e7ec      	b.n	800449a <_printf_float+0x34e>
 80044c0:	4613      	mov	r3, r2
 80044c2:	4631      	mov	r1, r6
 80044c4:	4642      	mov	r2, r8
 80044c6:	4628      	mov	r0, r5
 80044c8:	47b8      	blx	r7
 80044ca:	3001      	adds	r0, #1
 80044cc:	d1c0      	bne.n	8004450 <_printf_float+0x304>
 80044ce:	e69e      	b.n	800420e <_printf_float+0xc2>
 80044d0:	2301      	movs	r3, #1
 80044d2:	4631      	mov	r1, r6
 80044d4:	4628      	mov	r0, r5
 80044d6:	9205      	str	r2, [sp, #20]
 80044d8:	47b8      	blx	r7
 80044da:	3001      	adds	r0, #1
 80044dc:	f43f ae97 	beq.w	800420e <_printf_float+0xc2>
 80044e0:	9a05      	ldr	r2, [sp, #20]
 80044e2:	f10b 0b01 	add.w	fp, fp, #1
 80044e6:	e7b9      	b.n	800445c <_printf_float+0x310>
 80044e8:	ee18 3a10 	vmov	r3, s16
 80044ec:	4652      	mov	r2, sl
 80044ee:	4631      	mov	r1, r6
 80044f0:	4628      	mov	r0, r5
 80044f2:	47b8      	blx	r7
 80044f4:	3001      	adds	r0, #1
 80044f6:	d1be      	bne.n	8004476 <_printf_float+0x32a>
 80044f8:	e689      	b.n	800420e <_printf_float+0xc2>
 80044fa:	9a05      	ldr	r2, [sp, #20]
 80044fc:	464b      	mov	r3, r9
 80044fe:	4442      	add	r2, r8
 8004500:	4631      	mov	r1, r6
 8004502:	4628      	mov	r0, r5
 8004504:	47b8      	blx	r7
 8004506:	3001      	adds	r0, #1
 8004508:	d1c1      	bne.n	800448e <_printf_float+0x342>
 800450a:	e680      	b.n	800420e <_printf_float+0xc2>
 800450c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800450e:	2a01      	cmp	r2, #1
 8004510:	dc01      	bgt.n	8004516 <_printf_float+0x3ca>
 8004512:	07db      	lsls	r3, r3, #31
 8004514:	d538      	bpl.n	8004588 <_printf_float+0x43c>
 8004516:	2301      	movs	r3, #1
 8004518:	4642      	mov	r2, r8
 800451a:	4631      	mov	r1, r6
 800451c:	4628      	mov	r0, r5
 800451e:	47b8      	blx	r7
 8004520:	3001      	adds	r0, #1
 8004522:	f43f ae74 	beq.w	800420e <_printf_float+0xc2>
 8004526:	ee18 3a10 	vmov	r3, s16
 800452a:	4652      	mov	r2, sl
 800452c:	4631      	mov	r1, r6
 800452e:	4628      	mov	r0, r5
 8004530:	47b8      	blx	r7
 8004532:	3001      	adds	r0, #1
 8004534:	f43f ae6b 	beq.w	800420e <_printf_float+0xc2>
 8004538:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800453c:	2200      	movs	r2, #0
 800453e:	2300      	movs	r3, #0
 8004540:	f7fc fac2 	bl	8000ac8 <__aeabi_dcmpeq>
 8004544:	b9d8      	cbnz	r0, 800457e <_printf_float+0x432>
 8004546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004548:	f108 0201 	add.w	r2, r8, #1
 800454c:	3b01      	subs	r3, #1
 800454e:	4631      	mov	r1, r6
 8004550:	4628      	mov	r0, r5
 8004552:	47b8      	blx	r7
 8004554:	3001      	adds	r0, #1
 8004556:	d10e      	bne.n	8004576 <_printf_float+0x42a>
 8004558:	e659      	b.n	800420e <_printf_float+0xc2>
 800455a:	2301      	movs	r3, #1
 800455c:	4652      	mov	r2, sl
 800455e:	4631      	mov	r1, r6
 8004560:	4628      	mov	r0, r5
 8004562:	47b8      	blx	r7
 8004564:	3001      	adds	r0, #1
 8004566:	f43f ae52 	beq.w	800420e <_printf_float+0xc2>
 800456a:	f108 0801 	add.w	r8, r8, #1
 800456e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004570:	3b01      	subs	r3, #1
 8004572:	4543      	cmp	r3, r8
 8004574:	dcf1      	bgt.n	800455a <_printf_float+0x40e>
 8004576:	464b      	mov	r3, r9
 8004578:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800457c:	e6dc      	b.n	8004338 <_printf_float+0x1ec>
 800457e:	f04f 0800 	mov.w	r8, #0
 8004582:	f104 0a1a 	add.w	sl, r4, #26
 8004586:	e7f2      	b.n	800456e <_printf_float+0x422>
 8004588:	2301      	movs	r3, #1
 800458a:	4642      	mov	r2, r8
 800458c:	e7df      	b.n	800454e <_printf_float+0x402>
 800458e:	2301      	movs	r3, #1
 8004590:	464a      	mov	r2, r9
 8004592:	4631      	mov	r1, r6
 8004594:	4628      	mov	r0, r5
 8004596:	47b8      	blx	r7
 8004598:	3001      	adds	r0, #1
 800459a:	f43f ae38 	beq.w	800420e <_printf_float+0xc2>
 800459e:	f108 0801 	add.w	r8, r8, #1
 80045a2:	68e3      	ldr	r3, [r4, #12]
 80045a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045a6:	1a5b      	subs	r3, r3, r1
 80045a8:	4543      	cmp	r3, r8
 80045aa:	dcf0      	bgt.n	800458e <_printf_float+0x442>
 80045ac:	e6fa      	b.n	80043a4 <_printf_float+0x258>
 80045ae:	f04f 0800 	mov.w	r8, #0
 80045b2:	f104 0919 	add.w	r9, r4, #25
 80045b6:	e7f4      	b.n	80045a2 <_printf_float+0x456>

080045b8 <_printf_common>:
 80045b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045bc:	4616      	mov	r6, r2
 80045be:	4699      	mov	r9, r3
 80045c0:	688a      	ldr	r2, [r1, #8]
 80045c2:	690b      	ldr	r3, [r1, #16]
 80045c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045c8:	4293      	cmp	r3, r2
 80045ca:	bfb8      	it	lt
 80045cc:	4613      	movlt	r3, r2
 80045ce:	6033      	str	r3, [r6, #0]
 80045d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045d4:	4607      	mov	r7, r0
 80045d6:	460c      	mov	r4, r1
 80045d8:	b10a      	cbz	r2, 80045de <_printf_common+0x26>
 80045da:	3301      	adds	r3, #1
 80045dc:	6033      	str	r3, [r6, #0]
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	0699      	lsls	r1, r3, #26
 80045e2:	bf42      	ittt	mi
 80045e4:	6833      	ldrmi	r3, [r6, #0]
 80045e6:	3302      	addmi	r3, #2
 80045e8:	6033      	strmi	r3, [r6, #0]
 80045ea:	6825      	ldr	r5, [r4, #0]
 80045ec:	f015 0506 	ands.w	r5, r5, #6
 80045f0:	d106      	bne.n	8004600 <_printf_common+0x48>
 80045f2:	f104 0a19 	add.w	sl, r4, #25
 80045f6:	68e3      	ldr	r3, [r4, #12]
 80045f8:	6832      	ldr	r2, [r6, #0]
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	42ab      	cmp	r3, r5
 80045fe:	dc26      	bgt.n	800464e <_printf_common+0x96>
 8004600:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004604:	1e13      	subs	r3, r2, #0
 8004606:	6822      	ldr	r2, [r4, #0]
 8004608:	bf18      	it	ne
 800460a:	2301      	movne	r3, #1
 800460c:	0692      	lsls	r2, r2, #26
 800460e:	d42b      	bmi.n	8004668 <_printf_common+0xb0>
 8004610:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004614:	4649      	mov	r1, r9
 8004616:	4638      	mov	r0, r7
 8004618:	47c0      	blx	r8
 800461a:	3001      	adds	r0, #1
 800461c:	d01e      	beq.n	800465c <_printf_common+0xa4>
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	68e5      	ldr	r5, [r4, #12]
 8004622:	6832      	ldr	r2, [r6, #0]
 8004624:	f003 0306 	and.w	r3, r3, #6
 8004628:	2b04      	cmp	r3, #4
 800462a:	bf08      	it	eq
 800462c:	1aad      	subeq	r5, r5, r2
 800462e:	68a3      	ldr	r3, [r4, #8]
 8004630:	6922      	ldr	r2, [r4, #16]
 8004632:	bf0c      	ite	eq
 8004634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004638:	2500      	movne	r5, #0
 800463a:	4293      	cmp	r3, r2
 800463c:	bfc4      	itt	gt
 800463e:	1a9b      	subgt	r3, r3, r2
 8004640:	18ed      	addgt	r5, r5, r3
 8004642:	2600      	movs	r6, #0
 8004644:	341a      	adds	r4, #26
 8004646:	42b5      	cmp	r5, r6
 8004648:	d11a      	bne.n	8004680 <_printf_common+0xc8>
 800464a:	2000      	movs	r0, #0
 800464c:	e008      	b.n	8004660 <_printf_common+0xa8>
 800464e:	2301      	movs	r3, #1
 8004650:	4652      	mov	r2, sl
 8004652:	4649      	mov	r1, r9
 8004654:	4638      	mov	r0, r7
 8004656:	47c0      	blx	r8
 8004658:	3001      	adds	r0, #1
 800465a:	d103      	bne.n	8004664 <_printf_common+0xac>
 800465c:	f04f 30ff 	mov.w	r0, #4294967295
 8004660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004664:	3501      	adds	r5, #1
 8004666:	e7c6      	b.n	80045f6 <_printf_common+0x3e>
 8004668:	18e1      	adds	r1, r4, r3
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	2030      	movs	r0, #48	; 0x30
 800466e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004672:	4422      	add	r2, r4
 8004674:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004678:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800467c:	3302      	adds	r3, #2
 800467e:	e7c7      	b.n	8004610 <_printf_common+0x58>
 8004680:	2301      	movs	r3, #1
 8004682:	4622      	mov	r2, r4
 8004684:	4649      	mov	r1, r9
 8004686:	4638      	mov	r0, r7
 8004688:	47c0      	blx	r8
 800468a:	3001      	adds	r0, #1
 800468c:	d0e6      	beq.n	800465c <_printf_common+0xa4>
 800468e:	3601      	adds	r6, #1
 8004690:	e7d9      	b.n	8004646 <_printf_common+0x8e>
	...

08004694 <_printf_i>:
 8004694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004698:	460c      	mov	r4, r1
 800469a:	4691      	mov	r9, r2
 800469c:	7e27      	ldrb	r7, [r4, #24]
 800469e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80046a0:	2f78      	cmp	r7, #120	; 0x78
 80046a2:	4680      	mov	r8, r0
 80046a4:	469a      	mov	sl, r3
 80046a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046aa:	d807      	bhi.n	80046bc <_printf_i+0x28>
 80046ac:	2f62      	cmp	r7, #98	; 0x62
 80046ae:	d80a      	bhi.n	80046c6 <_printf_i+0x32>
 80046b0:	2f00      	cmp	r7, #0
 80046b2:	f000 80d8 	beq.w	8004866 <_printf_i+0x1d2>
 80046b6:	2f58      	cmp	r7, #88	; 0x58
 80046b8:	f000 80a3 	beq.w	8004802 <_printf_i+0x16e>
 80046bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80046c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046c4:	e03a      	b.n	800473c <_printf_i+0xa8>
 80046c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046ca:	2b15      	cmp	r3, #21
 80046cc:	d8f6      	bhi.n	80046bc <_printf_i+0x28>
 80046ce:	a001      	add	r0, pc, #4	; (adr r0, 80046d4 <_printf_i+0x40>)
 80046d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80046d4:	0800472d 	.word	0x0800472d
 80046d8:	08004741 	.word	0x08004741
 80046dc:	080046bd 	.word	0x080046bd
 80046e0:	080046bd 	.word	0x080046bd
 80046e4:	080046bd 	.word	0x080046bd
 80046e8:	080046bd 	.word	0x080046bd
 80046ec:	08004741 	.word	0x08004741
 80046f0:	080046bd 	.word	0x080046bd
 80046f4:	080046bd 	.word	0x080046bd
 80046f8:	080046bd 	.word	0x080046bd
 80046fc:	080046bd 	.word	0x080046bd
 8004700:	0800484d 	.word	0x0800484d
 8004704:	08004771 	.word	0x08004771
 8004708:	0800482f 	.word	0x0800482f
 800470c:	080046bd 	.word	0x080046bd
 8004710:	080046bd 	.word	0x080046bd
 8004714:	0800486f 	.word	0x0800486f
 8004718:	080046bd 	.word	0x080046bd
 800471c:	08004771 	.word	0x08004771
 8004720:	080046bd 	.word	0x080046bd
 8004724:	080046bd 	.word	0x080046bd
 8004728:	08004837 	.word	0x08004837
 800472c:	680b      	ldr	r3, [r1, #0]
 800472e:	1d1a      	adds	r2, r3, #4
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	600a      	str	r2, [r1, #0]
 8004734:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004738:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800473c:	2301      	movs	r3, #1
 800473e:	e0a3      	b.n	8004888 <_printf_i+0x1f4>
 8004740:	6825      	ldr	r5, [r4, #0]
 8004742:	6808      	ldr	r0, [r1, #0]
 8004744:	062e      	lsls	r6, r5, #24
 8004746:	f100 0304 	add.w	r3, r0, #4
 800474a:	d50a      	bpl.n	8004762 <_printf_i+0xce>
 800474c:	6805      	ldr	r5, [r0, #0]
 800474e:	600b      	str	r3, [r1, #0]
 8004750:	2d00      	cmp	r5, #0
 8004752:	da03      	bge.n	800475c <_printf_i+0xc8>
 8004754:	232d      	movs	r3, #45	; 0x2d
 8004756:	426d      	negs	r5, r5
 8004758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800475c:	485e      	ldr	r0, [pc, #376]	; (80048d8 <_printf_i+0x244>)
 800475e:	230a      	movs	r3, #10
 8004760:	e019      	b.n	8004796 <_printf_i+0x102>
 8004762:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004766:	6805      	ldr	r5, [r0, #0]
 8004768:	600b      	str	r3, [r1, #0]
 800476a:	bf18      	it	ne
 800476c:	b22d      	sxthne	r5, r5
 800476e:	e7ef      	b.n	8004750 <_printf_i+0xbc>
 8004770:	680b      	ldr	r3, [r1, #0]
 8004772:	6825      	ldr	r5, [r4, #0]
 8004774:	1d18      	adds	r0, r3, #4
 8004776:	6008      	str	r0, [r1, #0]
 8004778:	0628      	lsls	r0, r5, #24
 800477a:	d501      	bpl.n	8004780 <_printf_i+0xec>
 800477c:	681d      	ldr	r5, [r3, #0]
 800477e:	e002      	b.n	8004786 <_printf_i+0xf2>
 8004780:	0669      	lsls	r1, r5, #25
 8004782:	d5fb      	bpl.n	800477c <_printf_i+0xe8>
 8004784:	881d      	ldrh	r5, [r3, #0]
 8004786:	4854      	ldr	r0, [pc, #336]	; (80048d8 <_printf_i+0x244>)
 8004788:	2f6f      	cmp	r7, #111	; 0x6f
 800478a:	bf0c      	ite	eq
 800478c:	2308      	moveq	r3, #8
 800478e:	230a      	movne	r3, #10
 8004790:	2100      	movs	r1, #0
 8004792:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004796:	6866      	ldr	r6, [r4, #4]
 8004798:	60a6      	str	r6, [r4, #8]
 800479a:	2e00      	cmp	r6, #0
 800479c:	bfa2      	ittt	ge
 800479e:	6821      	ldrge	r1, [r4, #0]
 80047a0:	f021 0104 	bicge.w	r1, r1, #4
 80047a4:	6021      	strge	r1, [r4, #0]
 80047a6:	b90d      	cbnz	r5, 80047ac <_printf_i+0x118>
 80047a8:	2e00      	cmp	r6, #0
 80047aa:	d04d      	beq.n	8004848 <_printf_i+0x1b4>
 80047ac:	4616      	mov	r6, r2
 80047ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80047b2:	fb03 5711 	mls	r7, r3, r1, r5
 80047b6:	5dc7      	ldrb	r7, [r0, r7]
 80047b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047bc:	462f      	mov	r7, r5
 80047be:	42bb      	cmp	r3, r7
 80047c0:	460d      	mov	r5, r1
 80047c2:	d9f4      	bls.n	80047ae <_printf_i+0x11a>
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d10b      	bne.n	80047e0 <_printf_i+0x14c>
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	07df      	lsls	r7, r3, #31
 80047cc:	d508      	bpl.n	80047e0 <_printf_i+0x14c>
 80047ce:	6923      	ldr	r3, [r4, #16]
 80047d0:	6861      	ldr	r1, [r4, #4]
 80047d2:	4299      	cmp	r1, r3
 80047d4:	bfde      	ittt	le
 80047d6:	2330      	movle	r3, #48	; 0x30
 80047d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047e0:	1b92      	subs	r2, r2, r6
 80047e2:	6122      	str	r2, [r4, #16]
 80047e4:	f8cd a000 	str.w	sl, [sp]
 80047e8:	464b      	mov	r3, r9
 80047ea:	aa03      	add	r2, sp, #12
 80047ec:	4621      	mov	r1, r4
 80047ee:	4640      	mov	r0, r8
 80047f0:	f7ff fee2 	bl	80045b8 <_printf_common>
 80047f4:	3001      	adds	r0, #1
 80047f6:	d14c      	bne.n	8004892 <_printf_i+0x1fe>
 80047f8:	f04f 30ff 	mov.w	r0, #4294967295
 80047fc:	b004      	add	sp, #16
 80047fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004802:	4835      	ldr	r0, [pc, #212]	; (80048d8 <_printf_i+0x244>)
 8004804:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	680e      	ldr	r6, [r1, #0]
 800480c:	061f      	lsls	r7, r3, #24
 800480e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004812:	600e      	str	r6, [r1, #0]
 8004814:	d514      	bpl.n	8004840 <_printf_i+0x1ac>
 8004816:	07d9      	lsls	r1, r3, #31
 8004818:	bf44      	itt	mi
 800481a:	f043 0320 	orrmi.w	r3, r3, #32
 800481e:	6023      	strmi	r3, [r4, #0]
 8004820:	b91d      	cbnz	r5, 800482a <_printf_i+0x196>
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	f023 0320 	bic.w	r3, r3, #32
 8004828:	6023      	str	r3, [r4, #0]
 800482a:	2310      	movs	r3, #16
 800482c:	e7b0      	b.n	8004790 <_printf_i+0xfc>
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	f043 0320 	orr.w	r3, r3, #32
 8004834:	6023      	str	r3, [r4, #0]
 8004836:	2378      	movs	r3, #120	; 0x78
 8004838:	4828      	ldr	r0, [pc, #160]	; (80048dc <_printf_i+0x248>)
 800483a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800483e:	e7e3      	b.n	8004808 <_printf_i+0x174>
 8004840:	065e      	lsls	r6, r3, #25
 8004842:	bf48      	it	mi
 8004844:	b2ad      	uxthmi	r5, r5
 8004846:	e7e6      	b.n	8004816 <_printf_i+0x182>
 8004848:	4616      	mov	r6, r2
 800484a:	e7bb      	b.n	80047c4 <_printf_i+0x130>
 800484c:	680b      	ldr	r3, [r1, #0]
 800484e:	6826      	ldr	r6, [r4, #0]
 8004850:	6960      	ldr	r0, [r4, #20]
 8004852:	1d1d      	adds	r5, r3, #4
 8004854:	600d      	str	r5, [r1, #0]
 8004856:	0635      	lsls	r5, r6, #24
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	d501      	bpl.n	8004860 <_printf_i+0x1cc>
 800485c:	6018      	str	r0, [r3, #0]
 800485e:	e002      	b.n	8004866 <_printf_i+0x1d2>
 8004860:	0671      	lsls	r1, r6, #25
 8004862:	d5fb      	bpl.n	800485c <_printf_i+0x1c8>
 8004864:	8018      	strh	r0, [r3, #0]
 8004866:	2300      	movs	r3, #0
 8004868:	6123      	str	r3, [r4, #16]
 800486a:	4616      	mov	r6, r2
 800486c:	e7ba      	b.n	80047e4 <_printf_i+0x150>
 800486e:	680b      	ldr	r3, [r1, #0]
 8004870:	1d1a      	adds	r2, r3, #4
 8004872:	600a      	str	r2, [r1, #0]
 8004874:	681e      	ldr	r6, [r3, #0]
 8004876:	6862      	ldr	r2, [r4, #4]
 8004878:	2100      	movs	r1, #0
 800487a:	4630      	mov	r0, r6
 800487c:	f7fb fcb0 	bl	80001e0 <memchr>
 8004880:	b108      	cbz	r0, 8004886 <_printf_i+0x1f2>
 8004882:	1b80      	subs	r0, r0, r6
 8004884:	6060      	str	r0, [r4, #4]
 8004886:	6863      	ldr	r3, [r4, #4]
 8004888:	6123      	str	r3, [r4, #16]
 800488a:	2300      	movs	r3, #0
 800488c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004890:	e7a8      	b.n	80047e4 <_printf_i+0x150>
 8004892:	6923      	ldr	r3, [r4, #16]
 8004894:	4632      	mov	r2, r6
 8004896:	4649      	mov	r1, r9
 8004898:	4640      	mov	r0, r8
 800489a:	47d0      	blx	sl
 800489c:	3001      	adds	r0, #1
 800489e:	d0ab      	beq.n	80047f8 <_printf_i+0x164>
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	079b      	lsls	r3, r3, #30
 80048a4:	d413      	bmi.n	80048ce <_printf_i+0x23a>
 80048a6:	68e0      	ldr	r0, [r4, #12]
 80048a8:	9b03      	ldr	r3, [sp, #12]
 80048aa:	4298      	cmp	r0, r3
 80048ac:	bfb8      	it	lt
 80048ae:	4618      	movlt	r0, r3
 80048b0:	e7a4      	b.n	80047fc <_printf_i+0x168>
 80048b2:	2301      	movs	r3, #1
 80048b4:	4632      	mov	r2, r6
 80048b6:	4649      	mov	r1, r9
 80048b8:	4640      	mov	r0, r8
 80048ba:	47d0      	blx	sl
 80048bc:	3001      	adds	r0, #1
 80048be:	d09b      	beq.n	80047f8 <_printf_i+0x164>
 80048c0:	3501      	adds	r5, #1
 80048c2:	68e3      	ldr	r3, [r4, #12]
 80048c4:	9903      	ldr	r1, [sp, #12]
 80048c6:	1a5b      	subs	r3, r3, r1
 80048c8:	42ab      	cmp	r3, r5
 80048ca:	dcf2      	bgt.n	80048b2 <_printf_i+0x21e>
 80048cc:	e7eb      	b.n	80048a6 <_printf_i+0x212>
 80048ce:	2500      	movs	r5, #0
 80048d0:	f104 0619 	add.w	r6, r4, #25
 80048d4:	e7f5      	b.n	80048c2 <_printf_i+0x22e>
 80048d6:	bf00      	nop
 80048d8:	08006bfe 	.word	0x08006bfe
 80048dc:	08006c0f 	.word	0x08006c0f

080048e0 <iprintf>:
 80048e0:	b40f      	push	{r0, r1, r2, r3}
 80048e2:	4b0a      	ldr	r3, [pc, #40]	; (800490c <iprintf+0x2c>)
 80048e4:	b513      	push	{r0, r1, r4, lr}
 80048e6:	681c      	ldr	r4, [r3, #0]
 80048e8:	b124      	cbz	r4, 80048f4 <iprintf+0x14>
 80048ea:	69a3      	ldr	r3, [r4, #24]
 80048ec:	b913      	cbnz	r3, 80048f4 <iprintf+0x14>
 80048ee:	4620      	mov	r0, r4
 80048f0:	f001 f870 	bl	80059d4 <__sinit>
 80048f4:	ab05      	add	r3, sp, #20
 80048f6:	9a04      	ldr	r2, [sp, #16]
 80048f8:	68a1      	ldr	r1, [r4, #8]
 80048fa:	9301      	str	r3, [sp, #4]
 80048fc:	4620      	mov	r0, r4
 80048fe:	f001 fdeb 	bl	80064d8 <_vfiprintf_r>
 8004902:	b002      	add	sp, #8
 8004904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004908:	b004      	add	sp, #16
 800490a:	4770      	bx	lr
 800490c:	20000004 	.word	0x20000004

08004910 <setbuf>:
 8004910:	2900      	cmp	r1, #0
 8004912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004916:	bf0c      	ite	eq
 8004918:	2202      	moveq	r2, #2
 800491a:	2200      	movne	r2, #0
 800491c:	f000 b800 	b.w	8004920 <setvbuf>

08004920 <setvbuf>:
 8004920:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004924:	461d      	mov	r5, r3
 8004926:	4b5d      	ldr	r3, [pc, #372]	; (8004a9c <setvbuf+0x17c>)
 8004928:	681f      	ldr	r7, [r3, #0]
 800492a:	4604      	mov	r4, r0
 800492c:	460e      	mov	r6, r1
 800492e:	4690      	mov	r8, r2
 8004930:	b127      	cbz	r7, 800493c <setvbuf+0x1c>
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	b913      	cbnz	r3, 800493c <setvbuf+0x1c>
 8004936:	4638      	mov	r0, r7
 8004938:	f001 f84c 	bl	80059d4 <__sinit>
 800493c:	4b58      	ldr	r3, [pc, #352]	; (8004aa0 <setvbuf+0x180>)
 800493e:	429c      	cmp	r4, r3
 8004940:	d167      	bne.n	8004a12 <setvbuf+0xf2>
 8004942:	687c      	ldr	r4, [r7, #4]
 8004944:	f1b8 0f02 	cmp.w	r8, #2
 8004948:	d006      	beq.n	8004958 <setvbuf+0x38>
 800494a:	f1b8 0f01 	cmp.w	r8, #1
 800494e:	f200 809f 	bhi.w	8004a90 <setvbuf+0x170>
 8004952:	2d00      	cmp	r5, #0
 8004954:	f2c0 809c 	blt.w	8004a90 <setvbuf+0x170>
 8004958:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800495a:	07db      	lsls	r3, r3, #31
 800495c:	d405      	bmi.n	800496a <setvbuf+0x4a>
 800495e:	89a3      	ldrh	r3, [r4, #12]
 8004960:	0598      	lsls	r0, r3, #22
 8004962:	d402      	bmi.n	800496a <setvbuf+0x4a>
 8004964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004966:	f001 f8d8 	bl	8005b1a <__retarget_lock_acquire_recursive>
 800496a:	4621      	mov	r1, r4
 800496c:	4638      	mov	r0, r7
 800496e:	f000 ff9d 	bl	80058ac <_fflush_r>
 8004972:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004974:	b141      	cbz	r1, 8004988 <setvbuf+0x68>
 8004976:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800497a:	4299      	cmp	r1, r3
 800497c:	d002      	beq.n	8004984 <setvbuf+0x64>
 800497e:	4638      	mov	r0, r7
 8004980:	f001 fcd6 	bl	8006330 <_free_r>
 8004984:	2300      	movs	r3, #0
 8004986:	6363      	str	r3, [r4, #52]	; 0x34
 8004988:	2300      	movs	r3, #0
 800498a:	61a3      	str	r3, [r4, #24]
 800498c:	6063      	str	r3, [r4, #4]
 800498e:	89a3      	ldrh	r3, [r4, #12]
 8004990:	0619      	lsls	r1, r3, #24
 8004992:	d503      	bpl.n	800499c <setvbuf+0x7c>
 8004994:	6921      	ldr	r1, [r4, #16]
 8004996:	4638      	mov	r0, r7
 8004998:	f001 fcca 	bl	8006330 <_free_r>
 800499c:	89a3      	ldrh	r3, [r4, #12]
 800499e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80049a2:	f023 0303 	bic.w	r3, r3, #3
 80049a6:	f1b8 0f02 	cmp.w	r8, #2
 80049aa:	81a3      	strh	r3, [r4, #12]
 80049ac:	d06c      	beq.n	8004a88 <setvbuf+0x168>
 80049ae:	ab01      	add	r3, sp, #4
 80049b0:	466a      	mov	r2, sp
 80049b2:	4621      	mov	r1, r4
 80049b4:	4638      	mov	r0, r7
 80049b6:	f001 f8b2 	bl	8005b1e <__swhatbuf_r>
 80049ba:	89a3      	ldrh	r3, [r4, #12]
 80049bc:	4318      	orrs	r0, r3
 80049be:	81a0      	strh	r0, [r4, #12]
 80049c0:	2d00      	cmp	r5, #0
 80049c2:	d130      	bne.n	8004a26 <setvbuf+0x106>
 80049c4:	9d00      	ldr	r5, [sp, #0]
 80049c6:	4628      	mov	r0, r5
 80049c8:	f001 f90e 	bl	8005be8 <malloc>
 80049cc:	4606      	mov	r6, r0
 80049ce:	2800      	cmp	r0, #0
 80049d0:	d155      	bne.n	8004a7e <setvbuf+0x15e>
 80049d2:	f8dd 9000 	ldr.w	r9, [sp]
 80049d6:	45a9      	cmp	r9, r5
 80049d8:	d14a      	bne.n	8004a70 <setvbuf+0x150>
 80049da:	f04f 35ff 	mov.w	r5, #4294967295
 80049de:	2200      	movs	r2, #0
 80049e0:	60a2      	str	r2, [r4, #8]
 80049e2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80049e6:	6022      	str	r2, [r4, #0]
 80049e8:	6122      	str	r2, [r4, #16]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049f0:	6162      	str	r2, [r4, #20]
 80049f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049f4:	f043 0302 	orr.w	r3, r3, #2
 80049f8:	07d2      	lsls	r2, r2, #31
 80049fa:	81a3      	strh	r3, [r4, #12]
 80049fc:	d405      	bmi.n	8004a0a <setvbuf+0xea>
 80049fe:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004a02:	d102      	bne.n	8004a0a <setvbuf+0xea>
 8004a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a06:	f001 f889 	bl	8005b1c <__retarget_lock_release_recursive>
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	b003      	add	sp, #12
 8004a0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a12:	4b24      	ldr	r3, [pc, #144]	; (8004aa4 <setvbuf+0x184>)
 8004a14:	429c      	cmp	r4, r3
 8004a16:	d101      	bne.n	8004a1c <setvbuf+0xfc>
 8004a18:	68bc      	ldr	r4, [r7, #8]
 8004a1a:	e793      	b.n	8004944 <setvbuf+0x24>
 8004a1c:	4b22      	ldr	r3, [pc, #136]	; (8004aa8 <setvbuf+0x188>)
 8004a1e:	429c      	cmp	r4, r3
 8004a20:	bf08      	it	eq
 8004a22:	68fc      	ldreq	r4, [r7, #12]
 8004a24:	e78e      	b.n	8004944 <setvbuf+0x24>
 8004a26:	2e00      	cmp	r6, #0
 8004a28:	d0cd      	beq.n	80049c6 <setvbuf+0xa6>
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	b913      	cbnz	r3, 8004a34 <setvbuf+0x114>
 8004a2e:	4638      	mov	r0, r7
 8004a30:	f000 ffd0 	bl	80059d4 <__sinit>
 8004a34:	f1b8 0f01 	cmp.w	r8, #1
 8004a38:	bf08      	it	eq
 8004a3a:	89a3      	ldrheq	r3, [r4, #12]
 8004a3c:	6026      	str	r6, [r4, #0]
 8004a3e:	bf04      	itt	eq
 8004a40:	f043 0301 	orreq.w	r3, r3, #1
 8004a44:	81a3      	strheq	r3, [r4, #12]
 8004a46:	89a2      	ldrh	r2, [r4, #12]
 8004a48:	f012 0308 	ands.w	r3, r2, #8
 8004a4c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004a50:	d01c      	beq.n	8004a8c <setvbuf+0x16c>
 8004a52:	07d3      	lsls	r3, r2, #31
 8004a54:	bf41      	itttt	mi
 8004a56:	2300      	movmi	r3, #0
 8004a58:	426d      	negmi	r5, r5
 8004a5a:	60a3      	strmi	r3, [r4, #8]
 8004a5c:	61a5      	strmi	r5, [r4, #24]
 8004a5e:	bf58      	it	pl
 8004a60:	60a5      	strpl	r5, [r4, #8]
 8004a62:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004a64:	f015 0501 	ands.w	r5, r5, #1
 8004a68:	d115      	bne.n	8004a96 <setvbuf+0x176>
 8004a6a:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004a6e:	e7c8      	b.n	8004a02 <setvbuf+0xe2>
 8004a70:	4648      	mov	r0, r9
 8004a72:	f001 f8b9 	bl	8005be8 <malloc>
 8004a76:	4606      	mov	r6, r0
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	d0ae      	beq.n	80049da <setvbuf+0xba>
 8004a7c:	464d      	mov	r5, r9
 8004a7e:	89a3      	ldrh	r3, [r4, #12]
 8004a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a84:	81a3      	strh	r3, [r4, #12]
 8004a86:	e7d0      	b.n	8004a2a <setvbuf+0x10a>
 8004a88:	2500      	movs	r5, #0
 8004a8a:	e7a8      	b.n	80049de <setvbuf+0xbe>
 8004a8c:	60a3      	str	r3, [r4, #8]
 8004a8e:	e7e8      	b.n	8004a62 <setvbuf+0x142>
 8004a90:	f04f 35ff 	mov.w	r5, #4294967295
 8004a94:	e7b9      	b.n	8004a0a <setvbuf+0xea>
 8004a96:	2500      	movs	r5, #0
 8004a98:	e7b7      	b.n	8004a0a <setvbuf+0xea>
 8004a9a:	bf00      	nop
 8004a9c:	20000004 	.word	0x20000004
 8004aa0:	08006cd4 	.word	0x08006cd4
 8004aa4:	08006cf4 	.word	0x08006cf4
 8004aa8:	08006cb4 	.word	0x08006cb4

08004aac <quorem>:
 8004aac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab0:	6903      	ldr	r3, [r0, #16]
 8004ab2:	690c      	ldr	r4, [r1, #16]
 8004ab4:	42a3      	cmp	r3, r4
 8004ab6:	4607      	mov	r7, r0
 8004ab8:	f2c0 8081 	blt.w	8004bbe <quorem+0x112>
 8004abc:	3c01      	subs	r4, #1
 8004abe:	f101 0814 	add.w	r8, r1, #20
 8004ac2:	f100 0514 	add.w	r5, r0, #20
 8004ac6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004aca:	9301      	str	r3, [sp, #4]
 8004acc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ad0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004adc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ae0:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ae4:	d331      	bcc.n	8004b4a <quorem+0x9e>
 8004ae6:	f04f 0e00 	mov.w	lr, #0
 8004aea:	4640      	mov	r0, r8
 8004aec:	46ac      	mov	ip, r5
 8004aee:	46f2      	mov	sl, lr
 8004af0:	f850 2b04 	ldr.w	r2, [r0], #4
 8004af4:	b293      	uxth	r3, r2
 8004af6:	fb06 e303 	mla	r3, r6, r3, lr
 8004afa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	ebaa 0303 	sub.w	r3, sl, r3
 8004b04:	0c12      	lsrs	r2, r2, #16
 8004b06:	f8dc a000 	ldr.w	sl, [ip]
 8004b0a:	fb06 e202 	mla	r2, r6, r2, lr
 8004b0e:	fa13 f38a 	uxtah	r3, r3, sl
 8004b12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004b16:	fa1f fa82 	uxth.w	sl, r2
 8004b1a:	f8dc 2000 	ldr.w	r2, [ip]
 8004b1e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004b22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b2c:	4581      	cmp	r9, r0
 8004b2e:	f84c 3b04 	str.w	r3, [ip], #4
 8004b32:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004b36:	d2db      	bcs.n	8004af0 <quorem+0x44>
 8004b38:	f855 300b 	ldr.w	r3, [r5, fp]
 8004b3c:	b92b      	cbnz	r3, 8004b4a <quorem+0x9e>
 8004b3e:	9b01      	ldr	r3, [sp, #4]
 8004b40:	3b04      	subs	r3, #4
 8004b42:	429d      	cmp	r5, r3
 8004b44:	461a      	mov	r2, r3
 8004b46:	d32e      	bcc.n	8004ba6 <quorem+0xfa>
 8004b48:	613c      	str	r4, [r7, #16]
 8004b4a:	4638      	mov	r0, r7
 8004b4c:	f001 fae0 	bl	8006110 <__mcmp>
 8004b50:	2800      	cmp	r0, #0
 8004b52:	db24      	blt.n	8004b9e <quorem+0xf2>
 8004b54:	3601      	adds	r6, #1
 8004b56:	4628      	mov	r0, r5
 8004b58:	f04f 0c00 	mov.w	ip, #0
 8004b5c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004b60:	f8d0 e000 	ldr.w	lr, [r0]
 8004b64:	b293      	uxth	r3, r2
 8004b66:	ebac 0303 	sub.w	r3, ip, r3
 8004b6a:	0c12      	lsrs	r2, r2, #16
 8004b6c:	fa13 f38e 	uxtah	r3, r3, lr
 8004b70:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004b74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b7e:	45c1      	cmp	r9, r8
 8004b80:	f840 3b04 	str.w	r3, [r0], #4
 8004b84:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004b88:	d2e8      	bcs.n	8004b5c <quorem+0xb0>
 8004b8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b92:	b922      	cbnz	r2, 8004b9e <quorem+0xf2>
 8004b94:	3b04      	subs	r3, #4
 8004b96:	429d      	cmp	r5, r3
 8004b98:	461a      	mov	r2, r3
 8004b9a:	d30a      	bcc.n	8004bb2 <quorem+0x106>
 8004b9c:	613c      	str	r4, [r7, #16]
 8004b9e:	4630      	mov	r0, r6
 8004ba0:	b003      	add	sp, #12
 8004ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba6:	6812      	ldr	r2, [r2, #0]
 8004ba8:	3b04      	subs	r3, #4
 8004baa:	2a00      	cmp	r2, #0
 8004bac:	d1cc      	bne.n	8004b48 <quorem+0x9c>
 8004bae:	3c01      	subs	r4, #1
 8004bb0:	e7c7      	b.n	8004b42 <quorem+0x96>
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	3b04      	subs	r3, #4
 8004bb6:	2a00      	cmp	r2, #0
 8004bb8:	d1f0      	bne.n	8004b9c <quorem+0xf0>
 8004bba:	3c01      	subs	r4, #1
 8004bbc:	e7eb      	b.n	8004b96 <quorem+0xea>
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	e7ee      	b.n	8004ba0 <quorem+0xf4>
 8004bc2:	0000      	movs	r0, r0
 8004bc4:	0000      	movs	r0, r0
	...

08004bc8 <_dtoa_r>:
 8004bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bcc:	ed2d 8b02 	vpush	{d8}
 8004bd0:	ec57 6b10 	vmov	r6, r7, d0
 8004bd4:	b095      	sub	sp, #84	; 0x54
 8004bd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004bd8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004bdc:	9105      	str	r1, [sp, #20]
 8004bde:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004be2:	4604      	mov	r4, r0
 8004be4:	9209      	str	r2, [sp, #36]	; 0x24
 8004be6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004be8:	b975      	cbnz	r5, 8004c08 <_dtoa_r+0x40>
 8004bea:	2010      	movs	r0, #16
 8004bec:	f000 fffc 	bl	8005be8 <malloc>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	6260      	str	r0, [r4, #36]	; 0x24
 8004bf4:	b920      	cbnz	r0, 8004c00 <_dtoa_r+0x38>
 8004bf6:	4bb2      	ldr	r3, [pc, #712]	; (8004ec0 <_dtoa_r+0x2f8>)
 8004bf8:	21ea      	movs	r1, #234	; 0xea
 8004bfa:	48b2      	ldr	r0, [pc, #712]	; (8004ec4 <_dtoa_r+0x2fc>)
 8004bfc:	f001 fec2 	bl	8006984 <__assert_func>
 8004c00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c04:	6005      	str	r5, [r0, #0]
 8004c06:	60c5      	str	r5, [r0, #12]
 8004c08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c0a:	6819      	ldr	r1, [r3, #0]
 8004c0c:	b151      	cbz	r1, 8004c24 <_dtoa_r+0x5c>
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	604a      	str	r2, [r1, #4]
 8004c12:	2301      	movs	r3, #1
 8004c14:	4093      	lsls	r3, r2
 8004c16:	608b      	str	r3, [r1, #8]
 8004c18:	4620      	mov	r0, r4
 8004c1a:	f001 f83b 	bl	8005c94 <_Bfree>
 8004c1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	1e3b      	subs	r3, r7, #0
 8004c26:	bfb9      	ittee	lt
 8004c28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004c2c:	9303      	strlt	r3, [sp, #12]
 8004c2e:	2300      	movge	r3, #0
 8004c30:	f8c8 3000 	strge.w	r3, [r8]
 8004c34:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004c38:	4ba3      	ldr	r3, [pc, #652]	; (8004ec8 <_dtoa_r+0x300>)
 8004c3a:	bfbc      	itt	lt
 8004c3c:	2201      	movlt	r2, #1
 8004c3e:	f8c8 2000 	strlt.w	r2, [r8]
 8004c42:	ea33 0309 	bics.w	r3, r3, r9
 8004c46:	d11b      	bne.n	8004c80 <_dtoa_r+0xb8>
 8004c48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004c4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004c54:	4333      	orrs	r3, r6
 8004c56:	f000 857a 	beq.w	800574e <_dtoa_r+0xb86>
 8004c5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c5c:	b963      	cbnz	r3, 8004c78 <_dtoa_r+0xb0>
 8004c5e:	4b9b      	ldr	r3, [pc, #620]	; (8004ecc <_dtoa_r+0x304>)
 8004c60:	e024      	b.n	8004cac <_dtoa_r+0xe4>
 8004c62:	4b9b      	ldr	r3, [pc, #620]	; (8004ed0 <_dtoa_r+0x308>)
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	3308      	adds	r3, #8
 8004c68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	9800      	ldr	r0, [sp, #0]
 8004c6e:	b015      	add	sp, #84	; 0x54
 8004c70:	ecbd 8b02 	vpop	{d8}
 8004c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c78:	4b94      	ldr	r3, [pc, #592]	; (8004ecc <_dtoa_r+0x304>)
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	3303      	adds	r3, #3
 8004c7e:	e7f3      	b.n	8004c68 <_dtoa_r+0xa0>
 8004c80:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004c84:	2200      	movs	r2, #0
 8004c86:	ec51 0b17 	vmov	r0, r1, d7
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004c90:	f7fb ff1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c94:	4680      	mov	r8, r0
 8004c96:	b158      	cbz	r0, 8004cb0 <_dtoa_r+0xe8>
 8004c98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 8551 	beq.w	8005748 <_dtoa_r+0xb80>
 8004ca6:	488b      	ldr	r0, [pc, #556]	; (8004ed4 <_dtoa_r+0x30c>)
 8004ca8:	6018      	str	r0, [r3, #0]
 8004caa:	1e43      	subs	r3, r0, #1
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	e7dd      	b.n	8004c6c <_dtoa_r+0xa4>
 8004cb0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004cb4:	aa12      	add	r2, sp, #72	; 0x48
 8004cb6:	a913      	add	r1, sp, #76	; 0x4c
 8004cb8:	4620      	mov	r0, r4
 8004cba:	f001 facd 	bl	8006258 <__d2b>
 8004cbe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004cc2:	4683      	mov	fp, r0
 8004cc4:	2d00      	cmp	r5, #0
 8004cc6:	d07c      	beq.n	8004dc2 <_dtoa_r+0x1fa>
 8004cc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004cce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cd2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004cd6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004cda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004cde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004ce2:	4b7d      	ldr	r3, [pc, #500]	; (8004ed8 <_dtoa_r+0x310>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	4630      	mov	r0, r6
 8004ce8:	4639      	mov	r1, r7
 8004cea:	f7fb facd 	bl	8000288 <__aeabi_dsub>
 8004cee:	a36e      	add	r3, pc, #440	; (adr r3, 8004ea8 <_dtoa_r+0x2e0>)
 8004cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf4:	f7fb fc80 	bl	80005f8 <__aeabi_dmul>
 8004cf8:	a36d      	add	r3, pc, #436	; (adr r3, 8004eb0 <_dtoa_r+0x2e8>)
 8004cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfe:	f7fb fac5 	bl	800028c <__adddf3>
 8004d02:	4606      	mov	r6, r0
 8004d04:	4628      	mov	r0, r5
 8004d06:	460f      	mov	r7, r1
 8004d08:	f7fb fc0c 	bl	8000524 <__aeabi_i2d>
 8004d0c:	a36a      	add	r3, pc, #424	; (adr r3, 8004eb8 <_dtoa_r+0x2f0>)
 8004d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d12:	f7fb fc71 	bl	80005f8 <__aeabi_dmul>
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	4639      	mov	r1, r7
 8004d1e:	f7fb fab5 	bl	800028c <__adddf3>
 8004d22:	4606      	mov	r6, r0
 8004d24:	460f      	mov	r7, r1
 8004d26:	f7fb ff17 	bl	8000b58 <__aeabi_d2iz>
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	4682      	mov	sl, r0
 8004d2e:	2300      	movs	r3, #0
 8004d30:	4630      	mov	r0, r6
 8004d32:	4639      	mov	r1, r7
 8004d34:	f7fb fed2 	bl	8000adc <__aeabi_dcmplt>
 8004d38:	b148      	cbz	r0, 8004d4e <_dtoa_r+0x186>
 8004d3a:	4650      	mov	r0, sl
 8004d3c:	f7fb fbf2 	bl	8000524 <__aeabi_i2d>
 8004d40:	4632      	mov	r2, r6
 8004d42:	463b      	mov	r3, r7
 8004d44:	f7fb fec0 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d48:	b908      	cbnz	r0, 8004d4e <_dtoa_r+0x186>
 8004d4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d4e:	f1ba 0f16 	cmp.w	sl, #22
 8004d52:	d854      	bhi.n	8004dfe <_dtoa_r+0x236>
 8004d54:	4b61      	ldr	r3, [pc, #388]	; (8004edc <_dtoa_r+0x314>)
 8004d56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004d62:	f7fb febb 	bl	8000adc <__aeabi_dcmplt>
 8004d66:	2800      	cmp	r0, #0
 8004d68:	d04b      	beq.n	8004e02 <_dtoa_r+0x23a>
 8004d6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d6e:	2300      	movs	r3, #0
 8004d70:	930e      	str	r3, [sp, #56]	; 0x38
 8004d72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d74:	1b5d      	subs	r5, r3, r5
 8004d76:	1e6b      	subs	r3, r5, #1
 8004d78:	9304      	str	r3, [sp, #16]
 8004d7a:	bf43      	ittte	mi
 8004d7c:	2300      	movmi	r3, #0
 8004d7e:	f1c5 0801 	rsbmi	r8, r5, #1
 8004d82:	9304      	strmi	r3, [sp, #16]
 8004d84:	f04f 0800 	movpl.w	r8, #0
 8004d88:	f1ba 0f00 	cmp.w	sl, #0
 8004d8c:	db3b      	blt.n	8004e06 <_dtoa_r+0x23e>
 8004d8e:	9b04      	ldr	r3, [sp, #16]
 8004d90:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004d94:	4453      	add	r3, sl
 8004d96:	9304      	str	r3, [sp, #16]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	9306      	str	r3, [sp, #24]
 8004d9c:	9b05      	ldr	r3, [sp, #20]
 8004d9e:	2b09      	cmp	r3, #9
 8004da0:	d869      	bhi.n	8004e76 <_dtoa_r+0x2ae>
 8004da2:	2b05      	cmp	r3, #5
 8004da4:	bfc4      	itt	gt
 8004da6:	3b04      	subgt	r3, #4
 8004da8:	9305      	strgt	r3, [sp, #20]
 8004daa:	9b05      	ldr	r3, [sp, #20]
 8004dac:	f1a3 0302 	sub.w	r3, r3, #2
 8004db0:	bfcc      	ite	gt
 8004db2:	2500      	movgt	r5, #0
 8004db4:	2501      	movle	r5, #1
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	d869      	bhi.n	8004e8e <_dtoa_r+0x2c6>
 8004dba:	e8df f003 	tbb	[pc, r3]
 8004dbe:	4e2c      	.short	0x4e2c
 8004dc0:	5a4c      	.short	0x5a4c
 8004dc2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004dc6:	441d      	add	r5, r3
 8004dc8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004dcc:	2b20      	cmp	r3, #32
 8004dce:	bfc1      	itttt	gt
 8004dd0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004dd4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004dd8:	fa09 f303 	lslgt.w	r3, r9, r3
 8004ddc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004de0:	bfda      	itte	le
 8004de2:	f1c3 0320 	rsble	r3, r3, #32
 8004de6:	fa06 f003 	lslle.w	r0, r6, r3
 8004dea:	4318      	orrgt	r0, r3
 8004dec:	f7fb fb8a 	bl	8000504 <__aeabi_ui2d>
 8004df0:	2301      	movs	r3, #1
 8004df2:	4606      	mov	r6, r0
 8004df4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004df8:	3d01      	subs	r5, #1
 8004dfa:	9310      	str	r3, [sp, #64]	; 0x40
 8004dfc:	e771      	b.n	8004ce2 <_dtoa_r+0x11a>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e7b6      	b.n	8004d70 <_dtoa_r+0x1a8>
 8004e02:	900e      	str	r0, [sp, #56]	; 0x38
 8004e04:	e7b5      	b.n	8004d72 <_dtoa_r+0x1aa>
 8004e06:	f1ca 0300 	rsb	r3, sl, #0
 8004e0a:	9306      	str	r3, [sp, #24]
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	eba8 080a 	sub.w	r8, r8, sl
 8004e12:	930d      	str	r3, [sp, #52]	; 0x34
 8004e14:	e7c2      	b.n	8004d9c <_dtoa_r+0x1d4>
 8004e16:	2300      	movs	r3, #0
 8004e18:	9308      	str	r3, [sp, #32]
 8004e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	dc39      	bgt.n	8004e94 <_dtoa_r+0x2cc>
 8004e20:	f04f 0901 	mov.w	r9, #1
 8004e24:	f8cd 9004 	str.w	r9, [sp, #4]
 8004e28:	464b      	mov	r3, r9
 8004e2a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004e2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004e30:	2200      	movs	r2, #0
 8004e32:	6042      	str	r2, [r0, #4]
 8004e34:	2204      	movs	r2, #4
 8004e36:	f102 0614 	add.w	r6, r2, #20
 8004e3a:	429e      	cmp	r6, r3
 8004e3c:	6841      	ldr	r1, [r0, #4]
 8004e3e:	d92f      	bls.n	8004ea0 <_dtoa_r+0x2d8>
 8004e40:	4620      	mov	r0, r4
 8004e42:	f000 fee7 	bl	8005c14 <_Balloc>
 8004e46:	9000      	str	r0, [sp, #0]
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d14b      	bne.n	8004ee4 <_dtoa_r+0x31c>
 8004e4c:	4b24      	ldr	r3, [pc, #144]	; (8004ee0 <_dtoa_r+0x318>)
 8004e4e:	4602      	mov	r2, r0
 8004e50:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004e54:	e6d1      	b.n	8004bfa <_dtoa_r+0x32>
 8004e56:	2301      	movs	r3, #1
 8004e58:	e7de      	b.n	8004e18 <_dtoa_r+0x250>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	9308      	str	r3, [sp, #32]
 8004e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e60:	eb0a 0903 	add.w	r9, sl, r3
 8004e64:	f109 0301 	add.w	r3, r9, #1
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	9301      	str	r3, [sp, #4]
 8004e6c:	bfb8      	it	lt
 8004e6e:	2301      	movlt	r3, #1
 8004e70:	e7dd      	b.n	8004e2e <_dtoa_r+0x266>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e7f2      	b.n	8004e5c <_dtoa_r+0x294>
 8004e76:	2501      	movs	r5, #1
 8004e78:	2300      	movs	r3, #0
 8004e7a:	9305      	str	r3, [sp, #20]
 8004e7c:	9508      	str	r5, [sp, #32]
 8004e7e:	f04f 39ff 	mov.w	r9, #4294967295
 8004e82:	2200      	movs	r2, #0
 8004e84:	f8cd 9004 	str.w	r9, [sp, #4]
 8004e88:	2312      	movs	r3, #18
 8004e8a:	9209      	str	r2, [sp, #36]	; 0x24
 8004e8c:	e7cf      	b.n	8004e2e <_dtoa_r+0x266>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	9308      	str	r3, [sp, #32]
 8004e92:	e7f4      	b.n	8004e7e <_dtoa_r+0x2b6>
 8004e94:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004e98:	f8cd 9004 	str.w	r9, [sp, #4]
 8004e9c:	464b      	mov	r3, r9
 8004e9e:	e7c6      	b.n	8004e2e <_dtoa_r+0x266>
 8004ea0:	3101      	adds	r1, #1
 8004ea2:	6041      	str	r1, [r0, #4]
 8004ea4:	0052      	lsls	r2, r2, #1
 8004ea6:	e7c6      	b.n	8004e36 <_dtoa_r+0x26e>
 8004ea8:	636f4361 	.word	0x636f4361
 8004eac:	3fd287a7 	.word	0x3fd287a7
 8004eb0:	8b60c8b3 	.word	0x8b60c8b3
 8004eb4:	3fc68a28 	.word	0x3fc68a28
 8004eb8:	509f79fb 	.word	0x509f79fb
 8004ebc:	3fd34413 	.word	0x3fd34413
 8004ec0:	08006c2d 	.word	0x08006c2d
 8004ec4:	08006c44 	.word	0x08006c44
 8004ec8:	7ff00000 	.word	0x7ff00000
 8004ecc:	08006c29 	.word	0x08006c29
 8004ed0:	08006c20 	.word	0x08006c20
 8004ed4:	08006bfd 	.word	0x08006bfd
 8004ed8:	3ff80000 	.word	0x3ff80000
 8004edc:	08006da0 	.word	0x08006da0
 8004ee0:	08006ca3 	.word	0x08006ca3
 8004ee4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ee6:	9a00      	ldr	r2, [sp, #0]
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	9b01      	ldr	r3, [sp, #4]
 8004eec:	2b0e      	cmp	r3, #14
 8004eee:	f200 80ad 	bhi.w	800504c <_dtoa_r+0x484>
 8004ef2:	2d00      	cmp	r5, #0
 8004ef4:	f000 80aa 	beq.w	800504c <_dtoa_r+0x484>
 8004ef8:	f1ba 0f00 	cmp.w	sl, #0
 8004efc:	dd36      	ble.n	8004f6c <_dtoa_r+0x3a4>
 8004efe:	4ac3      	ldr	r2, [pc, #780]	; (800520c <_dtoa_r+0x644>)
 8004f00:	f00a 030f 	and.w	r3, sl, #15
 8004f04:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f08:	ed93 7b00 	vldr	d7, [r3]
 8004f0c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004f10:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004f14:	eeb0 8a47 	vmov.f32	s16, s14
 8004f18:	eef0 8a67 	vmov.f32	s17, s15
 8004f1c:	d016      	beq.n	8004f4c <_dtoa_r+0x384>
 8004f1e:	4bbc      	ldr	r3, [pc, #752]	; (8005210 <_dtoa_r+0x648>)
 8004f20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f28:	f7fb fc90 	bl	800084c <__aeabi_ddiv>
 8004f2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f30:	f007 070f 	and.w	r7, r7, #15
 8004f34:	2503      	movs	r5, #3
 8004f36:	4eb6      	ldr	r6, [pc, #728]	; (8005210 <_dtoa_r+0x648>)
 8004f38:	b957      	cbnz	r7, 8004f50 <_dtoa_r+0x388>
 8004f3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f3e:	ec53 2b18 	vmov	r2, r3, d8
 8004f42:	f7fb fc83 	bl	800084c <__aeabi_ddiv>
 8004f46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f4a:	e029      	b.n	8004fa0 <_dtoa_r+0x3d8>
 8004f4c:	2502      	movs	r5, #2
 8004f4e:	e7f2      	b.n	8004f36 <_dtoa_r+0x36e>
 8004f50:	07f9      	lsls	r1, r7, #31
 8004f52:	d508      	bpl.n	8004f66 <_dtoa_r+0x39e>
 8004f54:	ec51 0b18 	vmov	r0, r1, d8
 8004f58:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f5c:	f7fb fb4c 	bl	80005f8 <__aeabi_dmul>
 8004f60:	ec41 0b18 	vmov	d8, r0, r1
 8004f64:	3501      	adds	r5, #1
 8004f66:	107f      	asrs	r7, r7, #1
 8004f68:	3608      	adds	r6, #8
 8004f6a:	e7e5      	b.n	8004f38 <_dtoa_r+0x370>
 8004f6c:	f000 80a6 	beq.w	80050bc <_dtoa_r+0x4f4>
 8004f70:	f1ca 0600 	rsb	r6, sl, #0
 8004f74:	4ba5      	ldr	r3, [pc, #660]	; (800520c <_dtoa_r+0x644>)
 8004f76:	4fa6      	ldr	r7, [pc, #664]	; (8005210 <_dtoa_r+0x648>)
 8004f78:	f006 020f 	and.w	r2, r6, #15
 8004f7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f88:	f7fb fb36 	bl	80005f8 <__aeabi_dmul>
 8004f8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f90:	1136      	asrs	r6, r6, #4
 8004f92:	2300      	movs	r3, #0
 8004f94:	2502      	movs	r5, #2
 8004f96:	2e00      	cmp	r6, #0
 8004f98:	f040 8085 	bne.w	80050a6 <_dtoa_r+0x4de>
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1d2      	bne.n	8004f46 <_dtoa_r+0x37e>
 8004fa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 808c 	beq.w	80050c0 <_dtoa_r+0x4f8>
 8004fa8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004fac:	4b99      	ldr	r3, [pc, #612]	; (8005214 <_dtoa_r+0x64c>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	4630      	mov	r0, r6
 8004fb2:	4639      	mov	r1, r7
 8004fb4:	f7fb fd92 	bl	8000adc <__aeabi_dcmplt>
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	f000 8081 	beq.w	80050c0 <_dtoa_r+0x4f8>
 8004fbe:	9b01      	ldr	r3, [sp, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d07d      	beq.n	80050c0 <_dtoa_r+0x4f8>
 8004fc4:	f1b9 0f00 	cmp.w	r9, #0
 8004fc8:	dd3c      	ble.n	8005044 <_dtoa_r+0x47c>
 8004fca:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004fce:	9307      	str	r3, [sp, #28]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	4b91      	ldr	r3, [pc, #580]	; (8005218 <_dtoa_r+0x650>)
 8004fd4:	4630      	mov	r0, r6
 8004fd6:	4639      	mov	r1, r7
 8004fd8:	f7fb fb0e 	bl	80005f8 <__aeabi_dmul>
 8004fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fe0:	3501      	adds	r5, #1
 8004fe2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004fe6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004fea:	4628      	mov	r0, r5
 8004fec:	f7fb fa9a 	bl	8000524 <__aeabi_i2d>
 8004ff0:	4632      	mov	r2, r6
 8004ff2:	463b      	mov	r3, r7
 8004ff4:	f7fb fb00 	bl	80005f8 <__aeabi_dmul>
 8004ff8:	4b88      	ldr	r3, [pc, #544]	; (800521c <_dtoa_r+0x654>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f7fb f946 	bl	800028c <__adddf3>
 8005000:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005004:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005008:	9303      	str	r3, [sp, #12]
 800500a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800500c:	2b00      	cmp	r3, #0
 800500e:	d15c      	bne.n	80050ca <_dtoa_r+0x502>
 8005010:	4b83      	ldr	r3, [pc, #524]	; (8005220 <_dtoa_r+0x658>)
 8005012:	2200      	movs	r2, #0
 8005014:	4630      	mov	r0, r6
 8005016:	4639      	mov	r1, r7
 8005018:	f7fb f936 	bl	8000288 <__aeabi_dsub>
 800501c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005020:	4606      	mov	r6, r0
 8005022:	460f      	mov	r7, r1
 8005024:	f7fb fd78 	bl	8000b18 <__aeabi_dcmpgt>
 8005028:	2800      	cmp	r0, #0
 800502a:	f040 8296 	bne.w	800555a <_dtoa_r+0x992>
 800502e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005032:	4630      	mov	r0, r6
 8005034:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005038:	4639      	mov	r1, r7
 800503a:	f7fb fd4f 	bl	8000adc <__aeabi_dcmplt>
 800503e:	2800      	cmp	r0, #0
 8005040:	f040 8288 	bne.w	8005554 <_dtoa_r+0x98c>
 8005044:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005048:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800504c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800504e:	2b00      	cmp	r3, #0
 8005050:	f2c0 8158 	blt.w	8005304 <_dtoa_r+0x73c>
 8005054:	f1ba 0f0e 	cmp.w	sl, #14
 8005058:	f300 8154 	bgt.w	8005304 <_dtoa_r+0x73c>
 800505c:	4b6b      	ldr	r3, [pc, #428]	; (800520c <_dtoa_r+0x644>)
 800505e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005062:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005068:	2b00      	cmp	r3, #0
 800506a:	f280 80e3 	bge.w	8005234 <_dtoa_r+0x66c>
 800506e:	9b01      	ldr	r3, [sp, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	f300 80df 	bgt.w	8005234 <_dtoa_r+0x66c>
 8005076:	f040 826d 	bne.w	8005554 <_dtoa_r+0x98c>
 800507a:	4b69      	ldr	r3, [pc, #420]	; (8005220 <_dtoa_r+0x658>)
 800507c:	2200      	movs	r2, #0
 800507e:	4640      	mov	r0, r8
 8005080:	4649      	mov	r1, r9
 8005082:	f7fb fab9 	bl	80005f8 <__aeabi_dmul>
 8005086:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800508a:	f7fb fd3b 	bl	8000b04 <__aeabi_dcmpge>
 800508e:	9e01      	ldr	r6, [sp, #4]
 8005090:	4637      	mov	r7, r6
 8005092:	2800      	cmp	r0, #0
 8005094:	f040 8243 	bne.w	800551e <_dtoa_r+0x956>
 8005098:	9d00      	ldr	r5, [sp, #0]
 800509a:	2331      	movs	r3, #49	; 0x31
 800509c:	f805 3b01 	strb.w	r3, [r5], #1
 80050a0:	f10a 0a01 	add.w	sl, sl, #1
 80050a4:	e23f      	b.n	8005526 <_dtoa_r+0x95e>
 80050a6:	07f2      	lsls	r2, r6, #31
 80050a8:	d505      	bpl.n	80050b6 <_dtoa_r+0x4ee>
 80050aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050ae:	f7fb faa3 	bl	80005f8 <__aeabi_dmul>
 80050b2:	3501      	adds	r5, #1
 80050b4:	2301      	movs	r3, #1
 80050b6:	1076      	asrs	r6, r6, #1
 80050b8:	3708      	adds	r7, #8
 80050ba:	e76c      	b.n	8004f96 <_dtoa_r+0x3ce>
 80050bc:	2502      	movs	r5, #2
 80050be:	e76f      	b.n	8004fa0 <_dtoa_r+0x3d8>
 80050c0:	9b01      	ldr	r3, [sp, #4]
 80050c2:	f8cd a01c 	str.w	sl, [sp, #28]
 80050c6:	930c      	str	r3, [sp, #48]	; 0x30
 80050c8:	e78d      	b.n	8004fe6 <_dtoa_r+0x41e>
 80050ca:	9900      	ldr	r1, [sp, #0]
 80050cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80050ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050d0:	4b4e      	ldr	r3, [pc, #312]	; (800520c <_dtoa_r+0x644>)
 80050d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80050d6:	4401      	add	r1, r0
 80050d8:	9102      	str	r1, [sp, #8]
 80050da:	9908      	ldr	r1, [sp, #32]
 80050dc:	eeb0 8a47 	vmov.f32	s16, s14
 80050e0:	eef0 8a67 	vmov.f32	s17, s15
 80050e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80050ec:	2900      	cmp	r1, #0
 80050ee:	d045      	beq.n	800517c <_dtoa_r+0x5b4>
 80050f0:	494c      	ldr	r1, [pc, #304]	; (8005224 <_dtoa_r+0x65c>)
 80050f2:	2000      	movs	r0, #0
 80050f4:	f7fb fbaa 	bl	800084c <__aeabi_ddiv>
 80050f8:	ec53 2b18 	vmov	r2, r3, d8
 80050fc:	f7fb f8c4 	bl	8000288 <__aeabi_dsub>
 8005100:	9d00      	ldr	r5, [sp, #0]
 8005102:	ec41 0b18 	vmov	d8, r0, r1
 8005106:	4639      	mov	r1, r7
 8005108:	4630      	mov	r0, r6
 800510a:	f7fb fd25 	bl	8000b58 <__aeabi_d2iz>
 800510e:	900c      	str	r0, [sp, #48]	; 0x30
 8005110:	f7fb fa08 	bl	8000524 <__aeabi_i2d>
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	4630      	mov	r0, r6
 800511a:	4639      	mov	r1, r7
 800511c:	f7fb f8b4 	bl	8000288 <__aeabi_dsub>
 8005120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005122:	3330      	adds	r3, #48	; 0x30
 8005124:	f805 3b01 	strb.w	r3, [r5], #1
 8005128:	ec53 2b18 	vmov	r2, r3, d8
 800512c:	4606      	mov	r6, r0
 800512e:	460f      	mov	r7, r1
 8005130:	f7fb fcd4 	bl	8000adc <__aeabi_dcmplt>
 8005134:	2800      	cmp	r0, #0
 8005136:	d165      	bne.n	8005204 <_dtoa_r+0x63c>
 8005138:	4632      	mov	r2, r6
 800513a:	463b      	mov	r3, r7
 800513c:	4935      	ldr	r1, [pc, #212]	; (8005214 <_dtoa_r+0x64c>)
 800513e:	2000      	movs	r0, #0
 8005140:	f7fb f8a2 	bl	8000288 <__aeabi_dsub>
 8005144:	ec53 2b18 	vmov	r2, r3, d8
 8005148:	f7fb fcc8 	bl	8000adc <__aeabi_dcmplt>
 800514c:	2800      	cmp	r0, #0
 800514e:	f040 80b9 	bne.w	80052c4 <_dtoa_r+0x6fc>
 8005152:	9b02      	ldr	r3, [sp, #8]
 8005154:	429d      	cmp	r5, r3
 8005156:	f43f af75 	beq.w	8005044 <_dtoa_r+0x47c>
 800515a:	4b2f      	ldr	r3, [pc, #188]	; (8005218 <_dtoa_r+0x650>)
 800515c:	ec51 0b18 	vmov	r0, r1, d8
 8005160:	2200      	movs	r2, #0
 8005162:	f7fb fa49 	bl	80005f8 <__aeabi_dmul>
 8005166:	4b2c      	ldr	r3, [pc, #176]	; (8005218 <_dtoa_r+0x650>)
 8005168:	ec41 0b18 	vmov	d8, r0, r1
 800516c:	2200      	movs	r2, #0
 800516e:	4630      	mov	r0, r6
 8005170:	4639      	mov	r1, r7
 8005172:	f7fb fa41 	bl	80005f8 <__aeabi_dmul>
 8005176:	4606      	mov	r6, r0
 8005178:	460f      	mov	r7, r1
 800517a:	e7c4      	b.n	8005106 <_dtoa_r+0x53e>
 800517c:	ec51 0b17 	vmov	r0, r1, d7
 8005180:	f7fb fa3a 	bl	80005f8 <__aeabi_dmul>
 8005184:	9b02      	ldr	r3, [sp, #8]
 8005186:	9d00      	ldr	r5, [sp, #0]
 8005188:	930c      	str	r3, [sp, #48]	; 0x30
 800518a:	ec41 0b18 	vmov	d8, r0, r1
 800518e:	4639      	mov	r1, r7
 8005190:	4630      	mov	r0, r6
 8005192:	f7fb fce1 	bl	8000b58 <__aeabi_d2iz>
 8005196:	9011      	str	r0, [sp, #68]	; 0x44
 8005198:	f7fb f9c4 	bl	8000524 <__aeabi_i2d>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4630      	mov	r0, r6
 80051a2:	4639      	mov	r1, r7
 80051a4:	f7fb f870 	bl	8000288 <__aeabi_dsub>
 80051a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80051aa:	3330      	adds	r3, #48	; 0x30
 80051ac:	f805 3b01 	strb.w	r3, [r5], #1
 80051b0:	9b02      	ldr	r3, [sp, #8]
 80051b2:	429d      	cmp	r5, r3
 80051b4:	4606      	mov	r6, r0
 80051b6:	460f      	mov	r7, r1
 80051b8:	f04f 0200 	mov.w	r2, #0
 80051bc:	d134      	bne.n	8005228 <_dtoa_r+0x660>
 80051be:	4b19      	ldr	r3, [pc, #100]	; (8005224 <_dtoa_r+0x65c>)
 80051c0:	ec51 0b18 	vmov	r0, r1, d8
 80051c4:	f7fb f862 	bl	800028c <__adddf3>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4630      	mov	r0, r6
 80051ce:	4639      	mov	r1, r7
 80051d0:	f7fb fca2 	bl	8000b18 <__aeabi_dcmpgt>
 80051d4:	2800      	cmp	r0, #0
 80051d6:	d175      	bne.n	80052c4 <_dtoa_r+0x6fc>
 80051d8:	ec53 2b18 	vmov	r2, r3, d8
 80051dc:	4911      	ldr	r1, [pc, #68]	; (8005224 <_dtoa_r+0x65c>)
 80051de:	2000      	movs	r0, #0
 80051e0:	f7fb f852 	bl	8000288 <__aeabi_dsub>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4630      	mov	r0, r6
 80051ea:	4639      	mov	r1, r7
 80051ec:	f7fb fc76 	bl	8000adc <__aeabi_dcmplt>
 80051f0:	2800      	cmp	r0, #0
 80051f2:	f43f af27 	beq.w	8005044 <_dtoa_r+0x47c>
 80051f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051f8:	1e6b      	subs	r3, r5, #1
 80051fa:	930c      	str	r3, [sp, #48]	; 0x30
 80051fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005200:	2b30      	cmp	r3, #48	; 0x30
 8005202:	d0f8      	beq.n	80051f6 <_dtoa_r+0x62e>
 8005204:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005208:	e04a      	b.n	80052a0 <_dtoa_r+0x6d8>
 800520a:	bf00      	nop
 800520c:	08006da0 	.word	0x08006da0
 8005210:	08006d78 	.word	0x08006d78
 8005214:	3ff00000 	.word	0x3ff00000
 8005218:	40240000 	.word	0x40240000
 800521c:	401c0000 	.word	0x401c0000
 8005220:	40140000 	.word	0x40140000
 8005224:	3fe00000 	.word	0x3fe00000
 8005228:	4baf      	ldr	r3, [pc, #700]	; (80054e8 <_dtoa_r+0x920>)
 800522a:	f7fb f9e5 	bl	80005f8 <__aeabi_dmul>
 800522e:	4606      	mov	r6, r0
 8005230:	460f      	mov	r7, r1
 8005232:	e7ac      	b.n	800518e <_dtoa_r+0x5c6>
 8005234:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005238:	9d00      	ldr	r5, [sp, #0]
 800523a:	4642      	mov	r2, r8
 800523c:	464b      	mov	r3, r9
 800523e:	4630      	mov	r0, r6
 8005240:	4639      	mov	r1, r7
 8005242:	f7fb fb03 	bl	800084c <__aeabi_ddiv>
 8005246:	f7fb fc87 	bl	8000b58 <__aeabi_d2iz>
 800524a:	9002      	str	r0, [sp, #8]
 800524c:	f7fb f96a 	bl	8000524 <__aeabi_i2d>
 8005250:	4642      	mov	r2, r8
 8005252:	464b      	mov	r3, r9
 8005254:	f7fb f9d0 	bl	80005f8 <__aeabi_dmul>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4630      	mov	r0, r6
 800525e:	4639      	mov	r1, r7
 8005260:	f7fb f812 	bl	8000288 <__aeabi_dsub>
 8005264:	9e02      	ldr	r6, [sp, #8]
 8005266:	9f01      	ldr	r7, [sp, #4]
 8005268:	3630      	adds	r6, #48	; 0x30
 800526a:	f805 6b01 	strb.w	r6, [r5], #1
 800526e:	9e00      	ldr	r6, [sp, #0]
 8005270:	1bae      	subs	r6, r5, r6
 8005272:	42b7      	cmp	r7, r6
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	d137      	bne.n	80052ea <_dtoa_r+0x722>
 800527a:	f7fb f807 	bl	800028c <__adddf3>
 800527e:	4642      	mov	r2, r8
 8005280:	464b      	mov	r3, r9
 8005282:	4606      	mov	r6, r0
 8005284:	460f      	mov	r7, r1
 8005286:	f7fb fc47 	bl	8000b18 <__aeabi_dcmpgt>
 800528a:	b9c8      	cbnz	r0, 80052c0 <_dtoa_r+0x6f8>
 800528c:	4642      	mov	r2, r8
 800528e:	464b      	mov	r3, r9
 8005290:	4630      	mov	r0, r6
 8005292:	4639      	mov	r1, r7
 8005294:	f7fb fc18 	bl	8000ac8 <__aeabi_dcmpeq>
 8005298:	b110      	cbz	r0, 80052a0 <_dtoa_r+0x6d8>
 800529a:	9b02      	ldr	r3, [sp, #8]
 800529c:	07d9      	lsls	r1, r3, #31
 800529e:	d40f      	bmi.n	80052c0 <_dtoa_r+0x6f8>
 80052a0:	4620      	mov	r0, r4
 80052a2:	4659      	mov	r1, fp
 80052a4:	f000 fcf6 	bl	8005c94 <_Bfree>
 80052a8:	2300      	movs	r3, #0
 80052aa:	702b      	strb	r3, [r5, #0]
 80052ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052ae:	f10a 0001 	add.w	r0, sl, #1
 80052b2:	6018      	str	r0, [r3, #0]
 80052b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f43f acd8 	beq.w	8004c6c <_dtoa_r+0xa4>
 80052bc:	601d      	str	r5, [r3, #0]
 80052be:	e4d5      	b.n	8004c6c <_dtoa_r+0xa4>
 80052c0:	f8cd a01c 	str.w	sl, [sp, #28]
 80052c4:	462b      	mov	r3, r5
 80052c6:	461d      	mov	r5, r3
 80052c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052cc:	2a39      	cmp	r2, #57	; 0x39
 80052ce:	d108      	bne.n	80052e2 <_dtoa_r+0x71a>
 80052d0:	9a00      	ldr	r2, [sp, #0]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d1f7      	bne.n	80052c6 <_dtoa_r+0x6fe>
 80052d6:	9a07      	ldr	r2, [sp, #28]
 80052d8:	9900      	ldr	r1, [sp, #0]
 80052da:	3201      	adds	r2, #1
 80052dc:	9207      	str	r2, [sp, #28]
 80052de:	2230      	movs	r2, #48	; 0x30
 80052e0:	700a      	strb	r2, [r1, #0]
 80052e2:	781a      	ldrb	r2, [r3, #0]
 80052e4:	3201      	adds	r2, #1
 80052e6:	701a      	strb	r2, [r3, #0]
 80052e8:	e78c      	b.n	8005204 <_dtoa_r+0x63c>
 80052ea:	4b7f      	ldr	r3, [pc, #508]	; (80054e8 <_dtoa_r+0x920>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	f7fb f983 	bl	80005f8 <__aeabi_dmul>
 80052f2:	2200      	movs	r2, #0
 80052f4:	2300      	movs	r3, #0
 80052f6:	4606      	mov	r6, r0
 80052f8:	460f      	mov	r7, r1
 80052fa:	f7fb fbe5 	bl	8000ac8 <__aeabi_dcmpeq>
 80052fe:	2800      	cmp	r0, #0
 8005300:	d09b      	beq.n	800523a <_dtoa_r+0x672>
 8005302:	e7cd      	b.n	80052a0 <_dtoa_r+0x6d8>
 8005304:	9a08      	ldr	r2, [sp, #32]
 8005306:	2a00      	cmp	r2, #0
 8005308:	f000 80c4 	beq.w	8005494 <_dtoa_r+0x8cc>
 800530c:	9a05      	ldr	r2, [sp, #20]
 800530e:	2a01      	cmp	r2, #1
 8005310:	f300 80a8 	bgt.w	8005464 <_dtoa_r+0x89c>
 8005314:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005316:	2a00      	cmp	r2, #0
 8005318:	f000 80a0 	beq.w	800545c <_dtoa_r+0x894>
 800531c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005320:	9e06      	ldr	r6, [sp, #24]
 8005322:	4645      	mov	r5, r8
 8005324:	9a04      	ldr	r2, [sp, #16]
 8005326:	2101      	movs	r1, #1
 8005328:	441a      	add	r2, r3
 800532a:	4620      	mov	r0, r4
 800532c:	4498      	add	r8, r3
 800532e:	9204      	str	r2, [sp, #16]
 8005330:	f000 fd6c 	bl	8005e0c <__i2b>
 8005334:	4607      	mov	r7, r0
 8005336:	2d00      	cmp	r5, #0
 8005338:	dd0b      	ble.n	8005352 <_dtoa_r+0x78a>
 800533a:	9b04      	ldr	r3, [sp, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	dd08      	ble.n	8005352 <_dtoa_r+0x78a>
 8005340:	42ab      	cmp	r3, r5
 8005342:	9a04      	ldr	r2, [sp, #16]
 8005344:	bfa8      	it	ge
 8005346:	462b      	movge	r3, r5
 8005348:	eba8 0803 	sub.w	r8, r8, r3
 800534c:	1aed      	subs	r5, r5, r3
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	9304      	str	r3, [sp, #16]
 8005352:	9b06      	ldr	r3, [sp, #24]
 8005354:	b1fb      	cbz	r3, 8005396 <_dtoa_r+0x7ce>
 8005356:	9b08      	ldr	r3, [sp, #32]
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 809f 	beq.w	800549c <_dtoa_r+0x8d4>
 800535e:	2e00      	cmp	r6, #0
 8005360:	dd11      	ble.n	8005386 <_dtoa_r+0x7be>
 8005362:	4639      	mov	r1, r7
 8005364:	4632      	mov	r2, r6
 8005366:	4620      	mov	r0, r4
 8005368:	f000 fe0c 	bl	8005f84 <__pow5mult>
 800536c:	465a      	mov	r2, fp
 800536e:	4601      	mov	r1, r0
 8005370:	4607      	mov	r7, r0
 8005372:	4620      	mov	r0, r4
 8005374:	f000 fd60 	bl	8005e38 <__multiply>
 8005378:	4659      	mov	r1, fp
 800537a:	9007      	str	r0, [sp, #28]
 800537c:	4620      	mov	r0, r4
 800537e:	f000 fc89 	bl	8005c94 <_Bfree>
 8005382:	9b07      	ldr	r3, [sp, #28]
 8005384:	469b      	mov	fp, r3
 8005386:	9b06      	ldr	r3, [sp, #24]
 8005388:	1b9a      	subs	r2, r3, r6
 800538a:	d004      	beq.n	8005396 <_dtoa_r+0x7ce>
 800538c:	4659      	mov	r1, fp
 800538e:	4620      	mov	r0, r4
 8005390:	f000 fdf8 	bl	8005f84 <__pow5mult>
 8005394:	4683      	mov	fp, r0
 8005396:	2101      	movs	r1, #1
 8005398:	4620      	mov	r0, r4
 800539a:	f000 fd37 	bl	8005e0c <__i2b>
 800539e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	4606      	mov	r6, r0
 80053a4:	dd7c      	ble.n	80054a0 <_dtoa_r+0x8d8>
 80053a6:	461a      	mov	r2, r3
 80053a8:	4601      	mov	r1, r0
 80053aa:	4620      	mov	r0, r4
 80053ac:	f000 fdea 	bl	8005f84 <__pow5mult>
 80053b0:	9b05      	ldr	r3, [sp, #20]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	4606      	mov	r6, r0
 80053b6:	dd76      	ble.n	80054a6 <_dtoa_r+0x8de>
 80053b8:	2300      	movs	r3, #0
 80053ba:	9306      	str	r3, [sp, #24]
 80053bc:	6933      	ldr	r3, [r6, #16]
 80053be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80053c2:	6918      	ldr	r0, [r3, #16]
 80053c4:	f000 fcd2 	bl	8005d6c <__hi0bits>
 80053c8:	f1c0 0020 	rsb	r0, r0, #32
 80053cc:	9b04      	ldr	r3, [sp, #16]
 80053ce:	4418      	add	r0, r3
 80053d0:	f010 001f 	ands.w	r0, r0, #31
 80053d4:	f000 8086 	beq.w	80054e4 <_dtoa_r+0x91c>
 80053d8:	f1c0 0320 	rsb	r3, r0, #32
 80053dc:	2b04      	cmp	r3, #4
 80053de:	dd7f      	ble.n	80054e0 <_dtoa_r+0x918>
 80053e0:	f1c0 001c 	rsb	r0, r0, #28
 80053e4:	9b04      	ldr	r3, [sp, #16]
 80053e6:	4403      	add	r3, r0
 80053e8:	4480      	add	r8, r0
 80053ea:	4405      	add	r5, r0
 80053ec:	9304      	str	r3, [sp, #16]
 80053ee:	f1b8 0f00 	cmp.w	r8, #0
 80053f2:	dd05      	ble.n	8005400 <_dtoa_r+0x838>
 80053f4:	4659      	mov	r1, fp
 80053f6:	4642      	mov	r2, r8
 80053f8:	4620      	mov	r0, r4
 80053fa:	f000 fe1d 	bl	8006038 <__lshift>
 80053fe:	4683      	mov	fp, r0
 8005400:	9b04      	ldr	r3, [sp, #16]
 8005402:	2b00      	cmp	r3, #0
 8005404:	dd05      	ble.n	8005412 <_dtoa_r+0x84a>
 8005406:	4631      	mov	r1, r6
 8005408:	461a      	mov	r2, r3
 800540a:	4620      	mov	r0, r4
 800540c:	f000 fe14 	bl	8006038 <__lshift>
 8005410:	4606      	mov	r6, r0
 8005412:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005414:	2b00      	cmp	r3, #0
 8005416:	d069      	beq.n	80054ec <_dtoa_r+0x924>
 8005418:	4631      	mov	r1, r6
 800541a:	4658      	mov	r0, fp
 800541c:	f000 fe78 	bl	8006110 <__mcmp>
 8005420:	2800      	cmp	r0, #0
 8005422:	da63      	bge.n	80054ec <_dtoa_r+0x924>
 8005424:	2300      	movs	r3, #0
 8005426:	4659      	mov	r1, fp
 8005428:	220a      	movs	r2, #10
 800542a:	4620      	mov	r0, r4
 800542c:	f000 fc54 	bl	8005cd8 <__multadd>
 8005430:	9b08      	ldr	r3, [sp, #32]
 8005432:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005436:	4683      	mov	fp, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 818f 	beq.w	800575c <_dtoa_r+0xb94>
 800543e:	4639      	mov	r1, r7
 8005440:	2300      	movs	r3, #0
 8005442:	220a      	movs	r2, #10
 8005444:	4620      	mov	r0, r4
 8005446:	f000 fc47 	bl	8005cd8 <__multadd>
 800544a:	f1b9 0f00 	cmp.w	r9, #0
 800544e:	4607      	mov	r7, r0
 8005450:	f300 808e 	bgt.w	8005570 <_dtoa_r+0x9a8>
 8005454:	9b05      	ldr	r3, [sp, #20]
 8005456:	2b02      	cmp	r3, #2
 8005458:	dc50      	bgt.n	80054fc <_dtoa_r+0x934>
 800545a:	e089      	b.n	8005570 <_dtoa_r+0x9a8>
 800545c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800545e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005462:	e75d      	b.n	8005320 <_dtoa_r+0x758>
 8005464:	9b01      	ldr	r3, [sp, #4]
 8005466:	1e5e      	subs	r6, r3, #1
 8005468:	9b06      	ldr	r3, [sp, #24]
 800546a:	42b3      	cmp	r3, r6
 800546c:	bfbf      	itttt	lt
 800546e:	9b06      	ldrlt	r3, [sp, #24]
 8005470:	9606      	strlt	r6, [sp, #24]
 8005472:	1af2      	sublt	r2, r6, r3
 8005474:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005476:	bfb6      	itet	lt
 8005478:	189b      	addlt	r3, r3, r2
 800547a:	1b9e      	subge	r6, r3, r6
 800547c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800547e:	9b01      	ldr	r3, [sp, #4]
 8005480:	bfb8      	it	lt
 8005482:	2600      	movlt	r6, #0
 8005484:	2b00      	cmp	r3, #0
 8005486:	bfb5      	itete	lt
 8005488:	eba8 0503 	sublt.w	r5, r8, r3
 800548c:	9b01      	ldrge	r3, [sp, #4]
 800548e:	2300      	movlt	r3, #0
 8005490:	4645      	movge	r5, r8
 8005492:	e747      	b.n	8005324 <_dtoa_r+0x75c>
 8005494:	9e06      	ldr	r6, [sp, #24]
 8005496:	9f08      	ldr	r7, [sp, #32]
 8005498:	4645      	mov	r5, r8
 800549a:	e74c      	b.n	8005336 <_dtoa_r+0x76e>
 800549c:	9a06      	ldr	r2, [sp, #24]
 800549e:	e775      	b.n	800538c <_dtoa_r+0x7c4>
 80054a0:	9b05      	ldr	r3, [sp, #20]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	dc18      	bgt.n	80054d8 <_dtoa_r+0x910>
 80054a6:	9b02      	ldr	r3, [sp, #8]
 80054a8:	b9b3      	cbnz	r3, 80054d8 <_dtoa_r+0x910>
 80054aa:	9b03      	ldr	r3, [sp, #12]
 80054ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054b0:	b9a3      	cbnz	r3, 80054dc <_dtoa_r+0x914>
 80054b2:	9b03      	ldr	r3, [sp, #12]
 80054b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054b8:	0d1b      	lsrs	r3, r3, #20
 80054ba:	051b      	lsls	r3, r3, #20
 80054bc:	b12b      	cbz	r3, 80054ca <_dtoa_r+0x902>
 80054be:	9b04      	ldr	r3, [sp, #16]
 80054c0:	3301      	adds	r3, #1
 80054c2:	9304      	str	r3, [sp, #16]
 80054c4:	f108 0801 	add.w	r8, r8, #1
 80054c8:	2301      	movs	r3, #1
 80054ca:	9306      	str	r3, [sp, #24]
 80054cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f47f af74 	bne.w	80053bc <_dtoa_r+0x7f4>
 80054d4:	2001      	movs	r0, #1
 80054d6:	e779      	b.n	80053cc <_dtoa_r+0x804>
 80054d8:	2300      	movs	r3, #0
 80054da:	e7f6      	b.n	80054ca <_dtoa_r+0x902>
 80054dc:	9b02      	ldr	r3, [sp, #8]
 80054de:	e7f4      	b.n	80054ca <_dtoa_r+0x902>
 80054e0:	d085      	beq.n	80053ee <_dtoa_r+0x826>
 80054e2:	4618      	mov	r0, r3
 80054e4:	301c      	adds	r0, #28
 80054e6:	e77d      	b.n	80053e4 <_dtoa_r+0x81c>
 80054e8:	40240000 	.word	0x40240000
 80054ec:	9b01      	ldr	r3, [sp, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	dc38      	bgt.n	8005564 <_dtoa_r+0x99c>
 80054f2:	9b05      	ldr	r3, [sp, #20]
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	dd35      	ble.n	8005564 <_dtoa_r+0x99c>
 80054f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80054fc:	f1b9 0f00 	cmp.w	r9, #0
 8005500:	d10d      	bne.n	800551e <_dtoa_r+0x956>
 8005502:	4631      	mov	r1, r6
 8005504:	464b      	mov	r3, r9
 8005506:	2205      	movs	r2, #5
 8005508:	4620      	mov	r0, r4
 800550a:	f000 fbe5 	bl	8005cd8 <__multadd>
 800550e:	4601      	mov	r1, r0
 8005510:	4606      	mov	r6, r0
 8005512:	4658      	mov	r0, fp
 8005514:	f000 fdfc 	bl	8006110 <__mcmp>
 8005518:	2800      	cmp	r0, #0
 800551a:	f73f adbd 	bgt.w	8005098 <_dtoa_r+0x4d0>
 800551e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005520:	9d00      	ldr	r5, [sp, #0]
 8005522:	ea6f 0a03 	mvn.w	sl, r3
 8005526:	f04f 0800 	mov.w	r8, #0
 800552a:	4631      	mov	r1, r6
 800552c:	4620      	mov	r0, r4
 800552e:	f000 fbb1 	bl	8005c94 <_Bfree>
 8005532:	2f00      	cmp	r7, #0
 8005534:	f43f aeb4 	beq.w	80052a0 <_dtoa_r+0x6d8>
 8005538:	f1b8 0f00 	cmp.w	r8, #0
 800553c:	d005      	beq.n	800554a <_dtoa_r+0x982>
 800553e:	45b8      	cmp	r8, r7
 8005540:	d003      	beq.n	800554a <_dtoa_r+0x982>
 8005542:	4641      	mov	r1, r8
 8005544:	4620      	mov	r0, r4
 8005546:	f000 fba5 	bl	8005c94 <_Bfree>
 800554a:	4639      	mov	r1, r7
 800554c:	4620      	mov	r0, r4
 800554e:	f000 fba1 	bl	8005c94 <_Bfree>
 8005552:	e6a5      	b.n	80052a0 <_dtoa_r+0x6d8>
 8005554:	2600      	movs	r6, #0
 8005556:	4637      	mov	r7, r6
 8005558:	e7e1      	b.n	800551e <_dtoa_r+0x956>
 800555a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800555c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005560:	4637      	mov	r7, r6
 8005562:	e599      	b.n	8005098 <_dtoa_r+0x4d0>
 8005564:	9b08      	ldr	r3, [sp, #32]
 8005566:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 80fd 	beq.w	800576a <_dtoa_r+0xba2>
 8005570:	2d00      	cmp	r5, #0
 8005572:	dd05      	ble.n	8005580 <_dtoa_r+0x9b8>
 8005574:	4639      	mov	r1, r7
 8005576:	462a      	mov	r2, r5
 8005578:	4620      	mov	r0, r4
 800557a:	f000 fd5d 	bl	8006038 <__lshift>
 800557e:	4607      	mov	r7, r0
 8005580:	9b06      	ldr	r3, [sp, #24]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d05c      	beq.n	8005640 <_dtoa_r+0xa78>
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	4620      	mov	r0, r4
 800558a:	f000 fb43 	bl	8005c14 <_Balloc>
 800558e:	4605      	mov	r5, r0
 8005590:	b928      	cbnz	r0, 800559e <_dtoa_r+0x9d6>
 8005592:	4b80      	ldr	r3, [pc, #512]	; (8005794 <_dtoa_r+0xbcc>)
 8005594:	4602      	mov	r2, r0
 8005596:	f240 21ea 	movw	r1, #746	; 0x2ea
 800559a:	f7ff bb2e 	b.w	8004bfa <_dtoa_r+0x32>
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	3202      	adds	r2, #2
 80055a2:	0092      	lsls	r2, r2, #2
 80055a4:	f107 010c 	add.w	r1, r7, #12
 80055a8:	300c      	adds	r0, #12
 80055aa:	f000 fb25 	bl	8005bf8 <memcpy>
 80055ae:	2201      	movs	r2, #1
 80055b0:	4629      	mov	r1, r5
 80055b2:	4620      	mov	r0, r4
 80055b4:	f000 fd40 	bl	8006038 <__lshift>
 80055b8:	9b00      	ldr	r3, [sp, #0]
 80055ba:	3301      	adds	r3, #1
 80055bc:	9301      	str	r3, [sp, #4]
 80055be:	9b00      	ldr	r3, [sp, #0]
 80055c0:	444b      	add	r3, r9
 80055c2:	9307      	str	r3, [sp, #28]
 80055c4:	9b02      	ldr	r3, [sp, #8]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	46b8      	mov	r8, r7
 80055cc:	9306      	str	r3, [sp, #24]
 80055ce:	4607      	mov	r7, r0
 80055d0:	9b01      	ldr	r3, [sp, #4]
 80055d2:	4631      	mov	r1, r6
 80055d4:	3b01      	subs	r3, #1
 80055d6:	4658      	mov	r0, fp
 80055d8:	9302      	str	r3, [sp, #8]
 80055da:	f7ff fa67 	bl	8004aac <quorem>
 80055de:	4603      	mov	r3, r0
 80055e0:	3330      	adds	r3, #48	; 0x30
 80055e2:	9004      	str	r0, [sp, #16]
 80055e4:	4641      	mov	r1, r8
 80055e6:	4658      	mov	r0, fp
 80055e8:	9308      	str	r3, [sp, #32]
 80055ea:	f000 fd91 	bl	8006110 <__mcmp>
 80055ee:	463a      	mov	r2, r7
 80055f0:	4681      	mov	r9, r0
 80055f2:	4631      	mov	r1, r6
 80055f4:	4620      	mov	r0, r4
 80055f6:	f000 fda7 	bl	8006148 <__mdiff>
 80055fa:	68c2      	ldr	r2, [r0, #12]
 80055fc:	9b08      	ldr	r3, [sp, #32]
 80055fe:	4605      	mov	r5, r0
 8005600:	bb02      	cbnz	r2, 8005644 <_dtoa_r+0xa7c>
 8005602:	4601      	mov	r1, r0
 8005604:	4658      	mov	r0, fp
 8005606:	f000 fd83 	bl	8006110 <__mcmp>
 800560a:	9b08      	ldr	r3, [sp, #32]
 800560c:	4602      	mov	r2, r0
 800560e:	4629      	mov	r1, r5
 8005610:	4620      	mov	r0, r4
 8005612:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005616:	f000 fb3d 	bl	8005c94 <_Bfree>
 800561a:	9b05      	ldr	r3, [sp, #20]
 800561c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800561e:	9d01      	ldr	r5, [sp, #4]
 8005620:	ea43 0102 	orr.w	r1, r3, r2
 8005624:	9b06      	ldr	r3, [sp, #24]
 8005626:	430b      	orrs	r3, r1
 8005628:	9b08      	ldr	r3, [sp, #32]
 800562a:	d10d      	bne.n	8005648 <_dtoa_r+0xa80>
 800562c:	2b39      	cmp	r3, #57	; 0x39
 800562e:	d029      	beq.n	8005684 <_dtoa_r+0xabc>
 8005630:	f1b9 0f00 	cmp.w	r9, #0
 8005634:	dd01      	ble.n	800563a <_dtoa_r+0xa72>
 8005636:	9b04      	ldr	r3, [sp, #16]
 8005638:	3331      	adds	r3, #49	; 0x31
 800563a:	9a02      	ldr	r2, [sp, #8]
 800563c:	7013      	strb	r3, [r2, #0]
 800563e:	e774      	b.n	800552a <_dtoa_r+0x962>
 8005640:	4638      	mov	r0, r7
 8005642:	e7b9      	b.n	80055b8 <_dtoa_r+0x9f0>
 8005644:	2201      	movs	r2, #1
 8005646:	e7e2      	b.n	800560e <_dtoa_r+0xa46>
 8005648:	f1b9 0f00 	cmp.w	r9, #0
 800564c:	db06      	blt.n	800565c <_dtoa_r+0xa94>
 800564e:	9905      	ldr	r1, [sp, #20]
 8005650:	ea41 0909 	orr.w	r9, r1, r9
 8005654:	9906      	ldr	r1, [sp, #24]
 8005656:	ea59 0101 	orrs.w	r1, r9, r1
 800565a:	d120      	bne.n	800569e <_dtoa_r+0xad6>
 800565c:	2a00      	cmp	r2, #0
 800565e:	ddec      	ble.n	800563a <_dtoa_r+0xa72>
 8005660:	4659      	mov	r1, fp
 8005662:	2201      	movs	r2, #1
 8005664:	4620      	mov	r0, r4
 8005666:	9301      	str	r3, [sp, #4]
 8005668:	f000 fce6 	bl	8006038 <__lshift>
 800566c:	4631      	mov	r1, r6
 800566e:	4683      	mov	fp, r0
 8005670:	f000 fd4e 	bl	8006110 <__mcmp>
 8005674:	2800      	cmp	r0, #0
 8005676:	9b01      	ldr	r3, [sp, #4]
 8005678:	dc02      	bgt.n	8005680 <_dtoa_r+0xab8>
 800567a:	d1de      	bne.n	800563a <_dtoa_r+0xa72>
 800567c:	07da      	lsls	r2, r3, #31
 800567e:	d5dc      	bpl.n	800563a <_dtoa_r+0xa72>
 8005680:	2b39      	cmp	r3, #57	; 0x39
 8005682:	d1d8      	bne.n	8005636 <_dtoa_r+0xa6e>
 8005684:	9a02      	ldr	r2, [sp, #8]
 8005686:	2339      	movs	r3, #57	; 0x39
 8005688:	7013      	strb	r3, [r2, #0]
 800568a:	462b      	mov	r3, r5
 800568c:	461d      	mov	r5, r3
 800568e:	3b01      	subs	r3, #1
 8005690:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005694:	2a39      	cmp	r2, #57	; 0x39
 8005696:	d050      	beq.n	800573a <_dtoa_r+0xb72>
 8005698:	3201      	adds	r2, #1
 800569a:	701a      	strb	r2, [r3, #0]
 800569c:	e745      	b.n	800552a <_dtoa_r+0x962>
 800569e:	2a00      	cmp	r2, #0
 80056a0:	dd03      	ble.n	80056aa <_dtoa_r+0xae2>
 80056a2:	2b39      	cmp	r3, #57	; 0x39
 80056a4:	d0ee      	beq.n	8005684 <_dtoa_r+0xabc>
 80056a6:	3301      	adds	r3, #1
 80056a8:	e7c7      	b.n	800563a <_dtoa_r+0xa72>
 80056aa:	9a01      	ldr	r2, [sp, #4]
 80056ac:	9907      	ldr	r1, [sp, #28]
 80056ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80056b2:	428a      	cmp	r2, r1
 80056b4:	d02a      	beq.n	800570c <_dtoa_r+0xb44>
 80056b6:	4659      	mov	r1, fp
 80056b8:	2300      	movs	r3, #0
 80056ba:	220a      	movs	r2, #10
 80056bc:	4620      	mov	r0, r4
 80056be:	f000 fb0b 	bl	8005cd8 <__multadd>
 80056c2:	45b8      	cmp	r8, r7
 80056c4:	4683      	mov	fp, r0
 80056c6:	f04f 0300 	mov.w	r3, #0
 80056ca:	f04f 020a 	mov.w	r2, #10
 80056ce:	4641      	mov	r1, r8
 80056d0:	4620      	mov	r0, r4
 80056d2:	d107      	bne.n	80056e4 <_dtoa_r+0xb1c>
 80056d4:	f000 fb00 	bl	8005cd8 <__multadd>
 80056d8:	4680      	mov	r8, r0
 80056da:	4607      	mov	r7, r0
 80056dc:	9b01      	ldr	r3, [sp, #4]
 80056de:	3301      	adds	r3, #1
 80056e0:	9301      	str	r3, [sp, #4]
 80056e2:	e775      	b.n	80055d0 <_dtoa_r+0xa08>
 80056e4:	f000 faf8 	bl	8005cd8 <__multadd>
 80056e8:	4639      	mov	r1, r7
 80056ea:	4680      	mov	r8, r0
 80056ec:	2300      	movs	r3, #0
 80056ee:	220a      	movs	r2, #10
 80056f0:	4620      	mov	r0, r4
 80056f2:	f000 faf1 	bl	8005cd8 <__multadd>
 80056f6:	4607      	mov	r7, r0
 80056f8:	e7f0      	b.n	80056dc <_dtoa_r+0xb14>
 80056fa:	f1b9 0f00 	cmp.w	r9, #0
 80056fe:	9a00      	ldr	r2, [sp, #0]
 8005700:	bfcc      	ite	gt
 8005702:	464d      	movgt	r5, r9
 8005704:	2501      	movle	r5, #1
 8005706:	4415      	add	r5, r2
 8005708:	f04f 0800 	mov.w	r8, #0
 800570c:	4659      	mov	r1, fp
 800570e:	2201      	movs	r2, #1
 8005710:	4620      	mov	r0, r4
 8005712:	9301      	str	r3, [sp, #4]
 8005714:	f000 fc90 	bl	8006038 <__lshift>
 8005718:	4631      	mov	r1, r6
 800571a:	4683      	mov	fp, r0
 800571c:	f000 fcf8 	bl	8006110 <__mcmp>
 8005720:	2800      	cmp	r0, #0
 8005722:	dcb2      	bgt.n	800568a <_dtoa_r+0xac2>
 8005724:	d102      	bne.n	800572c <_dtoa_r+0xb64>
 8005726:	9b01      	ldr	r3, [sp, #4]
 8005728:	07db      	lsls	r3, r3, #31
 800572a:	d4ae      	bmi.n	800568a <_dtoa_r+0xac2>
 800572c:	462b      	mov	r3, r5
 800572e:	461d      	mov	r5, r3
 8005730:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005734:	2a30      	cmp	r2, #48	; 0x30
 8005736:	d0fa      	beq.n	800572e <_dtoa_r+0xb66>
 8005738:	e6f7      	b.n	800552a <_dtoa_r+0x962>
 800573a:	9a00      	ldr	r2, [sp, #0]
 800573c:	429a      	cmp	r2, r3
 800573e:	d1a5      	bne.n	800568c <_dtoa_r+0xac4>
 8005740:	f10a 0a01 	add.w	sl, sl, #1
 8005744:	2331      	movs	r3, #49	; 0x31
 8005746:	e779      	b.n	800563c <_dtoa_r+0xa74>
 8005748:	4b13      	ldr	r3, [pc, #76]	; (8005798 <_dtoa_r+0xbd0>)
 800574a:	f7ff baaf 	b.w	8004cac <_dtoa_r+0xe4>
 800574e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005750:	2b00      	cmp	r3, #0
 8005752:	f47f aa86 	bne.w	8004c62 <_dtoa_r+0x9a>
 8005756:	4b11      	ldr	r3, [pc, #68]	; (800579c <_dtoa_r+0xbd4>)
 8005758:	f7ff baa8 	b.w	8004cac <_dtoa_r+0xe4>
 800575c:	f1b9 0f00 	cmp.w	r9, #0
 8005760:	dc03      	bgt.n	800576a <_dtoa_r+0xba2>
 8005762:	9b05      	ldr	r3, [sp, #20]
 8005764:	2b02      	cmp	r3, #2
 8005766:	f73f aec9 	bgt.w	80054fc <_dtoa_r+0x934>
 800576a:	9d00      	ldr	r5, [sp, #0]
 800576c:	4631      	mov	r1, r6
 800576e:	4658      	mov	r0, fp
 8005770:	f7ff f99c 	bl	8004aac <quorem>
 8005774:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005778:	f805 3b01 	strb.w	r3, [r5], #1
 800577c:	9a00      	ldr	r2, [sp, #0]
 800577e:	1aaa      	subs	r2, r5, r2
 8005780:	4591      	cmp	r9, r2
 8005782:	ddba      	ble.n	80056fa <_dtoa_r+0xb32>
 8005784:	4659      	mov	r1, fp
 8005786:	2300      	movs	r3, #0
 8005788:	220a      	movs	r2, #10
 800578a:	4620      	mov	r0, r4
 800578c:	f000 faa4 	bl	8005cd8 <__multadd>
 8005790:	4683      	mov	fp, r0
 8005792:	e7eb      	b.n	800576c <_dtoa_r+0xba4>
 8005794:	08006ca3 	.word	0x08006ca3
 8005798:	08006bfc 	.word	0x08006bfc
 800579c:	08006c20 	.word	0x08006c20

080057a0 <__sflush_r>:
 80057a0:	898a      	ldrh	r2, [r1, #12]
 80057a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057a6:	4605      	mov	r5, r0
 80057a8:	0710      	lsls	r0, r2, #28
 80057aa:	460c      	mov	r4, r1
 80057ac:	d458      	bmi.n	8005860 <__sflush_r+0xc0>
 80057ae:	684b      	ldr	r3, [r1, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	dc05      	bgt.n	80057c0 <__sflush_r+0x20>
 80057b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	dc02      	bgt.n	80057c0 <__sflush_r+0x20>
 80057ba:	2000      	movs	r0, #0
 80057bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057c2:	2e00      	cmp	r6, #0
 80057c4:	d0f9      	beq.n	80057ba <__sflush_r+0x1a>
 80057c6:	2300      	movs	r3, #0
 80057c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057cc:	682f      	ldr	r7, [r5, #0]
 80057ce:	602b      	str	r3, [r5, #0]
 80057d0:	d032      	beq.n	8005838 <__sflush_r+0x98>
 80057d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057d4:	89a3      	ldrh	r3, [r4, #12]
 80057d6:	075a      	lsls	r2, r3, #29
 80057d8:	d505      	bpl.n	80057e6 <__sflush_r+0x46>
 80057da:	6863      	ldr	r3, [r4, #4]
 80057dc:	1ac0      	subs	r0, r0, r3
 80057de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057e0:	b10b      	cbz	r3, 80057e6 <__sflush_r+0x46>
 80057e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057e4:	1ac0      	subs	r0, r0, r3
 80057e6:	2300      	movs	r3, #0
 80057e8:	4602      	mov	r2, r0
 80057ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057ec:	6a21      	ldr	r1, [r4, #32]
 80057ee:	4628      	mov	r0, r5
 80057f0:	47b0      	blx	r6
 80057f2:	1c43      	adds	r3, r0, #1
 80057f4:	89a3      	ldrh	r3, [r4, #12]
 80057f6:	d106      	bne.n	8005806 <__sflush_r+0x66>
 80057f8:	6829      	ldr	r1, [r5, #0]
 80057fa:	291d      	cmp	r1, #29
 80057fc:	d82c      	bhi.n	8005858 <__sflush_r+0xb8>
 80057fe:	4a2a      	ldr	r2, [pc, #168]	; (80058a8 <__sflush_r+0x108>)
 8005800:	40ca      	lsrs	r2, r1
 8005802:	07d6      	lsls	r6, r2, #31
 8005804:	d528      	bpl.n	8005858 <__sflush_r+0xb8>
 8005806:	2200      	movs	r2, #0
 8005808:	6062      	str	r2, [r4, #4]
 800580a:	04d9      	lsls	r1, r3, #19
 800580c:	6922      	ldr	r2, [r4, #16]
 800580e:	6022      	str	r2, [r4, #0]
 8005810:	d504      	bpl.n	800581c <__sflush_r+0x7c>
 8005812:	1c42      	adds	r2, r0, #1
 8005814:	d101      	bne.n	800581a <__sflush_r+0x7a>
 8005816:	682b      	ldr	r3, [r5, #0]
 8005818:	b903      	cbnz	r3, 800581c <__sflush_r+0x7c>
 800581a:	6560      	str	r0, [r4, #84]	; 0x54
 800581c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800581e:	602f      	str	r7, [r5, #0]
 8005820:	2900      	cmp	r1, #0
 8005822:	d0ca      	beq.n	80057ba <__sflush_r+0x1a>
 8005824:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005828:	4299      	cmp	r1, r3
 800582a:	d002      	beq.n	8005832 <__sflush_r+0x92>
 800582c:	4628      	mov	r0, r5
 800582e:	f000 fd7f 	bl	8006330 <_free_r>
 8005832:	2000      	movs	r0, #0
 8005834:	6360      	str	r0, [r4, #52]	; 0x34
 8005836:	e7c1      	b.n	80057bc <__sflush_r+0x1c>
 8005838:	6a21      	ldr	r1, [r4, #32]
 800583a:	2301      	movs	r3, #1
 800583c:	4628      	mov	r0, r5
 800583e:	47b0      	blx	r6
 8005840:	1c41      	adds	r1, r0, #1
 8005842:	d1c7      	bne.n	80057d4 <__sflush_r+0x34>
 8005844:	682b      	ldr	r3, [r5, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0c4      	beq.n	80057d4 <__sflush_r+0x34>
 800584a:	2b1d      	cmp	r3, #29
 800584c:	d001      	beq.n	8005852 <__sflush_r+0xb2>
 800584e:	2b16      	cmp	r3, #22
 8005850:	d101      	bne.n	8005856 <__sflush_r+0xb6>
 8005852:	602f      	str	r7, [r5, #0]
 8005854:	e7b1      	b.n	80057ba <__sflush_r+0x1a>
 8005856:	89a3      	ldrh	r3, [r4, #12]
 8005858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800585c:	81a3      	strh	r3, [r4, #12]
 800585e:	e7ad      	b.n	80057bc <__sflush_r+0x1c>
 8005860:	690f      	ldr	r7, [r1, #16]
 8005862:	2f00      	cmp	r7, #0
 8005864:	d0a9      	beq.n	80057ba <__sflush_r+0x1a>
 8005866:	0793      	lsls	r3, r2, #30
 8005868:	680e      	ldr	r6, [r1, #0]
 800586a:	bf08      	it	eq
 800586c:	694b      	ldreq	r3, [r1, #20]
 800586e:	600f      	str	r7, [r1, #0]
 8005870:	bf18      	it	ne
 8005872:	2300      	movne	r3, #0
 8005874:	eba6 0807 	sub.w	r8, r6, r7
 8005878:	608b      	str	r3, [r1, #8]
 800587a:	f1b8 0f00 	cmp.w	r8, #0
 800587e:	dd9c      	ble.n	80057ba <__sflush_r+0x1a>
 8005880:	6a21      	ldr	r1, [r4, #32]
 8005882:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005884:	4643      	mov	r3, r8
 8005886:	463a      	mov	r2, r7
 8005888:	4628      	mov	r0, r5
 800588a:	47b0      	blx	r6
 800588c:	2800      	cmp	r0, #0
 800588e:	dc06      	bgt.n	800589e <__sflush_r+0xfe>
 8005890:	89a3      	ldrh	r3, [r4, #12]
 8005892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005896:	81a3      	strh	r3, [r4, #12]
 8005898:	f04f 30ff 	mov.w	r0, #4294967295
 800589c:	e78e      	b.n	80057bc <__sflush_r+0x1c>
 800589e:	4407      	add	r7, r0
 80058a0:	eba8 0800 	sub.w	r8, r8, r0
 80058a4:	e7e9      	b.n	800587a <__sflush_r+0xda>
 80058a6:	bf00      	nop
 80058a8:	20400001 	.word	0x20400001

080058ac <_fflush_r>:
 80058ac:	b538      	push	{r3, r4, r5, lr}
 80058ae:	690b      	ldr	r3, [r1, #16]
 80058b0:	4605      	mov	r5, r0
 80058b2:	460c      	mov	r4, r1
 80058b4:	b913      	cbnz	r3, 80058bc <_fflush_r+0x10>
 80058b6:	2500      	movs	r5, #0
 80058b8:	4628      	mov	r0, r5
 80058ba:	bd38      	pop	{r3, r4, r5, pc}
 80058bc:	b118      	cbz	r0, 80058c6 <_fflush_r+0x1a>
 80058be:	6983      	ldr	r3, [r0, #24]
 80058c0:	b90b      	cbnz	r3, 80058c6 <_fflush_r+0x1a>
 80058c2:	f000 f887 	bl	80059d4 <__sinit>
 80058c6:	4b14      	ldr	r3, [pc, #80]	; (8005918 <_fflush_r+0x6c>)
 80058c8:	429c      	cmp	r4, r3
 80058ca:	d11b      	bne.n	8005904 <_fflush_r+0x58>
 80058cc:	686c      	ldr	r4, [r5, #4]
 80058ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d0ef      	beq.n	80058b6 <_fflush_r+0xa>
 80058d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058d8:	07d0      	lsls	r0, r2, #31
 80058da:	d404      	bmi.n	80058e6 <_fflush_r+0x3a>
 80058dc:	0599      	lsls	r1, r3, #22
 80058de:	d402      	bmi.n	80058e6 <_fflush_r+0x3a>
 80058e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058e2:	f000 f91a 	bl	8005b1a <__retarget_lock_acquire_recursive>
 80058e6:	4628      	mov	r0, r5
 80058e8:	4621      	mov	r1, r4
 80058ea:	f7ff ff59 	bl	80057a0 <__sflush_r>
 80058ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058f0:	07da      	lsls	r2, r3, #31
 80058f2:	4605      	mov	r5, r0
 80058f4:	d4e0      	bmi.n	80058b8 <_fflush_r+0xc>
 80058f6:	89a3      	ldrh	r3, [r4, #12]
 80058f8:	059b      	lsls	r3, r3, #22
 80058fa:	d4dd      	bmi.n	80058b8 <_fflush_r+0xc>
 80058fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058fe:	f000 f90d 	bl	8005b1c <__retarget_lock_release_recursive>
 8005902:	e7d9      	b.n	80058b8 <_fflush_r+0xc>
 8005904:	4b05      	ldr	r3, [pc, #20]	; (800591c <_fflush_r+0x70>)
 8005906:	429c      	cmp	r4, r3
 8005908:	d101      	bne.n	800590e <_fflush_r+0x62>
 800590a:	68ac      	ldr	r4, [r5, #8]
 800590c:	e7df      	b.n	80058ce <_fflush_r+0x22>
 800590e:	4b04      	ldr	r3, [pc, #16]	; (8005920 <_fflush_r+0x74>)
 8005910:	429c      	cmp	r4, r3
 8005912:	bf08      	it	eq
 8005914:	68ec      	ldreq	r4, [r5, #12]
 8005916:	e7da      	b.n	80058ce <_fflush_r+0x22>
 8005918:	08006cd4 	.word	0x08006cd4
 800591c:	08006cf4 	.word	0x08006cf4
 8005920:	08006cb4 	.word	0x08006cb4

08005924 <std>:
 8005924:	2300      	movs	r3, #0
 8005926:	b510      	push	{r4, lr}
 8005928:	4604      	mov	r4, r0
 800592a:	e9c0 3300 	strd	r3, r3, [r0]
 800592e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005932:	6083      	str	r3, [r0, #8]
 8005934:	8181      	strh	r1, [r0, #12]
 8005936:	6643      	str	r3, [r0, #100]	; 0x64
 8005938:	81c2      	strh	r2, [r0, #14]
 800593a:	6183      	str	r3, [r0, #24]
 800593c:	4619      	mov	r1, r3
 800593e:	2208      	movs	r2, #8
 8005940:	305c      	adds	r0, #92	; 0x5c
 8005942:	f7fe fb5b 	bl	8003ffc <memset>
 8005946:	4b05      	ldr	r3, [pc, #20]	; (800595c <std+0x38>)
 8005948:	6263      	str	r3, [r4, #36]	; 0x24
 800594a:	4b05      	ldr	r3, [pc, #20]	; (8005960 <std+0x3c>)
 800594c:	62a3      	str	r3, [r4, #40]	; 0x28
 800594e:	4b05      	ldr	r3, [pc, #20]	; (8005964 <std+0x40>)
 8005950:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005952:	4b05      	ldr	r3, [pc, #20]	; (8005968 <std+0x44>)
 8005954:	6224      	str	r4, [r4, #32]
 8005956:	6323      	str	r3, [r4, #48]	; 0x30
 8005958:	bd10      	pop	{r4, pc}
 800595a:	bf00      	nop
 800595c:	08006759 	.word	0x08006759
 8005960:	0800677b 	.word	0x0800677b
 8005964:	080067b3 	.word	0x080067b3
 8005968:	080067d7 	.word	0x080067d7

0800596c <_cleanup_r>:
 800596c:	4901      	ldr	r1, [pc, #4]	; (8005974 <_cleanup_r+0x8>)
 800596e:	f000 b8af 	b.w	8005ad0 <_fwalk_reent>
 8005972:	bf00      	nop
 8005974:	080058ad 	.word	0x080058ad

08005978 <__sfmoreglue>:
 8005978:	b570      	push	{r4, r5, r6, lr}
 800597a:	1e4a      	subs	r2, r1, #1
 800597c:	2568      	movs	r5, #104	; 0x68
 800597e:	4355      	muls	r5, r2
 8005980:	460e      	mov	r6, r1
 8005982:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005986:	f000 fd23 	bl	80063d0 <_malloc_r>
 800598a:	4604      	mov	r4, r0
 800598c:	b140      	cbz	r0, 80059a0 <__sfmoreglue+0x28>
 800598e:	2100      	movs	r1, #0
 8005990:	e9c0 1600 	strd	r1, r6, [r0]
 8005994:	300c      	adds	r0, #12
 8005996:	60a0      	str	r0, [r4, #8]
 8005998:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800599c:	f7fe fb2e 	bl	8003ffc <memset>
 80059a0:	4620      	mov	r0, r4
 80059a2:	bd70      	pop	{r4, r5, r6, pc}

080059a4 <__sfp_lock_acquire>:
 80059a4:	4801      	ldr	r0, [pc, #4]	; (80059ac <__sfp_lock_acquire+0x8>)
 80059a6:	f000 b8b8 	b.w	8005b1a <__retarget_lock_acquire_recursive>
 80059aa:	bf00      	nop
 80059ac:	2000020a 	.word	0x2000020a

080059b0 <__sfp_lock_release>:
 80059b0:	4801      	ldr	r0, [pc, #4]	; (80059b8 <__sfp_lock_release+0x8>)
 80059b2:	f000 b8b3 	b.w	8005b1c <__retarget_lock_release_recursive>
 80059b6:	bf00      	nop
 80059b8:	2000020a 	.word	0x2000020a

080059bc <__sinit_lock_acquire>:
 80059bc:	4801      	ldr	r0, [pc, #4]	; (80059c4 <__sinit_lock_acquire+0x8>)
 80059be:	f000 b8ac 	b.w	8005b1a <__retarget_lock_acquire_recursive>
 80059c2:	bf00      	nop
 80059c4:	20000205 	.word	0x20000205

080059c8 <__sinit_lock_release>:
 80059c8:	4801      	ldr	r0, [pc, #4]	; (80059d0 <__sinit_lock_release+0x8>)
 80059ca:	f000 b8a7 	b.w	8005b1c <__retarget_lock_release_recursive>
 80059ce:	bf00      	nop
 80059d0:	20000205 	.word	0x20000205

080059d4 <__sinit>:
 80059d4:	b510      	push	{r4, lr}
 80059d6:	4604      	mov	r4, r0
 80059d8:	f7ff fff0 	bl	80059bc <__sinit_lock_acquire>
 80059dc:	69a3      	ldr	r3, [r4, #24]
 80059de:	b11b      	cbz	r3, 80059e8 <__sinit+0x14>
 80059e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059e4:	f7ff bff0 	b.w	80059c8 <__sinit_lock_release>
 80059e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80059ec:	6523      	str	r3, [r4, #80]	; 0x50
 80059ee:	4b13      	ldr	r3, [pc, #76]	; (8005a3c <__sinit+0x68>)
 80059f0:	4a13      	ldr	r2, [pc, #76]	; (8005a40 <__sinit+0x6c>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80059f6:	42a3      	cmp	r3, r4
 80059f8:	bf04      	itt	eq
 80059fa:	2301      	moveq	r3, #1
 80059fc:	61a3      	streq	r3, [r4, #24]
 80059fe:	4620      	mov	r0, r4
 8005a00:	f000 f820 	bl	8005a44 <__sfp>
 8005a04:	6060      	str	r0, [r4, #4]
 8005a06:	4620      	mov	r0, r4
 8005a08:	f000 f81c 	bl	8005a44 <__sfp>
 8005a0c:	60a0      	str	r0, [r4, #8]
 8005a0e:	4620      	mov	r0, r4
 8005a10:	f000 f818 	bl	8005a44 <__sfp>
 8005a14:	2200      	movs	r2, #0
 8005a16:	60e0      	str	r0, [r4, #12]
 8005a18:	2104      	movs	r1, #4
 8005a1a:	6860      	ldr	r0, [r4, #4]
 8005a1c:	f7ff ff82 	bl	8005924 <std>
 8005a20:	68a0      	ldr	r0, [r4, #8]
 8005a22:	2201      	movs	r2, #1
 8005a24:	2109      	movs	r1, #9
 8005a26:	f7ff ff7d 	bl	8005924 <std>
 8005a2a:	68e0      	ldr	r0, [r4, #12]
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	2112      	movs	r1, #18
 8005a30:	f7ff ff78 	bl	8005924 <std>
 8005a34:	2301      	movs	r3, #1
 8005a36:	61a3      	str	r3, [r4, #24]
 8005a38:	e7d2      	b.n	80059e0 <__sinit+0xc>
 8005a3a:	bf00      	nop
 8005a3c:	08006be8 	.word	0x08006be8
 8005a40:	0800596d 	.word	0x0800596d

08005a44 <__sfp>:
 8005a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a46:	4607      	mov	r7, r0
 8005a48:	f7ff ffac 	bl	80059a4 <__sfp_lock_acquire>
 8005a4c:	4b1e      	ldr	r3, [pc, #120]	; (8005ac8 <__sfp+0x84>)
 8005a4e:	681e      	ldr	r6, [r3, #0]
 8005a50:	69b3      	ldr	r3, [r6, #24]
 8005a52:	b913      	cbnz	r3, 8005a5a <__sfp+0x16>
 8005a54:	4630      	mov	r0, r6
 8005a56:	f7ff ffbd 	bl	80059d4 <__sinit>
 8005a5a:	3648      	adds	r6, #72	; 0x48
 8005a5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a60:	3b01      	subs	r3, #1
 8005a62:	d503      	bpl.n	8005a6c <__sfp+0x28>
 8005a64:	6833      	ldr	r3, [r6, #0]
 8005a66:	b30b      	cbz	r3, 8005aac <__sfp+0x68>
 8005a68:	6836      	ldr	r6, [r6, #0]
 8005a6a:	e7f7      	b.n	8005a5c <__sfp+0x18>
 8005a6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a70:	b9d5      	cbnz	r5, 8005aa8 <__sfp+0x64>
 8005a72:	4b16      	ldr	r3, [pc, #88]	; (8005acc <__sfp+0x88>)
 8005a74:	60e3      	str	r3, [r4, #12]
 8005a76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a7a:	6665      	str	r5, [r4, #100]	; 0x64
 8005a7c:	f000 f84c 	bl	8005b18 <__retarget_lock_init_recursive>
 8005a80:	f7ff ff96 	bl	80059b0 <__sfp_lock_release>
 8005a84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005a88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005a8c:	6025      	str	r5, [r4, #0]
 8005a8e:	61a5      	str	r5, [r4, #24]
 8005a90:	2208      	movs	r2, #8
 8005a92:	4629      	mov	r1, r5
 8005a94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005a98:	f7fe fab0 	bl	8003ffc <memset>
 8005a9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005aa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aa8:	3468      	adds	r4, #104	; 0x68
 8005aaa:	e7d9      	b.n	8005a60 <__sfp+0x1c>
 8005aac:	2104      	movs	r1, #4
 8005aae:	4638      	mov	r0, r7
 8005ab0:	f7ff ff62 	bl	8005978 <__sfmoreglue>
 8005ab4:	4604      	mov	r4, r0
 8005ab6:	6030      	str	r0, [r6, #0]
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	d1d5      	bne.n	8005a68 <__sfp+0x24>
 8005abc:	f7ff ff78 	bl	80059b0 <__sfp_lock_release>
 8005ac0:	230c      	movs	r3, #12
 8005ac2:	603b      	str	r3, [r7, #0]
 8005ac4:	e7ee      	b.n	8005aa4 <__sfp+0x60>
 8005ac6:	bf00      	nop
 8005ac8:	08006be8 	.word	0x08006be8
 8005acc:	ffff0001 	.word	0xffff0001

08005ad0 <_fwalk_reent>:
 8005ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ad4:	4606      	mov	r6, r0
 8005ad6:	4688      	mov	r8, r1
 8005ad8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005adc:	2700      	movs	r7, #0
 8005ade:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ae2:	f1b9 0901 	subs.w	r9, r9, #1
 8005ae6:	d505      	bpl.n	8005af4 <_fwalk_reent+0x24>
 8005ae8:	6824      	ldr	r4, [r4, #0]
 8005aea:	2c00      	cmp	r4, #0
 8005aec:	d1f7      	bne.n	8005ade <_fwalk_reent+0xe>
 8005aee:	4638      	mov	r0, r7
 8005af0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005af4:	89ab      	ldrh	r3, [r5, #12]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d907      	bls.n	8005b0a <_fwalk_reent+0x3a>
 8005afa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005afe:	3301      	adds	r3, #1
 8005b00:	d003      	beq.n	8005b0a <_fwalk_reent+0x3a>
 8005b02:	4629      	mov	r1, r5
 8005b04:	4630      	mov	r0, r6
 8005b06:	47c0      	blx	r8
 8005b08:	4307      	orrs	r7, r0
 8005b0a:	3568      	adds	r5, #104	; 0x68
 8005b0c:	e7e9      	b.n	8005ae2 <_fwalk_reent+0x12>
	...

08005b10 <_localeconv_r>:
 8005b10:	4800      	ldr	r0, [pc, #0]	; (8005b14 <_localeconv_r+0x4>)
 8005b12:	4770      	bx	lr
 8005b14:	20000158 	.word	0x20000158

08005b18 <__retarget_lock_init_recursive>:
 8005b18:	4770      	bx	lr

08005b1a <__retarget_lock_acquire_recursive>:
 8005b1a:	4770      	bx	lr

08005b1c <__retarget_lock_release_recursive>:
 8005b1c:	4770      	bx	lr

08005b1e <__swhatbuf_r>:
 8005b1e:	b570      	push	{r4, r5, r6, lr}
 8005b20:	460e      	mov	r6, r1
 8005b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b26:	2900      	cmp	r1, #0
 8005b28:	b096      	sub	sp, #88	; 0x58
 8005b2a:	4614      	mov	r4, r2
 8005b2c:	461d      	mov	r5, r3
 8005b2e:	da07      	bge.n	8005b40 <__swhatbuf_r+0x22>
 8005b30:	2300      	movs	r3, #0
 8005b32:	602b      	str	r3, [r5, #0]
 8005b34:	89b3      	ldrh	r3, [r6, #12]
 8005b36:	061a      	lsls	r2, r3, #24
 8005b38:	d410      	bmi.n	8005b5c <__swhatbuf_r+0x3e>
 8005b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b3e:	e00e      	b.n	8005b5e <__swhatbuf_r+0x40>
 8005b40:	466a      	mov	r2, sp
 8005b42:	f000 ff5f 	bl	8006a04 <_fstat_r>
 8005b46:	2800      	cmp	r0, #0
 8005b48:	dbf2      	blt.n	8005b30 <__swhatbuf_r+0x12>
 8005b4a:	9a01      	ldr	r2, [sp, #4]
 8005b4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b54:	425a      	negs	r2, r3
 8005b56:	415a      	adcs	r2, r3
 8005b58:	602a      	str	r2, [r5, #0]
 8005b5a:	e7ee      	b.n	8005b3a <__swhatbuf_r+0x1c>
 8005b5c:	2340      	movs	r3, #64	; 0x40
 8005b5e:	2000      	movs	r0, #0
 8005b60:	6023      	str	r3, [r4, #0]
 8005b62:	b016      	add	sp, #88	; 0x58
 8005b64:	bd70      	pop	{r4, r5, r6, pc}
	...

08005b68 <__smakebuf_r>:
 8005b68:	898b      	ldrh	r3, [r1, #12]
 8005b6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b6c:	079d      	lsls	r5, r3, #30
 8005b6e:	4606      	mov	r6, r0
 8005b70:	460c      	mov	r4, r1
 8005b72:	d507      	bpl.n	8005b84 <__smakebuf_r+0x1c>
 8005b74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b78:	6023      	str	r3, [r4, #0]
 8005b7a:	6123      	str	r3, [r4, #16]
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	6163      	str	r3, [r4, #20]
 8005b80:	b002      	add	sp, #8
 8005b82:	bd70      	pop	{r4, r5, r6, pc}
 8005b84:	ab01      	add	r3, sp, #4
 8005b86:	466a      	mov	r2, sp
 8005b88:	f7ff ffc9 	bl	8005b1e <__swhatbuf_r>
 8005b8c:	9900      	ldr	r1, [sp, #0]
 8005b8e:	4605      	mov	r5, r0
 8005b90:	4630      	mov	r0, r6
 8005b92:	f000 fc1d 	bl	80063d0 <_malloc_r>
 8005b96:	b948      	cbnz	r0, 8005bac <__smakebuf_r+0x44>
 8005b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b9c:	059a      	lsls	r2, r3, #22
 8005b9e:	d4ef      	bmi.n	8005b80 <__smakebuf_r+0x18>
 8005ba0:	f023 0303 	bic.w	r3, r3, #3
 8005ba4:	f043 0302 	orr.w	r3, r3, #2
 8005ba8:	81a3      	strh	r3, [r4, #12]
 8005baa:	e7e3      	b.n	8005b74 <__smakebuf_r+0xc>
 8005bac:	4b0d      	ldr	r3, [pc, #52]	; (8005be4 <__smakebuf_r+0x7c>)
 8005bae:	62b3      	str	r3, [r6, #40]	; 0x28
 8005bb0:	89a3      	ldrh	r3, [r4, #12]
 8005bb2:	6020      	str	r0, [r4, #0]
 8005bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb8:	81a3      	strh	r3, [r4, #12]
 8005bba:	9b00      	ldr	r3, [sp, #0]
 8005bbc:	6163      	str	r3, [r4, #20]
 8005bbe:	9b01      	ldr	r3, [sp, #4]
 8005bc0:	6120      	str	r0, [r4, #16]
 8005bc2:	b15b      	cbz	r3, 8005bdc <__smakebuf_r+0x74>
 8005bc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bc8:	4630      	mov	r0, r6
 8005bca:	f000 ff2d 	bl	8006a28 <_isatty_r>
 8005bce:	b128      	cbz	r0, 8005bdc <__smakebuf_r+0x74>
 8005bd0:	89a3      	ldrh	r3, [r4, #12]
 8005bd2:	f023 0303 	bic.w	r3, r3, #3
 8005bd6:	f043 0301 	orr.w	r3, r3, #1
 8005bda:	81a3      	strh	r3, [r4, #12]
 8005bdc:	89a0      	ldrh	r0, [r4, #12]
 8005bde:	4305      	orrs	r5, r0
 8005be0:	81a5      	strh	r5, [r4, #12]
 8005be2:	e7cd      	b.n	8005b80 <__smakebuf_r+0x18>
 8005be4:	0800596d 	.word	0x0800596d

08005be8 <malloc>:
 8005be8:	4b02      	ldr	r3, [pc, #8]	; (8005bf4 <malloc+0xc>)
 8005bea:	4601      	mov	r1, r0
 8005bec:	6818      	ldr	r0, [r3, #0]
 8005bee:	f000 bbef 	b.w	80063d0 <_malloc_r>
 8005bf2:	bf00      	nop
 8005bf4:	20000004 	.word	0x20000004

08005bf8 <memcpy>:
 8005bf8:	440a      	add	r2, r1
 8005bfa:	4291      	cmp	r1, r2
 8005bfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c00:	d100      	bne.n	8005c04 <memcpy+0xc>
 8005c02:	4770      	bx	lr
 8005c04:	b510      	push	{r4, lr}
 8005c06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c0e:	4291      	cmp	r1, r2
 8005c10:	d1f9      	bne.n	8005c06 <memcpy+0xe>
 8005c12:	bd10      	pop	{r4, pc}

08005c14 <_Balloc>:
 8005c14:	b570      	push	{r4, r5, r6, lr}
 8005c16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c18:	4604      	mov	r4, r0
 8005c1a:	460d      	mov	r5, r1
 8005c1c:	b976      	cbnz	r6, 8005c3c <_Balloc+0x28>
 8005c1e:	2010      	movs	r0, #16
 8005c20:	f7ff ffe2 	bl	8005be8 <malloc>
 8005c24:	4602      	mov	r2, r0
 8005c26:	6260      	str	r0, [r4, #36]	; 0x24
 8005c28:	b920      	cbnz	r0, 8005c34 <_Balloc+0x20>
 8005c2a:	4b18      	ldr	r3, [pc, #96]	; (8005c8c <_Balloc+0x78>)
 8005c2c:	4818      	ldr	r0, [pc, #96]	; (8005c90 <_Balloc+0x7c>)
 8005c2e:	2166      	movs	r1, #102	; 0x66
 8005c30:	f000 fea8 	bl	8006984 <__assert_func>
 8005c34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c38:	6006      	str	r6, [r0, #0]
 8005c3a:	60c6      	str	r6, [r0, #12]
 8005c3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005c3e:	68f3      	ldr	r3, [r6, #12]
 8005c40:	b183      	cbz	r3, 8005c64 <_Balloc+0x50>
 8005c42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c4a:	b9b8      	cbnz	r0, 8005c7c <_Balloc+0x68>
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	fa01 f605 	lsl.w	r6, r1, r5
 8005c52:	1d72      	adds	r2, r6, #5
 8005c54:	0092      	lsls	r2, r2, #2
 8005c56:	4620      	mov	r0, r4
 8005c58:	f000 fb5a 	bl	8006310 <_calloc_r>
 8005c5c:	b160      	cbz	r0, 8005c78 <_Balloc+0x64>
 8005c5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c62:	e00e      	b.n	8005c82 <_Balloc+0x6e>
 8005c64:	2221      	movs	r2, #33	; 0x21
 8005c66:	2104      	movs	r1, #4
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f000 fb51 	bl	8006310 <_calloc_r>
 8005c6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c70:	60f0      	str	r0, [r6, #12]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e4      	bne.n	8005c42 <_Balloc+0x2e>
 8005c78:	2000      	movs	r0, #0
 8005c7a:	bd70      	pop	{r4, r5, r6, pc}
 8005c7c:	6802      	ldr	r2, [r0, #0]
 8005c7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c82:	2300      	movs	r3, #0
 8005c84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c88:	e7f7      	b.n	8005c7a <_Balloc+0x66>
 8005c8a:	bf00      	nop
 8005c8c:	08006c2d 	.word	0x08006c2d
 8005c90:	08006d14 	.word	0x08006d14

08005c94 <_Bfree>:
 8005c94:	b570      	push	{r4, r5, r6, lr}
 8005c96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c98:	4605      	mov	r5, r0
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	b976      	cbnz	r6, 8005cbc <_Bfree+0x28>
 8005c9e:	2010      	movs	r0, #16
 8005ca0:	f7ff ffa2 	bl	8005be8 <malloc>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	6268      	str	r0, [r5, #36]	; 0x24
 8005ca8:	b920      	cbnz	r0, 8005cb4 <_Bfree+0x20>
 8005caa:	4b09      	ldr	r3, [pc, #36]	; (8005cd0 <_Bfree+0x3c>)
 8005cac:	4809      	ldr	r0, [pc, #36]	; (8005cd4 <_Bfree+0x40>)
 8005cae:	218a      	movs	r1, #138	; 0x8a
 8005cb0:	f000 fe68 	bl	8006984 <__assert_func>
 8005cb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cb8:	6006      	str	r6, [r0, #0]
 8005cba:	60c6      	str	r6, [r0, #12]
 8005cbc:	b13c      	cbz	r4, 8005cce <_Bfree+0x3a>
 8005cbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005cc0:	6862      	ldr	r2, [r4, #4]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005cc8:	6021      	str	r1, [r4, #0]
 8005cca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005cce:	bd70      	pop	{r4, r5, r6, pc}
 8005cd0:	08006c2d 	.word	0x08006c2d
 8005cd4:	08006d14 	.word	0x08006d14

08005cd8 <__multadd>:
 8005cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cdc:	690e      	ldr	r6, [r1, #16]
 8005cde:	4607      	mov	r7, r0
 8005ce0:	4698      	mov	r8, r3
 8005ce2:	460c      	mov	r4, r1
 8005ce4:	f101 0014 	add.w	r0, r1, #20
 8005ce8:	2300      	movs	r3, #0
 8005cea:	6805      	ldr	r5, [r0, #0]
 8005cec:	b2a9      	uxth	r1, r5
 8005cee:	fb02 8101 	mla	r1, r2, r1, r8
 8005cf2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005cf6:	0c2d      	lsrs	r5, r5, #16
 8005cf8:	fb02 c505 	mla	r5, r2, r5, ip
 8005cfc:	b289      	uxth	r1, r1
 8005cfe:	3301      	adds	r3, #1
 8005d00:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005d04:	429e      	cmp	r6, r3
 8005d06:	f840 1b04 	str.w	r1, [r0], #4
 8005d0a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005d0e:	dcec      	bgt.n	8005cea <__multadd+0x12>
 8005d10:	f1b8 0f00 	cmp.w	r8, #0
 8005d14:	d022      	beq.n	8005d5c <__multadd+0x84>
 8005d16:	68a3      	ldr	r3, [r4, #8]
 8005d18:	42b3      	cmp	r3, r6
 8005d1a:	dc19      	bgt.n	8005d50 <__multadd+0x78>
 8005d1c:	6861      	ldr	r1, [r4, #4]
 8005d1e:	4638      	mov	r0, r7
 8005d20:	3101      	adds	r1, #1
 8005d22:	f7ff ff77 	bl	8005c14 <_Balloc>
 8005d26:	4605      	mov	r5, r0
 8005d28:	b928      	cbnz	r0, 8005d36 <__multadd+0x5e>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	4b0d      	ldr	r3, [pc, #52]	; (8005d64 <__multadd+0x8c>)
 8005d2e:	480e      	ldr	r0, [pc, #56]	; (8005d68 <__multadd+0x90>)
 8005d30:	21b5      	movs	r1, #181	; 0xb5
 8005d32:	f000 fe27 	bl	8006984 <__assert_func>
 8005d36:	6922      	ldr	r2, [r4, #16]
 8005d38:	3202      	adds	r2, #2
 8005d3a:	f104 010c 	add.w	r1, r4, #12
 8005d3e:	0092      	lsls	r2, r2, #2
 8005d40:	300c      	adds	r0, #12
 8005d42:	f7ff ff59 	bl	8005bf8 <memcpy>
 8005d46:	4621      	mov	r1, r4
 8005d48:	4638      	mov	r0, r7
 8005d4a:	f7ff ffa3 	bl	8005c94 <_Bfree>
 8005d4e:	462c      	mov	r4, r5
 8005d50:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005d54:	3601      	adds	r6, #1
 8005d56:	f8c3 8014 	str.w	r8, [r3, #20]
 8005d5a:	6126      	str	r6, [r4, #16]
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d62:	bf00      	nop
 8005d64:	08006ca3 	.word	0x08006ca3
 8005d68:	08006d14 	.word	0x08006d14

08005d6c <__hi0bits>:
 8005d6c:	0c03      	lsrs	r3, r0, #16
 8005d6e:	041b      	lsls	r3, r3, #16
 8005d70:	b9d3      	cbnz	r3, 8005da8 <__hi0bits+0x3c>
 8005d72:	0400      	lsls	r0, r0, #16
 8005d74:	2310      	movs	r3, #16
 8005d76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005d7a:	bf04      	itt	eq
 8005d7c:	0200      	lsleq	r0, r0, #8
 8005d7e:	3308      	addeq	r3, #8
 8005d80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005d84:	bf04      	itt	eq
 8005d86:	0100      	lsleq	r0, r0, #4
 8005d88:	3304      	addeq	r3, #4
 8005d8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005d8e:	bf04      	itt	eq
 8005d90:	0080      	lsleq	r0, r0, #2
 8005d92:	3302      	addeq	r3, #2
 8005d94:	2800      	cmp	r0, #0
 8005d96:	db05      	blt.n	8005da4 <__hi0bits+0x38>
 8005d98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005d9c:	f103 0301 	add.w	r3, r3, #1
 8005da0:	bf08      	it	eq
 8005da2:	2320      	moveq	r3, #32
 8005da4:	4618      	mov	r0, r3
 8005da6:	4770      	bx	lr
 8005da8:	2300      	movs	r3, #0
 8005daa:	e7e4      	b.n	8005d76 <__hi0bits+0xa>

08005dac <__lo0bits>:
 8005dac:	6803      	ldr	r3, [r0, #0]
 8005dae:	f013 0207 	ands.w	r2, r3, #7
 8005db2:	4601      	mov	r1, r0
 8005db4:	d00b      	beq.n	8005dce <__lo0bits+0x22>
 8005db6:	07da      	lsls	r2, r3, #31
 8005db8:	d424      	bmi.n	8005e04 <__lo0bits+0x58>
 8005dba:	0798      	lsls	r0, r3, #30
 8005dbc:	bf49      	itett	mi
 8005dbe:	085b      	lsrmi	r3, r3, #1
 8005dc0:	089b      	lsrpl	r3, r3, #2
 8005dc2:	2001      	movmi	r0, #1
 8005dc4:	600b      	strmi	r3, [r1, #0]
 8005dc6:	bf5c      	itt	pl
 8005dc8:	600b      	strpl	r3, [r1, #0]
 8005dca:	2002      	movpl	r0, #2
 8005dcc:	4770      	bx	lr
 8005dce:	b298      	uxth	r0, r3
 8005dd0:	b9b0      	cbnz	r0, 8005e00 <__lo0bits+0x54>
 8005dd2:	0c1b      	lsrs	r3, r3, #16
 8005dd4:	2010      	movs	r0, #16
 8005dd6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005dda:	bf04      	itt	eq
 8005ddc:	0a1b      	lsreq	r3, r3, #8
 8005dde:	3008      	addeq	r0, #8
 8005de0:	071a      	lsls	r2, r3, #28
 8005de2:	bf04      	itt	eq
 8005de4:	091b      	lsreq	r3, r3, #4
 8005de6:	3004      	addeq	r0, #4
 8005de8:	079a      	lsls	r2, r3, #30
 8005dea:	bf04      	itt	eq
 8005dec:	089b      	lsreq	r3, r3, #2
 8005dee:	3002      	addeq	r0, #2
 8005df0:	07da      	lsls	r2, r3, #31
 8005df2:	d403      	bmi.n	8005dfc <__lo0bits+0x50>
 8005df4:	085b      	lsrs	r3, r3, #1
 8005df6:	f100 0001 	add.w	r0, r0, #1
 8005dfa:	d005      	beq.n	8005e08 <__lo0bits+0x5c>
 8005dfc:	600b      	str	r3, [r1, #0]
 8005dfe:	4770      	bx	lr
 8005e00:	4610      	mov	r0, r2
 8005e02:	e7e8      	b.n	8005dd6 <__lo0bits+0x2a>
 8005e04:	2000      	movs	r0, #0
 8005e06:	4770      	bx	lr
 8005e08:	2020      	movs	r0, #32
 8005e0a:	4770      	bx	lr

08005e0c <__i2b>:
 8005e0c:	b510      	push	{r4, lr}
 8005e0e:	460c      	mov	r4, r1
 8005e10:	2101      	movs	r1, #1
 8005e12:	f7ff feff 	bl	8005c14 <_Balloc>
 8005e16:	4602      	mov	r2, r0
 8005e18:	b928      	cbnz	r0, 8005e26 <__i2b+0x1a>
 8005e1a:	4b05      	ldr	r3, [pc, #20]	; (8005e30 <__i2b+0x24>)
 8005e1c:	4805      	ldr	r0, [pc, #20]	; (8005e34 <__i2b+0x28>)
 8005e1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005e22:	f000 fdaf 	bl	8006984 <__assert_func>
 8005e26:	2301      	movs	r3, #1
 8005e28:	6144      	str	r4, [r0, #20]
 8005e2a:	6103      	str	r3, [r0, #16]
 8005e2c:	bd10      	pop	{r4, pc}
 8005e2e:	bf00      	nop
 8005e30:	08006ca3 	.word	0x08006ca3
 8005e34:	08006d14 	.word	0x08006d14

08005e38 <__multiply>:
 8005e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e3c:	4614      	mov	r4, r2
 8005e3e:	690a      	ldr	r2, [r1, #16]
 8005e40:	6923      	ldr	r3, [r4, #16]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	bfb8      	it	lt
 8005e46:	460b      	movlt	r3, r1
 8005e48:	460d      	mov	r5, r1
 8005e4a:	bfbc      	itt	lt
 8005e4c:	4625      	movlt	r5, r4
 8005e4e:	461c      	movlt	r4, r3
 8005e50:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005e54:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005e58:	68ab      	ldr	r3, [r5, #8]
 8005e5a:	6869      	ldr	r1, [r5, #4]
 8005e5c:	eb0a 0709 	add.w	r7, sl, r9
 8005e60:	42bb      	cmp	r3, r7
 8005e62:	b085      	sub	sp, #20
 8005e64:	bfb8      	it	lt
 8005e66:	3101      	addlt	r1, #1
 8005e68:	f7ff fed4 	bl	8005c14 <_Balloc>
 8005e6c:	b930      	cbnz	r0, 8005e7c <__multiply+0x44>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	4b42      	ldr	r3, [pc, #264]	; (8005f7c <__multiply+0x144>)
 8005e72:	4843      	ldr	r0, [pc, #268]	; (8005f80 <__multiply+0x148>)
 8005e74:	f240 115d 	movw	r1, #349	; 0x15d
 8005e78:	f000 fd84 	bl	8006984 <__assert_func>
 8005e7c:	f100 0614 	add.w	r6, r0, #20
 8005e80:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005e84:	4633      	mov	r3, r6
 8005e86:	2200      	movs	r2, #0
 8005e88:	4543      	cmp	r3, r8
 8005e8a:	d31e      	bcc.n	8005eca <__multiply+0x92>
 8005e8c:	f105 0c14 	add.w	ip, r5, #20
 8005e90:	f104 0314 	add.w	r3, r4, #20
 8005e94:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005e98:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005e9c:	9202      	str	r2, [sp, #8]
 8005e9e:	ebac 0205 	sub.w	r2, ip, r5
 8005ea2:	3a15      	subs	r2, #21
 8005ea4:	f022 0203 	bic.w	r2, r2, #3
 8005ea8:	3204      	adds	r2, #4
 8005eaa:	f105 0115 	add.w	r1, r5, #21
 8005eae:	458c      	cmp	ip, r1
 8005eb0:	bf38      	it	cc
 8005eb2:	2204      	movcc	r2, #4
 8005eb4:	9201      	str	r2, [sp, #4]
 8005eb6:	9a02      	ldr	r2, [sp, #8]
 8005eb8:	9303      	str	r3, [sp, #12]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d808      	bhi.n	8005ed0 <__multiply+0x98>
 8005ebe:	2f00      	cmp	r7, #0
 8005ec0:	dc55      	bgt.n	8005f6e <__multiply+0x136>
 8005ec2:	6107      	str	r7, [r0, #16]
 8005ec4:	b005      	add	sp, #20
 8005ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eca:	f843 2b04 	str.w	r2, [r3], #4
 8005ece:	e7db      	b.n	8005e88 <__multiply+0x50>
 8005ed0:	f8b3 a000 	ldrh.w	sl, [r3]
 8005ed4:	f1ba 0f00 	cmp.w	sl, #0
 8005ed8:	d020      	beq.n	8005f1c <__multiply+0xe4>
 8005eda:	f105 0e14 	add.w	lr, r5, #20
 8005ede:	46b1      	mov	r9, r6
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005ee6:	f8d9 b000 	ldr.w	fp, [r9]
 8005eea:	b2a1      	uxth	r1, r4
 8005eec:	fa1f fb8b 	uxth.w	fp, fp
 8005ef0:	fb0a b101 	mla	r1, sl, r1, fp
 8005ef4:	4411      	add	r1, r2
 8005ef6:	f8d9 2000 	ldr.w	r2, [r9]
 8005efa:	0c24      	lsrs	r4, r4, #16
 8005efc:	0c12      	lsrs	r2, r2, #16
 8005efe:	fb0a 2404 	mla	r4, sl, r4, r2
 8005f02:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005f06:	b289      	uxth	r1, r1
 8005f08:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005f0c:	45f4      	cmp	ip, lr
 8005f0e:	f849 1b04 	str.w	r1, [r9], #4
 8005f12:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005f16:	d8e4      	bhi.n	8005ee2 <__multiply+0xaa>
 8005f18:	9901      	ldr	r1, [sp, #4]
 8005f1a:	5072      	str	r2, [r6, r1]
 8005f1c:	9a03      	ldr	r2, [sp, #12]
 8005f1e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005f22:	3304      	adds	r3, #4
 8005f24:	f1b9 0f00 	cmp.w	r9, #0
 8005f28:	d01f      	beq.n	8005f6a <__multiply+0x132>
 8005f2a:	6834      	ldr	r4, [r6, #0]
 8005f2c:	f105 0114 	add.w	r1, r5, #20
 8005f30:	46b6      	mov	lr, r6
 8005f32:	f04f 0a00 	mov.w	sl, #0
 8005f36:	880a      	ldrh	r2, [r1, #0]
 8005f38:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005f3c:	fb09 b202 	mla	r2, r9, r2, fp
 8005f40:	4492      	add	sl, r2
 8005f42:	b2a4      	uxth	r4, r4
 8005f44:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005f48:	f84e 4b04 	str.w	r4, [lr], #4
 8005f4c:	f851 4b04 	ldr.w	r4, [r1], #4
 8005f50:	f8be 2000 	ldrh.w	r2, [lr]
 8005f54:	0c24      	lsrs	r4, r4, #16
 8005f56:	fb09 2404 	mla	r4, r9, r4, r2
 8005f5a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005f5e:	458c      	cmp	ip, r1
 8005f60:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005f64:	d8e7      	bhi.n	8005f36 <__multiply+0xfe>
 8005f66:	9a01      	ldr	r2, [sp, #4]
 8005f68:	50b4      	str	r4, [r6, r2]
 8005f6a:	3604      	adds	r6, #4
 8005f6c:	e7a3      	b.n	8005eb6 <__multiply+0x7e>
 8005f6e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1a5      	bne.n	8005ec2 <__multiply+0x8a>
 8005f76:	3f01      	subs	r7, #1
 8005f78:	e7a1      	b.n	8005ebe <__multiply+0x86>
 8005f7a:	bf00      	nop
 8005f7c:	08006ca3 	.word	0x08006ca3
 8005f80:	08006d14 	.word	0x08006d14

08005f84 <__pow5mult>:
 8005f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f88:	4615      	mov	r5, r2
 8005f8a:	f012 0203 	ands.w	r2, r2, #3
 8005f8e:	4606      	mov	r6, r0
 8005f90:	460f      	mov	r7, r1
 8005f92:	d007      	beq.n	8005fa4 <__pow5mult+0x20>
 8005f94:	4c25      	ldr	r4, [pc, #148]	; (800602c <__pow5mult+0xa8>)
 8005f96:	3a01      	subs	r2, #1
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f9e:	f7ff fe9b 	bl	8005cd8 <__multadd>
 8005fa2:	4607      	mov	r7, r0
 8005fa4:	10ad      	asrs	r5, r5, #2
 8005fa6:	d03d      	beq.n	8006024 <__pow5mult+0xa0>
 8005fa8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005faa:	b97c      	cbnz	r4, 8005fcc <__pow5mult+0x48>
 8005fac:	2010      	movs	r0, #16
 8005fae:	f7ff fe1b 	bl	8005be8 <malloc>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	6270      	str	r0, [r6, #36]	; 0x24
 8005fb6:	b928      	cbnz	r0, 8005fc4 <__pow5mult+0x40>
 8005fb8:	4b1d      	ldr	r3, [pc, #116]	; (8006030 <__pow5mult+0xac>)
 8005fba:	481e      	ldr	r0, [pc, #120]	; (8006034 <__pow5mult+0xb0>)
 8005fbc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005fc0:	f000 fce0 	bl	8006984 <__assert_func>
 8005fc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fc8:	6004      	str	r4, [r0, #0]
 8005fca:	60c4      	str	r4, [r0, #12]
 8005fcc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005fd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005fd4:	b94c      	cbnz	r4, 8005fea <__pow5mult+0x66>
 8005fd6:	f240 2171 	movw	r1, #625	; 0x271
 8005fda:	4630      	mov	r0, r6
 8005fdc:	f7ff ff16 	bl	8005e0c <__i2b>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	f8c8 0008 	str.w	r0, [r8, #8]
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	6003      	str	r3, [r0, #0]
 8005fea:	f04f 0900 	mov.w	r9, #0
 8005fee:	07eb      	lsls	r3, r5, #31
 8005ff0:	d50a      	bpl.n	8006008 <__pow5mult+0x84>
 8005ff2:	4639      	mov	r1, r7
 8005ff4:	4622      	mov	r2, r4
 8005ff6:	4630      	mov	r0, r6
 8005ff8:	f7ff ff1e 	bl	8005e38 <__multiply>
 8005ffc:	4639      	mov	r1, r7
 8005ffe:	4680      	mov	r8, r0
 8006000:	4630      	mov	r0, r6
 8006002:	f7ff fe47 	bl	8005c94 <_Bfree>
 8006006:	4647      	mov	r7, r8
 8006008:	106d      	asrs	r5, r5, #1
 800600a:	d00b      	beq.n	8006024 <__pow5mult+0xa0>
 800600c:	6820      	ldr	r0, [r4, #0]
 800600e:	b938      	cbnz	r0, 8006020 <__pow5mult+0x9c>
 8006010:	4622      	mov	r2, r4
 8006012:	4621      	mov	r1, r4
 8006014:	4630      	mov	r0, r6
 8006016:	f7ff ff0f 	bl	8005e38 <__multiply>
 800601a:	6020      	str	r0, [r4, #0]
 800601c:	f8c0 9000 	str.w	r9, [r0]
 8006020:	4604      	mov	r4, r0
 8006022:	e7e4      	b.n	8005fee <__pow5mult+0x6a>
 8006024:	4638      	mov	r0, r7
 8006026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800602a:	bf00      	nop
 800602c:	08006e68 	.word	0x08006e68
 8006030:	08006c2d 	.word	0x08006c2d
 8006034:	08006d14 	.word	0x08006d14

08006038 <__lshift>:
 8006038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800603c:	460c      	mov	r4, r1
 800603e:	6849      	ldr	r1, [r1, #4]
 8006040:	6923      	ldr	r3, [r4, #16]
 8006042:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006046:	68a3      	ldr	r3, [r4, #8]
 8006048:	4607      	mov	r7, r0
 800604a:	4691      	mov	r9, r2
 800604c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006050:	f108 0601 	add.w	r6, r8, #1
 8006054:	42b3      	cmp	r3, r6
 8006056:	db0b      	blt.n	8006070 <__lshift+0x38>
 8006058:	4638      	mov	r0, r7
 800605a:	f7ff fddb 	bl	8005c14 <_Balloc>
 800605e:	4605      	mov	r5, r0
 8006060:	b948      	cbnz	r0, 8006076 <__lshift+0x3e>
 8006062:	4602      	mov	r2, r0
 8006064:	4b28      	ldr	r3, [pc, #160]	; (8006108 <__lshift+0xd0>)
 8006066:	4829      	ldr	r0, [pc, #164]	; (800610c <__lshift+0xd4>)
 8006068:	f240 11d9 	movw	r1, #473	; 0x1d9
 800606c:	f000 fc8a 	bl	8006984 <__assert_func>
 8006070:	3101      	adds	r1, #1
 8006072:	005b      	lsls	r3, r3, #1
 8006074:	e7ee      	b.n	8006054 <__lshift+0x1c>
 8006076:	2300      	movs	r3, #0
 8006078:	f100 0114 	add.w	r1, r0, #20
 800607c:	f100 0210 	add.w	r2, r0, #16
 8006080:	4618      	mov	r0, r3
 8006082:	4553      	cmp	r3, sl
 8006084:	db33      	blt.n	80060ee <__lshift+0xb6>
 8006086:	6920      	ldr	r0, [r4, #16]
 8006088:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800608c:	f104 0314 	add.w	r3, r4, #20
 8006090:	f019 091f 	ands.w	r9, r9, #31
 8006094:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006098:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800609c:	d02b      	beq.n	80060f6 <__lshift+0xbe>
 800609e:	f1c9 0e20 	rsb	lr, r9, #32
 80060a2:	468a      	mov	sl, r1
 80060a4:	2200      	movs	r2, #0
 80060a6:	6818      	ldr	r0, [r3, #0]
 80060a8:	fa00 f009 	lsl.w	r0, r0, r9
 80060ac:	4302      	orrs	r2, r0
 80060ae:	f84a 2b04 	str.w	r2, [sl], #4
 80060b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80060b6:	459c      	cmp	ip, r3
 80060b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80060bc:	d8f3      	bhi.n	80060a6 <__lshift+0x6e>
 80060be:	ebac 0304 	sub.w	r3, ip, r4
 80060c2:	3b15      	subs	r3, #21
 80060c4:	f023 0303 	bic.w	r3, r3, #3
 80060c8:	3304      	adds	r3, #4
 80060ca:	f104 0015 	add.w	r0, r4, #21
 80060ce:	4584      	cmp	ip, r0
 80060d0:	bf38      	it	cc
 80060d2:	2304      	movcc	r3, #4
 80060d4:	50ca      	str	r2, [r1, r3]
 80060d6:	b10a      	cbz	r2, 80060dc <__lshift+0xa4>
 80060d8:	f108 0602 	add.w	r6, r8, #2
 80060dc:	3e01      	subs	r6, #1
 80060de:	4638      	mov	r0, r7
 80060e0:	612e      	str	r6, [r5, #16]
 80060e2:	4621      	mov	r1, r4
 80060e4:	f7ff fdd6 	bl	8005c94 <_Bfree>
 80060e8:	4628      	mov	r0, r5
 80060ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80060f2:	3301      	adds	r3, #1
 80060f4:	e7c5      	b.n	8006082 <__lshift+0x4a>
 80060f6:	3904      	subs	r1, #4
 80060f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80060fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8006100:	459c      	cmp	ip, r3
 8006102:	d8f9      	bhi.n	80060f8 <__lshift+0xc0>
 8006104:	e7ea      	b.n	80060dc <__lshift+0xa4>
 8006106:	bf00      	nop
 8006108:	08006ca3 	.word	0x08006ca3
 800610c:	08006d14 	.word	0x08006d14

08006110 <__mcmp>:
 8006110:	b530      	push	{r4, r5, lr}
 8006112:	6902      	ldr	r2, [r0, #16]
 8006114:	690c      	ldr	r4, [r1, #16]
 8006116:	1b12      	subs	r2, r2, r4
 8006118:	d10e      	bne.n	8006138 <__mcmp+0x28>
 800611a:	f100 0314 	add.w	r3, r0, #20
 800611e:	3114      	adds	r1, #20
 8006120:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006124:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006128:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800612c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006130:	42a5      	cmp	r5, r4
 8006132:	d003      	beq.n	800613c <__mcmp+0x2c>
 8006134:	d305      	bcc.n	8006142 <__mcmp+0x32>
 8006136:	2201      	movs	r2, #1
 8006138:	4610      	mov	r0, r2
 800613a:	bd30      	pop	{r4, r5, pc}
 800613c:	4283      	cmp	r3, r0
 800613e:	d3f3      	bcc.n	8006128 <__mcmp+0x18>
 8006140:	e7fa      	b.n	8006138 <__mcmp+0x28>
 8006142:	f04f 32ff 	mov.w	r2, #4294967295
 8006146:	e7f7      	b.n	8006138 <__mcmp+0x28>

08006148 <__mdiff>:
 8006148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614c:	460c      	mov	r4, r1
 800614e:	4606      	mov	r6, r0
 8006150:	4611      	mov	r1, r2
 8006152:	4620      	mov	r0, r4
 8006154:	4617      	mov	r7, r2
 8006156:	f7ff ffdb 	bl	8006110 <__mcmp>
 800615a:	1e05      	subs	r5, r0, #0
 800615c:	d110      	bne.n	8006180 <__mdiff+0x38>
 800615e:	4629      	mov	r1, r5
 8006160:	4630      	mov	r0, r6
 8006162:	f7ff fd57 	bl	8005c14 <_Balloc>
 8006166:	b930      	cbnz	r0, 8006176 <__mdiff+0x2e>
 8006168:	4b39      	ldr	r3, [pc, #228]	; (8006250 <__mdiff+0x108>)
 800616a:	4602      	mov	r2, r0
 800616c:	f240 2132 	movw	r1, #562	; 0x232
 8006170:	4838      	ldr	r0, [pc, #224]	; (8006254 <__mdiff+0x10c>)
 8006172:	f000 fc07 	bl	8006984 <__assert_func>
 8006176:	2301      	movs	r3, #1
 8006178:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800617c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006180:	bfa4      	itt	ge
 8006182:	463b      	movge	r3, r7
 8006184:	4627      	movge	r7, r4
 8006186:	4630      	mov	r0, r6
 8006188:	6879      	ldr	r1, [r7, #4]
 800618a:	bfa6      	itte	ge
 800618c:	461c      	movge	r4, r3
 800618e:	2500      	movge	r5, #0
 8006190:	2501      	movlt	r5, #1
 8006192:	f7ff fd3f 	bl	8005c14 <_Balloc>
 8006196:	b920      	cbnz	r0, 80061a2 <__mdiff+0x5a>
 8006198:	4b2d      	ldr	r3, [pc, #180]	; (8006250 <__mdiff+0x108>)
 800619a:	4602      	mov	r2, r0
 800619c:	f44f 7110 	mov.w	r1, #576	; 0x240
 80061a0:	e7e6      	b.n	8006170 <__mdiff+0x28>
 80061a2:	693e      	ldr	r6, [r7, #16]
 80061a4:	60c5      	str	r5, [r0, #12]
 80061a6:	6925      	ldr	r5, [r4, #16]
 80061a8:	f107 0114 	add.w	r1, r7, #20
 80061ac:	f104 0914 	add.w	r9, r4, #20
 80061b0:	f100 0e14 	add.w	lr, r0, #20
 80061b4:	f107 0210 	add.w	r2, r7, #16
 80061b8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80061bc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80061c0:	46f2      	mov	sl, lr
 80061c2:	2700      	movs	r7, #0
 80061c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80061c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80061cc:	fa1f f883 	uxth.w	r8, r3
 80061d0:	fa17 f78b 	uxtah	r7, r7, fp
 80061d4:	0c1b      	lsrs	r3, r3, #16
 80061d6:	eba7 0808 	sub.w	r8, r7, r8
 80061da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80061de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80061e2:	fa1f f888 	uxth.w	r8, r8
 80061e6:	141f      	asrs	r7, r3, #16
 80061e8:	454d      	cmp	r5, r9
 80061ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80061ee:	f84a 3b04 	str.w	r3, [sl], #4
 80061f2:	d8e7      	bhi.n	80061c4 <__mdiff+0x7c>
 80061f4:	1b2b      	subs	r3, r5, r4
 80061f6:	3b15      	subs	r3, #21
 80061f8:	f023 0303 	bic.w	r3, r3, #3
 80061fc:	3304      	adds	r3, #4
 80061fe:	3415      	adds	r4, #21
 8006200:	42a5      	cmp	r5, r4
 8006202:	bf38      	it	cc
 8006204:	2304      	movcc	r3, #4
 8006206:	4419      	add	r1, r3
 8006208:	4473      	add	r3, lr
 800620a:	469e      	mov	lr, r3
 800620c:	460d      	mov	r5, r1
 800620e:	4565      	cmp	r5, ip
 8006210:	d30e      	bcc.n	8006230 <__mdiff+0xe8>
 8006212:	f10c 0203 	add.w	r2, ip, #3
 8006216:	1a52      	subs	r2, r2, r1
 8006218:	f022 0203 	bic.w	r2, r2, #3
 800621c:	3903      	subs	r1, #3
 800621e:	458c      	cmp	ip, r1
 8006220:	bf38      	it	cc
 8006222:	2200      	movcc	r2, #0
 8006224:	441a      	add	r2, r3
 8006226:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800622a:	b17b      	cbz	r3, 800624c <__mdiff+0x104>
 800622c:	6106      	str	r6, [r0, #16]
 800622e:	e7a5      	b.n	800617c <__mdiff+0x34>
 8006230:	f855 8b04 	ldr.w	r8, [r5], #4
 8006234:	fa17 f488 	uxtah	r4, r7, r8
 8006238:	1422      	asrs	r2, r4, #16
 800623a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800623e:	b2a4      	uxth	r4, r4
 8006240:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006244:	f84e 4b04 	str.w	r4, [lr], #4
 8006248:	1417      	asrs	r7, r2, #16
 800624a:	e7e0      	b.n	800620e <__mdiff+0xc6>
 800624c:	3e01      	subs	r6, #1
 800624e:	e7ea      	b.n	8006226 <__mdiff+0xde>
 8006250:	08006ca3 	.word	0x08006ca3
 8006254:	08006d14 	.word	0x08006d14

08006258 <__d2b>:
 8006258:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800625c:	4689      	mov	r9, r1
 800625e:	2101      	movs	r1, #1
 8006260:	ec57 6b10 	vmov	r6, r7, d0
 8006264:	4690      	mov	r8, r2
 8006266:	f7ff fcd5 	bl	8005c14 <_Balloc>
 800626a:	4604      	mov	r4, r0
 800626c:	b930      	cbnz	r0, 800627c <__d2b+0x24>
 800626e:	4602      	mov	r2, r0
 8006270:	4b25      	ldr	r3, [pc, #148]	; (8006308 <__d2b+0xb0>)
 8006272:	4826      	ldr	r0, [pc, #152]	; (800630c <__d2b+0xb4>)
 8006274:	f240 310a 	movw	r1, #778	; 0x30a
 8006278:	f000 fb84 	bl	8006984 <__assert_func>
 800627c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006280:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006284:	bb35      	cbnz	r5, 80062d4 <__d2b+0x7c>
 8006286:	2e00      	cmp	r6, #0
 8006288:	9301      	str	r3, [sp, #4]
 800628a:	d028      	beq.n	80062de <__d2b+0x86>
 800628c:	4668      	mov	r0, sp
 800628e:	9600      	str	r6, [sp, #0]
 8006290:	f7ff fd8c 	bl	8005dac <__lo0bits>
 8006294:	9900      	ldr	r1, [sp, #0]
 8006296:	b300      	cbz	r0, 80062da <__d2b+0x82>
 8006298:	9a01      	ldr	r2, [sp, #4]
 800629a:	f1c0 0320 	rsb	r3, r0, #32
 800629e:	fa02 f303 	lsl.w	r3, r2, r3
 80062a2:	430b      	orrs	r3, r1
 80062a4:	40c2      	lsrs	r2, r0
 80062a6:	6163      	str	r3, [r4, #20]
 80062a8:	9201      	str	r2, [sp, #4]
 80062aa:	9b01      	ldr	r3, [sp, #4]
 80062ac:	61a3      	str	r3, [r4, #24]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	bf14      	ite	ne
 80062b2:	2202      	movne	r2, #2
 80062b4:	2201      	moveq	r2, #1
 80062b6:	6122      	str	r2, [r4, #16]
 80062b8:	b1d5      	cbz	r5, 80062f0 <__d2b+0x98>
 80062ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80062be:	4405      	add	r5, r0
 80062c0:	f8c9 5000 	str.w	r5, [r9]
 80062c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80062c8:	f8c8 0000 	str.w	r0, [r8]
 80062cc:	4620      	mov	r0, r4
 80062ce:	b003      	add	sp, #12
 80062d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062d8:	e7d5      	b.n	8006286 <__d2b+0x2e>
 80062da:	6161      	str	r1, [r4, #20]
 80062dc:	e7e5      	b.n	80062aa <__d2b+0x52>
 80062de:	a801      	add	r0, sp, #4
 80062e0:	f7ff fd64 	bl	8005dac <__lo0bits>
 80062e4:	9b01      	ldr	r3, [sp, #4]
 80062e6:	6163      	str	r3, [r4, #20]
 80062e8:	2201      	movs	r2, #1
 80062ea:	6122      	str	r2, [r4, #16]
 80062ec:	3020      	adds	r0, #32
 80062ee:	e7e3      	b.n	80062b8 <__d2b+0x60>
 80062f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80062f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80062f8:	f8c9 0000 	str.w	r0, [r9]
 80062fc:	6918      	ldr	r0, [r3, #16]
 80062fe:	f7ff fd35 	bl	8005d6c <__hi0bits>
 8006302:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006306:	e7df      	b.n	80062c8 <__d2b+0x70>
 8006308:	08006ca3 	.word	0x08006ca3
 800630c:	08006d14 	.word	0x08006d14

08006310 <_calloc_r>:
 8006310:	b513      	push	{r0, r1, r4, lr}
 8006312:	434a      	muls	r2, r1
 8006314:	4611      	mov	r1, r2
 8006316:	9201      	str	r2, [sp, #4]
 8006318:	f000 f85a 	bl	80063d0 <_malloc_r>
 800631c:	4604      	mov	r4, r0
 800631e:	b118      	cbz	r0, 8006328 <_calloc_r+0x18>
 8006320:	9a01      	ldr	r2, [sp, #4]
 8006322:	2100      	movs	r1, #0
 8006324:	f7fd fe6a 	bl	8003ffc <memset>
 8006328:	4620      	mov	r0, r4
 800632a:	b002      	add	sp, #8
 800632c:	bd10      	pop	{r4, pc}
	...

08006330 <_free_r>:
 8006330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006332:	2900      	cmp	r1, #0
 8006334:	d048      	beq.n	80063c8 <_free_r+0x98>
 8006336:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800633a:	9001      	str	r0, [sp, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	f1a1 0404 	sub.w	r4, r1, #4
 8006342:	bfb8      	it	lt
 8006344:	18e4      	addlt	r4, r4, r3
 8006346:	f000 fba3 	bl	8006a90 <__malloc_lock>
 800634a:	4a20      	ldr	r2, [pc, #128]	; (80063cc <_free_r+0x9c>)
 800634c:	9801      	ldr	r0, [sp, #4]
 800634e:	6813      	ldr	r3, [r2, #0]
 8006350:	4615      	mov	r5, r2
 8006352:	b933      	cbnz	r3, 8006362 <_free_r+0x32>
 8006354:	6063      	str	r3, [r4, #4]
 8006356:	6014      	str	r4, [r2, #0]
 8006358:	b003      	add	sp, #12
 800635a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800635e:	f000 bb9d 	b.w	8006a9c <__malloc_unlock>
 8006362:	42a3      	cmp	r3, r4
 8006364:	d90b      	bls.n	800637e <_free_r+0x4e>
 8006366:	6821      	ldr	r1, [r4, #0]
 8006368:	1862      	adds	r2, r4, r1
 800636a:	4293      	cmp	r3, r2
 800636c:	bf04      	itt	eq
 800636e:	681a      	ldreq	r2, [r3, #0]
 8006370:	685b      	ldreq	r3, [r3, #4]
 8006372:	6063      	str	r3, [r4, #4]
 8006374:	bf04      	itt	eq
 8006376:	1852      	addeq	r2, r2, r1
 8006378:	6022      	streq	r2, [r4, #0]
 800637a:	602c      	str	r4, [r5, #0]
 800637c:	e7ec      	b.n	8006358 <_free_r+0x28>
 800637e:	461a      	mov	r2, r3
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	b10b      	cbz	r3, 8006388 <_free_r+0x58>
 8006384:	42a3      	cmp	r3, r4
 8006386:	d9fa      	bls.n	800637e <_free_r+0x4e>
 8006388:	6811      	ldr	r1, [r2, #0]
 800638a:	1855      	adds	r5, r2, r1
 800638c:	42a5      	cmp	r5, r4
 800638e:	d10b      	bne.n	80063a8 <_free_r+0x78>
 8006390:	6824      	ldr	r4, [r4, #0]
 8006392:	4421      	add	r1, r4
 8006394:	1854      	adds	r4, r2, r1
 8006396:	42a3      	cmp	r3, r4
 8006398:	6011      	str	r1, [r2, #0]
 800639a:	d1dd      	bne.n	8006358 <_free_r+0x28>
 800639c:	681c      	ldr	r4, [r3, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	6053      	str	r3, [r2, #4]
 80063a2:	4421      	add	r1, r4
 80063a4:	6011      	str	r1, [r2, #0]
 80063a6:	e7d7      	b.n	8006358 <_free_r+0x28>
 80063a8:	d902      	bls.n	80063b0 <_free_r+0x80>
 80063aa:	230c      	movs	r3, #12
 80063ac:	6003      	str	r3, [r0, #0]
 80063ae:	e7d3      	b.n	8006358 <_free_r+0x28>
 80063b0:	6825      	ldr	r5, [r4, #0]
 80063b2:	1961      	adds	r1, r4, r5
 80063b4:	428b      	cmp	r3, r1
 80063b6:	bf04      	itt	eq
 80063b8:	6819      	ldreq	r1, [r3, #0]
 80063ba:	685b      	ldreq	r3, [r3, #4]
 80063bc:	6063      	str	r3, [r4, #4]
 80063be:	bf04      	itt	eq
 80063c0:	1949      	addeq	r1, r1, r5
 80063c2:	6021      	streq	r1, [r4, #0]
 80063c4:	6054      	str	r4, [r2, #4]
 80063c6:	e7c7      	b.n	8006358 <_free_r+0x28>
 80063c8:	b003      	add	sp, #12
 80063ca:	bd30      	pop	{r4, r5, pc}
 80063cc:	200001f8 	.word	0x200001f8

080063d0 <_malloc_r>:
 80063d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d2:	1ccd      	adds	r5, r1, #3
 80063d4:	f025 0503 	bic.w	r5, r5, #3
 80063d8:	3508      	adds	r5, #8
 80063da:	2d0c      	cmp	r5, #12
 80063dc:	bf38      	it	cc
 80063de:	250c      	movcc	r5, #12
 80063e0:	2d00      	cmp	r5, #0
 80063e2:	4606      	mov	r6, r0
 80063e4:	db01      	blt.n	80063ea <_malloc_r+0x1a>
 80063e6:	42a9      	cmp	r1, r5
 80063e8:	d903      	bls.n	80063f2 <_malloc_r+0x22>
 80063ea:	230c      	movs	r3, #12
 80063ec:	6033      	str	r3, [r6, #0]
 80063ee:	2000      	movs	r0, #0
 80063f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063f2:	f000 fb4d 	bl	8006a90 <__malloc_lock>
 80063f6:	4921      	ldr	r1, [pc, #132]	; (800647c <_malloc_r+0xac>)
 80063f8:	680a      	ldr	r2, [r1, #0]
 80063fa:	4614      	mov	r4, r2
 80063fc:	b99c      	cbnz	r4, 8006426 <_malloc_r+0x56>
 80063fe:	4f20      	ldr	r7, [pc, #128]	; (8006480 <_malloc_r+0xb0>)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	b923      	cbnz	r3, 800640e <_malloc_r+0x3e>
 8006404:	4621      	mov	r1, r4
 8006406:	4630      	mov	r0, r6
 8006408:	f000 f996 	bl	8006738 <_sbrk_r>
 800640c:	6038      	str	r0, [r7, #0]
 800640e:	4629      	mov	r1, r5
 8006410:	4630      	mov	r0, r6
 8006412:	f000 f991 	bl	8006738 <_sbrk_r>
 8006416:	1c43      	adds	r3, r0, #1
 8006418:	d123      	bne.n	8006462 <_malloc_r+0x92>
 800641a:	230c      	movs	r3, #12
 800641c:	6033      	str	r3, [r6, #0]
 800641e:	4630      	mov	r0, r6
 8006420:	f000 fb3c 	bl	8006a9c <__malloc_unlock>
 8006424:	e7e3      	b.n	80063ee <_malloc_r+0x1e>
 8006426:	6823      	ldr	r3, [r4, #0]
 8006428:	1b5b      	subs	r3, r3, r5
 800642a:	d417      	bmi.n	800645c <_malloc_r+0x8c>
 800642c:	2b0b      	cmp	r3, #11
 800642e:	d903      	bls.n	8006438 <_malloc_r+0x68>
 8006430:	6023      	str	r3, [r4, #0]
 8006432:	441c      	add	r4, r3
 8006434:	6025      	str	r5, [r4, #0]
 8006436:	e004      	b.n	8006442 <_malloc_r+0x72>
 8006438:	6863      	ldr	r3, [r4, #4]
 800643a:	42a2      	cmp	r2, r4
 800643c:	bf0c      	ite	eq
 800643e:	600b      	streq	r3, [r1, #0]
 8006440:	6053      	strne	r3, [r2, #4]
 8006442:	4630      	mov	r0, r6
 8006444:	f000 fb2a 	bl	8006a9c <__malloc_unlock>
 8006448:	f104 000b 	add.w	r0, r4, #11
 800644c:	1d23      	adds	r3, r4, #4
 800644e:	f020 0007 	bic.w	r0, r0, #7
 8006452:	1ac2      	subs	r2, r0, r3
 8006454:	d0cc      	beq.n	80063f0 <_malloc_r+0x20>
 8006456:	1a1b      	subs	r3, r3, r0
 8006458:	50a3      	str	r3, [r4, r2]
 800645a:	e7c9      	b.n	80063f0 <_malloc_r+0x20>
 800645c:	4622      	mov	r2, r4
 800645e:	6864      	ldr	r4, [r4, #4]
 8006460:	e7cc      	b.n	80063fc <_malloc_r+0x2c>
 8006462:	1cc4      	adds	r4, r0, #3
 8006464:	f024 0403 	bic.w	r4, r4, #3
 8006468:	42a0      	cmp	r0, r4
 800646a:	d0e3      	beq.n	8006434 <_malloc_r+0x64>
 800646c:	1a21      	subs	r1, r4, r0
 800646e:	4630      	mov	r0, r6
 8006470:	f000 f962 	bl	8006738 <_sbrk_r>
 8006474:	3001      	adds	r0, #1
 8006476:	d1dd      	bne.n	8006434 <_malloc_r+0x64>
 8006478:	e7cf      	b.n	800641a <_malloc_r+0x4a>
 800647a:	bf00      	nop
 800647c:	200001f8 	.word	0x200001f8
 8006480:	200001fc 	.word	0x200001fc

08006484 <__sfputc_r>:
 8006484:	6893      	ldr	r3, [r2, #8]
 8006486:	3b01      	subs	r3, #1
 8006488:	2b00      	cmp	r3, #0
 800648a:	b410      	push	{r4}
 800648c:	6093      	str	r3, [r2, #8]
 800648e:	da08      	bge.n	80064a2 <__sfputc_r+0x1e>
 8006490:	6994      	ldr	r4, [r2, #24]
 8006492:	42a3      	cmp	r3, r4
 8006494:	db01      	blt.n	800649a <__sfputc_r+0x16>
 8006496:	290a      	cmp	r1, #10
 8006498:	d103      	bne.n	80064a2 <__sfputc_r+0x1e>
 800649a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800649e:	f000 b99f 	b.w	80067e0 <__swbuf_r>
 80064a2:	6813      	ldr	r3, [r2, #0]
 80064a4:	1c58      	adds	r0, r3, #1
 80064a6:	6010      	str	r0, [r2, #0]
 80064a8:	7019      	strb	r1, [r3, #0]
 80064aa:	4608      	mov	r0, r1
 80064ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <__sfputs_r>:
 80064b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b4:	4606      	mov	r6, r0
 80064b6:	460f      	mov	r7, r1
 80064b8:	4614      	mov	r4, r2
 80064ba:	18d5      	adds	r5, r2, r3
 80064bc:	42ac      	cmp	r4, r5
 80064be:	d101      	bne.n	80064c4 <__sfputs_r+0x12>
 80064c0:	2000      	movs	r0, #0
 80064c2:	e007      	b.n	80064d4 <__sfputs_r+0x22>
 80064c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064c8:	463a      	mov	r2, r7
 80064ca:	4630      	mov	r0, r6
 80064cc:	f7ff ffda 	bl	8006484 <__sfputc_r>
 80064d0:	1c43      	adds	r3, r0, #1
 80064d2:	d1f3      	bne.n	80064bc <__sfputs_r+0xa>
 80064d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064d8 <_vfiprintf_r>:
 80064d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064dc:	460d      	mov	r5, r1
 80064de:	b09d      	sub	sp, #116	; 0x74
 80064e0:	4614      	mov	r4, r2
 80064e2:	4698      	mov	r8, r3
 80064e4:	4606      	mov	r6, r0
 80064e6:	b118      	cbz	r0, 80064f0 <_vfiprintf_r+0x18>
 80064e8:	6983      	ldr	r3, [r0, #24]
 80064ea:	b90b      	cbnz	r3, 80064f0 <_vfiprintf_r+0x18>
 80064ec:	f7ff fa72 	bl	80059d4 <__sinit>
 80064f0:	4b89      	ldr	r3, [pc, #548]	; (8006718 <_vfiprintf_r+0x240>)
 80064f2:	429d      	cmp	r5, r3
 80064f4:	d11b      	bne.n	800652e <_vfiprintf_r+0x56>
 80064f6:	6875      	ldr	r5, [r6, #4]
 80064f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064fa:	07d9      	lsls	r1, r3, #31
 80064fc:	d405      	bmi.n	800650a <_vfiprintf_r+0x32>
 80064fe:	89ab      	ldrh	r3, [r5, #12]
 8006500:	059a      	lsls	r2, r3, #22
 8006502:	d402      	bmi.n	800650a <_vfiprintf_r+0x32>
 8006504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006506:	f7ff fb08 	bl	8005b1a <__retarget_lock_acquire_recursive>
 800650a:	89ab      	ldrh	r3, [r5, #12]
 800650c:	071b      	lsls	r3, r3, #28
 800650e:	d501      	bpl.n	8006514 <_vfiprintf_r+0x3c>
 8006510:	692b      	ldr	r3, [r5, #16]
 8006512:	b9eb      	cbnz	r3, 8006550 <_vfiprintf_r+0x78>
 8006514:	4629      	mov	r1, r5
 8006516:	4630      	mov	r0, r6
 8006518:	f000 f9c6 	bl	80068a8 <__swsetup_r>
 800651c:	b1c0      	cbz	r0, 8006550 <_vfiprintf_r+0x78>
 800651e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006520:	07dc      	lsls	r4, r3, #31
 8006522:	d50e      	bpl.n	8006542 <_vfiprintf_r+0x6a>
 8006524:	f04f 30ff 	mov.w	r0, #4294967295
 8006528:	b01d      	add	sp, #116	; 0x74
 800652a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652e:	4b7b      	ldr	r3, [pc, #492]	; (800671c <_vfiprintf_r+0x244>)
 8006530:	429d      	cmp	r5, r3
 8006532:	d101      	bne.n	8006538 <_vfiprintf_r+0x60>
 8006534:	68b5      	ldr	r5, [r6, #8]
 8006536:	e7df      	b.n	80064f8 <_vfiprintf_r+0x20>
 8006538:	4b79      	ldr	r3, [pc, #484]	; (8006720 <_vfiprintf_r+0x248>)
 800653a:	429d      	cmp	r5, r3
 800653c:	bf08      	it	eq
 800653e:	68f5      	ldreq	r5, [r6, #12]
 8006540:	e7da      	b.n	80064f8 <_vfiprintf_r+0x20>
 8006542:	89ab      	ldrh	r3, [r5, #12]
 8006544:	0598      	lsls	r0, r3, #22
 8006546:	d4ed      	bmi.n	8006524 <_vfiprintf_r+0x4c>
 8006548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800654a:	f7ff fae7 	bl	8005b1c <__retarget_lock_release_recursive>
 800654e:	e7e9      	b.n	8006524 <_vfiprintf_r+0x4c>
 8006550:	2300      	movs	r3, #0
 8006552:	9309      	str	r3, [sp, #36]	; 0x24
 8006554:	2320      	movs	r3, #32
 8006556:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800655a:	f8cd 800c 	str.w	r8, [sp, #12]
 800655e:	2330      	movs	r3, #48	; 0x30
 8006560:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006724 <_vfiprintf_r+0x24c>
 8006564:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006568:	f04f 0901 	mov.w	r9, #1
 800656c:	4623      	mov	r3, r4
 800656e:	469a      	mov	sl, r3
 8006570:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006574:	b10a      	cbz	r2, 800657a <_vfiprintf_r+0xa2>
 8006576:	2a25      	cmp	r2, #37	; 0x25
 8006578:	d1f9      	bne.n	800656e <_vfiprintf_r+0x96>
 800657a:	ebba 0b04 	subs.w	fp, sl, r4
 800657e:	d00b      	beq.n	8006598 <_vfiprintf_r+0xc0>
 8006580:	465b      	mov	r3, fp
 8006582:	4622      	mov	r2, r4
 8006584:	4629      	mov	r1, r5
 8006586:	4630      	mov	r0, r6
 8006588:	f7ff ff93 	bl	80064b2 <__sfputs_r>
 800658c:	3001      	adds	r0, #1
 800658e:	f000 80aa 	beq.w	80066e6 <_vfiprintf_r+0x20e>
 8006592:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006594:	445a      	add	r2, fp
 8006596:	9209      	str	r2, [sp, #36]	; 0x24
 8006598:	f89a 3000 	ldrb.w	r3, [sl]
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 80a2 	beq.w	80066e6 <_vfiprintf_r+0x20e>
 80065a2:	2300      	movs	r3, #0
 80065a4:	f04f 32ff 	mov.w	r2, #4294967295
 80065a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065ac:	f10a 0a01 	add.w	sl, sl, #1
 80065b0:	9304      	str	r3, [sp, #16]
 80065b2:	9307      	str	r3, [sp, #28]
 80065b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065b8:	931a      	str	r3, [sp, #104]	; 0x68
 80065ba:	4654      	mov	r4, sl
 80065bc:	2205      	movs	r2, #5
 80065be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065c2:	4858      	ldr	r0, [pc, #352]	; (8006724 <_vfiprintf_r+0x24c>)
 80065c4:	f7f9 fe0c 	bl	80001e0 <memchr>
 80065c8:	9a04      	ldr	r2, [sp, #16]
 80065ca:	b9d8      	cbnz	r0, 8006604 <_vfiprintf_r+0x12c>
 80065cc:	06d1      	lsls	r1, r2, #27
 80065ce:	bf44      	itt	mi
 80065d0:	2320      	movmi	r3, #32
 80065d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065d6:	0713      	lsls	r3, r2, #28
 80065d8:	bf44      	itt	mi
 80065da:	232b      	movmi	r3, #43	; 0x2b
 80065dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065e0:	f89a 3000 	ldrb.w	r3, [sl]
 80065e4:	2b2a      	cmp	r3, #42	; 0x2a
 80065e6:	d015      	beq.n	8006614 <_vfiprintf_r+0x13c>
 80065e8:	9a07      	ldr	r2, [sp, #28]
 80065ea:	4654      	mov	r4, sl
 80065ec:	2000      	movs	r0, #0
 80065ee:	f04f 0c0a 	mov.w	ip, #10
 80065f2:	4621      	mov	r1, r4
 80065f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065f8:	3b30      	subs	r3, #48	; 0x30
 80065fa:	2b09      	cmp	r3, #9
 80065fc:	d94e      	bls.n	800669c <_vfiprintf_r+0x1c4>
 80065fe:	b1b0      	cbz	r0, 800662e <_vfiprintf_r+0x156>
 8006600:	9207      	str	r2, [sp, #28]
 8006602:	e014      	b.n	800662e <_vfiprintf_r+0x156>
 8006604:	eba0 0308 	sub.w	r3, r0, r8
 8006608:	fa09 f303 	lsl.w	r3, r9, r3
 800660c:	4313      	orrs	r3, r2
 800660e:	9304      	str	r3, [sp, #16]
 8006610:	46a2      	mov	sl, r4
 8006612:	e7d2      	b.n	80065ba <_vfiprintf_r+0xe2>
 8006614:	9b03      	ldr	r3, [sp, #12]
 8006616:	1d19      	adds	r1, r3, #4
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	9103      	str	r1, [sp, #12]
 800661c:	2b00      	cmp	r3, #0
 800661e:	bfbb      	ittet	lt
 8006620:	425b      	neglt	r3, r3
 8006622:	f042 0202 	orrlt.w	r2, r2, #2
 8006626:	9307      	strge	r3, [sp, #28]
 8006628:	9307      	strlt	r3, [sp, #28]
 800662a:	bfb8      	it	lt
 800662c:	9204      	strlt	r2, [sp, #16]
 800662e:	7823      	ldrb	r3, [r4, #0]
 8006630:	2b2e      	cmp	r3, #46	; 0x2e
 8006632:	d10c      	bne.n	800664e <_vfiprintf_r+0x176>
 8006634:	7863      	ldrb	r3, [r4, #1]
 8006636:	2b2a      	cmp	r3, #42	; 0x2a
 8006638:	d135      	bne.n	80066a6 <_vfiprintf_r+0x1ce>
 800663a:	9b03      	ldr	r3, [sp, #12]
 800663c:	1d1a      	adds	r2, r3, #4
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	9203      	str	r2, [sp, #12]
 8006642:	2b00      	cmp	r3, #0
 8006644:	bfb8      	it	lt
 8006646:	f04f 33ff 	movlt.w	r3, #4294967295
 800664a:	3402      	adds	r4, #2
 800664c:	9305      	str	r3, [sp, #20]
 800664e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006734 <_vfiprintf_r+0x25c>
 8006652:	7821      	ldrb	r1, [r4, #0]
 8006654:	2203      	movs	r2, #3
 8006656:	4650      	mov	r0, sl
 8006658:	f7f9 fdc2 	bl	80001e0 <memchr>
 800665c:	b140      	cbz	r0, 8006670 <_vfiprintf_r+0x198>
 800665e:	2340      	movs	r3, #64	; 0x40
 8006660:	eba0 000a 	sub.w	r0, r0, sl
 8006664:	fa03 f000 	lsl.w	r0, r3, r0
 8006668:	9b04      	ldr	r3, [sp, #16]
 800666a:	4303      	orrs	r3, r0
 800666c:	3401      	adds	r4, #1
 800666e:	9304      	str	r3, [sp, #16]
 8006670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006674:	482c      	ldr	r0, [pc, #176]	; (8006728 <_vfiprintf_r+0x250>)
 8006676:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800667a:	2206      	movs	r2, #6
 800667c:	f7f9 fdb0 	bl	80001e0 <memchr>
 8006680:	2800      	cmp	r0, #0
 8006682:	d03f      	beq.n	8006704 <_vfiprintf_r+0x22c>
 8006684:	4b29      	ldr	r3, [pc, #164]	; (800672c <_vfiprintf_r+0x254>)
 8006686:	bb1b      	cbnz	r3, 80066d0 <_vfiprintf_r+0x1f8>
 8006688:	9b03      	ldr	r3, [sp, #12]
 800668a:	3307      	adds	r3, #7
 800668c:	f023 0307 	bic.w	r3, r3, #7
 8006690:	3308      	adds	r3, #8
 8006692:	9303      	str	r3, [sp, #12]
 8006694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006696:	443b      	add	r3, r7
 8006698:	9309      	str	r3, [sp, #36]	; 0x24
 800669a:	e767      	b.n	800656c <_vfiprintf_r+0x94>
 800669c:	fb0c 3202 	mla	r2, ip, r2, r3
 80066a0:	460c      	mov	r4, r1
 80066a2:	2001      	movs	r0, #1
 80066a4:	e7a5      	b.n	80065f2 <_vfiprintf_r+0x11a>
 80066a6:	2300      	movs	r3, #0
 80066a8:	3401      	adds	r4, #1
 80066aa:	9305      	str	r3, [sp, #20]
 80066ac:	4619      	mov	r1, r3
 80066ae:	f04f 0c0a 	mov.w	ip, #10
 80066b2:	4620      	mov	r0, r4
 80066b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066b8:	3a30      	subs	r2, #48	; 0x30
 80066ba:	2a09      	cmp	r2, #9
 80066bc:	d903      	bls.n	80066c6 <_vfiprintf_r+0x1ee>
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d0c5      	beq.n	800664e <_vfiprintf_r+0x176>
 80066c2:	9105      	str	r1, [sp, #20]
 80066c4:	e7c3      	b.n	800664e <_vfiprintf_r+0x176>
 80066c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80066ca:	4604      	mov	r4, r0
 80066cc:	2301      	movs	r3, #1
 80066ce:	e7f0      	b.n	80066b2 <_vfiprintf_r+0x1da>
 80066d0:	ab03      	add	r3, sp, #12
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	462a      	mov	r2, r5
 80066d6:	4b16      	ldr	r3, [pc, #88]	; (8006730 <_vfiprintf_r+0x258>)
 80066d8:	a904      	add	r1, sp, #16
 80066da:	4630      	mov	r0, r6
 80066dc:	f7fd fd36 	bl	800414c <_printf_float>
 80066e0:	4607      	mov	r7, r0
 80066e2:	1c78      	adds	r0, r7, #1
 80066e4:	d1d6      	bne.n	8006694 <_vfiprintf_r+0x1bc>
 80066e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066e8:	07d9      	lsls	r1, r3, #31
 80066ea:	d405      	bmi.n	80066f8 <_vfiprintf_r+0x220>
 80066ec:	89ab      	ldrh	r3, [r5, #12]
 80066ee:	059a      	lsls	r2, r3, #22
 80066f0:	d402      	bmi.n	80066f8 <_vfiprintf_r+0x220>
 80066f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066f4:	f7ff fa12 	bl	8005b1c <__retarget_lock_release_recursive>
 80066f8:	89ab      	ldrh	r3, [r5, #12]
 80066fa:	065b      	lsls	r3, r3, #25
 80066fc:	f53f af12 	bmi.w	8006524 <_vfiprintf_r+0x4c>
 8006700:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006702:	e711      	b.n	8006528 <_vfiprintf_r+0x50>
 8006704:	ab03      	add	r3, sp, #12
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	462a      	mov	r2, r5
 800670a:	4b09      	ldr	r3, [pc, #36]	; (8006730 <_vfiprintf_r+0x258>)
 800670c:	a904      	add	r1, sp, #16
 800670e:	4630      	mov	r0, r6
 8006710:	f7fd ffc0 	bl	8004694 <_printf_i>
 8006714:	e7e4      	b.n	80066e0 <_vfiprintf_r+0x208>
 8006716:	bf00      	nop
 8006718:	08006cd4 	.word	0x08006cd4
 800671c:	08006cf4 	.word	0x08006cf4
 8006720:	08006cb4 	.word	0x08006cb4
 8006724:	08006e74 	.word	0x08006e74
 8006728:	08006e7e 	.word	0x08006e7e
 800672c:	0800414d 	.word	0x0800414d
 8006730:	080064b3 	.word	0x080064b3
 8006734:	08006e7a 	.word	0x08006e7a

08006738 <_sbrk_r>:
 8006738:	b538      	push	{r3, r4, r5, lr}
 800673a:	4d06      	ldr	r5, [pc, #24]	; (8006754 <_sbrk_r+0x1c>)
 800673c:	2300      	movs	r3, #0
 800673e:	4604      	mov	r4, r0
 8006740:	4608      	mov	r0, r1
 8006742:	602b      	str	r3, [r5, #0]
 8006744:	f7fb fb04 	bl	8001d50 <_sbrk>
 8006748:	1c43      	adds	r3, r0, #1
 800674a:	d102      	bne.n	8006752 <_sbrk_r+0x1a>
 800674c:	682b      	ldr	r3, [r5, #0]
 800674e:	b103      	cbz	r3, 8006752 <_sbrk_r+0x1a>
 8006750:	6023      	str	r3, [r4, #0]
 8006752:	bd38      	pop	{r3, r4, r5, pc}
 8006754:	2000020c 	.word	0x2000020c

08006758 <__sread>:
 8006758:	b510      	push	{r4, lr}
 800675a:	460c      	mov	r4, r1
 800675c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006760:	f000 f9a2 	bl	8006aa8 <_read_r>
 8006764:	2800      	cmp	r0, #0
 8006766:	bfab      	itete	ge
 8006768:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800676a:	89a3      	ldrhlt	r3, [r4, #12]
 800676c:	181b      	addge	r3, r3, r0
 800676e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006772:	bfac      	ite	ge
 8006774:	6563      	strge	r3, [r4, #84]	; 0x54
 8006776:	81a3      	strhlt	r3, [r4, #12]
 8006778:	bd10      	pop	{r4, pc}

0800677a <__swrite>:
 800677a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800677e:	461f      	mov	r7, r3
 8006780:	898b      	ldrh	r3, [r1, #12]
 8006782:	05db      	lsls	r3, r3, #23
 8006784:	4605      	mov	r5, r0
 8006786:	460c      	mov	r4, r1
 8006788:	4616      	mov	r6, r2
 800678a:	d505      	bpl.n	8006798 <__swrite+0x1e>
 800678c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006790:	2302      	movs	r3, #2
 8006792:	2200      	movs	r2, #0
 8006794:	f000 f958 	bl	8006a48 <_lseek_r>
 8006798:	89a3      	ldrh	r3, [r4, #12]
 800679a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800679e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067a2:	81a3      	strh	r3, [r4, #12]
 80067a4:	4632      	mov	r2, r6
 80067a6:	463b      	mov	r3, r7
 80067a8:	4628      	mov	r0, r5
 80067aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067ae:	f000 b869 	b.w	8006884 <_write_r>

080067b2 <__sseek>:
 80067b2:	b510      	push	{r4, lr}
 80067b4:	460c      	mov	r4, r1
 80067b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ba:	f000 f945 	bl	8006a48 <_lseek_r>
 80067be:	1c43      	adds	r3, r0, #1
 80067c0:	89a3      	ldrh	r3, [r4, #12]
 80067c2:	bf15      	itete	ne
 80067c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80067c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80067ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80067ce:	81a3      	strheq	r3, [r4, #12]
 80067d0:	bf18      	it	ne
 80067d2:	81a3      	strhne	r3, [r4, #12]
 80067d4:	bd10      	pop	{r4, pc}

080067d6 <__sclose>:
 80067d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067da:	f000 b8f1 	b.w	80069c0 <_close_r>
	...

080067e0 <__swbuf_r>:
 80067e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e2:	460e      	mov	r6, r1
 80067e4:	4614      	mov	r4, r2
 80067e6:	4605      	mov	r5, r0
 80067e8:	b118      	cbz	r0, 80067f2 <__swbuf_r+0x12>
 80067ea:	6983      	ldr	r3, [r0, #24]
 80067ec:	b90b      	cbnz	r3, 80067f2 <__swbuf_r+0x12>
 80067ee:	f7ff f8f1 	bl	80059d4 <__sinit>
 80067f2:	4b21      	ldr	r3, [pc, #132]	; (8006878 <__swbuf_r+0x98>)
 80067f4:	429c      	cmp	r4, r3
 80067f6:	d12b      	bne.n	8006850 <__swbuf_r+0x70>
 80067f8:	686c      	ldr	r4, [r5, #4]
 80067fa:	69a3      	ldr	r3, [r4, #24]
 80067fc:	60a3      	str	r3, [r4, #8]
 80067fe:	89a3      	ldrh	r3, [r4, #12]
 8006800:	071a      	lsls	r2, r3, #28
 8006802:	d52f      	bpl.n	8006864 <__swbuf_r+0x84>
 8006804:	6923      	ldr	r3, [r4, #16]
 8006806:	b36b      	cbz	r3, 8006864 <__swbuf_r+0x84>
 8006808:	6923      	ldr	r3, [r4, #16]
 800680a:	6820      	ldr	r0, [r4, #0]
 800680c:	1ac0      	subs	r0, r0, r3
 800680e:	6963      	ldr	r3, [r4, #20]
 8006810:	b2f6      	uxtb	r6, r6
 8006812:	4283      	cmp	r3, r0
 8006814:	4637      	mov	r7, r6
 8006816:	dc04      	bgt.n	8006822 <__swbuf_r+0x42>
 8006818:	4621      	mov	r1, r4
 800681a:	4628      	mov	r0, r5
 800681c:	f7ff f846 	bl	80058ac <_fflush_r>
 8006820:	bb30      	cbnz	r0, 8006870 <__swbuf_r+0x90>
 8006822:	68a3      	ldr	r3, [r4, #8]
 8006824:	3b01      	subs	r3, #1
 8006826:	60a3      	str	r3, [r4, #8]
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	6022      	str	r2, [r4, #0]
 800682e:	701e      	strb	r6, [r3, #0]
 8006830:	6963      	ldr	r3, [r4, #20]
 8006832:	3001      	adds	r0, #1
 8006834:	4283      	cmp	r3, r0
 8006836:	d004      	beq.n	8006842 <__swbuf_r+0x62>
 8006838:	89a3      	ldrh	r3, [r4, #12]
 800683a:	07db      	lsls	r3, r3, #31
 800683c:	d506      	bpl.n	800684c <__swbuf_r+0x6c>
 800683e:	2e0a      	cmp	r6, #10
 8006840:	d104      	bne.n	800684c <__swbuf_r+0x6c>
 8006842:	4621      	mov	r1, r4
 8006844:	4628      	mov	r0, r5
 8006846:	f7ff f831 	bl	80058ac <_fflush_r>
 800684a:	b988      	cbnz	r0, 8006870 <__swbuf_r+0x90>
 800684c:	4638      	mov	r0, r7
 800684e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006850:	4b0a      	ldr	r3, [pc, #40]	; (800687c <__swbuf_r+0x9c>)
 8006852:	429c      	cmp	r4, r3
 8006854:	d101      	bne.n	800685a <__swbuf_r+0x7a>
 8006856:	68ac      	ldr	r4, [r5, #8]
 8006858:	e7cf      	b.n	80067fa <__swbuf_r+0x1a>
 800685a:	4b09      	ldr	r3, [pc, #36]	; (8006880 <__swbuf_r+0xa0>)
 800685c:	429c      	cmp	r4, r3
 800685e:	bf08      	it	eq
 8006860:	68ec      	ldreq	r4, [r5, #12]
 8006862:	e7ca      	b.n	80067fa <__swbuf_r+0x1a>
 8006864:	4621      	mov	r1, r4
 8006866:	4628      	mov	r0, r5
 8006868:	f000 f81e 	bl	80068a8 <__swsetup_r>
 800686c:	2800      	cmp	r0, #0
 800686e:	d0cb      	beq.n	8006808 <__swbuf_r+0x28>
 8006870:	f04f 37ff 	mov.w	r7, #4294967295
 8006874:	e7ea      	b.n	800684c <__swbuf_r+0x6c>
 8006876:	bf00      	nop
 8006878:	08006cd4 	.word	0x08006cd4
 800687c:	08006cf4 	.word	0x08006cf4
 8006880:	08006cb4 	.word	0x08006cb4

08006884 <_write_r>:
 8006884:	b538      	push	{r3, r4, r5, lr}
 8006886:	4d07      	ldr	r5, [pc, #28]	; (80068a4 <_write_r+0x20>)
 8006888:	4604      	mov	r4, r0
 800688a:	4608      	mov	r0, r1
 800688c:	4611      	mov	r1, r2
 800688e:	2200      	movs	r2, #0
 8006890:	602a      	str	r2, [r5, #0]
 8006892:	461a      	mov	r2, r3
 8006894:	f7fb fa0b 	bl	8001cae <_write>
 8006898:	1c43      	adds	r3, r0, #1
 800689a:	d102      	bne.n	80068a2 <_write_r+0x1e>
 800689c:	682b      	ldr	r3, [r5, #0]
 800689e:	b103      	cbz	r3, 80068a2 <_write_r+0x1e>
 80068a0:	6023      	str	r3, [r4, #0]
 80068a2:	bd38      	pop	{r3, r4, r5, pc}
 80068a4:	2000020c 	.word	0x2000020c

080068a8 <__swsetup_r>:
 80068a8:	4b32      	ldr	r3, [pc, #200]	; (8006974 <__swsetup_r+0xcc>)
 80068aa:	b570      	push	{r4, r5, r6, lr}
 80068ac:	681d      	ldr	r5, [r3, #0]
 80068ae:	4606      	mov	r6, r0
 80068b0:	460c      	mov	r4, r1
 80068b2:	b125      	cbz	r5, 80068be <__swsetup_r+0x16>
 80068b4:	69ab      	ldr	r3, [r5, #24]
 80068b6:	b913      	cbnz	r3, 80068be <__swsetup_r+0x16>
 80068b8:	4628      	mov	r0, r5
 80068ba:	f7ff f88b 	bl	80059d4 <__sinit>
 80068be:	4b2e      	ldr	r3, [pc, #184]	; (8006978 <__swsetup_r+0xd0>)
 80068c0:	429c      	cmp	r4, r3
 80068c2:	d10f      	bne.n	80068e4 <__swsetup_r+0x3c>
 80068c4:	686c      	ldr	r4, [r5, #4]
 80068c6:	89a3      	ldrh	r3, [r4, #12]
 80068c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068cc:	0719      	lsls	r1, r3, #28
 80068ce:	d42c      	bmi.n	800692a <__swsetup_r+0x82>
 80068d0:	06dd      	lsls	r5, r3, #27
 80068d2:	d411      	bmi.n	80068f8 <__swsetup_r+0x50>
 80068d4:	2309      	movs	r3, #9
 80068d6:	6033      	str	r3, [r6, #0]
 80068d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068dc:	81a3      	strh	r3, [r4, #12]
 80068de:	f04f 30ff 	mov.w	r0, #4294967295
 80068e2:	e03e      	b.n	8006962 <__swsetup_r+0xba>
 80068e4:	4b25      	ldr	r3, [pc, #148]	; (800697c <__swsetup_r+0xd4>)
 80068e6:	429c      	cmp	r4, r3
 80068e8:	d101      	bne.n	80068ee <__swsetup_r+0x46>
 80068ea:	68ac      	ldr	r4, [r5, #8]
 80068ec:	e7eb      	b.n	80068c6 <__swsetup_r+0x1e>
 80068ee:	4b24      	ldr	r3, [pc, #144]	; (8006980 <__swsetup_r+0xd8>)
 80068f0:	429c      	cmp	r4, r3
 80068f2:	bf08      	it	eq
 80068f4:	68ec      	ldreq	r4, [r5, #12]
 80068f6:	e7e6      	b.n	80068c6 <__swsetup_r+0x1e>
 80068f8:	0758      	lsls	r0, r3, #29
 80068fa:	d512      	bpl.n	8006922 <__swsetup_r+0x7a>
 80068fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068fe:	b141      	cbz	r1, 8006912 <__swsetup_r+0x6a>
 8006900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006904:	4299      	cmp	r1, r3
 8006906:	d002      	beq.n	800690e <__swsetup_r+0x66>
 8006908:	4630      	mov	r0, r6
 800690a:	f7ff fd11 	bl	8006330 <_free_r>
 800690e:	2300      	movs	r3, #0
 8006910:	6363      	str	r3, [r4, #52]	; 0x34
 8006912:	89a3      	ldrh	r3, [r4, #12]
 8006914:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006918:	81a3      	strh	r3, [r4, #12]
 800691a:	2300      	movs	r3, #0
 800691c:	6063      	str	r3, [r4, #4]
 800691e:	6923      	ldr	r3, [r4, #16]
 8006920:	6023      	str	r3, [r4, #0]
 8006922:	89a3      	ldrh	r3, [r4, #12]
 8006924:	f043 0308 	orr.w	r3, r3, #8
 8006928:	81a3      	strh	r3, [r4, #12]
 800692a:	6923      	ldr	r3, [r4, #16]
 800692c:	b94b      	cbnz	r3, 8006942 <__swsetup_r+0x9a>
 800692e:	89a3      	ldrh	r3, [r4, #12]
 8006930:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006938:	d003      	beq.n	8006942 <__swsetup_r+0x9a>
 800693a:	4621      	mov	r1, r4
 800693c:	4630      	mov	r0, r6
 800693e:	f7ff f913 	bl	8005b68 <__smakebuf_r>
 8006942:	89a0      	ldrh	r0, [r4, #12]
 8006944:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006948:	f010 0301 	ands.w	r3, r0, #1
 800694c:	d00a      	beq.n	8006964 <__swsetup_r+0xbc>
 800694e:	2300      	movs	r3, #0
 8006950:	60a3      	str	r3, [r4, #8]
 8006952:	6963      	ldr	r3, [r4, #20]
 8006954:	425b      	negs	r3, r3
 8006956:	61a3      	str	r3, [r4, #24]
 8006958:	6923      	ldr	r3, [r4, #16]
 800695a:	b943      	cbnz	r3, 800696e <__swsetup_r+0xc6>
 800695c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006960:	d1ba      	bne.n	80068d8 <__swsetup_r+0x30>
 8006962:	bd70      	pop	{r4, r5, r6, pc}
 8006964:	0781      	lsls	r1, r0, #30
 8006966:	bf58      	it	pl
 8006968:	6963      	ldrpl	r3, [r4, #20]
 800696a:	60a3      	str	r3, [r4, #8]
 800696c:	e7f4      	b.n	8006958 <__swsetup_r+0xb0>
 800696e:	2000      	movs	r0, #0
 8006970:	e7f7      	b.n	8006962 <__swsetup_r+0xba>
 8006972:	bf00      	nop
 8006974:	20000004 	.word	0x20000004
 8006978:	08006cd4 	.word	0x08006cd4
 800697c:	08006cf4 	.word	0x08006cf4
 8006980:	08006cb4 	.word	0x08006cb4

08006984 <__assert_func>:
 8006984:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006986:	4614      	mov	r4, r2
 8006988:	461a      	mov	r2, r3
 800698a:	4b09      	ldr	r3, [pc, #36]	; (80069b0 <__assert_func+0x2c>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4605      	mov	r5, r0
 8006990:	68d8      	ldr	r0, [r3, #12]
 8006992:	b14c      	cbz	r4, 80069a8 <__assert_func+0x24>
 8006994:	4b07      	ldr	r3, [pc, #28]	; (80069b4 <__assert_func+0x30>)
 8006996:	9100      	str	r1, [sp, #0]
 8006998:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800699c:	4906      	ldr	r1, [pc, #24]	; (80069b8 <__assert_func+0x34>)
 800699e:	462b      	mov	r3, r5
 80069a0:	f000 f81e 	bl	80069e0 <fiprintf>
 80069a4:	f000 f89f 	bl	8006ae6 <abort>
 80069a8:	4b04      	ldr	r3, [pc, #16]	; (80069bc <__assert_func+0x38>)
 80069aa:	461c      	mov	r4, r3
 80069ac:	e7f3      	b.n	8006996 <__assert_func+0x12>
 80069ae:	bf00      	nop
 80069b0:	20000004 	.word	0x20000004
 80069b4:	08006e85 	.word	0x08006e85
 80069b8:	08006e92 	.word	0x08006e92
 80069bc:	08006ec0 	.word	0x08006ec0

080069c0 <_close_r>:
 80069c0:	b538      	push	{r3, r4, r5, lr}
 80069c2:	4d06      	ldr	r5, [pc, #24]	; (80069dc <_close_r+0x1c>)
 80069c4:	2300      	movs	r3, #0
 80069c6:	4604      	mov	r4, r0
 80069c8:	4608      	mov	r0, r1
 80069ca:	602b      	str	r3, [r5, #0]
 80069cc:	f7fb f98b 	bl	8001ce6 <_close>
 80069d0:	1c43      	adds	r3, r0, #1
 80069d2:	d102      	bne.n	80069da <_close_r+0x1a>
 80069d4:	682b      	ldr	r3, [r5, #0]
 80069d6:	b103      	cbz	r3, 80069da <_close_r+0x1a>
 80069d8:	6023      	str	r3, [r4, #0]
 80069da:	bd38      	pop	{r3, r4, r5, pc}
 80069dc:	2000020c 	.word	0x2000020c

080069e0 <fiprintf>:
 80069e0:	b40e      	push	{r1, r2, r3}
 80069e2:	b503      	push	{r0, r1, lr}
 80069e4:	4601      	mov	r1, r0
 80069e6:	ab03      	add	r3, sp, #12
 80069e8:	4805      	ldr	r0, [pc, #20]	; (8006a00 <fiprintf+0x20>)
 80069ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80069ee:	6800      	ldr	r0, [r0, #0]
 80069f0:	9301      	str	r3, [sp, #4]
 80069f2:	f7ff fd71 	bl	80064d8 <_vfiprintf_r>
 80069f6:	b002      	add	sp, #8
 80069f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80069fc:	b003      	add	sp, #12
 80069fe:	4770      	bx	lr
 8006a00:	20000004 	.word	0x20000004

08006a04 <_fstat_r>:
 8006a04:	b538      	push	{r3, r4, r5, lr}
 8006a06:	4d07      	ldr	r5, [pc, #28]	; (8006a24 <_fstat_r+0x20>)
 8006a08:	2300      	movs	r3, #0
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	4608      	mov	r0, r1
 8006a0e:	4611      	mov	r1, r2
 8006a10:	602b      	str	r3, [r5, #0]
 8006a12:	f7fb f974 	bl	8001cfe <_fstat>
 8006a16:	1c43      	adds	r3, r0, #1
 8006a18:	d102      	bne.n	8006a20 <_fstat_r+0x1c>
 8006a1a:	682b      	ldr	r3, [r5, #0]
 8006a1c:	b103      	cbz	r3, 8006a20 <_fstat_r+0x1c>
 8006a1e:	6023      	str	r3, [r4, #0]
 8006a20:	bd38      	pop	{r3, r4, r5, pc}
 8006a22:	bf00      	nop
 8006a24:	2000020c 	.word	0x2000020c

08006a28 <_isatty_r>:
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	4d06      	ldr	r5, [pc, #24]	; (8006a44 <_isatty_r+0x1c>)
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	4604      	mov	r4, r0
 8006a30:	4608      	mov	r0, r1
 8006a32:	602b      	str	r3, [r5, #0]
 8006a34:	f7fb f973 	bl	8001d1e <_isatty>
 8006a38:	1c43      	adds	r3, r0, #1
 8006a3a:	d102      	bne.n	8006a42 <_isatty_r+0x1a>
 8006a3c:	682b      	ldr	r3, [r5, #0]
 8006a3e:	b103      	cbz	r3, 8006a42 <_isatty_r+0x1a>
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	bd38      	pop	{r3, r4, r5, pc}
 8006a44:	2000020c 	.word	0x2000020c

08006a48 <_lseek_r>:
 8006a48:	b538      	push	{r3, r4, r5, lr}
 8006a4a:	4d07      	ldr	r5, [pc, #28]	; (8006a68 <_lseek_r+0x20>)
 8006a4c:	4604      	mov	r4, r0
 8006a4e:	4608      	mov	r0, r1
 8006a50:	4611      	mov	r1, r2
 8006a52:	2200      	movs	r2, #0
 8006a54:	602a      	str	r2, [r5, #0]
 8006a56:	461a      	mov	r2, r3
 8006a58:	f7fb f96c 	bl	8001d34 <_lseek>
 8006a5c:	1c43      	adds	r3, r0, #1
 8006a5e:	d102      	bne.n	8006a66 <_lseek_r+0x1e>
 8006a60:	682b      	ldr	r3, [r5, #0]
 8006a62:	b103      	cbz	r3, 8006a66 <_lseek_r+0x1e>
 8006a64:	6023      	str	r3, [r4, #0]
 8006a66:	bd38      	pop	{r3, r4, r5, pc}
 8006a68:	2000020c 	.word	0x2000020c

08006a6c <__ascii_mbtowc>:
 8006a6c:	b082      	sub	sp, #8
 8006a6e:	b901      	cbnz	r1, 8006a72 <__ascii_mbtowc+0x6>
 8006a70:	a901      	add	r1, sp, #4
 8006a72:	b142      	cbz	r2, 8006a86 <__ascii_mbtowc+0x1a>
 8006a74:	b14b      	cbz	r3, 8006a8a <__ascii_mbtowc+0x1e>
 8006a76:	7813      	ldrb	r3, [r2, #0]
 8006a78:	600b      	str	r3, [r1, #0]
 8006a7a:	7812      	ldrb	r2, [r2, #0]
 8006a7c:	1e10      	subs	r0, r2, #0
 8006a7e:	bf18      	it	ne
 8006a80:	2001      	movne	r0, #1
 8006a82:	b002      	add	sp, #8
 8006a84:	4770      	bx	lr
 8006a86:	4610      	mov	r0, r2
 8006a88:	e7fb      	b.n	8006a82 <__ascii_mbtowc+0x16>
 8006a8a:	f06f 0001 	mvn.w	r0, #1
 8006a8e:	e7f8      	b.n	8006a82 <__ascii_mbtowc+0x16>

08006a90 <__malloc_lock>:
 8006a90:	4801      	ldr	r0, [pc, #4]	; (8006a98 <__malloc_lock+0x8>)
 8006a92:	f7ff b842 	b.w	8005b1a <__retarget_lock_acquire_recursive>
 8006a96:	bf00      	nop
 8006a98:	20000206 	.word	0x20000206

08006a9c <__malloc_unlock>:
 8006a9c:	4801      	ldr	r0, [pc, #4]	; (8006aa4 <__malloc_unlock+0x8>)
 8006a9e:	f7ff b83d 	b.w	8005b1c <__retarget_lock_release_recursive>
 8006aa2:	bf00      	nop
 8006aa4:	20000206 	.word	0x20000206

08006aa8 <_read_r>:
 8006aa8:	b538      	push	{r3, r4, r5, lr}
 8006aaa:	4d07      	ldr	r5, [pc, #28]	; (8006ac8 <_read_r+0x20>)
 8006aac:	4604      	mov	r4, r0
 8006aae:	4608      	mov	r0, r1
 8006ab0:	4611      	mov	r1, r2
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	602a      	str	r2, [r5, #0]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	f7fb f8dc 	bl	8001c74 <_read>
 8006abc:	1c43      	adds	r3, r0, #1
 8006abe:	d102      	bne.n	8006ac6 <_read_r+0x1e>
 8006ac0:	682b      	ldr	r3, [r5, #0]
 8006ac2:	b103      	cbz	r3, 8006ac6 <_read_r+0x1e>
 8006ac4:	6023      	str	r3, [r4, #0]
 8006ac6:	bd38      	pop	{r3, r4, r5, pc}
 8006ac8:	2000020c 	.word	0x2000020c

08006acc <__ascii_wctomb>:
 8006acc:	b149      	cbz	r1, 8006ae2 <__ascii_wctomb+0x16>
 8006ace:	2aff      	cmp	r2, #255	; 0xff
 8006ad0:	bf85      	ittet	hi
 8006ad2:	238a      	movhi	r3, #138	; 0x8a
 8006ad4:	6003      	strhi	r3, [r0, #0]
 8006ad6:	700a      	strbls	r2, [r1, #0]
 8006ad8:	f04f 30ff 	movhi.w	r0, #4294967295
 8006adc:	bf98      	it	ls
 8006ade:	2001      	movls	r0, #1
 8006ae0:	4770      	bx	lr
 8006ae2:	4608      	mov	r0, r1
 8006ae4:	4770      	bx	lr

08006ae6 <abort>:
 8006ae6:	b508      	push	{r3, lr}
 8006ae8:	2006      	movs	r0, #6
 8006aea:	f000 f82b 	bl	8006b44 <raise>
 8006aee:	2001      	movs	r0, #1
 8006af0:	f7fb f8b6 	bl	8001c60 <_exit>

08006af4 <_raise_r>:
 8006af4:	291f      	cmp	r1, #31
 8006af6:	b538      	push	{r3, r4, r5, lr}
 8006af8:	4604      	mov	r4, r0
 8006afa:	460d      	mov	r5, r1
 8006afc:	d904      	bls.n	8006b08 <_raise_r+0x14>
 8006afe:	2316      	movs	r3, #22
 8006b00:	6003      	str	r3, [r0, #0]
 8006b02:	f04f 30ff 	mov.w	r0, #4294967295
 8006b06:	bd38      	pop	{r3, r4, r5, pc}
 8006b08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b0a:	b112      	cbz	r2, 8006b12 <_raise_r+0x1e>
 8006b0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b10:	b94b      	cbnz	r3, 8006b26 <_raise_r+0x32>
 8006b12:	4620      	mov	r0, r4
 8006b14:	f000 f830 	bl	8006b78 <_getpid_r>
 8006b18:	462a      	mov	r2, r5
 8006b1a:	4601      	mov	r1, r0
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b22:	f000 b817 	b.w	8006b54 <_kill_r>
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d00a      	beq.n	8006b40 <_raise_r+0x4c>
 8006b2a:	1c59      	adds	r1, r3, #1
 8006b2c:	d103      	bne.n	8006b36 <_raise_r+0x42>
 8006b2e:	2316      	movs	r3, #22
 8006b30:	6003      	str	r3, [r0, #0]
 8006b32:	2001      	movs	r0, #1
 8006b34:	e7e7      	b.n	8006b06 <_raise_r+0x12>
 8006b36:	2400      	movs	r4, #0
 8006b38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	4798      	blx	r3
 8006b40:	2000      	movs	r0, #0
 8006b42:	e7e0      	b.n	8006b06 <_raise_r+0x12>

08006b44 <raise>:
 8006b44:	4b02      	ldr	r3, [pc, #8]	; (8006b50 <raise+0xc>)
 8006b46:	4601      	mov	r1, r0
 8006b48:	6818      	ldr	r0, [r3, #0]
 8006b4a:	f7ff bfd3 	b.w	8006af4 <_raise_r>
 8006b4e:	bf00      	nop
 8006b50:	20000004 	.word	0x20000004

08006b54 <_kill_r>:
 8006b54:	b538      	push	{r3, r4, r5, lr}
 8006b56:	4d07      	ldr	r5, [pc, #28]	; (8006b74 <_kill_r+0x20>)
 8006b58:	2300      	movs	r3, #0
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	4608      	mov	r0, r1
 8006b5e:	4611      	mov	r1, r2
 8006b60:	602b      	str	r3, [r5, #0]
 8006b62:	f7fb f86d 	bl	8001c40 <_kill>
 8006b66:	1c43      	adds	r3, r0, #1
 8006b68:	d102      	bne.n	8006b70 <_kill_r+0x1c>
 8006b6a:	682b      	ldr	r3, [r5, #0]
 8006b6c:	b103      	cbz	r3, 8006b70 <_kill_r+0x1c>
 8006b6e:	6023      	str	r3, [r4, #0]
 8006b70:	bd38      	pop	{r3, r4, r5, pc}
 8006b72:	bf00      	nop
 8006b74:	2000020c 	.word	0x2000020c

08006b78 <_getpid_r>:
 8006b78:	f7fb b85a 	b.w	8001c30 <_getpid>

08006b7c <_init>:
 8006b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7e:	bf00      	nop
 8006b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b82:	bc08      	pop	{r3}
 8006b84:	469e      	mov	lr, r3
 8006b86:	4770      	bx	lr

08006b88 <_fini>:
 8006b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8a:	bf00      	nop
 8006b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b8e:	bc08      	pop	{r3}
 8006b90:	469e      	mov	lr, r3
 8006b92:	4770      	bx	lr
